Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[99 20 99 99] 20] [[-47 -47 -89 -47] -89] [[52 -90 -90 -90] -90] [[-13 -13 -13 49] -13] [[-47 -47 57 -47] -47] [[69 64 64 64] 64] [[34 6 6 6] 6] [[49 -67 49 49] -67] [[-61 -42 -61 -61] -61] [[48 30 48 48] 30] [(-29 -29 -29 -29) -29] [(87 87 87 87) 87] [(3 3 3 3) 3] [(-51 -51 -51 -51) -51] [(-54 -54 -54 -54) -54] [(68 53 44 62) 44] [(100 78 96 34) 34] [(38 76 23 54) 23] [(50 44 87 46) 44] [(23 56 83 90) 23] [(48 51 46 73) 46] [(16 50 74 96) 16] [(40 74 89 70) 40] [(23 52 16 59) 16] [(6 74 95 48) 6] [(17 78 9 3) 3] [(45 69 36 68) 36] [(91 64 58 81) 58] [(0 61 98 28) 0] [(49 27 61 20) 20] [(16 60 100 46) 16] [(0 66 91 4) 0] [(83 78 24 19) 19] [(57 1 25 27) 1] [(51 42 43 69) 42] [(-41 -36 100 74) -41] [(-81 58 19 -31) -81] [(-37 -17 32 17) -37] [(32 16 49 97) 16] [(95 34 -6 32) -6] [(-69 -50 52 55) -69] [(-19 69 -75 65) -75] [(-38 -46 77 -33) -46] [(76 3 90 -100) -100] [(100 34 -89 -76) -89] [(-91 9 -84 2) -91] [(31 30 29 -59) -59] [(-24 84 -15 2) -24] [(79 -46 -71 10) -71] [(-59 -81 13 -100) -100] [(-43 -28 31 -9) -43] [(27 -33 -16 -43) -43] [(-35 88 80 98) -35] [(-31 -78 9 73) -78] [(-30 34 88 86) -30] [(-62 96 18 -59) -62] [(85 -26 88 30) -26] [(-41 -37 -9 -63) -63] [(-12 63 -98 -33) -98] [(-42 -12 6 -15) -42] [(12 2 18 -36) -36] [(63 -64 11 11) -64] [(26 3 69 -73) -73] [(-74 90 -58 15) -74] [(-12 46 -44 -97) -97] [(-59 84 -31 81) -59] [(-66 25 -76 60) -76] [(-29 41 90 -18) -29] [(-34 8 -12 -12) -34] [(47 29 -45 52) -45] [(84 -94 59 79) -94] [(-94 -52 97 55) -94] [(-71 70 37 -61) -71] [(-3 -82 -38 -30) -82] [(-84 -7 17 -41) -84] [(97 81 45 -45) -45] [(49 -62 16 -90) -90] [(15 -28 43 82) -28] [(62 83 -32 58) -32] [(-39 -98 -72 61) -98] [(-18 1 -82 81) -82] [(-12 36 -56 45) -56] [(8 -58 -73 93) -73] [(19 -18 -29 -34) -34] [(-29 98 -84 53) -84] [(-76 -42 -18 90) -76] [(0 29 -48 22) -48] [(66 26 -60 -71) -71] [(-53 -84 -10 -29) -84] [(20 17 98 -31) -31] [(-65 -66 32 -73) -73] [(69 -7 -37 18) -37] [(-1 -9 -86 -53) -86] [(28 -55 87 15) -55] [(-56 -89 30 -92) -92])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[99 20 99 99] 20]
Train Case:   6 | Input/Output: [[-47 -47 -89 -47] -89]
Train Case:   7 | Input/Output: [[52 -90 -90 -90] -90]
Train Case:   8 | Input/Output: [[-13 -13 -13 49] -13]
Train Case:   9 | Input/Output: [[-47 -47 57 -47] -47]
Train Case:  10 | Input/Output: [[69 64 64 64] 64]
Train Case:  11 | Input/Output: [[34 6 6 6] 6]
Train Case:  12 | Input/Output: [[49 -67 49 49] -67]
Train Case:  13 | Input/Output: [[-61 -42 -61 -61] -61]
Train Case:  14 | Input/Output: [[48 30 48 48] 30]
Train Case:  15 | Input/Output: [(-29 -29 -29 -29) -29]
Train Case:  16 | Input/Output: [(87 87 87 87) 87]
Train Case:  17 | Input/Output: [(3 3 3 3) 3]
Train Case:  18 | Input/Output: [(-51 -51 -51 -51) -51]
Train Case:  19 | Input/Output: [(-54 -54 -54 -54) -54]
Train Case:  20 | Input/Output: [(68 53 44 62) 44]
Train Case:  21 | Input/Output: [(100 78 96 34) 34]
Train Case:  22 | Input/Output: [(38 76 23 54) 23]
Train Case:  23 | Input/Output: [(50 44 87 46) 44]
Train Case:  24 | Input/Output: [(23 56 83 90) 23]
Train Case:  25 | Input/Output: [(48 51 46 73) 46]
Train Case:  26 | Input/Output: [(16 50 74 96) 16]
Train Case:  27 | Input/Output: [(40 74 89 70) 40]
Train Case:  28 | Input/Output: [(23 52 16 59) 16]
Train Case:  29 | Input/Output: [(6 74 95 48) 6]
Train Case:  30 | Input/Output: [(17 78 9 3) 3]
Train Case:  31 | Input/Output: [(45 69 36 68) 36]
Train Case:  32 | Input/Output: [(91 64 58 81) 58]
Train Case:  33 | Input/Output: [(0 61 98 28) 0]
Train Case:  34 | Input/Output: [(49 27 61 20) 20]
Train Case:  35 | Input/Output: [(16 60 100 46) 16]
Train Case:  36 | Input/Output: [(0 66 91 4) 0]
Train Case:  37 | Input/Output: [(83 78 24 19) 19]
Train Case:  38 | Input/Output: [(57 1 25 27) 1]
Train Case:  39 | Input/Output: [(51 42 43 69) 42]
Train Case:  40 | Input/Output: [(-41 -36 100 74) -41]
Train Case:  41 | Input/Output: [(-81 58 19 -31) -81]
Train Case:  42 | Input/Output: [(-37 -17 32 17) -37]
Train Case:  43 | Input/Output: [(32 16 49 97) 16]
Train Case:  44 | Input/Output: [(95 34 -6 32) -6]
Train Case:  45 | Input/Output: [(-69 -50 52 55) -69]
Train Case:  46 | Input/Output: [(-19 69 -75 65) -75]
Train Case:  47 | Input/Output: [(-38 -46 77 -33) -46]
Train Case:  48 | Input/Output: [(76 3 90 -100) -100]
Train Case:  49 | Input/Output: [(100 34 -89 -76) -89]
Train Case:  50 | Input/Output: [(-91 9 -84 2) -91]
Train Case:  51 | Input/Output: [(31 30 29 -59) -59]
Train Case:  52 | Input/Output: [(-24 84 -15 2) -24]
Train Case:  53 | Input/Output: [(79 -46 -71 10) -71]
Train Case:  54 | Input/Output: [(-59 -81 13 -100) -100]
Train Case:  55 | Input/Output: [(-43 -28 31 -9) -43]
Train Case:  56 | Input/Output: [(27 -33 -16 -43) -43]
Train Case:  57 | Input/Output: [(-35 88 80 98) -35]
Train Case:  58 | Input/Output: [(-31 -78 9 73) -78]
Train Case:  59 | Input/Output: [(-30 34 88 86) -30]
Train Case:  60 | Input/Output: [(-62 96 18 -59) -62]
Train Case:  61 | Input/Output: [(85 -26 88 30) -26]
Train Case:  62 | Input/Output: [(-41 -37 -9 -63) -63]
Train Case:  63 | Input/Output: [(-12 63 -98 -33) -98]
Train Case:  64 | Input/Output: [(-42 -12 6 -15) -42]
Train Case:  65 | Input/Output: [(12 2 18 -36) -36]
Train Case:  66 | Input/Output: [(63 -64 11 11) -64]
Train Case:  67 | Input/Output: [(26 3 69 -73) -73]
Train Case:  68 | Input/Output: [(-74 90 -58 15) -74]
Train Case:  69 | Input/Output: [(-12 46 -44 -97) -97]
Train Case:  70 | Input/Output: [(-59 84 -31 81) -59]
Train Case:  71 | Input/Output: [(-66 25 -76 60) -76]
Train Case:  72 | Input/Output: [(-29 41 90 -18) -29]
Train Case:  73 | Input/Output: [(-34 8 -12 -12) -34]
Train Case:  74 | Input/Output: [(47 29 -45 52) -45]
Train Case:  75 | Input/Output: [(84 -94 59 79) -94]
Train Case:  76 | Input/Output: [(-94 -52 97 55) -94]
Train Case:  77 | Input/Output: [(-71 70 37 -61) -71]
Train Case:  78 | Input/Output: [(-3 -82 -38 -30) -82]
Train Case:  79 | Input/Output: [(-84 -7 17 -41) -84]
Train Case:  80 | Input/Output: [(97 81 45 -45) -45]
Train Case:  81 | Input/Output: [(49 -62 16 -90) -90]
Train Case:  82 | Input/Output: [(15 -28 43 82) -28]
Train Case:  83 | Input/Output: [(62 83 -32 58) -32]
Train Case:  84 | Input/Output: [(-39 -98 -72 61) -98]
Train Case:  85 | Input/Output: [(-18 1 -82 81) -82]
Train Case:  86 | Input/Output: [(-12 36 -56 45) -56]
Train Case:  87 | Input/Output: [(8 -58 -73 93) -73]
Train Case:  88 | Input/Output: [(19 -18 -29 -34) -34]
Train Case:  89 | Input/Output: [(-29 98 -84 53) -84]
Train Case:  90 | Input/Output: [(-76 -42 -18 90) -76]
Train Case:  91 | Input/Output: [(0 29 -48 22) -48]
Train Case:  92 | Input/Output: [(66 26 -60 -71) -71]
Train Case:  93 | Input/Output: [(-53 -84 -10 -29) -84]
Train Case:  94 | Input/Output: [(20 17 98 -31) -31]
Train Case:  95 | Input/Output: [(-65 -66 32 -73) -73]
Train Case:  96 | Input/Output: [(69 -7 -37 18) -37]
Train Case:  97 | Input/Output: [(-1 -9 -86 -53) -86]
Train Case:  98 | Input/Output: [(28 -55 87 15) -55]
Train Case:  99 | Input/Output: [(-56 -89 30 -92) -92]
Test Case:   0 | Input/Output: [[-83 -83 -83 -54] -83]
Test Case:   1 | Input/Output: [[-88 16 16 16] -88]
Test Case:   2 | Input/Output: [[-16 -16 45 -16] -16]
Test Case:   3 | Input/Output: [[-66 8 -66 -66] -66]
Test Case:   4 | Input/Output: [[-65 -65 96 -65] -65]
Test Case:   5 | Input/Output: [[-51 5 -51 -51] -51]
Test Case:   6 | Input/Output: [[-61 99 -61 -61] -61]
Test Case:   7 | Input/Output: [[-74 -74 -74 85] -74]
Test Case:   8 | Input/Output: [[55 69 69 69] 55]
Test Case:   9 | Input/Output: [[45 45 45 91] 45]
Test Case:  10 | Input/Output: [[-75 28 -75 -75] -75]
Test Case:  11 | Input/Output: [[-44 -53 -44 -44] -53]
Test Case:  12 | Input/Output: [[-45 -45 -45 79] -45]
Test Case:  13 | Input/Output: [[54 -94 54 54] -94]
Test Case:  14 | Input/Output: [[-46 -46 -34 -46] -46]
Test Case:  15 | Input/Output: [[70 70 70 14] 14]
Test Case:  16 | Input/Output: [[71 -54 -54 -54] -54]
Test Case:  17 | Input/Output: [[1 1 1 -22] -22]
Test Case:  18 | Input/Output: [[-5 66 66 66] -5]
Test Case:  19 | Input/Output: [[-93 -93 -93 -24] -93]
Test Case:  20 | Input/Output: [[94 32 32 32] 32]
Test Case:  21 | Input/Output: [[55 -89 55 55] -89]
Test Case:  22 | Input/Output: [[-80 -80 -61 -80] -80]
Test Case:  23 | Input/Output: [[2 2 2 43] 2]
Test Case:  24 | Input/Output: [[69 69 3 69] 3]
Test Case:  25 | Input/Output: [[98 98 -57 98] -57]
Test Case:  26 | Input/Output: [[57 57 57 -83] -83]
Test Case:  27 | Input/Output: [[73 73 73 -31] -31]
Test Case:  28 | Input/Output: [[52 27 52 52] 27]
Test Case:  29 | Input/Output: [[82 74 74 74] 74]
Test Case:  30 | Input/Output: [[59 59 -55 59] -55]
Test Case:  31 | Input/Output: [[58 68 68 68] 58]
Test Case:  32 | Input/Output: [[-99 -99 -46 -99] -99]
Test Case:  33 | Input/Output: [[-54 -54 -54 68] -54]
Test Case:  34 | Input/Output: [[-24 -24 -24 -47] -47]
Test Case:  35 | Input/Output: [[12 12 12 -41] -41]
Test Case:  36 | Input/Output: [[-46 -89 -46 -46] -89]
Test Case:  37 | Input/Output: [[-6 6 -6 -6] -6]
Test Case:  38 | Input/Output: [[-33 -33 -33 34] -33]
Test Case:  39 | Input/Output: [[85 85 85 100] 85]
Test Case:  40 | Input/Output: [[54 90 54 54] 54]
Test Case:  41 | Input/Output: [[-76 -27 -76 -76] -76]
Test Case:  42 | Input/Output: [[-88 -88 73 -88] -88]
Test Case:  43 | Input/Output: [[18 18 -46 18] -46]
Test Case:  44 | Input/Output: [[-24 -97 -24 -24] -97]
Test Case:  45 | Input/Output: [[-91 -10 -91 -91] -91]
Test Case:  46 | Input/Output: [[-25 -25 -18 -25] -25]
Test Case:  47 | Input/Output: [[43 19 19 19] 19]
Test Case:  48 | Input/Output: [[-89 -37 -89 -89] -89]
Test Case:  49 | Input/Output: [[-66 -17 -66 -66] -66]
Test Case:  50 | Input/Output: [[31 31 98 31] 31]
Test Case:  51 | Input/Output: [[-6 -6 -6 -6] -6]
Test Case:  52 | Input/Output: [[49 51 49 49] 49]
Test Case:  53 | Input/Output: [[-55 -55 83 -55] -55]
Test Case:  54 | Input/Output: [[-67 87 87 87] -67]
Test Case:  55 | Input/Output: [[38 -46 38 38] -46]
Test Case:  56 | Input/Output: [[-20 19 19 19] -20]
Test Case:  57 | Input/Output: [[-90 -83 -90 -90] -90]
Test Case:  58 | Input/Output: [[64 -27 -27 -27] -27]
Test Case:  59 | Input/Output: [[65 8 65 65] 8]
Test Case:  60 | Input/Output: [[-80 -94 -80 -80] -94]
Test Case:  61 | Input/Output: [[27 27 81 27] 27]
Test Case:  62 | Input/Output: [[-85 -85 -85 64] -85]
Test Case:  63 | Input/Output: [[-61 -61 -61 -46] -61]
Test Case:  64 | Input/Output: [[92 -100 -100 -100] -100]
Test Case:  65 | Input/Output: [[71 -31 -31 -31] -31]
Test Case:  66 | Input/Output: [[-55 -55 -14 -55] -55]
Test Case:  67 | Input/Output: [[29 20 20 20] 20]
Test Case:  68 | Input/Output: [[7 -20 7 7] -20]
Test Case:  69 | Input/Output: [[89 -80 -80 -80] -80]
Test Case:  70 | Input/Output: [[2 2 59 2] 2]
Test Case:  71 | Input/Output: [[-61 -61 23 -61] -61]
Test Case:  72 | Input/Output: [[73 73 73 92] 73]
Test Case:  73 | Input/Output: [[-17 85 85 85] -17]
Test Case:  74 | Input/Output: [[-40 19 19 19] -40]
Test Case:  75 | Input/Output: [[88 88 88 46] 46]
Test Case:  76 | Input/Output: [[-35 93 -35 -35] -35]
Test Case:  77 | Input/Output: [[-65 -70 -70 -70] -70]
Test Case:  78 | Input/Output: [[26 26 -7 26] -7]
Test Case:  79 | Input/Output: [[-67 -67 -67 9] -67]
Test Case:  80 | Input/Output: [[98 96 98 98] 96]
Test Case:  81 | Input/Output: [[26 47 47 47] 26]
Test Case:  82 | Input/Output: [[-70 -55 -55 -55] -70]
Test Case:  83 | Input/Output: [[-28 -28 -39 -28] -39]
Test Case:  84 | Input/Output: [[49 49 15 49] 15]
Test Case:  85 | Input/Output: [[-37 29 29 29] -37]
Test Case:  86 | Input/Output: [[91 91 91 96] 91]
Test Case:  87 | Input/Output: [[83 14 83 83] 14]
Test Case:  88 | Input/Output: [[-21 -21 -21 7] -21]
Test Case:  89 | Input/Output: [[-64 68 -64 -64] -64]
Test Case:  90 | Input/Output: [[33 33 33 -32] -32]
Test Case:  91 | Input/Output: [[85 85 10 85] 10]
Test Case:  92 | Input/Output: [[-20 -20 -35 -20] -35]
Test Case:  93 | Input/Output: [[-61 -61 51 -61] -61]
Test Case:  94 | Input/Output: [[-60 -52 -52 -52] -60]
Test Case:  95 | Input/Output: [[22 22 -38 22] -38]
Test Case:  96 | Input/Output: [[-1 34 -1 -1] -1]
Test Case:  97 | Input/Output: [[-94 -14 -14 -14] -94]
Test Case:  98 | Input/Output: [[87 87 87 76] 76]
Test Case:  99 | Input/Output: [[-45 65 65 65] -45]
Test Case: 100 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 101 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 102 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 103 | Input/Output: [(46 46 46 46) 46]
Test Case: 104 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 105 | Input/Output: [(55 55 55 55) 55]
Test Case: 106 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 107 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 108 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 109 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 110 | Input/Output: [(72 72 72 72) 72]
Test Case: 111 | Input/Output: [(68 68 68 68) 68]
Test Case: 112 | Input/Output: [(0 0 0 0) 0]
Test Case: 113 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 114 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 115 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 116 | Input/Output: [(41 41 41 41) 41]
Test Case: 117 | Input/Output: [(43 43 43 43) 43]
Test Case: 118 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 119 | Input/Output: [(93 93 93 93) 93]
Test Case: 120 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 121 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 122 | Input/Output: [(57 57 57 57) 57]
Test Case: 123 | Input/Output: [(3 3 3 3) 3]
Test Case: 124 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 125 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 126 | Input/Output: [(24 24 24 24) 24]
Test Case: 127 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 128 | Input/Output: [(43 43 43 43) 43]
Test Case: 129 | Input/Output: [(66 66 66 66) 66]
Test Case: 130 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 131 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 132 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 133 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 134 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 135 | Input/Output: [(40 40 40 40) 40]
Test Case: 136 | Input/Output: [(22 22 22 22) 22]
Test Case: 137 | Input/Output: [(65 65 65 65) 65]
Test Case: 138 | Input/Output: [(24 24 24 24) 24]
Test Case: 139 | Input/Output: [(37 37 37 37) 37]
Test Case: 140 | Input/Output: [(5 5 5 5) 5]
Test Case: 141 | Input/Output: [(0 0 0 0) 0]
Test Case: 142 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 143 | Input/Output: [(99 99 99 99) 99]
Test Case: 144 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 145 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 146 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 147 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 148 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 149 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 150 | Input/Output: [(6 6 6 6) 6]
Test Case: 151 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 152 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 153 | Input/Output: [(85 85 85 85) 85]
Test Case: 154 | Input/Output: [(79 79 79 79) 79]
Test Case: 155 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 156 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 157 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 158 | Input/Output: [(95 95 95 95) 95]
Test Case: 159 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 160 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 161 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 162 | Input/Output: [(57 57 57 57) 57]
Test Case: 163 | Input/Output: [(85 85 85 85) 85]
Test Case: 164 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 165 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 166 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 167 | Input/Output: [(45 45 45 45) 45]
Test Case: 168 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 169 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 170 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 171 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 172 | Input/Output: [(65 65 65 65) 65]
Test Case: 173 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 174 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 175 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 176 | Input/Output: [(62 62 62 62) 62]
Test Case: 177 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 178 | Input/Output: [(8 8 8 8) 8]
Test Case: 179 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 180 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 181 | Input/Output: [(75 75 75 75) 75]
Test Case: 182 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 183 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 184 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 185 | Input/Output: [(6 6 6 6) 6]
Test Case: 186 | Input/Output: [(36 36 36 36) 36]
Test Case: 187 | Input/Output: [(75 75 75 75) 75]
Test Case: 188 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 189 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 190 | Input/Output: [(36 36 36 36) 36]
Test Case: 191 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 192 | Input/Output: [(14 14 14 14) 14]
Test Case: 193 | Input/Output: [(68 68 68 68) 68]
Test Case: 194 | Input/Output: [(43 43 43 43) 43]
Test Case: 195 | Input/Output: [(61 61 61 61) 61]
Test Case: 196 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 197 | Input/Output: [(29 29 29 29) 29]
Test Case: 198 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 199 | Input/Output: [(35 35 35 35) 35]
Test Case: 200 | Input/Output: [(39 69 48 78) 39]
Test Case: 201 | Input/Output: [(87 5 45 89) 5]
Test Case: 202 | Input/Output: [(95 64 40 80) 40]
Test Case: 203 | Input/Output: [(2 24 81 41) 2]
Test Case: 204 | Input/Output: [(34 85 30 19) 19]
Test Case: 205 | Input/Output: [(52 17 15 16) 15]
Test Case: 206 | Input/Output: [(89 61 65 10) 10]
Test Case: 207 | Input/Output: [(59 18 76 67) 18]
Test Case: 208 | Input/Output: [(37 47 76 49) 37]
Test Case: 209 | Input/Output: [(54 26 29 39) 26]
Test Case: 210 | Input/Output: [(3 85 83 9) 3]
Test Case: 211 | Input/Output: [(85 55 0 69) 0]
Test Case: 212 | Input/Output: [(20 100 78 32) 20]
Test Case: 213 | Input/Output: [(76 33 46 37) 33]
Test Case: 214 | Input/Output: [(33 92 45 3) 3]
Test Case: 215 | Input/Output: [(2 41 19 96) 2]
Test Case: 216 | Input/Output: [(33 8 5 59) 5]
Test Case: 217 | Input/Output: [(38 74 4 39) 4]
Test Case: 218 | Input/Output: [(14 21 54 78) 14]
Test Case: 219 | Input/Output: [(78 41 67 57) 41]
Test Case: 220 | Input/Output: [(25 74 30 54) 25]
Test Case: 221 | Input/Output: [(12 11 23 65) 11]
Test Case: 222 | Input/Output: [(100 4 64 74) 4]
Test Case: 223 | Input/Output: [(29 84 44 50) 29]
Test Case: 224 | Input/Output: [(94 75 91 86) 75]
Test Case: 225 | Input/Output: [(33 46 34 94) 33]
Test Case: 226 | Input/Output: [(56 10 6 70) 6]
Test Case: 227 | Input/Output: [(32 2 18 41) 2]
Test Case: 228 | Input/Output: [(96 62 43 3) 3]
Test Case: 229 | Input/Output: [(98 15 81 68) 15]
Test Case: 230 | Input/Output: [(93 80 66 32) 32]
Test Case: 231 | Input/Output: [(53 25 0 36) 0]
Test Case: 232 | Input/Output: [(56 52 94 92) 52]
Test Case: 233 | Input/Output: [(39 52 44 35) 35]
Test Case: 234 | Input/Output: [(75 93 85 39) 39]
Test Case: 235 | Input/Output: [(71 74 45 22) 22]
Test Case: 236 | Input/Output: [(20 41 14 98) 14]
Test Case: 237 | Input/Output: [(62 95 14 33) 14]
Test Case: 238 | Input/Output: [(76 28 22 23) 22]
Test Case: 239 | Input/Output: [(65 82 81 57) 57]
Test Case: 240 | Input/Output: [(92 71 58 45) 45]
Test Case: 241 | Input/Output: [(93 35 9 14) 9]
Test Case: 242 | Input/Output: [(79 83 42 42) 42]
Test Case: 243 | Input/Output: [(55 95 64 8) 8]
Test Case: 244 | Input/Output: [(7 77 80 81) 7]
Test Case: 245 | Input/Output: [(86 68 31 87) 31]
Test Case: 246 | Input/Output: [(9 11 4 72) 4]
Test Case: 247 | Input/Output: [(7 97 51 98) 7]
Test Case: 248 | Input/Output: [(84 7 52 100) 7]
Test Case: 249 | Input/Output: [(72 98 91 42) 42]
Test Case: 250 | Input/Output: [(31 2 67 100) 2]
Test Case: 251 | Input/Output: [(72 88 30 94) 30]
Test Case: 252 | Input/Output: [(23 90 62 9) 9]
Test Case: 253 | Input/Output: [(8 9 31 17) 8]
Test Case: 254 | Input/Output: [(20 64 53 61) 20]
Test Case: 255 | Input/Output: [(60 87 62 76) 60]
Test Case: 256 | Input/Output: [(36 44 86 80) 36]
Test Case: 257 | Input/Output: [(63 12 77 21) 12]
Test Case: 258 | Input/Output: [(82 84 81 12) 12]
Test Case: 259 | Input/Output: [(47 91 84 47) 47]
Test Case: 260 | Input/Output: [(71 39 34 8) 8]
Test Case: 261 | Input/Output: [(67 30 74 33) 30]
Test Case: 262 | Input/Output: [(4 79 28 91) 4]
Test Case: 263 | Input/Output: [(21 17 13 70) 13]
Test Case: 264 | Input/Output: [(69 83 32 55) 32]
Test Case: 265 | Input/Output: [(4 39 34 89) 4]
Test Case: 266 | Input/Output: [(90 77 92 48) 48]
Test Case: 267 | Input/Output: [(56 32 45 96) 32]
Test Case: 268 | Input/Output: [(81 0 17 34) 0]
Test Case: 269 | Input/Output: [(48 99 12 92) 12]
Test Case: 270 | Input/Output: [(49 0 12 16) 0]
Test Case: 271 | Input/Output: [(61 50 53 80) 50]
Test Case: 272 | Input/Output: [(83 40 49 34) 34]
Test Case: 273 | Input/Output: [(0 0 14 68) 0]
Test Case: 274 | Input/Output: [(10 64 57 20) 10]
Test Case: 275 | Input/Output: [(73 59 12 96) 12]
Test Case: 276 | Input/Output: [(1 83 43 43) 1]
Test Case: 277 | Input/Output: [(49 60 28 31) 28]
Test Case: 278 | Input/Output: [(2 87 94 56) 2]
Test Case: 279 | Input/Output: [(84 45 51 23) 23]
Test Case: 280 | Input/Output: [(79 48 33 32) 32]
Test Case: 281 | Input/Output: [(60 51 87 67) 51]
Test Case: 282 | Input/Output: [(49 11 45 77) 11]
Test Case: 283 | Input/Output: [(74 1 57 7) 1]
Test Case: 284 | Input/Output: [(23 38 85 10) 10]
Test Case: 285 | Input/Output: [(46 19 1 91) 1]
Test Case: 286 | Input/Output: [(61 85 83 63) 61]
Test Case: 287 | Input/Output: [(83 57 75 77) 57]
Test Case: 288 | Input/Output: [(94 59 80 24) 24]
Test Case: 289 | Input/Output: [(11 77 72 53) 11]
Test Case: 290 | Input/Output: [(69 27 15 22) 15]
Test Case: 291 | Input/Output: [(15 16 94 4) 4]
Test Case: 292 | Input/Output: [(79 60 83 55) 55]
Test Case: 293 | Input/Output: [(2 90 21 18) 2]
Test Case: 294 | Input/Output: [(7 53 55 2) 2]
Test Case: 295 | Input/Output: [(11 45 12 61) 11]
Test Case: 296 | Input/Output: [(24 24 10 83) 10]
Test Case: 297 | Input/Output: [(6 75 92 40) 6]
Test Case: 298 | Input/Output: [(35 29 9 35) 9]
Test Case: 299 | Input/Output: [(70 96 90 98) 70]
Test Case: 300 | Input/Output: [(52 61 58 27) 27]
Test Case: 301 | Input/Output: [(0 31 79 59) 0]
Test Case: 302 | Input/Output: [(90 75 28 62) 28]
Test Case: 303 | Input/Output: [(76 41 36 33) 33]
Test Case: 304 | Input/Output: [(72 32 61 100) 32]
Test Case: 305 | Input/Output: [(51 40 97 92) 40]
Test Case: 306 | Input/Output: [(55 24 80 61) 24]
Test Case: 307 | Input/Output: [(60 47 53 44) 44]
Test Case: 308 | Input/Output: [(61 16 15 88) 15]
Test Case: 309 | Input/Output: [(92 98 78 68) 68]
Test Case: 310 | Input/Output: [(58 54 94 30) 30]
Test Case: 311 | Input/Output: [(17 22 88 78) 17]
Test Case: 312 | Input/Output: [(60 61 20 37) 20]
Test Case: 313 | Input/Output: [(18 79 63 39) 18]
Test Case: 314 | Input/Output: [(72 52 11 33) 11]
Test Case: 315 | Input/Output: [(27 47 60 86) 27]
Test Case: 316 | Input/Output: [(72 91 8 37) 8]
Test Case: 317 | Input/Output: [(15 49 13 67) 13]
Test Case: 318 | Input/Output: [(100 10 10 74) 10]
Test Case: 319 | Input/Output: [(67 96 93 95) 67]
Test Case: 320 | Input/Output: [(50 0 5 18) 0]
Test Case: 321 | Input/Output: [(53 54 46 43) 43]
Test Case: 322 | Input/Output: [(48 42 90 98) 42]
Test Case: 323 | Input/Output: [(100 36 19 56) 19]
Test Case: 324 | Input/Output: [(38 58 9 69) 9]
Test Case: 325 | Input/Output: [(35 86 80 94) 35]
Test Case: 326 | Input/Output: [(63 50 47 37) 37]
Test Case: 327 | Input/Output: [(94 98 96 41) 41]
Test Case: 328 | Input/Output: [(58 14 27 60) 14]
Test Case: 329 | Input/Output: [(51 65 65 45) 45]
Test Case: 330 | Input/Output: [(21 91 68 8) 8]
Test Case: 331 | Input/Output: [(26 3 29 19) 3]
Test Case: 332 | Input/Output: [(10 77 89 19) 10]
Test Case: 333 | Input/Output: [(42 10 0 36) 0]
Test Case: 334 | Input/Output: [(70 20 54 56) 20]
Test Case: 335 | Input/Output: [(48 79 91 1) 1]
Test Case: 336 | Input/Output: [(60 94 30 42) 30]
Test Case: 337 | Input/Output: [(76 10 93 63) 10]
Test Case: 338 | Input/Output: [(8 79 50 31) 8]
Test Case: 339 | Input/Output: [(72 80 91 17) 17]
Test Case: 340 | Input/Output: [(22 94 55 77) 22]
Test Case: 341 | Input/Output: [(32 67 15 77) 15]
Test Case: 342 | Input/Output: [(41 40 7 31) 7]
Test Case: 343 | Input/Output: [(33 74 82 68) 33]
Test Case: 344 | Input/Output: [(34 100 49 5) 5]
Test Case: 345 | Input/Output: [(30 92 16 17) 16]
Test Case: 346 | Input/Output: [(55 36 98 23) 23]
Test Case: 347 | Input/Output: [(62 59 74 53) 53]
Test Case: 348 | Input/Output: [(69 61 68 75) 61]
Test Case: 349 | Input/Output: [(76 12 26 50) 12]
Test Case: 350 | Input/Output: [(43 52 2 25) 2]
Test Case: 351 | Input/Output: [(3 94 18 38) 3]
Test Case: 352 | Input/Output: [(79 96 48 90) 48]
Test Case: 353 | Input/Output: [(56 12 14 77) 12]
Test Case: 354 | Input/Output: [(40 28 40 81) 28]
Test Case: 355 | Input/Output: [(96 46 61 74) 46]
Test Case: 356 | Input/Output: [(68 71 7 60) 7]
Test Case: 357 | Input/Output: [(10 6 0 86) 0]
Test Case: 358 | Input/Output: [(66 33 4 77) 4]
Test Case: 359 | Input/Output: [(20 74 11 91) 11]
Test Case: 360 | Input/Output: [(87 72 98 92) 72]
Test Case: 361 | Input/Output: [(78 79 68 68) 68]
Test Case: 362 | Input/Output: [(17 49 40 63) 17]
Test Case: 363 | Input/Output: [(97 95 55 51) 51]
Test Case: 364 | Input/Output: [(29 72 0 26) 0]
Test Case: 365 | Input/Output: [(98 90 75 42) 42]
Test Case: 366 | Input/Output: [(70 70 77 52) 52]
Test Case: 367 | Input/Output: [(83 8 31 85) 8]
Test Case: 368 | Input/Output: [(64 62 31 98) 31]
Test Case: 369 | Input/Output: [(49 39 60 60) 39]
Test Case: 370 | Input/Output: [(29 74 53 36) 29]
Test Case: 371 | Input/Output: [(14 43 7 64) 7]
Test Case: 372 | Input/Output: [(83 12 2 13) 2]
Test Case: 373 | Input/Output: [(41 33 55 45) 33]
Test Case: 374 | Input/Output: [(71 30 31 30) 30]
Test Case: 375 | Input/Output: [(56 60 83 100) 56]
Test Case: 376 | Input/Output: [(52 89 97 83) 52]
Test Case: 377 | Input/Output: [(87 14 87 59) 14]
Test Case: 378 | Input/Output: [(91 46 93 41) 41]
Test Case: 379 | Input/Output: [(32 79 31 66) 31]
Test Case: 380 | Input/Output: [(44 87 89 3) 3]
Test Case: 381 | Input/Output: [(52 51 9 45) 9]
Test Case: 382 | Input/Output: [(25 67 67 39) 25]
Test Case: 383 | Input/Output: [(90 42 39 2) 2]
Test Case: 384 | Input/Output: [(18 30 28 16) 16]
Test Case: 385 | Input/Output: [(40 82 75 91) 40]
Test Case: 386 | Input/Output: [(11 56 46 31) 11]
Test Case: 387 | Input/Output: [(66 53 48 13) 13]
Test Case: 388 | Input/Output: [(33 99 99 8) 8]
Test Case: 389 | Input/Output: [(1 54 56 47) 1]
Test Case: 390 | Input/Output: [(67 80 68 72) 67]
Test Case: 391 | Input/Output: [(24 30 28 12) 12]
Test Case: 392 | Input/Output: [(60 97 52 8) 8]
Test Case: 393 | Input/Output: [(56 88 78 82) 56]
Test Case: 394 | Input/Output: [(58 86 34 89) 34]
Test Case: 395 | Input/Output: [(59 94 63 16) 16]
Test Case: 396 | Input/Output: [(58 44 60 50) 44]
Test Case: 397 | Input/Output: [(43 63 80 81) 43]
Test Case: 398 | Input/Output: [(23 61 20 55) 20]
Test Case: 399 | Input/Output: [(91 2 13 91) 2]
Test Case: 400 | Input/Output: [(-43 7 -64 -35) -64]
Test Case: 401 | Input/Output: [(8 33 -53 -87) -87]
Test Case: 402 | Input/Output: [(-69 30 -46 47) -69]
Test Case: 403 | Input/Output: [(-29 -93 -36 -51) -93]
Test Case: 404 | Input/Output: [(4 -58 31 27) -58]
Test Case: 405 | Input/Output: [(-73 -4 -79 49) -79]
Test Case: 406 | Input/Output: [(89 -63 35 22) -63]
Test Case: 407 | Input/Output: [(-90 -82 -12 2) -90]
Test Case: 408 | Input/Output: [(34 -16 -23 38) -23]
Test Case: 409 | Input/Output: [(13 -3 -1 -81) -81]
Test Case: 410 | Input/Output: [(-86 -16 -27 76) -86]
Test Case: 411 | Input/Output: [(81 -48 -89 -5) -89]
Test Case: 412 | Input/Output: [(-11 85 -79 -40) -79]
Test Case: 413 | Input/Output: [(21 -10 51 29) -10]
Test Case: 414 | Input/Output: [(8 79 33 25) 8]
Test Case: 415 | Input/Output: [(19 -67 -59 13) -67]
Test Case: 416 | Input/Output: [(39 13 5 9) 5]
Test Case: 417 | Input/Output: [(-65 47 -49 -37) -65]
Test Case: 418 | Input/Output: [(85 -65 -29 71) -65]
Test Case: 419 | Input/Output: [(34 -25 -93 44) -93]
Test Case: 420 | Input/Output: [(-28 -76 20 -77) -77]
Test Case: 421 | Input/Output: [(-76 -73 -48 19) -76]
Test Case: 422 | Input/Output: [(-9 71 46 -94) -94]
Test Case: 423 | Input/Output: [(57 -68 -72 -52) -72]
Test Case: 424 | Input/Output: [(60 -11 90 -57) -57]
Test Case: 425 | Input/Output: [(62 96 -82 -62) -82]
Test Case: 426 | Input/Output: [(-99 1 -68 -63) -99]
Test Case: 427 | Input/Output: [(27 -54 -97 -45) -97]
Test Case: 428 | Input/Output: [(2 -33 47 61) -33]
Test Case: 429 | Input/Output: [(44 -29 88 -37) -37]
Test Case: 430 | Input/Output: [(-44 17 -49 44) -49]
Test Case: 431 | Input/Output: [(74 -64 23 47) -64]
Test Case: 432 | Input/Output: [(54 45 -71 7) -71]
Test Case: 433 | Input/Output: [(-59 -62 37 22) -62]
Test Case: 434 | Input/Output: [(81 98 75 -96) -96]
Test Case: 435 | Input/Output: [(24 74 -53 67) -53]
Test Case: 436 | Input/Output: [(31 -96 69 98) -96]
Test Case: 437 | Input/Output: [(-12 -95 -89 -85) -95]
Test Case: 438 | Input/Output: [(18 44 -3 21) -3]
Test Case: 439 | Input/Output: [(66 -14 5 -37) -37]
Test Case: 440 | Input/Output: [(92 -92 -50 78) -92]
Test Case: 441 | Input/Output: [(-79 41 -69 -48) -79]
Test Case: 442 | Input/Output: [(56 43 12 12) 12]
Test Case: 443 | Input/Output: [(35 -66 21 45) -66]
Test Case: 444 | Input/Output: [(11 97 -34 -36) -36]
Test Case: 445 | Input/Output: [(54 -97 41 25) -97]
Test Case: 446 | Input/Output: [(-97 -11 28 -46) -97]
Test Case: 447 | Input/Output: [(-11 73 83 -20) -20]
Test Case: 448 | Input/Output: [(28 89 13 32) 13]
Test Case: 449 | Input/Output: [(-64 31 -33 17) -64]
Test Case: 450 | Input/Output: [(-92 76 73 87) -92]
Test Case: 451 | Input/Output: [(12 92 -45 0) -45]
Test Case: 452 | Input/Output: [(-22 0 76 -18) -22]
Test Case: 453 | Input/Output: [(80 -26 37 94) -26]
Test Case: 454 | Input/Output: [(33 -10 -83 -45) -83]
Test Case: 455 | Input/Output: [(-20 -48 -8 40) -48]
Test Case: 456 | Input/Output: [(15 -80 51 -53) -80]
Test Case: 457 | Input/Output: [(-89 50 28 -94) -94]
Test Case: 458 | Input/Output: [(-43 -35 9 -23) -43]
Test Case: 459 | Input/Output: [(-62 80 -19 -86) -86]
Test Case: 460 | Input/Output: [(11 -51 75 -93) -93]
Test Case: 461 | Input/Output: [(-42 -42 -46 -26) -46]
Test Case: 462 | Input/Output: [(-8 -38 -90 -57) -90]
Test Case: 463 | Input/Output: [(53 78 99 -100) -100]
Test Case: 464 | Input/Output: [(73 -60 20 54) -60]
Test Case: 465 | Input/Output: [(-85 -65 76 -60) -85]
Test Case: 466 | Input/Output: [(-3 39 73 -65) -65]
Test Case: 467 | Input/Output: [(-32 -100 -30 76) -100]
Test Case: 468 | Input/Output: [(71 37 -16 59) -16]
Test Case: 469 | Input/Output: [(-97 77 86 33) -97]
Test Case: 470 | Input/Output: [(-34 -72 55 10) -72]
Test Case: 471 | Input/Output: [(65 -16 0 16) -16]
Test Case: 472 | Input/Output: [(78 -65 77 8) -65]
Test Case: 473 | Input/Output: [(-97 -91 -4 -81) -97]
Test Case: 474 | Input/Output: [(64 -31 86 -47) -47]
Test Case: 475 | Input/Output: [(-69 -99 93 43) -99]
Test Case: 476 | Input/Output: [(-34 17 -37 -29) -37]
Test Case: 477 | Input/Output: [(80 -89 44 -76) -89]
Test Case: 478 | Input/Output: [(-14 64 50 -76) -76]
Test Case: 479 | Input/Output: [(-16 58 -97 -7) -97]
Test Case: 480 | Input/Output: [(-90 90 -6 -50) -90]
Test Case: 481 | Input/Output: [(-70 55 46 -69) -70]
Test Case: 482 | Input/Output: [(-96 26 68 -49) -96]
Test Case: 483 | Input/Output: [(12 49 25 -31) -31]
Test Case: 484 | Input/Output: [(-45 58 66 23) -45]
Test Case: 485 | Input/Output: [(-46 38 -94 87) -94]
Test Case: 486 | Input/Output: [(12 34 -4 88) -4]
Test Case: 487 | Input/Output: [(-88 2 80 -11) -88]
Test Case: 488 | Input/Output: [(-42 -2 -75 66) -75]
Test Case: 489 | Input/Output: [(-58 -47 28 -42) -58]
Test Case: 490 | Input/Output: [(-2 -22 -18 45) -22]
Test Case: 491 | Input/Output: [(-97 18 5 84) -97]
Test Case: 492 | Input/Output: [(-66 25 26 60) -66]
Test Case: 493 | Input/Output: [(-77 83 -96 -43) -96]
Test Case: 494 | Input/Output: [(-7 -95 96 -53) -95]
Test Case: 495 | Input/Output: [(-6 -35 -75 91) -75]
Test Case: 496 | Input/Output: [(-16 34 83 -86) -86]
Test Case: 497 | Input/Output: [(17 86 -15 96) -15]
Test Case: 498 | Input/Output: [(46 59 -6 -97) -97]
Test Case: 499 | Input/Output: [(-62 72 -52 68) -62]
Test Case: 500 | Input/Output: [(-23 -88 -40 -17) -88]
Test Case: 501 | Input/Output: [(30 -52 61 -54) -54]
Test Case: 502 | Input/Output: [(76 91 3 -2) -2]
Test Case: 503 | Input/Output: [(-87 28 24 59) -87]
Test Case: 504 | Input/Output: [(-95 78 -66 -41) -95]
Test Case: 505 | Input/Output: [(-55 0 14 -74) -74]
Test Case: 506 | Input/Output: [(96 -18 -56 55) -56]
Test Case: 507 | Input/Output: [(51 88 -43 -48) -48]
Test Case: 508 | Input/Output: [(-24 -58 9 -77) -77]
Test Case: 509 | Input/Output: [(30 -96 -46 -46) -96]
Test Case: 510 | Input/Output: [(55 15 -73 36) -73]
Test Case: 511 | Input/Output: [(83 27 100 100) 27]
Test Case: 512 | Input/Output: [(50 -34 -49 -36) -49]
Test Case: 513 | Input/Output: [(-50 42 58 21) -50]
Test Case: 514 | Input/Output: [(80 70 31 -37) -37]
Test Case: 515 | Input/Output: [(33 31 48 36) 31]
Test Case: 516 | Input/Output: [(-9 -75 81 -71) -75]
Test Case: 517 | Input/Output: [(94 -49 22 -77) -77]
Test Case: 518 | Input/Output: [(48 -16 87 -28) -28]
Test Case: 519 | Input/Output: [(-46 94 17 96) -46]
Test Case: 520 | Input/Output: [(-53 97 63 -49) -53]
Test Case: 521 | Input/Output: [(86 88 94 -21) -21]
Test Case: 522 | Input/Output: [(-64 12 21 -34) -64]
Test Case: 523 | Input/Output: [(-23 -68 91 77) -68]
Test Case: 524 | Input/Output: [(-25 -91 -10 97) -91]
Test Case: 525 | Input/Output: [(84 65 10 42) 10]
Test Case: 526 | Input/Output: [(-24 -59 -57 -88) -88]
Test Case: 527 | Input/Output: [(76 -57 -62 96) -62]
Test Case: 528 | Input/Output: [(34 -39 -62 56) -62]
Test Case: 529 | Input/Output: [(-33 -8 70 -52) -52]
Test Case: 530 | Input/Output: [(-35 92 71 -26) -35]
Test Case: 531 | Input/Output: [(-45 -19 48 -43) -45]
Test Case: 532 | Input/Output: [(37 21 -97 21) -97]
Test Case: 533 | Input/Output: [(76 -23 -92 70) -92]
Test Case: 534 | Input/Output: [(-59 46 68 25) -59]
Test Case: 535 | Input/Output: [(-5 34 93 41) -5]
Test Case: 536 | Input/Output: [(-11 -40 -81 15) -81]
Test Case: 537 | Input/Output: [(-49 99 4 13) -49]
Test Case: 538 | Input/Output: [(85 -93 -78 -61) -93]
Test Case: 539 | Input/Output: [(-74 -79 -31 -85) -85]
Test Case: 540 | Input/Output: [(-99 35 62 43) -99]
Test Case: 541 | Input/Output: [(-55 -6 -31 58) -55]
Test Case: 542 | Input/Output: [(45 -50 -76 -20) -76]
Test Case: 543 | Input/Output: [(10 4 87 -14) -14]
Test Case: 544 | Input/Output: [(14 -98 11 86) -98]
Test Case: 545 | Input/Output: [(-50 -18 -27 47) -50]
Test Case: 546 | Input/Output: [(-50 62 -28 -85) -85]
Test Case: 547 | Input/Output: [(12 -23 -91 78) -91]
Test Case: 548 | Input/Output: [(85 33 25 -44) -44]
Test Case: 549 | Input/Output: [(-61 -30 64 31) -61]
Test Case: 550 | Input/Output: [(65 51 -21 -32) -32]
Test Case: 551 | Input/Output: [(-77 -40 -78 50) -78]
Test Case: 552 | Input/Output: [(-34 46 89 -48) -48]
Test Case: 553 | Input/Output: [(1 41 67 -61) -61]
Test Case: 554 | Input/Output: [(-8 35 -62 -54) -62]
Test Case: 555 | Input/Output: [(-2 87 87 45) -2]
Test Case: 556 | Input/Output: [(-7 50 -80 -55) -80]
Test Case: 557 | Input/Output: [(97 43 75 -77) -77]
Test Case: 558 | Input/Output: [(-51 -86 16 29) -86]
Test Case: 559 | Input/Output: [(-24 42 -83 -16) -83]
Test Case: 560 | Input/Output: [(-66 51 56 54) -66]
Test Case: 561 | Input/Output: [(67 72 -20 73) -20]
Test Case: 562 | Input/Output: [(69 -50 84 -88) -88]
Test Case: 563 | Input/Output: [(-33 30 60 -2) -33]
Test Case: 564 | Input/Output: [(16 50 8 -99) -99]
Test Case: 565 | Input/Output: [(-70 6 25 35) -70]
Test Case: 566 | Input/Output: [(57 -3 -28 23) -28]
Test Case: 567 | Input/Output: [(-84 -67 -61 86) -84]
Test Case: 568 | Input/Output: [(-82 -21 -83 -29) -83]
Test Case: 569 | Input/Output: [(-66 78 42 -31) -66]
Test Case: 570 | Input/Output: [(97 -45 -1 -72) -72]
Test Case: 571 | Input/Output: [(43 26 -33 90) -33]
Test Case: 572 | Input/Output: [(33 50 -91 77) -91]
Test Case: 573 | Input/Output: [(-32 63 -19 56) -32]
Test Case: 574 | Input/Output: [(-70 -97 88 -97) -97]
Test Case: 575 | Input/Output: [(83 64 -88 59) -88]
Test Case: 576 | Input/Output: [(-14 84 60 53) -14]
Test Case: 577 | Input/Output: [(-12 -2 -63 37) -63]
Test Case: 578 | Input/Output: [(-91 -68 -71 80) -91]
Test Case: 579 | Input/Output: [(-35 -73 49 56) -73]
Test Case: 580 | Input/Output: [(-1 99 0 69) -1]
Test Case: 581 | Input/Output: [(-11 -76 34 63) -76]
Test Case: 582 | Input/Output: [(60 -7 -18 -30) -30]
Test Case: 583 | Input/Output: [(-73 -58 42 53) -73]
Test Case: 584 | Input/Output: [(-60 -18 -51 87) -60]
Test Case: 585 | Input/Output: [(-62 30 21 -26) -62]
Test Case: 586 | Input/Output: [(96 -4 -37 -23) -37]
Test Case: 587 | Input/Output: [(-25 1 -14 -26) -26]
Test Case: 588 | Input/Output: [(-38 5 18 9) -38]
Test Case: 589 | Input/Output: [(35 -38 -93 -79) -93]
Test Case: 590 | Input/Output: [(-48 -75 -57 -85) -85]
Test Case: 591 | Input/Output: [(-21 28 39 -95) -95]
Test Case: 592 | Input/Output: [(-81 -10 -10 53) -81]
Test Case: 593 | Input/Output: [(59 0 -65 35) -65]
Test Case: 594 | Input/Output: [(-99 81 82 -6) -99]
Test Case: 595 | Input/Output: [(48 -45 38 5) -45]
Test Case: 596 | Input/Output: [(62 93 87 -56) -56]
Test Case: 597 | Input/Output: [(-94 76 -21 -2) -94]
Test Case: 598 | Input/Output: [(-44 60 -25 -49) -49]
Test Case: 599 | Input/Output: [(-7 44 58 15) -7]
Test Case: 600 | Input/Output: [(-59 78 94 96) -59]
Test Case: 601 | Input/Output: [(-40 -88 -81 -10) -88]
Test Case: 602 | Input/Output: [(-55 28 24 28) -55]
Test Case: 603 | Input/Output: [(-15 33 -1 53) -15]
Test Case: 604 | Input/Output: [(-30 41 86 80) -30]
Test Case: 605 | Input/Output: [(-13 79 24 -26) -26]
Test Case: 606 | Input/Output: [(-36 76 25 92) -36]
Test Case: 607 | Input/Output: [(11 1 -53 51) -53]
Test Case: 608 | Input/Output: [(-10 58 -43 54) -43]
Test Case: 609 | Input/Output: [(0 74 12 -12) -12]
Test Case: 610 | Input/Output: [(-40 -18 78 77) -40]
Test Case: 611 | Input/Output: [(-2 -10 -77 -21) -77]
Test Case: 612 | Input/Output: [(69 59 33 -68) -68]
Test Case: 613 | Input/Output: [(-61 -52 97 -64) -64]
Test Case: 614 | Input/Output: [(-39 -84 15 41) -84]
Test Case: 615 | Input/Output: [(-9 -61 -100 88) -100]
Test Case: 616 | Input/Output: [(49 -57 61 1) -57]
Test Case: 617 | Input/Output: [(62 -59 83 -96) -96]
Test Case: 618 | Input/Output: [(-56 -57 47 34) -57]
Test Case: 619 | Input/Output: [(21 -20 87 -14) -20]
Test Case: 620 | Input/Output: [(79 90 35 38) 35]
Test Case: 621 | Input/Output: [(83 24 -24 67) -24]
Test Case: 622 | Input/Output: [(-94 -89 -19 -83) -94]
Test Case: 623 | Input/Output: [(-100 -18 -10 66) -100]
Test Case: 624 | Input/Output: [(12 28 -61 99) -61]
Test Case: 625 | Input/Output: [(-80 -86 -89 46) -89]
Test Case: 626 | Input/Output: [(-77 56 88 -28) -77]
Test Case: 627 | Input/Output: [(-78 57 73 -92) -92]
Test Case: 628 | Input/Output: [(87 82 19 -91) -91]
Test Case: 629 | Input/Output: [(-47 -27 33 -18) -47]
Test Case: 630 | Input/Output: [(43 -57 -89 74) -89]
Test Case: 631 | Input/Output: [(-47 -32 4 71) -47]
Test Case: 632 | Input/Output: [(72 -6 21 34) -6]
Test Case: 633 | Input/Output: [(99 50 18 73) 18]
Test Case: 634 | Input/Output: [(27 14 2 -95) -95]
Test Case: 635 | Input/Output: [(49 0 0 56) 0]
Test Case: 636 | Input/Output: [(12 28 -72 -92) -92]
Test Case: 637 | Input/Output: [(-1 87 25 -55) -55]
Test Case: 638 | Input/Output: [(47 16 -44 -66) -66]
Test Case: 639 | Input/Output: [(97 44 -93 33) -93]
Test Case: 640 | Input/Output: [(-37 -33 -75 -10) -75]
Test Case: 641 | Input/Output: [(-12 -65 -34 96) -65]
Test Case: 642 | Input/Output: [(35 64 -77 -12) -77]
Test Case: 643 | Input/Output: [(-71 26 -37 44) -71]
Test Case: 644 | Input/Output: [(62 41 -8 -56) -56]
Test Case: 645 | Input/Output: [(74 -89 42 -40) -89]
Test Case: 646 | Input/Output: [(-82 32 -92 28) -92]
Test Case: 647 | Input/Output: [(-21 85 -63 55) -63]
Test Case: 648 | Input/Output: [(18 -69 -42 18) -69]
Test Case: 649 | Input/Output: [(-54 26 -48 56) -54]
Test Case: 650 | Input/Output: [(14 35 -45 46) -45]
Test Case: 651 | Input/Output: [(-98 18 -44 62) -98]
Test Case: 652 | Input/Output: [(-46 -50 -34 45) -50]
Test Case: 653 | Input/Output: [(-13 -81 -35 -24) -81]
Test Case: 654 | Input/Output: [(35 39 83 -83) -83]
Test Case: 655 | Input/Output: [(-74 -80 -56 -10) -80]
Test Case: 656 | Input/Output: [(-12 -100 71 -40) -100]
Test Case: 657 | Input/Output: [(-43 -31 47 63) -43]
Test Case: 658 | Input/Output: [(-57 -10 8 6) -57]
Test Case: 659 | Input/Output: [(-89 16 -27 91) -89]
Test Case: 660 | Input/Output: [(-17 -56 -40 66) -56]
Test Case: 661 | Input/Output: [(12 79 57 -83) -83]
Test Case: 662 | Input/Output: [(-82 -82 -59 46) -82]
Test Case: 663 | Input/Output: [(20 79 -40 -85) -85]
Test Case: 664 | Input/Output: [(-4 14 78 18) -4]
Test Case: 665 | Input/Output: [(63 -46 -11 97) -46]
Test Case: 666 | Input/Output: [(74 -85 -49 -28) -85]
Test Case: 667 | Input/Output: [(-70 -74 64 63) -74]
Test Case: 668 | Input/Output: [(-64 -11 -65 0) -65]
Test Case: 669 | Input/Output: [(33 29 -42 92) -42]
Test Case: 670 | Input/Output: [(1 83 6 -7) -7]
Test Case: 671 | Input/Output: [(11 93 92 55) 11]
Test Case: 672 | Input/Output: [(-30 -50 29 -73) -73]
Test Case: 673 | Input/Output: [(4 81 43 42) 4]
Test Case: 674 | Input/Output: [(-9 10 -9 -28) -28]
Test Case: 675 | Input/Output: [(-74 31 3 -47) -74]
Test Case: 676 | Input/Output: [(21 -85 14 74) -85]
Test Case: 677 | Input/Output: [(-54 40 -73 -12) -73]
Test Case: 678 | Input/Output: [(70 -98 98 -3) -98]
Test Case: 679 | Input/Output: [(46 -63 -79 19) -79]
Test Case: 680 | Input/Output: [(-58 17 90 -36) -58]
Test Case: 681 | Input/Output: [(-44 88 -28 -10) -44]
Test Case: 682 | Input/Output: [(68 -36 53 -50) -50]
Test Case: 683 | Input/Output: [(92 -92 39 -53) -92]
Test Case: 684 | Input/Output: [(40 -87 -47 -88) -88]
Test Case: 685 | Input/Output: [(-31 -60 -36 -36) -60]
Test Case: 686 | Input/Output: [(-40 -20 -53 79) -53]
Test Case: 687 | Input/Output: [(-98 86 84 39) -98]
Test Case: 688 | Input/Output: [(17 70 74 12) 12]
Test Case: 689 | Input/Output: [(-79 84 -73 85) -79]
Test Case: 690 | Input/Output: [(-61 53 -88 35) -88]
Test Case: 691 | Input/Output: [(-42 -2 -28 -36) -42]
Test Case: 692 | Input/Output: [(0 86 -94 61) -94]
Test Case: 693 | Input/Output: [(-72 -24 78 -28) -72]
Test Case: 694 | Input/Output: [(19 -64 -12 74) -64]
Test Case: 695 | Input/Output: [(49 -59 -9 4) -59]
Test Case: 696 | Input/Output: [(99 82 83 -15) -15]
Test Case: 697 | Input/Output: [(64 70 -79 41) -79]
Test Case: 698 | Input/Output: [(-94 79 51 -76) -94]
Test Case: 699 | Input/Output: [(45 3 -29 27) -29]
Test Case: 700 | Input/Output: [(-53 14 68 -80) -80]
Test Case: 701 | Input/Output: [(-30 27 79 74) -30]
Test Case: 702 | Input/Output: [(0 5 -85 -27) -85]
Test Case: 703 | Input/Output: [(58 4 84 -43) -43]
Test Case: 704 | Input/Output: [(14 83 -70 35) -70]
Test Case: 705 | Input/Output: [(-10 39 33 -75) -75]
Test Case: 706 | Input/Output: [(72 15 -98 61) -98]
Test Case: 707 | Input/Output: [(-85 69 -72 88) -85]
Test Case: 708 | Input/Output: [(-27 32 54 91) -27]
Test Case: 709 | Input/Output: [(-48 64 -75 -8) -75]
Test Case: 710 | Input/Output: [(38 54 35 37) 35]
Test Case: 711 | Input/Output: [(13 -45 -51 37) -51]
Test Case: 712 | Input/Output: [(49 37 -7 -61) -61]
Test Case: 713 | Input/Output: [(-23 87 -32 47) -32]
Test Case: 714 | Input/Output: [(-66 45 -3 -39) -66]
Test Case: 715 | Input/Output: [(29 54 -82 94) -82]
Test Case: 716 | Input/Output: [(-30 38 74 27) -30]
Test Case: 717 | Input/Output: [(87 -41 86 75) -41]
Test Case: 718 | Input/Output: [(51 -57 -5 84) -57]
Test Case: 719 | Input/Output: [(56 75 -86 58) -86]
Test Case: 720 | Input/Output: [(0 92 29 -94) -94]
Test Case: 721 | Input/Output: [(68 31 -14 30) -14]
Test Case: 722 | Input/Output: [(49 -83 -39 67) -83]
Test Case: 723 | Input/Output: [(-51 -91 22 -58) -91]
Test Case: 724 | Input/Output: [(-96 33 -83 -11) -96]
Test Case: 725 | Input/Output: [(-78 -65 -76 58) -78]
Test Case: 726 | Input/Output: [(84 36 -37 18) -37]
Test Case: 727 | Input/Output: [(12 -59 -5 -64) -64]
Test Case: 728 | Input/Output: [(-10 86 20 92) -10]
Test Case: 729 | Input/Output: [(-6 -98 -21 -62) -98]
Test Case: 730 | Input/Output: [(27 -41 42 -64) -64]
Test Case: 731 | Input/Output: [(-71 89 60 60) -71]
Test Case: 732 | Input/Output: [(48 -65 -78 -80) -80]
Test Case: 733 | Input/Output: [(-28 71 -57 -62) -62]
Test Case: 734 | Input/Output: [(-60 -47 -24 -24) -60]
Test Case: 735 | Input/Output: [(83 94 -91 -3) -91]
Test Case: 736 | Input/Output: [(4 -6 72 46) -6]
Test Case: 737 | Input/Output: [(-38 -29 95 -41) -41]
Test Case: 738 | Input/Output: [(-69 -13 -38 -90) -90]
Test Case: 739 | Input/Output: [(46 -41 3 88) -41]
Test Case: 740 | Input/Output: [(-53 -25 -83 -72) -83]
Test Case: 741 | Input/Output: [(29 60 -48 -11) -48]
Test Case: 742 | Input/Output: [(60 80 -3 40) -3]
Test Case: 743 | Input/Output: [(23 71 -84 99) -84]
Test Case: 744 | Input/Output: [(78 5 76 -41) -41]
Test Case: 745 | Input/Output: [(96 -38 41 31) -38]
Test Case: 746 | Input/Output: [(2 -97 -5 74) -97]
Test Case: 747 | Input/Output: [(-92 32 87 99) -92]
Test Case: 748 | Input/Output: [(32 21 65 -24) -24]
Test Case: 749 | Input/Output: [(-99 3 -9 -78) -99]
Test Case: 750 | Input/Output: [(-41 42 -83 36) -83]
Test Case: 751 | Input/Output: [(95 -100 64 -59) -100]
Test Case: 752 | Input/Output: [(-63 6 -44 -48) -63]
Test Case: 753 | Input/Output: [(4 75 30 -32) -32]
Test Case: 754 | Input/Output: [(-81 -51 -2 -2) -81]
Test Case: 755 | Input/Output: [(-52 -40 58 -39) -52]
Test Case: 756 | Input/Output: [(-70 -57 -62 -43) -70]
Test Case: 757 | Input/Output: [(-99 91 -4 90) -99]
Test Case: 758 | Input/Output: [(5 47 66 -77) -77]
Test Case: 759 | Input/Output: [(34 -28 -23 40) -28]
Test Case: 760 | Input/Output: [(88 48 -10 -46) -46]
Test Case: 761 | Input/Output: [(61 -70 4 90) -70]
Test Case: 762 | Input/Output: [(-93 65 -38 -39) -93]
Test Case: 763 | Input/Output: [(98 71 26 -27) -27]
Test Case: 764 | Input/Output: [(-48 83 91 94) -48]
Test Case: 765 | Input/Output: [(4 0 5 38) 0]
Test Case: 766 | Input/Output: [(-66 -34 -54 33) -66]
Test Case: 767 | Input/Output: [(91 89 83 96) 83]
Test Case: 768 | Input/Output: [(92 -86 -52 75) -86]
Test Case: 769 | Input/Output: [(-97 41 -19 87) -97]
Test Case: 770 | Input/Output: [(-98 -81 -75 66) -98]
Test Case: 771 | Input/Output: [(-94 67 79 1) -94]
Test Case: 772 | Input/Output: [(-78 3 -20 -59) -78]
Test Case: 773 | Input/Output: [(82 -40 0 25) -40]
Test Case: 774 | Input/Output: [(21 -49 29 -50) -50]
Test Case: 775 | Input/Output: [(-19 -67 -2 93) -67]
Test Case: 776 | Input/Output: [(27 -17 56 3) -17]
Test Case: 777 | Input/Output: [(91 5 -13 93) -13]
Test Case: 778 | Input/Output: [(-54 78 -82 55) -82]
Test Case: 779 | Input/Output: [(-66 -83 31 53) -83]
Test Case: 780 | Input/Output: [(-10 -48 -94 -25) -94]
Test Case: 781 | Input/Output: [(70 -54 -52 7) -54]
Test Case: 782 | Input/Output: [(-57 14 70 36) -57]
Test Case: 783 | Input/Output: [(-32 92 -62 18) -62]
Test Case: 784 | Input/Output: [(62 -20 16 -33) -33]
Test Case: 785 | Input/Output: [(-31 81 13 -48) -48]
Test Case: 786 | Input/Output: [(-13 19 79 -79) -79]
Test Case: 787 | Input/Output: [(1 82 18 58) 1]
Test Case: 788 | Input/Output: [(-42 -53 43 -85) -85]
Test Case: 789 | Input/Output: [(-73 -67 14 -61) -73]
Test Case: 790 | Input/Output: [(-37 16 -20 25) -37]
Test Case: 791 | Input/Output: [(30 85 35 15) 15]
Test Case: 792 | Input/Output: [(-64 -28 -6 59) -64]
Test Case: 793 | Input/Output: [(-19 81 8 12) -19]
Test Case: 794 | Input/Output: [(-73 22 -74 -26) -74]
Test Case: 795 | Input/Output: [(20 31 51 33) 20]
Test Case: 796 | Input/Output: [(-24 27 -74 -12) -74]
Test Case: 797 | Input/Output: [(50 26 -96 -98) -98]
Test Case: 798 | Input/Output: [(-65 -90 41 -29) -90]
Test Case: 799 | Input/Output: [(-21 -47 0 20) -47]
Test Case: 800 | Input/Output: [(29 30 -83 -11) -83]
Test Case: 801 | Input/Output: [(74 -12 -4 94) -12]
Test Case: 802 | Input/Output: [(-91 38 29 -17) -91]
Test Case: 803 | Input/Output: [(70 -63 18 -60) -63]
Test Case: 804 | Input/Output: [(9 -28 10 -71) -71]
Test Case: 805 | Input/Output: [(-98 93 24 -68) -98]
Test Case: 806 | Input/Output: [(54 37 -40 -43) -43]
Test Case: 807 | Input/Output: [(78 39 84 91) 39]
Test Case: 808 | Input/Output: [(-88 70 19 91) -88]
Test Case: 809 | Input/Output: [(85 -23 -14 80) -23]
Test Case: 810 | Input/Output: [(-9 -17 20 93) -17]
Test Case: 811 | Input/Output: [(-79 -6 17 -38) -79]
Test Case: 812 | Input/Output: [(-14 -7 -43 46) -43]
Test Case: 813 | Input/Output: [(56 29 11 10) 10]
Test Case: 814 | Input/Output: [(-14 -73 -94 37) -94]
Test Case: 815 | Input/Output: [(16 78 -81 -79) -81]
Test Case: 816 | Input/Output: [(55 95 -56 -51) -56]
Test Case: 817 | Input/Output: [(63 -54 -48 -51) -54]
Test Case: 818 | Input/Output: [(12 75 81 49) 12]
Test Case: 819 | Input/Output: [(28 -58 -92 59) -92]
Test Case: 820 | Input/Output: [(9 -61 27 16) -61]
Test Case: 821 | Input/Output: [(-63 71 -43 9) -63]
Test Case: 822 | Input/Output: [(-44 -94 -53 -38) -94]
Test Case: 823 | Input/Output: [(-10 6 -10 92) -10]
Test Case: 824 | Input/Output: [(-20 -74 48 66) -74]
Test Case: 825 | Input/Output: [(-25 -93 -53 -90) -93]
Test Case: 826 | Input/Output: [(34 29 25 -35) -35]
Test Case: 827 | Input/Output: [(-70 55 9 -100) -100]
Test Case: 828 | Input/Output: [(-49 -48 91 98) -49]
Test Case: 829 | Input/Output: [(-1 95 80 12) -1]
Test Case: 830 | Input/Output: [(-23 21 69 -70) -70]
Test Case: 831 | Input/Output: [(58 90 -93 48) -93]
Test Case: 832 | Input/Output: [(29 -37 15 -44) -44]
Test Case: 833 | Input/Output: [(-32 -54 98 88) -54]
Test Case: 834 | Input/Output: [(35 63 24 16) 16]
Test Case: 835 | Input/Output: [(79 -5 -12 100) -12]
Test Case: 836 | Input/Output: [(10 -74 -25 -57) -74]
Test Case: 837 | Input/Output: [(89 82 71 -33) -33]
Test Case: 838 | Input/Output: [(-55 28 82 -23) -55]
Test Case: 839 | Input/Output: [(78 50 -16 63) -16]
Test Case: 840 | Input/Output: [(-52 -43 92 55) -52]
Test Case: 841 | Input/Output: [(14 82 -98 -1) -98]
Test Case: 842 | Input/Output: [(54 82 -46 -61) -61]
Test Case: 843 | Input/Output: [(84 -93 -74 -76) -93]
Test Case: 844 | Input/Output: [(65 -20 86 -58) -58]
Test Case: 845 | Input/Output: [(17 -51 -56 40) -56]
Test Case: 846 | Input/Output: [(82 -41 59 47) -41]
Test Case: 847 | Input/Output: [(29 -30 96 95) -30]
Test Case: 848 | Input/Output: [(-100 -71 36 -14) -100]
Test Case: 849 | Input/Output: [(44 -77 -64 78) -77]
Test Case: 850 | Input/Output: [(10 -39 10 20) -39]
Test Case: 851 | Input/Output: [(62 -81 -53 -54) -81]
Test Case: 852 | Input/Output: [(-30 34 -77 15) -77]
Test Case: 853 | Input/Output: [(-30 93 49 -6) -30]
Test Case: 854 | Input/Output: [(-82 80 85 -78) -82]
Test Case: 855 | Input/Output: [(-15 27 54 10) -15]
Test Case: 856 | Input/Output: [(-87 29 -62 42) -87]
Test Case: 857 | Input/Output: [(57 43 28 96) 28]
Test Case: 858 | Input/Output: [(-92 -32 -32 39) -92]
Test Case: 859 | Input/Output: [(33 34 18 -70) -70]
Test Case: 860 | Input/Output: [(-33 79 -94 -89) -94]
Test Case: 861 | Input/Output: [(-90 -76 91 39) -90]
Test Case: 862 | Input/Output: [(-99 79 -10 -55) -99]
Test Case: 863 | Input/Output: [(-27 -4 -71 -37) -71]
Test Case: 864 | Input/Output: [(-100 39 18 34) -100]
Test Case: 865 | Input/Output: [(10 -52 53 -95) -95]
Test Case: 866 | Input/Output: [(12 -74 -69 -50) -74]
Test Case: 867 | Input/Output: [(85 -31 10 88) -31]
Test Case: 868 | Input/Output: [(46 85 7 82) 7]
Test Case: 869 | Input/Output: [(47 -72 8 -30) -72]
Test Case: 870 | Input/Output: [(-15 13 -4 -24) -24]
Test Case: 871 | Input/Output: [(-88 -32 -6 -45) -88]
Test Case: 872 | Input/Output: [(-59 39 -50 76) -59]
Test Case: 873 | Input/Output: [(21 11 -17 -33) -33]
Test Case: 874 | Input/Output: [(34 73 -80 51) -80]
Test Case: 875 | Input/Output: [(-88 -80 66 -55) -88]
Test Case: 876 | Input/Output: [(70 -18 97 -55) -55]
Test Case: 877 | Input/Output: [(-66 66 -98 -37) -98]
Test Case: 878 | Input/Output: [(54 -84 -53 80) -84]
Test Case: 879 | Input/Output: [(24 -69 -24 32) -69]
Test Case: 880 | Input/Output: [(25 -68 73 69) -68]
Test Case: 881 | Input/Output: [(-94 -67 -73 -4) -94]
Test Case: 882 | Input/Output: [(-4 -55 -57 36) -57]
Test Case: 883 | Input/Output: [(6 51 13 -88) -88]
Test Case: 884 | Input/Output: [(-34 -64 90 -17) -64]
Test Case: 885 | Input/Output: [(17 34 -35 -100) -100]
Test Case: 886 | Input/Output: [(-79 74 -78 19) -79]
Test Case: 887 | Input/Output: [(-21 -75 -13 17) -75]
Test Case: 888 | Input/Output: [(-87 70 75 94) -87]
Test Case: 889 | Input/Output: [(-86 -93 -51 -59) -93]
Test Case: 890 | Input/Output: [(-76 -86 28 54) -86]
Test Case: 891 | Input/Output: [(41 -67 -62 99) -67]
Test Case: 892 | Input/Output: [(25 -72 72 85) -72]
Test Case: 893 | Input/Output: [(47 9 96 56) 9]
Test Case: 894 | Input/Output: [(-3 38 27 82) -3]
Test Case: 895 | Input/Output: [(-71 89 -5 -29) -71]
Test Case: 896 | Input/Output: [(72 85 51 -28) -28]
Test Case: 897 | Input/Output: [(92 25 -92 56) -92]
Test Case: 898 | Input/Output: [(-75 5 -3 -51) -75]
Test Case: 899 | Input/Output: [(14 -54 2 -91) -91]
Test Case: 900 | Input/Output: [(-48 40 26 -17) -48]
Test Case: 901 | Input/Output: [(-18 -65 -53 54) -65]
Test Case: 902 | Input/Output: [(100 21 4 85) 4]
Test Case: 903 | Input/Output: [(31 -3 -60 1) -60]
Test Case: 904 | Input/Output: [(-33 12 50 99) -33]
Test Case: 905 | Input/Output: [(69 52 -67 38) -67]
Test Case: 906 | Input/Output: [(20 93 -33 -11) -33]
Test Case: 907 | Input/Output: [(-84 6 38 15) -84]
Test Case: 908 | Input/Output: [(14 -49 26 -29) -49]
Test Case: 909 | Input/Output: [(98 70 -83 -97) -97]
Test Case: 910 | Input/Output: [(-28 48 -67 -55) -67]
Test Case: 911 | Input/Output: [(87 3 30 96) 3]
Test Case: 912 | Input/Output: [(-83 -22 -9 -6) -83]
Test Case: 913 | Input/Output: [(73 -35 42 -87) -87]
Test Case: 914 | Input/Output: [(-16 89 89 -6) -16]
Test Case: 915 | Input/Output: [(-87 -30 100 -40) -87]
Test Case: 916 | Input/Output: [(92 -76 41 -35) -76]
Test Case: 917 | Input/Output: [(70 67 -99 -34) -99]
Test Case: 918 | Input/Output: [(65 92 -86 -72) -86]
Test Case: 919 | Input/Output: [(-88 79 -61 -23) -88]
Test Case: 920 | Input/Output: [(67 -100 0 -39) -100]
Test Case: 921 | Input/Output: [(2 -95 -83 -45) -95]
Test Case: 922 | Input/Output: [(-23 72 37 -93) -93]
Test Case: 923 | Input/Output: [(-3 59 -71 75) -71]
Test Case: 924 | Input/Output: [(-72 26 59 40) -72]
Test Case: 925 | Input/Output: [(88 -57 -64 35) -64]
Test Case: 926 | Input/Output: [(78 -63 71 2) -63]
Test Case: 927 | Input/Output: [(-62 -28 -12 -81) -81]
Test Case: 928 | Input/Output: [(-55 -67 32 77) -67]
Test Case: 929 | Input/Output: [(7 -1 25 -15) -15]
Test Case: 930 | Input/Output: [(-9 -45 -33 21) -45]
Test Case: 931 | Input/Output: [(-33 58 39 -66) -66]
Test Case: 932 | Input/Output: [(-13 44 -29 -4) -29]
Test Case: 933 | Input/Output: [(5 -56 52 -65) -65]
Test Case: 934 | Input/Output: [(83 88 16 -53) -53]
Test Case: 935 | Input/Output: [(-40 28 0 -95) -95]
Test Case: 936 | Input/Output: [(-7 -27 -14 -26) -27]
Test Case: 937 | Input/Output: [(-25 82 -78 -97) -97]
Test Case: 938 | Input/Output: [(93 -85 37 -1) -85]
Test Case: 939 | Input/Output: [(-47 52 -70 -56) -70]
Test Case: 940 | Input/Output: [(-20 -10 -55 49) -55]
Test Case: 941 | Input/Output: [(-59 83 92 -46) -59]
Test Case: 942 | Input/Output: [(6 -81 67 -65) -81]
Test Case: 943 | Input/Output: [(23 -29 99 98) -29]
Test Case: 944 | Input/Output: [(-25 -28 -5 -95) -95]
Test Case: 945 | Input/Output: [(-59 24 -55 9) -59]
Test Case: 946 | Input/Output: [(16 18 -4 92) -4]
Test Case: 947 | Input/Output: [(-84 25 -84 17) -84]
Test Case: 948 | Input/Output: [(-84 -43 -73 -30) -84]
Test Case: 949 | Input/Output: [(-41 19 -76 -2) -76]
Test Case: 950 | Input/Output: [(100 -45 -57 -32) -57]
Test Case: 951 | Input/Output: [(-37 81 43 -16) -37]
Test Case: 952 | Input/Output: [(6 7 -19 84) -19]
Test Case: 953 | Input/Output: [(15 -92 50 72) -92]
Test Case: 954 | Input/Output: [(-20 -83 -37 -16) -83]
Test Case: 955 | Input/Output: [(35 60 40 60) 35]
Test Case: 956 | Input/Output: [(51 89 -52 -42) -52]
Test Case: 957 | Input/Output: [(-2 58 -13 -80) -80]
Test Case: 958 | Input/Output: [(-19 10 26 -58) -58]
Test Case: 959 | Input/Output: [(3 -10 47 34) -10]
Test Case: 960 | Input/Output: [(-33 8 81 -36) -36]
Test Case: 961 | Input/Output: [(-27 51 76 18) -27]
Test Case: 962 | Input/Output: [(3 -35 84 92) -35]
Test Case: 963 | Input/Output: [(-62 42 -27 -48) -62]
Test Case: 964 | Input/Output: [(21 6 -31 -52) -52]
Test Case: 965 | Input/Output: [(30 -19 -79 27) -79]
Test Case: 966 | Input/Output: [(-81 69 -8 8) -81]
Test Case: 967 | Input/Output: [(-14 55 -87 25) -87]
Test Case: 968 | Input/Output: [(-56 70 -36 91) -56]
Test Case: 969 | Input/Output: [(-73 72 15 -68) -73]
Test Case: 970 | Input/Output: [(-26 -81 -22 -57) -81]
Test Case: 971 | Input/Output: [(39 76 -60 71) -60]
Test Case: 972 | Input/Output: [(-43 -69 54 -47) -69]
Test Case: 973 | Input/Output: [(-63 46 -8 -92) -92]
Test Case: 974 | Input/Output: [(-41 3 32 -68) -68]
Test Case: 975 | Input/Output: [(36 -7 33 74) -7]
Test Case: 976 | Input/Output: [(-7 -8 -93 19) -93]
Test Case: 977 | Input/Output: [(24 38 58 -67) -67]
Test Case: 978 | Input/Output: [(0 -16 -2 -75) -75]
Test Case: 979 | Input/Output: [(-53 -57 -11 27) -57]
Test Case: 980 | Input/Output: [(9 51 79 -67) -67]
Test Case: 981 | Input/Output: [(13 17 68 -27) -27]
Test Case: 982 | Input/Output: [(-78 -12 -41 -42) -78]
Test Case: 983 | Input/Output: [(36 -32 -19 43) -32]
Test Case: 984 | Input/Output: [(-78 67 3 28) -78]
Test Case: 985 | Input/Output: [(-83 -59 21 19) -83]
Test Case: 986 | Input/Output: [(-56 77 82 62) -56]
Test Case: 987 | Input/Output: [(-52 82 63 55) -52]
Test Case: 988 | Input/Output: [(-93 -54 -66 -77) -93]
Test Case: 989 | Input/Output: [(92 -77 -63 59) -77]
Test Case: 990 | Input/Output: [(-87 -94 -88 98) -94]
Test Case: 991 | Input/Output: [(-24 -44 -67 50) -67]
Test Case: 992 | Input/Output: [(-48 -53 -36 72) -53]
Test Case: 993 | Input/Output: [(-28 -73 27 53) -73]
Test Case: 994 | Input/Output: [(-52 -93 -69 73) -93]
Test Case: 995 | Input/Output: [(-29 75 71 100) -29]
Test Case: 996 | Input/Output: [(11 -39 38 -78) -78]
Test Case: 997 | Input/Output: [(-57 58 92 91) -57]
Test Case: 998 | Input/Output: [(-53 -5 -5 -56) -56]
Test Case: 999 | Input/Output: [(87 -13 -49 -67) -67]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -41 7 -47 115 126 52 124 117 52 -111 -21 -79 -5 93 9 117
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[99 20 99 99] 20] [[-47 -47 -89 -47] -89] [[52 -90 -90 -90] -90] [[-13 -13 -13 49] -13] [[-47 -47 57 -47] -47] [[69 64 64 64] 64] [[34 6 6 6] 6] [[49 -67 49 49] -67] [[-61 -42 -61 -61] -61] [[48 30 48 48] 30] [(-29 -29 -29 -29) -29] [(87 87 87 87) 87] [(3 3 3 3) 3] [(-51 -51 -51 -51) -51] [(-54 -54 -54 -54) -54] [(68 53 44 62) 44] [(100 78 96 34) 34] [(38 76 23 54) 23] [(50 44 87 46) 44] [(23 56 83 90) 23] [(48 51 46 73) 46] [(16 50 74 96) 16] [(40 74 89 70) 40] [(23 52 16 59) 16] [(6 74 95 48) 6] [(17 78 9 3) 3] [(45 69 36 68) 36] [(91 64 58 81) 58] [(0 61 98 28) 0] [(49 27 61 20) 20] [(16 60 100 46) 16] [(0 66 91 4) 0] [(83 78 24 19) 19] [(57 1 25 27) 1] [(51 42 43 69) 42] [(-41 -36 100 74) -41] [(-81 58 19 -31) -81] [(-37 -17 32 17) -37] [(32 16 49 97) 16] [(95 34 -6 32) -6] [(-69 -50 52 55) -69] [(-19 69 -75 65) -75] [(-38 -46 77 -33) -46] [(76 3 90 -100) -100] [(100 34 -89 -76) -89] [(-91 9 -84 2) -91] [(31 30 29 -59) -59] [(-24 84 -15 2) -24] [(79 -46 -71 10) -71] [(-59 -81 13 -100) -100] [(-43 -28 31 -9) -43] [(27 -33 -16 -43) -43] [(-35 88 80 98) -35] [(-31 -78 9 73) -78] [(-30 34 88 86) -30] [(-62 96 18 -59) -62] [(85 -26 88 30) -26] [(-41 -37 -9 -63) -63] [(-12 63 -98 -33) -98] [(-42 -12 6 -15) -42] [(12 2 18 -36) -36] [(63 -64 11 11) -64] [(26 3 69 -73) -73] [(-74 90 -58 15) -74] [(-12 46 -44 -97) -97] [(-59 84 -31 81) -59] [(-66 25 -76 60) -76] [(-29 41 90 -18) -29] [(-34 8 -12 -12) -34] [(47 29 -45 52) -45] [(84 -94 59 79) -94] [(-94 -52 97 55) -94] [(-71 70 37 -61) -71] [(-3 -82 -38 -30) -82] [(-84 -7 17 -41) -84] [(97 81 45 -45) -45] [(49 -62 16 -90) -90] [(15 -28 43 82) -28] [(62 83 -32 58) -32] [(-39 -98 -72 61) -98] [(-18 1 -82 81) -82] [(-12 36 -56 45) -56] [(8 -58 -73 93) -73] [(19 -18 -29 -34) -34] [(-29 98 -84 53) -84] [(-76 -42 -18 90) -76] [(0 29 -48 22) -48] [(66 26 -60 -71) -71] [(-53 -84 -10 -29) -84] [(20 17 98 -31) -31] [(-65 -66 32 -73) -73] [(69 -7 -37 18) -37] [(-1 -9 -86 -53) -86] [(28 -55 87 15) -55] [(-56 -89 30 -92) -92])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_27} {:close 0, :instruction tag_exec_934} {:close 1, :instruction -57} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction -70} {:close 1, :instruction boolean_eq} {:close 0, :instruction 91} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_745} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or})
Lexicase best program: (in1 integer_mult exec_empty integer_mult exec_do*while (integer_gt boolean_flush print_integer) integer_mod exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_max integer_add in2 exec_k (exec_s (integer_mod integer_mult) (integer_eq exec_empty integer_yank integer_gt exec_swap (boolean_invert_first_then_and) (exec_do*times () exec_k (integer_fromboolean integer_pop integer_yankdup) (boolean_stackdepth in1 boolean_rot boolean_dup_items exec_do*times () in2) boolean_dup integer_inc exec_empty exec_yank integer_gte print_integer integer_empty integer_div integer_yankdup tag_integer_27) tag_exec_934 (-57) integer_swap boolean_dup print_boolean exec_noop integer_empty exec_dup () exec_flush integer_swap exec_noop boolean_shove) (exec_pop (exec_do*times (integer_mult -70 boolean_eq) 91 boolean_dup_times) exec_stackdepth integer_gt) integer_dup_items integer_gt exec_dup_items tag_boolean_745 integer_swap) (integer_yank boolean_and exec_dup_items) integer_dec exec_yankdup exec_when (integer_eq) integer_add exec_stackdepth in3 exec_s (integer_yankdup print_exec (integer_dec boolean_flush) integer_flush boolean_or) () ())) () ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 120
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_27} {:close 0, :instruction tag_exec_934} {:close 1, :instruction -57} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction -70} {:close 1, :instruction boolean_eq} {:close 0, :instruction 91} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_745} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or})
Zero cases best program: (in1 integer_mult exec_empty integer_mult exec_do*while (integer_gt boolean_flush print_integer) integer_mod exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_max integer_add in2 exec_k (exec_s (integer_mod integer_mult) (integer_eq exec_empty integer_yank integer_gt exec_swap (boolean_invert_first_then_and) (exec_do*times () exec_k (integer_fromboolean integer_pop integer_yankdup) (boolean_stackdepth in1 boolean_rot boolean_dup_items exec_do*times () in2) boolean_dup integer_inc exec_empty exec_yank integer_gte print_integer integer_empty integer_div integer_yankdup tag_integer_27) tag_exec_934 (-57) integer_swap boolean_dup print_boolean exec_noop integer_empty exec_dup () exec_flush integer_swap exec_noop boolean_shove) (exec_pop (exec_do*times (integer_mult -70 boolean_eq) 91 boolean_dup_times) exec_stackdepth integer_gt) integer_dup_items integer_gt exec_dup_items tag_boolean_745 integer_swap) (integer_yank boolean_and exec_dup_items) integer_dec exec_yankdup exec_when (integer_eq) integer_add exec_stackdepth in3 exec_s (integer_yankdup print_exec (integer_dec boolean_flush) integer_flush boolean_or) () ())) () ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 120
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 8 3 3 5 11 7 3 3 1)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (11 8 3 3 5 11 7 3 3 1)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_987} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_608} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap})
Best program: (integer_mult exec_do*range (boolean_not) integer_yankdup boolean_yank print_integer integer_dec integer_sub integer_lt boolean_dup_times integer_gt integer_rot exec_do*range (integer_empty integer_max integer_stackdepth integer_gt integer_yank integer_sub integer_stackdepth boolean_invert_second_then_and boolean_shove tagged_987 integer_gte integer_inc boolean_frominteger exec_do*count (exec_do*count () boolean_yankdup integer_pop exec_dup_times (integer_empty) exec_when (boolean_eq boolean_xor boolean_rot) exec_yankdup) in2 integer_dec) boolean_rot exec_stackdepth exec_stackdepth exec_do*count (boolean_empty) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items) in3 exec_empty integer_inc exec_when (boolean_invert_second_then_and integer_mod exec_do*range (exec_rot (integer_shove boolean_stackdepth exec_flush exec_noop) (exec_do*while (tag_boolean_608 in3 exec_pop (integer_min exec_do*count () boolean_invert_second_then_and integer_div boolean_stackdepth boolean_shove integer_gte) exec_do*while (integer_yankdup print_exec (exec_stackdepth exec_when () integer_min integer_eq boolean_flush exec_empty) integer_lte boolean_swap integer_lt boolean_frominteger exec_shove (boolean_swap boolean_invert_first_then_and boolean_rot) exec_dup_times (exec_rot () (print_exec () print_integer boolean_frominteger boolean_swap) ())))) ())))
Errors: [0 0 1 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 97
Size: 126
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 9.945
Median total errors in population: 10
Error averages by case: (0.989 0.992 0.997 0.997 0.995 0.989 0.993 0.997 0.997 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.48
Average program size in population (points): 69.412
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 516852
--- Timings ---
Current time: 1559584468059 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 29.3%
Fitness Testing:      1.8 seconds, 67.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_938} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger})
Lexicase best program: (in1 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_yank exec_empty) exec_do*while (boolean_stackdepth boolean_dup_items integer_yank integer_div boolean_xor) tagged_339 exec_dup_times () integer_inc boolean_yank integer_max exec_empty boolean_flush boolean_shove boolean_or boolean_pop exec_s (integer_swap boolean_stackdepth) (exec_do*times () exec_do*while (integer_lt) integer_dec) (integer_gte) integer_shove boolean_and boolean_eq integer_dup_items exec_when (integer_gt integer_sub tag_integer_938 exec_when (exec_while (integer_fromboolean print_integer boolean_invert_first_then_and exec_pop (boolean_frominteger)))))
Lexicase best errors: [1 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_938} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger})
Zero cases best program: (in1 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_yank exec_empty) exec_do*while (boolean_stackdepth boolean_dup_items integer_yank integer_div boolean_xor) tagged_339 exec_dup_times () integer_inc boolean_yank integer_max exec_empty boolean_flush boolean_shove boolean_or boolean_pop exec_s (integer_swap boolean_stackdepth) (exec_do*times () exec_do*while (integer_lt) integer_dec) (integer_gte) integer_shove boolean_and boolean_eq integer_dup_items exec_when (integer_gt integer_sub tag_integer_938 exec_when (exec_while (integer_fromboolean print_integer boolean_invert_first_then_and exec_pop (boolean_frominteger)))))
Zero cases best errors: [1 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 1 1 489 1 490 489 275 879 487)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (274 1 1 489 1 490 489 275 879 487)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_27} {:close 0, :instruction tag_exec_934} {:close 1, :instruction -57} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction -70} {:close 1, :instruction boolean_eq} {:close 0, :instruction 91} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_745} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or})
Best program: (in1 integer_mult exec_empty integer_mult exec_do*while (integer_gt boolean_flush print_integer) integer_mod exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_max integer_add in2 exec_k (exec_s (integer_mod integer_mult) (integer_eq exec_empty integer_yank integer_gt exec_swap (boolean_invert_first_then_and) (exec_do*times () exec_k (integer_fromboolean integer_pop integer_yankdup) (boolean_stackdepth in1 boolean_rot boolean_dup_items exec_do*times () in2) boolean_dup integer_inc exec_empty exec_yank integer_gte print_integer integer_empty integer_div integer_yankdup tag_integer_27) tag_exec_934 (-57) integer_swap boolean_dup print_boolean exec_noop integer_empty exec_dup () exec_flush integer_swap exec_noop boolean_shove) (exec_pop (exec_do*times (integer_mult -70 boolean_eq) 91 boolean_dup_times) exec_stackdepth integer_gt) integer_dup_items integer_gt exec_dup_items tag_boolean_745 integer_swap) (integer_yank boolean_and exec_dup_items) integer_dec exec_yankdup exec_when (integer_eq) integer_add exec_stackdepth in3 exec_s (integer_yankdup print_exec (integer_dec boolean_flush) integer_flush boolean_or) () ())) () ()) ())
Errors: [1 1 1 0 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 92
Size: 120
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 6.614
Median total errors in population: 7
Error averages by case: (0.726 0.999 0.999 0.511 0.999 0.51 0.511 0.725 0.121 0.513)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.342
Average program size in population (points): 90.853
Average percent parens in population: 0.270
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.505
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1063681
--- Timings ---
Current time: 1559584470717 milliseconds
Total Time:           5.8 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.5 seconds, 43.0%
Fitness Testing:      2.5 seconds, 43.5%
Report:               0.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_27} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_608} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap})
Lexicase best program: (in1 integer_mult exec_empty integer_mult exec_do*while (integer_gt boolean_flush print_integer integer_mod) exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_max integer_add in2 exec_k (exec_s (integer_mod integer_mult) (integer_eq exec_empty integer_yank integer_gt exec_swap (boolean_invert_first_then_and) (exec_do*times () exec_k (integer_fromboolean integer_pop integer_yankdup boolean_stackdepth in1 boolean_rot boolean_dup_items exec_do*times () in2) (boolean_dup integer_inc exec_empty exec_yank integer_gte print_integer integer_empty integer_div) integer_yankdup tag_integer_27) boolean_invert_second_then_and integer_mod exec_do*range (exec_rot (integer_shove boolean_stackdepth exec_flush exec_noop) (exec_do*while (tag_boolean_608 in3 exec_pop (integer_min exec_do*count () boolean_invert_second_then_and integer_div boolean_stackdepth boolean_shove integer_gte) exec_do*while (integer_yankdup print_exec (exec_stackdepth exec_when () integer_min integer_eq boolean_flush exec_empty) integer_lte boolean_swap integer_lt boolean_frominteger exec_shove (boolean_swap boolean_invert_first_then_and boolean_rot) exec_dup_times (exec_rot () (print_exec () print_integer boolean_frominteger boolean_swap) ())))) ())) ()) ())) () ()) ())
Lexicase best errors: [1 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 126
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_27} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_608} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap})
Zero cases best program: (in1 integer_mult exec_empty integer_mult exec_do*while (integer_gt boolean_flush print_integer integer_mod) exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_max integer_add in2 exec_k (exec_s (integer_mod integer_mult) (integer_eq exec_empty integer_yank integer_gt exec_swap (boolean_invert_first_then_and) (exec_do*times () exec_k (integer_fromboolean integer_pop integer_yankdup boolean_stackdepth in1 boolean_rot boolean_dup_items exec_do*times () in2) (boolean_dup integer_inc exec_empty exec_yank integer_gte print_integer integer_empty integer_div) integer_yankdup tag_integer_27) boolean_invert_second_then_and integer_mod exec_do*range (exec_rot (integer_shove boolean_stackdepth exec_flush exec_noop) (exec_do*while (tag_boolean_608 in3 exec_pop (integer_min exec_do*count () boolean_invert_second_then_and integer_div boolean_stackdepth boolean_shove integer_gte) exec_do*while (integer_yankdup print_exec (exec_stackdepth exec_when () integer_min integer_eq boolean_flush exec_empty) integer_lte boolean_swap integer_lt boolean_frominteger exec_shove (boolean_swap boolean_invert_first_then_and boolean_rot) exec_dup_times (exec_rot () (print_exec () print_integer boolean_frominteger boolean_swap) ())))) ())) ()) ())) () ()) ())
Zero cases best errors: [1 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 126
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 705 408 296 407 203 409 407 614 205)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (205 705 408 296 407 203 409 407 614 205)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_938} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger})
Best program: (in1 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_yank exec_empty) exec_do*while (integer_stackdepth boolean_dup_items integer_yank integer_div boolean_xor) tagged_339 exec_dup_times () integer_inc boolean_yank integer_max exec_empty boolean_flush boolean_shove boolean_or exec_dup_times (exec_s (integer_swap boolean_stackdepth) (exec_do*times () exec_do*while (integer_lt) integer_dec) (integer_gte) integer_shove) boolean_and boolean_eq integer_dup_items exec_when (integer_gt integer_sub tag_integer_938 exec_when (exec_while (integer_fromboolean boolean_swap boolean_invert_first_then_and exec_pop (boolean_frominteger)))))
Errors: [1 0 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 54
Size: 68
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 6.141
Median total errors in population: 6
Error averages by case: (0.795 0.295 0.592 0.704 0.593 0.797 0.591 0.593 0.386 0.795)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.213
Average program size in population (points): 88.132
Average percent parens in population: 0.233
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.1395
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1962753
--- Timings ---
Current time: 1559584474561 milliseconds
Total Time:           9.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.0 seconds, 52.4%
Fitness Testing:      3.5 seconds, 36.9%
Report:               0.9 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_987} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 2, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_608} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_mult exec_do*range (boolean_not) integer_yankdup integer_sub integer_lt boolean_dup_times integer_gt integer_rot exec_do*range (integer_empty integer_max integer_stackdepth integer_gt integer_yank integer_sub) integer_stackdepth boolean_invert_second_then_and boolean_shove tagged_987 integer_gte integer_inc boolean_frominteger exec_do*count (exec_do*count (boolean_yankdup integer_pop exec_dup_times (integer_empty) exec_when (boolean_eq boolean_xor boolean_rot) exec_yankdup) in2 integer_dec) boolean_rot exec_stackdepth exec_stackdepth exec_do*count (boolean_empty) exec_y_when_autoconstructing (exec_s (tag_integer_819) () (integer_add) in1) print_integer integer_dup_items in3 exec_empty integer_inc exec_when (boolean_invert_second_then_and integer_mod exec_do*range (exec_rot () (integer_shove boolean_stackdepth exec_flush exec_noop) () exec_do*while (tag_boolean_608 in3 exec_pop (integer_min exec_do*count () boolean_invert_second_then_and integer_div boolean_stackdepth boolean_shove integer_gte) exec_do*while (integer_yankdup print_exec () exec_do*while (integer_yankdup print_exec (exec_stackdepth exec_when () integer_min integer_eq boolean_flush exec_empty) integer_lte boolean_swap integer_lt boolean_frominteger exec_shove (boolean_swap boolean_invert_first_then_and boolean_rot) exec_dup_times (exec_rot () (print_exec () print_integer boolean_frominteger boolean_swap) ())))))))
Lexicase best errors: [1 1 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 128
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_987} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 2, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_608} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_mult exec_do*range (boolean_not) integer_yankdup integer_sub integer_lt boolean_dup_times integer_gt integer_rot exec_do*range (integer_empty integer_max integer_stackdepth integer_gt integer_yank integer_sub) integer_stackdepth boolean_invert_second_then_and boolean_shove tagged_987 integer_gte integer_inc boolean_frominteger exec_do*count (exec_do*count (boolean_yankdup integer_pop exec_dup_times (integer_empty) exec_when (boolean_eq boolean_xor boolean_rot) exec_yankdup) in2 integer_dec) boolean_rot exec_stackdepth exec_stackdepth exec_do*count (boolean_empty) exec_y_when_autoconstructing (exec_s (tag_integer_819) () (integer_add) in1) print_integer integer_dup_items in3 exec_empty integer_inc exec_when (boolean_invert_second_then_and integer_mod exec_do*range (exec_rot () (integer_shove boolean_stackdepth exec_flush exec_noop) () exec_do*while (tag_boolean_608 in3 exec_pop (integer_min exec_do*count () boolean_invert_second_then_and integer_div boolean_stackdepth boolean_shove integer_gte) exec_do*while (integer_yankdup print_exec () exec_do*while (integer_yankdup print_exec (exec_stackdepth exec_when () integer_min integer_eq boolean_flush exec_empty) integer_lte boolean_swap integer_lt boolean_frominteger exec_shove (boolean_swap boolean_invert_first_then_and boolean_rot) exec_dup_times (exec_rot () (print_exec () print_integer boolean_frominteger boolean_swap) ())))))))
Zero cases best errors: [1 1 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 128
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (298 1000 1000 473 473 106 473 473 299 300)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (298 0 0 473 473 106 473 473 299 300)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_938} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger})
Best program: (in1 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_yank exec_empty) exec_do*while (boolean_stackdepth boolean_dup_items integer_gt integer_div boolean_xor) tagged_339 exec_dup_times () integer_inc boolean_yank exec_empty exec_empty boolean_flush boolean_shove boolean_or boolean_pop exec_s (integer_swap boolean_stackdepth) (exec_do*times () exec_do*while (integer_lt) integer_dec) (integer_gte) integer_shove boolean_and boolean_eq integer_dup_items exec_when (integer_gt integer_sub tag_integer_938 exec_when (exec_while (integer_fromboolean print_integer boolean_invert_first_then_and exec_pop (boolean_frominteger)))))
Errors: [1 1 1 0 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 54
Size: 67
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 7.105
Median total errors in population: 7
Error averages by case: (0.702 1.0 1.0 0.527 0.527 0.894 0.527 0.527 0.701 0.7)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 68.237
Average program size in population (points): 90.978
Average percent parens in population: 0.247
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.567
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2626080
--- Timings ---
Current time: 1559584478764 milliseconds
Total Time:          13.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.6 seconds, 57.7%
Fitness Testing:      4.1 seconds, 31.3%
Report:               1.3 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_209} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_938} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_pop integer_max boolean_stackdepth boolean_dup_times exec_rot (in3 integer_stackdepth boolean_dup boolean_empty boolean_empty exec_swap () () in3 exec_swap () (exec_s_when_autoconstructing (exec_while () print_integer exec_flush) (boolean_dup_items integer_dup_times integer_gte integer_gt) (boolean_frominteger boolean_and exec_k (tagged_209 boolean_pop boolean_invert_second_then_and integer_gte exec_k_when_autoconstructing (integer_dec exec_do*times (boolean_stackdepth integer_eq)) (integer_dup exec_k_when_autoconstructing (integer_stackdepth integer_gte) (integer_shove) boolean_and boolean_eq integer_dup_items exec_when (integer_gt integer_sub tag_integer_938 exec_when (exec_while (integer_fromboolean print_integer boolean_yankdup) integer_dup_items integer_dup_items)))) ()))) () ())
Lexicase best errors: [0 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_209} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_938} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_pop integer_max boolean_stackdepth boolean_dup_times exec_rot (in3 integer_stackdepth boolean_dup boolean_empty boolean_empty exec_swap () () in3 exec_swap () (exec_s_when_autoconstructing (exec_while () print_integer exec_flush) (boolean_dup_items integer_dup_times integer_gte integer_gt) (boolean_frominteger boolean_and exec_k (tagged_209 boolean_pop boolean_invert_second_then_and integer_gte exec_k_when_autoconstructing (integer_dec exec_do*times (boolean_stackdepth integer_eq)) (integer_dup exec_k_when_autoconstructing (integer_stackdepth integer_gte) (integer_shove) boolean_and boolean_eq integer_dup_items exec_when (integer_gt integer_sub tag_integer_938 exec_when (exec_while (integer_fromboolean print_integer boolean_yankdup) integer_dup_items integer_dup_items)))) ()))) () ())
Zero cases best errors: [0 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (342 347 342 349 349 432 347 342 112 436)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (342 347 342 349 349 432 347 342 112 436)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction 12} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when})
Best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing () (integer_yank in3) (integer_sub) boolean_xor integer_rot boolean_flush integer_add print_integer exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty exec_if (boolean_shove boolean_or boolean_pop exec_s (integer_swap boolean_stackdepth) (exec_do*times () exec_do*while (integer_lt) integer_dec) (integer_gte) integer_shove) (boolean_and boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min integer_empty 12 boolean_eq integer_dup integer_shove boolean_xor integer_min integer_stackdepth integer_empty exec_k (exec_k (exec_k () (integer_fromboolean exec_yankdup integer_yank integer_mod integer_lte) integer_shove) (exec_when ())) ())) ())))))
Errors: [0 0 0 0 0 1 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 61
Size: 86
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 6.602
Median total errors in population: 8
Error averages by case: (0.658 0.653 0.658 0.651 0.651 0.568 0.653 0.658 0.888 0.564)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.552
Average program size in population (points): 90.528
Average percent parens in population: 0.250
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.007875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3218844
--- Timings ---
Current time: 1559584481727 milliseconds
Total Time:          16.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.6 seconds, 57.4%
Fitness Testing:      4.7 seconds, 28.3%
Report:               2.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction 12} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing () (integer_yank in3) (integer_sub) boolean_xor integer_rot boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (integer_yankdup) boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and boolean_xor exec_flush integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_empty 12 boolean_eq integer_dup integer_shove boolean_xor integer_min integer_stackdepth integer_empty exec_k (exec_k (exec_k () (integer_fromboolean exec_yankdup integer_yank exec_dup_items integer_lte) integer_shove) (exec_when ())) ())) ()))))) ())))
Lexicase best errors: [0 1 1 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 88
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction 12} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing () (integer_yank in3) (integer_sub) boolean_xor integer_rot boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (integer_yankdup) boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and boolean_xor exec_flush integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_empty 12 boolean_eq integer_dup integer_shove boolean_xor integer_min integer_stackdepth integer_empty exec_k (exec_k (exec_k () (integer_fromboolean exec_yankdup integer_yank exec_dup_items integer_lte) integer_shove) (exec_when ())) ())) ()))))) ())))
Zero cases best errors: [0 1 1 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 88
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (696 94 1 114 1 1000 94 554 109 695)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (696 94 1 114 1 0 94 554 109 695)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 0, :instruction -28} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and})
Best program: (integer_pop integer_max boolean_stackdepth boolean_dup_times exec_rot (integer_min boolean_invert_second_then_and exec_pop (exec_dup_items) exec_eq integer_max exec_s_when_autoconstructing (exec_k (in3 print_integer exec_do*while (integer_pop) boolean_or boolean_or) (integer_add integer_dup_items integer_mod integer_dup_items exec_if () () boolean_flush exec_shove (exec_when (integer_dup exec_do*range ()) integer_fromboolean tag_exec_760 (boolean_frominteger boolean_stackdepth print_newline integer_min exec_yankdup) integer_empty) exec_dup_times (exec_swap (integer_div exec_shove () -28 boolean_invert_second_then_and integer_yank integer_dup_times exec_dup_times (boolean_swap exec_yankdup boolean_yankdup) integer_shove integer_dup_items exec_do*range (boolean_pop)) (integer_swap exec_pop (integer_lte integer_rot exec_do*count (boolean_and exec_s (exec_k_when_autoconstructing (boolean_flush exec_dup_times () integer_mult integer_eq integer_dup exec_y_when_autoconstructing (exec_yank print_boolean boolean_shove) exec_noop integer_empty) (exec_stackdepth integer_mod exec_do*count (integer_inc print_newline integer_div integer_gt integer_rot integer_dec)) integer_gte boolean_and) () ())))))) () ()) () ())
Errors: [0 1 1 1 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 83
Size: 116
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 7.642
Median total errors in population: 7
Error averages by case: (0.304 0.906 0.999 0.886 0.999 1.0 0.906 0.446 0.891 0.305)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 69.579
Average program size in population (points): 96.314
Average percent parens in population: 0.275
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.6488125
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3620898
--- Timings ---
Current time: 1559584484492 milliseconds
Total Time:          19.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.7 seconds, 59.7%
Fitness Testing:      5.2 seconds, 26.4%
Report:               2.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction 12} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing () (integer_yank in3) (integer_sub) boolean_xor integer_rot boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty boolean_not boolean_dup exec_s () (exec_when (integer_gt integer_lt boolean_invert_first_then_and exec_eq integer_mult exec_s_when_autoconstructing (in4 integer_div exec_k_when_autoconstructing () () exec_k_when_autoconstructing (integer_mult) (exec_dup_times (in4 integer_yankdup boolean_invert_second_then_and boolean_xor integer_lte integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_empty 12 boolean_eq integer_dup integer_shove boolean_xor integer_min integer_stackdepth integer_empty exec_k (exec_k (exec_k () (integer_fromboolean exec_yankdup exec_when (exec_dup_items integer_lte) integer_shove) exec_when ()) ()) ())) ()))) () ())) ())) ()))))
Lexicase best errors: [1 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 108
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction 12} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing () (integer_yank in3) (integer_sub) boolean_xor integer_rot boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty boolean_not boolean_dup exec_s () (exec_when (integer_gt integer_lt boolean_invert_first_then_and exec_eq integer_mult exec_s_when_autoconstructing (in4 integer_div exec_k_when_autoconstructing () () exec_k_when_autoconstructing (integer_mult) (exec_dup_times (in4 integer_yankdup boolean_invert_second_then_and boolean_xor integer_lte integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_empty 12 boolean_eq integer_dup integer_shove boolean_xor integer_min integer_stackdepth integer_empty exec_k (exec_k (exec_k () (integer_fromboolean exec_yankdup exec_when (exec_dup_items integer_lte) integer_shove) exec_when ()) ()) ())) ()))) () ())) ())) ()))))
Zero cases best errors: [1 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 108
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (222 280 223 181 504 279 179 180 894 213)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (222 280 223 181 504 279 179 180 894 213)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_209} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_27} {:close 0, :instruction tag_exec_934} {:close 1, :instruction -57} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction -70} {:close 1, :instruction boolean_eq} {:close 0, :instruction 91} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_745} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or})
Best program: (integer_pop integer_max boolean_stackdepth boolean_dup_times exec_rot (in3 integer_stackdepth boolean_dup boolean_empty boolean_empty exec_swap () () in3 exec_swap () (exec_s_when_autoconstructing (exec_while () print_integer exec_flush) (exec_do*count (integer_dup_times integer_gte integer_gt) boolean_frominteger boolean_and exec_k (tagged_209 boolean_pop exec_flush integer_gte exec_k_when_autoconstructing (integer_dec exec_do*times (boolean_invert_second_then_and integer_eq)) (integer_dup exec_k_when_autoconstructing (integer_stackdepth exec_y_when_autoconstructing (print_exec (exec_y_when_autoconstructing (boolean_xor integer_dup integer_empty boolean_not boolean_dup in3 exec_empty integer_inc exec_when (boolean_invert_second_then_and print_integer integer_empty integer_div integer_yankdup tag_integer_27) tag_exec_934 (-57) integer_swap boolean_dup print_boolean exec_noop integer_empty exec_dup () exec_flush integer_swap exec_noop boolean_shove) exec_pop (exec_do*times (integer_mult -70 boolean_eq) 91 boolean_dup_times) exec_stackdepth integer_gt) integer_dup_items integer_gt exec_dup_items tag_boolean_745 integer_swap) integer_yank boolean_and exec_dup_items) (integer_dec exec_yankdup exec_when (integer_eq) integer_add exec_stackdepth in3 integer_flush integer_yankdup print_exec (integer_dec boolean_eq) integer_flush boolean_or))) ()) ())) () ())
Errors: [1 0 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 97
Size: 127
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 6.845
Median total errors in population: 6
Error averages by case: (0.778 0.72 0.777 0.819 0.496 0.721 0.821 0.82 0.106 0.787)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.128
Average program size in population (points): 83.19
Average percent parens in population: 0.248
Minimum age in population: 6.0
Maximum age in population: 11.34375
Average age in population: 9.32996875
Median age in population: 9.390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4221791
--- Timings ---
Current time: 1559584487308 milliseconds
Total Time:          22.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.7 seconds, 61.0%
Fitness Testing:      5.7 seconds, 25.7%
Report:               2.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction -70} {:close 1, :instruction boolean_eq} {:close 1, :instruction 91} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction tagged_423} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_shove boolean_rot exec_shove () integer_dup_times integer_yank in3 integer_sub boolean_xor integer_rot boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (exec_do*while (boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and exec_dup_times (exec_flush integer_pop boolean_dup) exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_flush integer_swap exec_noop boolean_shove) exec_pop (exec_do*times (integer_mult -70 boolean_eq) 91) boolean_dup_times) (exec_s_when_autoconstructing (in4 tagged_423 exec_k_when_autoconstructing () () exec_k_when_autoconstructing (integer_mult integer_lt boolean_empty) ()) () ())))))) ())))))
Lexicase best errors: [1 1 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 89
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction -70} {:close 1, :instruction boolean_eq} {:close 1, :instruction 91} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction tagged_423} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_shove boolean_rot exec_shove () integer_dup_times integer_yank in3 integer_sub boolean_xor integer_rot boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (exec_do*while (boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and exec_dup_times (exec_flush integer_pop boolean_dup) exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_flush integer_swap exec_noop boolean_shove) exec_pop (exec_do*times (integer_mult -70 boolean_eq) 91) boolean_dup_times) (exec_s_when_autoconstructing (in4 tagged_423 exec_k_when_autoconstructing () () exec_k_when_autoconstructing (integer_mult integer_lt boolean_empty) ()) () ())))))) ())))))
Zero cases best errors: [1 1 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 89
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (79 278 79 79 250 251 535 250 285 275)
Population mean number of elite cases: 2.36
Count of perfect (error zero) individuals by case: (79 278 79 79 250 251 535 250 285 275)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_751} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and})
Best program: (integer_pop integer_max boolean_stackdepth boolean_dup_times exec_rot (in3 integer_stackdepth boolean_dup exec_k (in3 print_integer exec_do*while (integer_pop) boolean_or boolean_or) (integer_add integer_dup_items integer_mod integer_dup_items exec_if () (boolean_flush exec_shove (exec_when (integer_dup exec_do*range ()) integer_fromboolean tag_exec_760 (print_boolean boolean_stackdepth print_newline integer_min exec_do*times () integer_empty) exec_dup_times (exec_swap (integer_div tag_exec_760 (print_boolean boolean_stackdepth print_newline integer_min boolean_dup_times) integer_empty) (exec_dup_times (exec_yankdup) boolean_yankdup) integer_dup_items integer_dup_items exec_do*range (boolean_pop)) integer_swap exec_pop (integer_lte integer_rot exec_do*count (boolean_and exec_s (exec_k_when_autoconstructing (tagged_751 integer_gte) (integer_mult integer_eq integer_dup exec_y_when_autoconstructing (exec_rot (print_boolean boolean_shove) (exec_while (integer_empty exec_stackdepth integer_mod exec_do*count (integer_inc print_newline integer_div integer_gt integer_rot integer_dec)) integer_gte boolean_and) ()))) () ())))))) () ())
Errors: [1 1 1 1 0 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 80
Size: 113
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 7.639
Median total errors in population: 7
Error averages by case: (0.921 0.722 0.921 0.921 0.75 0.749 0.465 0.75 0.715 0.725)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.293
Average program size in population (points): 77.937
Average percent parens in population: 0.247
Minimum age in population: 7.625
Maximum age in population: 13.25
Average age in population: 10.969234375
Median age in population: 11.09375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4757496
--- Timings ---
Current time: 1559584490183 milliseconds
Total Time:          25.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.8 seconds, 62.5%
Fitness Testing:      6.3 seconds, 24.8%
Report:               3.1 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: 49                 
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 54                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 90                 
Correct output: 46                  | Program output: 73                 
Correct output: 16                  | Program output: 96                 
Correct output: 40                  | Program output: 70                 
Correct output: 16                  | Program output: 59                 
Correct output: 6                   | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 68                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 28                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 46                 
Correct output: 0                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 69                 
Correct output: -41                 | Program output: 74                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: 17                 
Correct output: 16                  | Program output: 97                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: 55                 
Correct output: -75                 | Program output: 65                 
Correct output: -46                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: 2                  
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: 2                  
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -9                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: 98                 
Correct output: -78                 | Program output: 73                 
Correct output: -30                 | Program output: 86                 
Correct output: -62                 | Program output: -59                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: 81                 
Correct output: -76                 | Program output: 60                 
Correct output: -29                 | Program output: -18                
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: 52                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: 55                 
Correct output: -71                 | Program output: -61                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 82                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: 61                 
Correct output: -82                 | Program output: 81                 
Correct output: -56                 | Program output: 45                 
Correct output: -73                 | Program output: 93                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 53                 
Correct output: -76                 | Program output: 90                 
Correct output: -48                 | Program output: 22                 
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -29                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_318} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 0, :instruction -28} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count})
Lexicase best program: (in4 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (exec_noop exec_eq tag_exec_318 (exec_s_when_autoconstructing (exec_k (in3 print_integer exec_do*while (integer_pop boolean_or boolean_or) integer_add integer_dup_items integer_mod integer_dup_items exec_if (boolean_flush exec_shove (exec_when (integer_dup boolean_yankdup exec_when (integer_mult boolean_flush exec_shove (exec_when (integer_dup exec_do*range ()) integer_fromboolean tag_exec_760 (print_boolean boolean_stackdepth print_newline integer_min exec_yankdup) integer_empty) exec_dup_times (exec_swap (integer_div exec_shove () -28 boolean_invert_second_then_and integer_yank integer_dup_times exec_dup_times (boolean_swap exec_yankdup) exec_stackdepth integer_dup_items integer_dup_items exec_do*range (boolean_pop)) (integer_swap exec_pop (boolean_dup_items integer_rot exec_do*count ()))))))) ()) ()) () ())))
Lexicase best errors: [0 1 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 90
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_318} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 0, :instruction -28} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count})
Zero cases best program: (in4 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (exec_noop exec_eq tag_exec_318 (exec_s_when_autoconstructing (exec_k (in3 print_integer exec_do*while (integer_pop boolean_or boolean_or) integer_add integer_dup_items integer_mod integer_dup_items exec_if (boolean_flush exec_shove (exec_when (integer_dup boolean_yankdup exec_when (integer_mult boolean_flush exec_shove (exec_when (integer_dup exec_do*range ()) integer_fromboolean tag_exec_760 (print_boolean boolean_stackdepth print_newline integer_min exec_yankdup) integer_empty) exec_dup_times (exec_swap (integer_div exec_shove () -28 boolean_invert_second_then_and integer_yank integer_dup_times exec_dup_times (boolean_swap exec_yankdup) exec_stackdepth integer_dup_items integer_dup_items exec_do*range (boolean_pop)) (integer_swap exec_pop (boolean_dup_items integer_rot exec_do*count ()))))))) ()) ()) () ())))
Zero cases best errors: [0 1 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 90
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (906 288 207 207 207 312 288 584 207 288)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (906 288 207 207 207 312 288 584 207 288)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 0, :instruction -28} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and})
Best program: (in4 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_yank exec_empty) exec_do*while (boolean_stackdepth boolean_dup_items integer_yank integer_div boolean_xor) tagged_339 exec_dup_times () integer_inc boolean_yank integer_max exec_empty exec_when (integer_dup exec_do*range ()) integer_fromboolean tag_exec_760 (print_boolean boolean_stackdepth print_newline integer_min exec_yankdup) integer_empty exec_dup_times (exec_swap (integer_div exec_shove () -28 boolean_invert_second_then_and integer_yank integer_dup_times exec_dup_times (boolean_swap exec_yankdup) boolean_yankdup) (integer_dup_items integer_dup_items exec_do*range (boolean_pop)) integer_swap exec_pop (integer_lte integer_rot exec_do*count (boolean_and exec_s (exec_k_when_autoconstructing (boolean_flush exec_dup_times () integer_mult integer_eq integer_dup exec_y_when_autoconstructing (exec_rot (print_boolean boolean_shove) (exec_noop integer_empty exec_stackdepth integer_mod exec_do*count (integer_yank print_newline integer_div integer_gt integer_rot integer_dec)) (integer_gte boolean_and))) ()) () ()))))
Errors: [0 1 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 84
Size: 110
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 6.506
Median total errors in population: 8
Error averages by case: (0.094 0.712 0.793 0.793 0.793 0.688 0.712 0.416 0.793 0.712)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.025
Average program size in population (points): 80.028
Average percent parens in population: 0.245
Minimum age in population: 8.625
Maximum age in population: 14.4609375
Average age in population: 12.2731328125
Median age in population: 12.34375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5290303
--- Timings ---
Current time: 1559584493737 milliseconds
Total Time:          28.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.0 seconds, 63.8%
Fitness Testing:      6.8 seconds, 24.1%
Report:               3.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_27} {:close 0, :instruction tag_exec_934} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction 12} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_mult exec_empty exec_s (exec_do*while (integer_gt boolean_flush print_integer) integer_mod) (exec_flush exec_k (boolean_yankdup integer_lt exec_s_when_autoconstructing (print_exec (integer_max exec_k (in2 exec_k (exec_s (integer_mod integer_eq exec_empty integer_yank boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_mult in4 integer_yankdup boolean_invert_second_then_and boolean_xor exec_yankdup integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min integer_div integer_yankdup tag_integer_27) tag_exec_934 (boolean_xor exec_yankdup integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_empty 12 boolean_eq in3 integer_shove boolean_xor integer_min integer_stackdepth integer_empty exec_k () (exec_k (boolean_not) (integer_fromboolean exec_yankdup integer_yank exec_dup_items integer_lte) integer_shove) exec_when ())) ())) ()))))) ()) () ()) ()) ())) () ()) ()) ())
Lexicase best errors: [1 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 112
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_27} {:close 0, :instruction tag_exec_934} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction 12} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_mult exec_empty exec_s (exec_do*while (integer_gt boolean_flush print_integer) integer_mod) (exec_flush exec_k (boolean_yankdup integer_lt exec_s_when_autoconstructing (print_exec (integer_max exec_k (in2 exec_k (exec_s (integer_mod integer_eq exec_empty integer_yank boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_mult in4 integer_yankdup boolean_invert_second_then_and boolean_xor exec_yankdup integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min integer_div integer_yankdup tag_integer_27) tag_exec_934 (boolean_xor exec_yankdup integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_empty 12 boolean_eq in3 integer_shove boolean_xor integer_min integer_stackdepth integer_empty exec_k () (exec_k (boolean_not) (integer_fromboolean exec_yankdup integer_yank exec_dup_items integer_lte) integer_shove) exec_when ())) ())) ()))))) ()) () ()) ()) ())) () ()) ()) ())
Zero cases best errors: [1 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 112
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (94 94 350 350 350 462 1000 349 1000 94)
Population mean number of elite cases: 4.14
Count of perfect (error zero) individuals by case: (94 94 350 350 350 462 0 349 0 94)
Population mean number of perfect (error zero) cases: 2.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 0, :instruction -28} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_31} {:close 0, :instruction tag_exec_934} {:close 1, :instruction -57} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction -70} {:close 1, :instruction boolean_eq} {:close 0, :instruction 91} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_745} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_exec} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or})
Best program: (in1 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_yank exec_empty) integer_pop) boolean_or boolean_or integer_add integer_dup_items integer_mod integer_dup_items exec_if () (boolean_flush exec_shove (exec_when (integer_dup exec_do*range ()) integer_dec tag_exec_760 (print_boolean boolean_stackdepth print_newline integer_min exec_yankdup) integer_empty) exec_dup_times (exec_swap (integer_div exec_shove () -28 boolean_invert_second_then_and exec_pop (integer_dup_times exec_dup_times (boolean_swap integer_empty integer_div integer_yankdup tag_integer_31) tag_exec_934 (-57) integer_swap boolean_dup print_boolean) exec_noop integer_empty exec_dup (exec_flush integer_swap exec_noop boolean_shove) exec_pop (exec_do*times (integer_mult -70 boolean_eq) 91 boolean_dup_times) exec_stackdepth integer_gt) (integer_dup_items integer_add exec_dup_items tag_boolean_745 integer_swap) integer_yank boolean_and exec_dup_items integer_dec exec_yankdup exec_when (integer_eq) integer_add exec_stackdepth in3 exec_s (integer_yankdup print_exec () integer_dec) (boolean_flush) (integer_flush boolean_or))))
Errors: [1 1 0 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 97
Size: 121
Percent parens: 0.198
--- Population Statistics ---
Average total errors in population: 7.857
Median total errors in population: 9
Error averages by case: (0.906 0.906 0.65 0.65 0.65 0.538 1.0 0.651 1.0 0.906)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 58.395
Average program size in population (points): 76.229
Average percent parens in population: 0.226
Minimum age in population: 10.75
Maximum age in population: 15.73828125
Average age in population: 13.7512578125
Median age in population: 13.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5985113
--- Timings ---
Current time: 1559584496946 milliseconds
Total Time:          32.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.3 seconds, 63.3%
Fitness Testing:      7.5 seconds, 23.3%
Report:               4.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 0, :instruction -28} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and})
Lexicase best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing (integer_yank in3) (integer_sub boolean_xor integer_rot boolean_flush integer_add) (print_integer integer_mod exec_do*times (print_integer integer_pop exec_do*times (in2 integer_yank exec_shove (exec_when (integer_dup exec_do*range ()) integer_fromboolean tag_exec_760 (print_boolean boolean_stackdepth print_newline integer_min exec_yankdup) integer_empty) exec_dup_times (integer_empty) exec_dup_times (exec_swap (integer_div exec_shove () -28 boolean_invert_second_then_and integer_yank integer_dup_times exec_dup_times (boolean_swap exec_yankdup) boolean_yankdup) (integer_dup_items integer_dup_items exec_do*range (boolean_pop)) integer_swap exec_pop (integer_lte integer_rot exec_do*count (boolean_and exec_s (exec_k_when_autoconstructing (boolean_flush exec_dup_times () integer_mult exec_y_when_autoconstructing (exec_rot (print_boolean boolean_shove) (exec_noop integer_empty exec_stackdepth integer_mod exec_do*count (integer_inc print_newline integer_div integer_gt integer_rot integer_dec)) (integer_gte boolean_and))) ()) () ())))))))
Lexicase best errors: [1 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 108
Percent parens: 0.287
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 0, :instruction -28} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and})
Zero cases best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing (integer_yank in3) (integer_sub boolean_xor integer_rot boolean_flush integer_add) (print_integer integer_mod exec_do*times (print_integer integer_pop exec_do*times (in2 integer_yank exec_shove (exec_when (integer_dup exec_do*range ()) integer_fromboolean tag_exec_760 (print_boolean boolean_stackdepth print_newline integer_min exec_yankdup) integer_empty) exec_dup_times (integer_empty) exec_dup_times (exec_swap (integer_div exec_shove () -28 boolean_invert_second_then_and integer_yank integer_dup_times exec_dup_times (boolean_swap exec_yankdup) boolean_yankdup) (integer_dup_items integer_dup_items exec_do*range (boolean_pop)) integer_swap exec_pop (integer_lte integer_rot exec_do*count (boolean_and exec_s (exec_k_when_autoconstructing (boolean_flush exec_dup_times () integer_mult exec_y_when_autoconstructing (exec_rot (print_boolean boolean_shove) (exec_noop integer_empty exec_stackdepth integer_mod exec_do*count (integer_inc print_newline integer_div integer_gt integer_rot integer_dec)) (integer_gte boolean_and))) ()) () ())))))))
Zero cases best errors: [1 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 108
Percent parens: 0.287
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 345 553 106 444 447 345 1000 346 346)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (0 345 553 106 444 447 345 0 346 346)
Population mean number of perfect (error zero) cases: 2.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_24} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_209} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and})
Best program: (integer_pop integer_max boolean_stackdepth boolean_dup_times exec_rot (in3 tagged_24 boolean_dup boolean_empty boolean_empty exec_swap () () in3 exec_swap () (exec_s_when_autoconstructing (exec_while () print_integer exec_flush) (exec_do*count (integer_dup_times integer_div integer_gt) boolean_frominteger boolean_and exec_k (tagged_209 boolean_pop boolean_invert_second_then_and integer_gte exec_k_when_autoconstructing (integer_dec exec_do*times (exec_noop exec_y_when_autoconstructing (boolean_xor integer_dup integer_empty exec_while (boolean_dup exec_s () (exec_when (integer_gt integer_lt exec_when (exec_while (integer_fromboolean print_integer boolean_invert_first_then_and boolean_and exec_s () (exec_k_when_autoconstructing (boolean_flush exec_dup_times () integer_mult integer_eq integer_dup exec_y_when_autoconstructing (exec_rot () (print_boolean boolean_shove exec_noop integer_empty exec_stackdepth integer_mod exec_y_when_autoconstructing (integer_inc print_newline integer_div integer_gt exec_k (integer_dec) () integer_gte boolean_and)) ())) ()) ())))) ())))) ()) ()) ())) () ())
Errors: [1 0 1 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 72
Size: 111
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 7.068
Median total errors in population: 7
Error averages by case: (1.0 0.655 0.447 0.894 0.556 0.553 0.655 1.0 0.654 0.654)
Error minima by case: (1 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 59.254
Average program size in population (points): 79.814
Average percent parens in population: 0.252
Minimum age in population: 12.28125
Maximum age in population: 17.318359375
Average age in population: 15.16466796875
Median age in population: 15.21484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6424887
--- Timings ---
Current time: 1559584499858 milliseconds
Total Time:          34.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.5 seconds, 64.4%
Fitness Testing:      7.9 seconds, 22.6%
Report:               4.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: 49                 
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 54                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 90                 
Correct output: 46                  | Program output: 73                 
Correct output: 16                  | Program output: 96                 
Correct output: 40                  | Program output: 70                 
Correct output: 16                  | Program output: 59                 
Correct output: 6                   | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 68                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 28                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 46                 
Correct output: 0                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 69                 
Correct output: -41                 | Program output: 74                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: 17                 
Correct output: 16                  | Program output: 97                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: 55                 
Correct output: -75                 | Program output: 65                 
Correct output: -46                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: 2                  
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: 2                  
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -9                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: 98                 
Correct output: -78                 | Program output: 73                 
Correct output: -30                 | Program output: 86                 
Correct output: -62                 | Program output: -59                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: 81                 
Correct output: -76                 | Program output: 60                 
Correct output: -29                 | Program output: -18                
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: 52                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: 55                 
Correct output: -71                 | Program output: -61                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 82                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: 61                 
Correct output: -82                 | Program output: 81                 
Correct output: -56                 | Program output: 45                 
Correct output: -73                 | Program output: 93                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 53                 
Correct output: -76                 | Program output: 90                 
Correct output: -48                 | Program output: 22                 
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -29                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop})
Lexicase best program: (in4 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (integer_yank integer_dup_items integer_sub boolean_xor integer_rot boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod) exec_y_when_autoconstructing (integer_yankdup boolean_or) boolean_flush boolean_pop)))
Lexicase best errors: [1 1 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop})
Zero cases best program: (in4 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (integer_yank integer_dup_items integer_sub boolean_xor integer_rot boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod) exec_y_when_autoconstructing (integer_yankdup boolean_or) boolean_flush boolean_pop)))
Zero cases best errors: [1 1 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 428 145 1000 145 1000 312 886 145 145)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (313 428 145 0 145 0 312 886 145 145)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger})
Best program: (in4 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup integer_add boolean_xor boolean_invert_second_then_and integer_yank exec_empty) integer_pop boolean_stackdepth boolean_dup_items integer_yank integer_div boolean_xor tagged_339 exec_dup_times () integer_inc boolean_yank integer_max exec_empty boolean_flush boolean_shove boolean_or boolean_pop exec_s (boolean_rot exec_stackdepth exec_stackdepth exec_do*count (exec_do*count () boolean_yankdup integer_pop exec_dup_times (exec_dup () exec_when (boolean_eq boolean_xor boolean_rot) exec_yankdup) in2 integer_swap boolean_stackdepth) exec_do*times () exec_do*while (integer_lt) integer_dec) (integer_gte) (in4) boolean_and boolean_eq integer_dup_items exec_when (integer_gt integer_sub boolean_or exec_when (exec_while (integer_fromboolean print_integer boolean_invert_first_then_and exec_pop (boolean_frominteger)))))
Errors: [1 1 0 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 69
Size: 86
Percent parens: 0.198
--- Population Statistics ---
Average total errors in population: 7.481
Median total errors in population: 8
Error averages by case: (0.687 0.572 0.855 1.0 0.855 1.0 0.688 0.114 0.855 0.855)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 58.082
Average program size in population (points): 78.432
Average percent parens in population: 0.253
Minimum age in population: 14.171875
Maximum age in population: 18.9619140625
Average age in population: 16.6245595703125
Median age in population: 16.6806640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6849010
--- Timings ---
Current time: 1559584503181 milliseconds
Total Time:          37.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.7 seconds, 65.3%
Fitness Testing:      8.3 seconds, 22.0%
Report:               4.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_987} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_mult exec_empty integer_mult exec_do*while (integer_gt boolean_flush print_integer) integer_mod exec_empty integer_mult integer_sub integer_gt boolean_flush print_integer integer_mod exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_rot integer_add in2 exec_k (exec_s (integer_mod integer_mult) (integer_eq exec_empty integer_yank integer_gt exec_swap (boolean_invert_first_then_and) (exec_do*times (integer_yank integer_sub integer_stackdepth boolean_invert_second_then_and boolean_shove tagged_987 integer_gte integer_inc boolean_frominteger exec_do*count (exec_do*count () boolean_yankdup integer_pop exec_dup_times (integer_empty) integer_empty exec_k (exec_k (exec_k () (integer_fromboolean exec_yankdup integer_yank boolean_invert_second_then_and integer_lte) integer_shove) (exec_when ())) ())))) ()) ())) () ()) ())
Lexicase best errors: [1 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 88
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_987} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_mult exec_empty integer_mult exec_do*while (integer_gt boolean_flush print_integer) integer_mod exec_empty integer_mult integer_sub integer_gt boolean_flush print_integer integer_mod exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_rot integer_add in2 exec_k (exec_s (integer_mod integer_mult) (integer_eq exec_empty integer_yank integer_gt exec_swap (boolean_invert_first_then_and) (exec_do*times (integer_yank integer_sub integer_stackdepth boolean_invert_second_then_and boolean_shove tagged_987 integer_gte integer_inc boolean_frominteger exec_do*count (exec_do*count () boolean_yankdup integer_pop exec_dup_times (integer_empty) integer_empty exec_k (exec_k (exec_k () (integer_fromboolean exec_yankdup integer_yank boolean_invert_second_then_and integer_lte) integer_shove) (exec_when ())) ())))) ()) ())) () ()) ())
Zero cases best errors: [1 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 88
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (547 920 127 246 1000 245 245 549 1000 246)
Population mean number of elite cases: 5.13
Count of perfect (error zero) individuals by case: (547 920 127 246 0 245 245 549 0 246)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_27} {:close 1, :instruction tag_exec_934} {:close 1, :instruction -57} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction -70} {:close 1, :instruction boolean_eq} {:close 0, :instruction 91} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_745} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap})
Best program: (in1 print_integer integer_dup boolean_yankdup integer_dec exec_while (integer_add integer_empty boolean_invert_second_then_and integer_yank exec_empty) exec_do*while (boolean_stackdepth integer_flush integer_yank boolean_invert_second_then_and boolean_xor tagged_339 exec_dup_times () integer_inc boolean_yank exec_when (exec_empty boolean_flush boolean_shove boolean_or boolean_pop exec_while (integer_swap boolean_yankdup) exec_do*times () exec_do*while (integer_lt) integer_dec) exec_empty exec_yank integer_gte exec_dup_times (integer_empty integer_div integer_yankdup tag_integer_27) tag_exec_934 () -57) integer_swap boolean_dup integer_mult exec_noop integer_empty exec_dup () exec_flush integer_swap exec_noop boolean_shove exec_pop (exec_do*times (integer_mult -70 boolean_eq) 91 boolean_dup_times) exec_stackdepth integer_gt integer_dup_items integer_gt exec_dup_items tag_boolean_745 integer_swap integer_yank boolean_and exec_dup_items integer_dec exec_yankdup boolean_not exec_when () integer_min integer_eq boolean_flush exec_empty integer_lte boolean_swap integer_lt boolean_frominteger exec_shove (boolean_swap boolean_invert_first_then_and boolean_rot) exec_dup_times (exec_rot () (exec_dup () print_integer boolean_frominteger boolean_swap) ()))
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 93
Size: 113
Percent parens: 0.177
--- Population Statistics ---
Average total errors in population: 6.875
Median total errors in population: 7
Error averages by case: (0.453 0.08 0.873 0.754 1.0 0.755 0.755 0.451 1.0 0.754)
Error minima by case: (0 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 55.035
Average program size in population (points): 72.048
Average percent parens in population: 0.229
Minimum age in population: 15.515625
Maximum age in population: 20.087890625
Average age in population: 18.2050390625
Median age in population: 18.290283203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7473224
--- Timings ---
Current time: 1559584506844 milliseconds
Total Time:          41.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.9 seconds, 65.2%
Fitness Testing:      8.9 seconds, 21.6%
Report:               5.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 0, :instruction -28} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction 91} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range})
Lexicase best program: (integer_pop integer_max boolean_stackdepth boolean_dup_times exec_dup_items exec_eq integer_max exec_s_when_autoconstructing (exec_k (in3 print_integer exec_do*while (integer_pop boolean_or boolean_empty exec_eq integer_max integer_swap exec_k (print_integer exec_do*while (integer_pop boolean_or boolean_or) integer_add integer_dup_items integer_mod integer_dup_items exec_if () (boolean_flush exec_shove (exec_when (integer_dup exec_do*range ()) integer_fromboolean tag_exec_760 (print_boolean boolean_stackdepth print_newline integer_min exec_yankdup) integer_empty) exec_dup_times (exec_swap (integer_div exec_shove () -28 boolean_invert_second_then_and integer_yank integer_dup_times integer_min print_boolean exec_noop exec_flush integer_gte 91 boolean_dup_times) (exec_when (boolean_invert_second_then_and integer_mod exec_do*range ()))))) ())) ()) () ())
Lexicase best errors: [0 1 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 83
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 0, :instruction -28} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction 91} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range})
Zero cases best program: (integer_pop integer_max boolean_stackdepth boolean_dup_times exec_dup_items exec_eq integer_max exec_s_when_autoconstructing (exec_k (in3 print_integer exec_do*while (integer_pop boolean_or boolean_empty exec_eq integer_max integer_swap exec_k (print_integer exec_do*while (integer_pop boolean_or boolean_or) integer_add integer_dup_items integer_mod integer_dup_items exec_if () (boolean_flush exec_shove (exec_when (integer_dup exec_do*range ()) integer_fromboolean tag_exec_760 (print_boolean boolean_stackdepth print_newline integer_min exec_yankdup) integer_empty) exec_dup_times (exec_swap (integer_div exec_shove () -28 boolean_invert_second_then_and integer_yank integer_dup_times integer_min print_boolean exec_noop exec_flush integer_gte 91 boolean_dup_times) (exec_when (boolean_invert_second_then_and integer_mod exec_do*range ()))))) ())) ()) () ())
Zero cases best errors: [0 1 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 83
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (118 537 266 656 118 537 118 118 1000 268)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (118 537 266 656 118 537 118 118 0 268)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_209} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte})
Best program: (in1 integer_min boolean_invert_second_then_and exec_pop (exec_dup_items) exec_eq integer_max exec_s_when_autoconstructing (integer_dup_times in3 print_integer boolean_frominteger integer_pop) (boolean_or boolean_or) (integer_add boolean_rot integer_mod integer_dup_items exec_if () (exec_empty boolean_flush boolean_shove boolean_or boolean_pop tagged_209 boolean_pop boolean_invert_second_then_and integer_gte)))
Errors: [0 1 1 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 29
Size: 36
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 7.264
Median total errors in population: 7
Error averages by case: (0.882 0.463 0.734 0.344 0.882 0.463 0.882 0.882 1.0 0.732)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 55.559
Average program size in population (points): 73.506
Average percent parens in population: 0.238
Minimum age in population: 17.40234375
Maximum age in population: 21.552734375
Average age in population: 19.69643212890625
Median age in population: 19.729736328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7998501
--- Timings ---
Current time: 1559584509794 milliseconds
Total Time:          44.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.1 seconds, 64.9%
Fitness Testing:      9.4 seconds, 21.0%
Report:               6.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer})
Lexicase best program: (in1 print_integer integer_dup boolean_yankdup integer_dec boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and boolean_xor exec_flush exec_when (exec_while (integer_fromboolean print_integer))))))) ()))))
Lexicase best errors: [0 1 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer})
Zero cases best program: (in1 print_integer integer_dup boolean_yankdup integer_dec boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and boolean_xor exec_flush exec_when (exec_while (integer_fromboolean print_integer))))))) ()))))
Zero cases best errors: [0 1 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 484 228 1000 226 486 184 229 485 413)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (229 484 228 0 226 486 184 229 485 413)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer})
Best program: (in1 print_integer integer_dup boolean_yankdup integer_dec boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (integer_flush boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and boolean_xor exec_flush exec_when (exec_while (integer_fromboolean print_integer))))))) ()))))
Errors: [0 1 0 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 52
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.036
Median total errors in population: 7
Error averages by case: (0.771 0.516 0.772 1.0 0.774 0.514 0.816 0.771 0.515 0.587)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 54.634
Average program size in population (points): 73.55
Average percent parens in population: 0.251
Minimum age in population: 18.6337890625
Maximum age in population: 23.31201171875
Average age in population: 21.21339611816406
Median age in population: 21.2374267578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 8417064
--- Timings ---
Current time: 1559584512445 milliseconds
Total Time:          47.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.1 seconds, 65.4%
Fitness Testing:      9.8 seconds, 20.7%
Report:               6.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub})
Lexicase best program: (in1 integer_mult exec_empty integer_mult exec_do*while (integer_gt boolean_flush print_integer integer_mod) exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_max integer_add in2 exec_k (exec_dup_times () integer_inc boolean_yank integer_max exec_empty boolean_flush boolean_invert_first_then_and boolean_or exec_stackdepth exec_do*count (boolean_empty) exec_y_when_autoconstructing (exec_s (tag_integer_819) (boolean_stackdepth) (exec_do*times () exec_do*while (boolean_frominteger) integer_dec) integer_gte) integer_shove) (boolean_and boolean_eq integer_dup_items exec_when (integer_gt integer_sub)))) () ()) ())
Lexicase best errors: [0 1 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 65
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub})
Zero cases best program: (in1 integer_mult exec_empty integer_mult exec_do*while (integer_gt boolean_flush print_integer integer_mod) exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_max integer_add in2 exec_k (exec_dup_times () integer_inc boolean_yank integer_max exec_empty boolean_flush boolean_invert_first_then_and boolean_or exec_stackdepth exec_do*count (boolean_empty) exec_y_when_autoconstructing (exec_s (tag_integer_819) (boolean_stackdepth) (exec_do*times () exec_do*while (boolean_frominteger) integer_dec) integer_gte) integer_shove) (boolean_and boolean_eq integer_dup_items exec_when (integer_gt integer_sub)))) () ()) ())
Zero cases best errors: [0 1 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 65
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (503 123 283 504 123 503 1000 1000 504 283)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (503 123 283 504 123 503 0 0 504 283)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq})
Best program: (in1 exec_do*while (integer_gt boolean_flush print_integer) integer_mod exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (boolean_or boolean_or) integer_add exec_k (boolean_invert_first_then_and integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and boolean_xor exec_flush integer_pop boolean_dup exec_k_when_autoconstructing (exec_empty integer_add boolean_shove boolean_or print_boolean exec_s (in2 boolean_stackdepth) (exec_do*times () exec_do*while (integer_lt) integer_dec integer_gte) (integer_shove) boolean_and boolean_eq) ())))) ()) () ()) ())
Errors: [0 1 1 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 48
Size: 68
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.174
Median total errors in population: 6
Error averages by case: (0.497 0.877 0.717 0.496 0.877 0.497 1.0 1.0 0.496 0.717)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 54.065
Average program size in population (points): 72.436
Average percent parens in population: 0.248
Minimum age in population: 20.2744140625
Maximum age in population: 24.52899169921875
Average age in population: 22.69108673095703
Median age in population: 22.75860595703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 8816346
--- Timings ---
Current time: 1559584514984 milliseconds
Total Time:          50.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.0 seconds, 65.9%
Fitness Testing:     10.2 seconds, 20.4%
Report:               6.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: 49                 
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 54                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 90                 
Correct output: 46                  | Program output: 73                 
Correct output: 16                  | Program output: 96                 
Correct output: 40                  | Program output: 70                 
Correct output: 16                  | Program output: 59                 
Correct output: 6                   | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 68                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 28                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 46                 
Correct output: 0                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 69                 
Correct output: -41                 | Program output: 74                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: 17                 
Correct output: 16                  | Program output: 97                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: 55                 
Correct output: -75                 | Program output: 65                 
Correct output: -46                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: 2                  
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: 2                  
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -9                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: 98                 
Correct output: -78                 | Program output: 73                 
Correct output: -30                 | Program output: 86                 
Correct output: -62                 | Program output: -59                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: 81                 
Correct output: -76                 | Program output: 60                 
Correct output: -29                 | Program output: -18                
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: 52                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: 55                 
Correct output: -71                 | Program output: -61                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 82                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: 61                 
Correct output: -82                 | Program output: 81                 
Correct output: -56                 | Program output: 45                 
Correct output: -73                 | Program output: 93                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 53                 
Correct output: -76                 | Program output: 90                 
Correct output: -48                 | Program output: 22                 
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -29                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_k})
Lexicase best program: (in1 exec_rot (exec_empty integer_mult exec_do*while (integer_gt boolean_flush print_integer) integer_mod) (exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_max integer_add in2 exec_k () ())) () ()) ()) ())
Lexicase best errors: [0 0 1 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 32
Percent parens: 0.406
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_k})
Zero cases best program: (in1 exec_rot (exec_empty integer_mult exec_do*while (integer_gt boolean_flush print_integer) integer_mod) (exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_max integer_add in2 exec_k () ())) () ()) ()) ())
Zero cases best errors: [0 0 1 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 32
Percent parens: 0.406
--- Lexicase Population Statistics ---
Count of elite individuals by case: (921 693 227 232 1000 1000 922 1000 460 1000)
Population mean number of elite cases: 7.45
Count of perfect (error zero) individuals by case: (921 693 227 232 0 0 922 0 460 0)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mod} {:close 1, :instruction tagged_273} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_209} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty})
Best program: (in4 print_integer integer_dup boolean_yankdup boolean_yank integer_lte integer_yank integer_div integer_mod tagged_273 integer_rot boolean_flush integer_add print_integer integer_flush exec_do*times (in2 exec_flush) exec_k (integer_dup_times integer_gte in2) (boolean_frominteger boolean_and exec_k (tagged_209 boolean_pop boolean_invert_second_then_and integer_gte exec_k_when_autoconstructing (integer_dec exec_do*times (exec_noop integer_swap)) (integer_dup exec_k_when_autoconstructing (integer_lt exec_y_when_autoconstructing (integer_rot exec_y_when_autoconstructing (boolean_xor exec_k (integer_fromboolean integer_pop integer_yankdup) (boolean_stackdepth in1) boolean_rot boolean_dup_items exec_do*times () integer_dup_items exec_do*range (boolean_pop)) integer_swap exec_pop (integer_lte boolean_invert_first_then_and exec_pop (integer_add) in1) print_integer integer_dup_items) in3 boolean_empty) ())) ()))
Errors: [0 0 1 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 64
Size: 83
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.545
Median total errors in population: 6
Error averages by case: (0.079 0.307 0.773 0.768 1.0 1.0 0.078 1.0 0.54 1.0)
Error minima by case: (0 0 0 0 1 1 0 1 0 1)
Average genome size in population (length): 51.37
Average program size in population (points): 68.218
Average percent parens in population: 0.241
Minimum age in population: 21.2744140625
Maximum age in population: 25.967529296875
Average age in population: 24.14184176635742
Median age in population: 24.2105712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 9234664
--- Timings ---
Current time: 1559584517972 milliseconds
Total Time:          53.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.4 seconds, 66.7%
Fitness Testing:     10.6 seconds, 20.1%
Report:               6.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: 49                 
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 54                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 90                 
Correct output: 46                  | Program output: 73                 
Correct output: 16                  | Program output: 96                 
Correct output: 40                  | Program output: 70                 
Correct output: 16                  | Program output: 59                 
Correct output: 6                   | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 68                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 28                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 46                 
Correct output: 0                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 69                 
Correct output: -41                 | Program output: 74                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: 17                 
Correct output: 16                  | Program output: 97                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: 55                 
Correct output: -75                 | Program output: 65                 
Correct output: -46                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: 2                  
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: 2                  
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -9                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: 98                 
Correct output: -78                 | Program output: 73                 
Correct output: -30                 | Program output: 86                 
Correct output: -62                 | Program output: -59                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: 81                 
Correct output: -76                 | Program output: 60                 
Correct output: -29                 | Program output: -18                
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: 52                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: 55                 
Correct output: -71                 | Program output: -61                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 82                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: 61                 
Correct output: -82                 | Program output: 81                 
Correct output: -56                 | Program output: 45                 
Correct output: -73                 | Program output: 93                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 53                 
Correct output: -76                 | Program output: 90                 
Correct output: -48                 | Program output: 22                 
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -29                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_integer_27} {:close 1, :instruction tag_exec_934} {:close 2, :instruction -57} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction -70} {:close 1, :instruction boolean_eq} {:close 0, :instruction 91} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_745} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty})
Lexicase best program: (in4 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and exec_when (integer_mult integer_mod exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and boolean_xor exec_flush integer_lt) integer_dec) exec_empty exec_yank integer_gte exec_dup_times (integer_empty integer_div integer_yankdup tag_integer_27 tag_exec_934 () -57)) integer_swap) boolean_dup integer_mult exec_noop integer_empty exec_dup () exec_flush integer_swap exec_noop boolean_shove exec_pop () exec_do*times (integer_mult -70 boolean_eq) 91 boolean_dup_times) (exec_stackdepth) integer_gt) integer_dup_items integer_gt exec_dup_items tag_boolean_745 integer_swap) integer_yank boolean_and exec_dup_items integer_dec exec_yankdup boolean_not exec_when () integer_min integer_eq boolean_flush exec_empty))
Lexicase best errors: [1 0 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 99
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_integer_27} {:close 1, :instruction tag_exec_934} {:close 2, :instruction -57} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction -70} {:close 1, :instruction boolean_eq} {:close 0, :instruction 91} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_745} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty})
Zero cases best program: (in4 print_integer integer_dup boolean_yankdup boolean_yank integer_lte exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and exec_when (integer_mult integer_mod exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and boolean_xor exec_flush integer_lt) integer_dec) exec_empty exec_yank integer_gte exec_dup_times (integer_empty integer_div integer_yankdup tag_integer_27 tag_exec_934 () -57)) integer_swap) boolean_dup integer_mult exec_noop integer_empty exec_dup () exec_flush integer_swap exec_noop boolean_shove exec_pop () exec_do*times (integer_mult -70 boolean_eq) 91 boolean_dup_times) (exec_stackdepth) integer_gt) integer_dup_items integer_gt exec_dup_items tag_boolean_745 integer_swap) integer_yank boolean_and exec_dup_items integer_dec exec_yankdup boolean_not exec_when () integer_min integer_eq boolean_flush exec_empty))
Zero cases best errors: [1 0 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 99
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (343 322 322 240 322 343 905 240 1000 322)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (343 322 322 240 322 343 905 240 0 322)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (in4 print_integer integer_dup boolean_yankdup integer_add boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank exec_noop exec_s_when_autoconstructing () () ()))
Errors: [1 0 0 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 14
Size: 19
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.641
Median total errors in population: 7
Error averages by case: (0.657 0.678 0.678 0.76 0.678 0.657 0.095 0.76 1.0 0.678)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 50.301
Average program size in population (points): 66.49
Average percent parens in population: 0.238
Minimum age in population: 22.2744140625
Maximum age in population: 27.475830078125
Average age in population: 25.58997312927246
Median age in population: 25.63039398193359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 9643661
--- Timings ---
Current time: 1559584520797 milliseconds
Total Time:          55.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.6 seconds, 67.3%
Fitness Testing:     11.1 seconds, 19.8%
Report:               7.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_55} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty})
Lexicase best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing () (integer_yank in3) (integer_sub) boolean_xor integer_sub boolean_xor exec_do*while (integer_gt boolean_flush print_integer) integer_mod exec_flush integer_sub boolean_xor integer_rot boolean_flush integer_add print_integer integer_pop exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (exec_flush boolean_or boolean_flush integer_empty exec_if (integer_max tagged_55 boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_shove (exec_when (integer_yankdup in4 integer_gte boolean_invert_second_then_and boolean_xor integer_lte integer_pop boolean_dup integer_yankdup boolean_invert_second_then_and boolean_xor integer_lte integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_empty)) ()))) ()) ()))))
Lexicase best errors: [0 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 81
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_55} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty})
Zero cases best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing () (integer_yank in3) (integer_sub) boolean_xor integer_sub boolean_xor exec_do*while (integer_gt boolean_flush print_integer) integer_mod exec_flush integer_sub boolean_xor integer_rot boolean_flush integer_add print_integer integer_pop exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (exec_flush boolean_or boolean_flush integer_empty exec_if (integer_max tagged_55 boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_shove (exec_when (integer_yankdup in4 integer_gte boolean_invert_second_then_and boolean_xor integer_lte integer_pop boolean_dup integer_yankdup boolean_invert_second_then_and boolean_xor integer_lte integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_empty)) ()))) ()) ()))))
Zero cases best errors: [0 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 81
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 928 219 257 256 220 257 671 219 220)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (220 928 219 257 256 220 257 671 219 220)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_209} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte})
Best program: (boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup integer_empty integer_empty boolean_invert_second_then_and integer_yank print_integer exec_do*while (integer_pop boolean_or boolean_or) exec_swap (exec_s_when_autoconstructing (integer_dup_times in3 print_integer boolean_frominteger integer_pop) (boolean_or exec_if () (integer_add integer_dup_items integer_mod integer_dup_items boolean_rot) exec_empty boolean_flush boolean_shove boolean_or boolean_pop tagged_209 boolean_pop boolean_invert_second_then_and integer_gte) ()) ()))
Errors: [0 0 0 1 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 6.533
Median total errors in population: 8
Error averages by case: (0.78 0.072 0.781 0.743 0.744 0.78 0.743 0.329 0.781 0.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.633
Average program size in population (points): 62.572
Average percent parens in population: 0.231
Minimum age in population: 24.05517578125
Maximum age in population: 29.06817626953125
Average age in population: 27.05514595794678
Median age in population: 27.09892272949219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 10055315
--- Timings ---
Current time: 1559584523564 milliseconds
Total Time:          58.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.7 seconds, 67.7%
Fitness Testing:     11.5 seconds, 19.6%
Report:               7.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing () (integer_yank in3) (integer_sub) integer_add integer_rot boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult) integer_mod exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty exec_if (boolean_empty) (exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_yankdup in2 integer_yankdup boolean_invert_second_then_and boolean_xor boolean_pop exec_s (integer_swap integer_gte) (exec_do*times () exec_do*while () integer_lt) (integer_dec)))))))))
Lexicase best errors: [1 1 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 66
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing () (integer_yank in3) (integer_sub) integer_add integer_rot boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult) integer_mod exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty exec_if (boolean_empty) (exec_y_when_autoconstructing (integer_empty exec_dup_times (in3 integer_yank exec_when (exec_when (integer_yankdup in2 integer_yankdup boolean_invert_second_then_and boolean_xor boolean_pop exec_s (integer_swap integer_gte) (exec_do*times () exec_do*while () integer_lt) (integer_dec)))))))))
Zero cases best errors: [1 1 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 66
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 2 302 1 605 606 1000 604 302 917)
Population mean number of elite cases: 5.34
Count of perfect (error zero) individuals by case: (0 2 302 1 605 606 0 604 302 917)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction 12} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing () (integer_yank in3 integer_sub) (boolean_xor integer_rot boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (integer_yankdup exec_do*range ()) integer_fromboolean tag_exec_760 (print_boolean boolean_stackdepth boolean_invert_second_then_and integer_empty exec_dup_times (boolean_dup integer_yank exec_when (exec_dup_times (in3 integer_max exec_flush boolean_flush in1 exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_empty 12 boolean_eq) exec_empty integer_shove boolean_xor integer_min integer_stackdepth integer_empty exec_k (exec_k (exec_k () (integer_fromboolean exec_y_when_autoconstructing (integer_fromboolean exec_do*while (boolean_invert_first_then_and)))) ()) ()) ()))))))))
Errors: [1 1 1 1 0 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 59
Size: 83
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 6.661
Median total errors in population: 6
Error averages by case: (1.0 0.998 0.698 0.999 0.395 0.394 1.0 0.396 0.698 0.083)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 50.586
Average program size in population (points): 68.237
Average percent parens in population: 0.252
Minimum age in population: 25.640380859375
Maximum age in population: 30.32169342041016
Average age in population: 28.54158883666992
Median age in population: 28.61968994140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.78
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 10406514
--- Timings ---
Current time: 1559584526186 milliseconds
Total Time:          61.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.7 seconds, 68.1%
Fitness Testing:     11.8 seconds, 19.3%
Report:               7.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction tagged_987} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_dec} {:close 0, :instruction boolean_rot})
Lexicase best program: (in1 print_integer integer_dup boolean_yankdup boolean_or boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank integer_yank exec_dup (exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup exec_if (integer_empty boolean_invert_second_then_and integer_yank exec_empty) (integer_gte boolean_stackdepth boolean_dup_items integer_yank integer_div boolean_xor) tagged_339 exec_dup_times () integer_inc boolean_yank integer_max integer_yank integer_sub exec_do*times (boolean_invert_second_then_and boolean_shove tagged_987) integer_gte integer_inc) boolean_frominteger exec_do*count (exec_do*count (boolean_yankdup integer_pop exec_dup_times (integer_dup_items integer_dec)) boolean_rot))))
Lexicase best errors: [0 0 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.177
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction tagged_987} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_dec} {:close 0, :instruction boolean_rot})
Zero cases best program: (in1 print_integer integer_dup boolean_yankdup boolean_or boolean_flush integer_add print_integer integer_flush exec_do*times (in2 integer_yank integer_yank exec_dup (exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup exec_if (integer_empty boolean_invert_second_then_and integer_yank exec_empty) (integer_gte boolean_stackdepth boolean_dup_items integer_yank integer_div boolean_xor) tagged_339 exec_dup_times () integer_inc boolean_yank integer_max integer_yank integer_sub exec_do*times (boolean_invert_second_then_and boolean_shove tagged_987) integer_gte integer_inc) boolean_frominteger exec_do*count (exec_do*count (boolean_yankdup integer_pop exec_dup_times (integer_dup_items integer_dec)) boolean_rot))))
Zero cases best errors: [0 0 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.177
--- Lexicase Population Statistics ---
Count of elite individuals by case: (620 233 1000 387 1000 233 387 620 233 620)
Population mean number of elite cases: 5.33
Count of perfect (error zero) individuals by case: (620 233 0 387 0 233 387 620 233 620)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (in1 print_integer integer_dup boolean_yankdup exec_do*range (integer_lte boolean_invert_first_then_and exec_noop integer_inc boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_yank exec_empty exec_do*while (boolean_stackdepth boolean_dup_items integer_mod integer_mult) integer_eq exec_empty exec_k (exec_s (integer_pop integer_mult) (integer_add in2 exec_k (exec_s (exec_k (integer_fromboolean integer_pop exec_do*times () boolean_invert_first_then_and) (exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and boolean_xor exec_stackdepth exec_eq boolean_dup) exec_k_when_autoconstructing () ())) () ()) ()) ()) ()))
Errors: [0 0 1 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 45
Size: 64
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 6.667
Median total errors in population: 5
Error averages by case: (0.38 0.767 1.0 0.613 1.0 0.767 0.613 0.38 0.767 0.38)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 51.181
Average program size in population (points): 67.965
Average percent parens in population: 0.243
Minimum age in population: 26.94091796875
Maximum age in population: 32.1275634765625
Average age in population: 30.21155099105835
Median age in population: 30.25369644165039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 10718011
--- Timings ---
Current time: 1559584528737 milliseconds
Total Time:          63.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.5 seconds, 68.3%
Fitness Testing:     12.2 seconds, 19.1%
Report:               7.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_55} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop})
Lexicase best program: (in1 integer_mult exec_empty integer_mult boolean_swap integer_mult boolean_flush print_integer integer_mod exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_max exec_flush integer_flush exec_k (exec_s (exec_k (integer_fromboolean integer_pop exec_do*times () exec_do*while (integer_lt integer_dec) integer_gte exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult exec_eq exec_y_when_autoconstructing (boolean_or boolean_or boolean_flush integer_empty exec_if (integer_max tagged_55 boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_shove (exec_when (integer_yankdup in4 integer_gte boolean_invert_second_then_and boolean_xor integer_lte integer_pop))) ()) ())))) ()) () ()) ())) () ()) ())
Lexicase best errors: [1 1 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 82
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_55} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop})
Zero cases best program: (in1 integer_mult exec_empty integer_mult boolean_swap integer_mult boolean_flush print_integer integer_mod exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (print_exec (integer_max exec_flush integer_flush exec_k (exec_s (exec_k (integer_fromboolean integer_pop exec_do*times () exec_do*while (integer_lt integer_dec) integer_gte exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult exec_eq exec_y_when_autoconstructing (boolean_or boolean_or boolean_flush integer_empty exec_if (integer_max tagged_55 boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_shove (exec_when (integer_yankdup in4 integer_gte boolean_invert_second_then_and boolean_xor integer_lte integer_pop))) ()) ())))) ()) () ()) ())) () ()) ())
Zero cases best errors: [1 1 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 82
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 527 527 380 1000 908 1000 1000 530)
Population mean number of elite cases: 7.87
Count of perfect (error zero) individuals by case: (0 0 527 527 380 0 908 0 0 530)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 0, :instruction integer_sub})
Best program: (in1 boolean_eq exec_empty integer_empty exec_do*while (integer_gt boolean_flush print_integer integer_mod) integer_dup boolean_yankdup integer_lte exec_y_when_autoconstructing (exec_noop integer_inc boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_yank exec_empty) exec_do*while (boolean_stackdepth boolean_dup_items integer_yank integer_div boolean_xor) tagged_339 exec_dup_times () integer_inc boolean_yank integer_max boolean_invert_first_then_and boolean_flush boolean_invert_first_then_and boolean_or exec_stackdepth exec_do*count (boolean_empty) exec_y_when_autoconstructing (exec_s (tag_integer_819) (boolean_stackdepth) (exec_do*times () exec_do*while (boolean_frominteger) integer_dec) integer_gte) integer_shove boolean_and boolean_eq integer_dup_items exec_when (print_newline integer_sub))
Errors: [1 1 0 0 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 55
Size: 68
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 7.128
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.473 0.473 0.62 1.0 0.092 1.0 1.0 0.47)
Error minima by case: (1 1 0 0 0 1 0 1 1 0)
Average genome size in population (length): 46.885
Average program size in population (points): 62.415
Average percent parens in population: 0.242
Minimum age in population: 29.02520751953125
Maximum age in population: 33.62556552886963
Average age in population: 31.67452282619476
Median age in population: 31.72371006011963
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 11079435
--- Timings ---
Current time: 1559584531919 milliseconds
Total Time:          66.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.5 seconds, 68.5%
Fitness Testing:     12.5 seconds, 18.8%
Report:               8.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger})
Lexicase best program: (boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup integer_empty integer_empty boolean_invert_second_then_and integer_yank print_integer exec_do*while (integer_pop boolean_or boolean_or exec_swap (boolean_stackdepth) () exec_if () (boolean_dup_times integer_lt integer_dec) integer_gte) integer_shove) boolean_and print_boolean in1 print_integer integer_dup_items in3 exec_k (integer_fromboolean integer_pop integer_yankdup) (boolean_stackdepth in1 boolean_rot boolean_dup_items exec_do*times () in2) boolean_dup print_integer boolean_invert_first_then_and exec_pop (boolean_frominteger))
Lexicase best errors: [1 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger})
Zero cases best program: (boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (exec_noop integer_dec boolean_yankdup integer_empty integer_empty boolean_invert_second_then_and integer_yank print_integer exec_do*while (integer_pop boolean_or boolean_or exec_swap (boolean_stackdepth) () exec_if () (boolean_dup_times integer_lt integer_dec) integer_gte) integer_shove) boolean_and print_boolean in1 print_integer integer_dup_items in3 exec_k (integer_fromboolean integer_pop integer_yankdup) (boolean_stackdepth in1 boolean_rot boolean_dup_items exec_do*times () in2) boolean_dup print_integer boolean_invert_first_then_and exec_pop (boolean_frominteger))
Zero cases best errors: [1 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 724 939 210 936 210 936 724 724 1000)
Population mean number of elite cases: 7.40
Count of perfect (error zero) individuals by case: (0 724 939 210 936 210 936 724 724 0)
Population mean number of perfect (error zero) cases: 5.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_531} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty})
Best program: (integer_pop in1 integer_min boolean_invert_second_then_and boolean_flush integer_add print_integer integer_mod exec_k () (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty boolean_flush integer_empty exec_if (boolean_empty exec_y_when_autoconstructing (integer_empty boolean_flush boolean_shove exec_when (integer_mult integer_mod exec_y_when_autoconstructing (tagged_531 exec_dup_times ()) integer_inc boolean_yank boolean_invert_second_then_and boolean_xor integer_lte integer_pop boolean_dup integer_yankdup boolean_invert_second_then_and boolean_xor integer_lte integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (boolean_yank exec_empty)) ()))) ()))))
Errors: [1 0 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 51
Size: 65
Percent parens: 0.215
--- Population Statistics ---
Average total errors in population: 4.597
Median total errors in population: 4
Error averages by case: (1.0 0.276 0.061 0.79 0.064 0.79 0.064 0.276 0.276 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 46.09
Average program size in population (points): 60.87
Average percent parens in population: 0.236
Minimum age in population: 30.31581878662109
Maximum age in population: 35.06345653533936
Average age in population: 33.15188059663773
Median age in population: 33.23998522758484
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 11449761
--- Timings ---
Current time: 1559584534304 milliseconds
Total Time:          69.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.3 seconds, 68.1%
Fitness Testing:     12.9 seconds, 18.5%
Report:               9.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 2, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_418} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tag_exec_760} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank})
Lexicase best program: (in1 integer_mult exec_empty exec_do*while (exec_do*while (exec_y (boolean_flush print_integer integer_mod integer_yank integer_dec)) exec_do*while (boolean_stackdepth boolean_dup_items integer_yank integer_stackdepth) boolean_xor) tagged_418 integer_fromboolean tag_exec_760 () boolean_or boolean_stackdepth exec_rot (integer_min) (exec_yankdup) (integer_sub) exec_dup_times (exec_swap (integer_div integer_yank) ()))
Lexicase best errors: [1 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 2, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_418} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tag_exec_760} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank})
Zero cases best program: (in1 integer_mult exec_empty exec_do*while (exec_do*while (exec_y (boolean_flush print_integer integer_mod integer_yank integer_dec)) exec_do*while (boolean_stackdepth boolean_dup_items integer_yank integer_stackdepth) boolean_xor) tagged_418 integer_fromboolean tag_exec_760 () boolean_or boolean_stackdepth exec_rot (integer_min) (exec_yankdup) (integer_sub) exec_dup_times (exec_swap (integer_div integer_yank) ()))
Zero cases best errors: [1 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 915 1000 555 554 360 917 1 555 555)
Population mean number of elite cases: 5.41
Count of perfect (error zero) individuals by case: (1 915 0 555 554 360 917 1 555 555)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_integer_819} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (in1 print_integer integer_dup boolean_yankdup exec_do*range (integer_lte exec_y_when_autoconstructing (exec_noop integer_inc boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_yank exec_empty) exec_do*while (boolean_stackdepth boolean_dup_items integer_yank exec_k_when_autoconstructing (boolean_xor) (tagged_339 exec_dup_times () integer_inc boolean_yank integer_max exec_empty boolean_flush boolean_invert_first_then_and boolean_or exec_stackdepth exec_do*count (boolean_empty) exec_y_when_autoconstructing (exec_empty tag_integer_819) boolean_stackdepth exec_do*times () exec_do*while (exec_pop () integer_dec) integer_gte) integer_shove boolean_and boolean_eq exec_s (exec_k (integer_fromboolean integer_pop exec_do*times () boolean_invert_first_then_and) (exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and boolean_xor exec_stackdepth exec_eq boolean_dup) exec_k_when_autoconstructing () ())) () ())))
Errors: [1 0 1 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 61
Size: 82
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 5.587
Median total errors in population: 4
Error averages by case: (0.999 0.085 1.0 0.445 0.446 0.64 0.083 0.999 0.445 0.445)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 46.215
Average program size in population (points): 61.619
Average percent parens in population: 0.244
Minimum age in population: 31.77951812744141
Maximum age in population: 36.52383422851562
Average age in population: 34.64196097326279
Median age in population: 34.68643093109131
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 11806020
--- Timings ---
Current time: 1559584536954 milliseconds
Total Time:          71.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.1 seconds, 68.4%
Fitness Testing:     13.2 seconds, 18.4%
Report:               9.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_938} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger})
Lexicase best program: (in1 integer_mult exec_empty integer_mult boolean_swap integer_gt boolean_flush print_integer integer_mod exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (exec_swap () () in3 exec_swap (exec_s_when_autoconstructing (in3) (integer_sub) (boolean_xor integer_sub) integer_lt exec_do*while (integer_gt boolean_flush print_integer) integer_mod exec_shove (exec_when (integer_dup exec_do*range () integer_fromboolean tag_exec_760 (print_boolean exec_do*while (integer_lt) integer_dec) integer_gte) integer_shove) boolean_and boolean_eq exec_dup_items exec_when (integer_gt integer_sub tag_integer_938 exec_when (exec_while (integer_fromboolean print_integer boolean_invert_first_then_and exec_pop (boolean_frominteger))))) ()) () ()) ())
Lexicase best errors: [1 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 77
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_938} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger})
Zero cases best program: (in1 integer_mult exec_empty integer_mult boolean_swap integer_gt boolean_flush print_integer integer_mod exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (exec_swap () () in3 exec_swap (exec_s_when_autoconstructing (in3) (integer_sub) (boolean_xor integer_sub) integer_lt exec_do*while (integer_gt boolean_flush print_integer) integer_mod exec_shove (exec_when (integer_dup exec_do*range () integer_fromboolean tag_exec_760 (print_boolean exec_do*while (integer_lt) integer_dec) integer_gte) integer_shove) boolean_and boolean_eq exec_dup_items exec_when (integer_gt integer_sub tag_integer_938 exec_when (exec_while (integer_fromboolean print_integer boolean_invert_first_then_and exec_pop (boolean_frominteger))))) ()) () ()) ())
Zero cases best errors: [1 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 77
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (140 255 525 525 920 525 395 666 140 255)
Population mean number of elite cases: 4.35
Count of perfect (error zero) individuals by case: (140 255 525 525 920 525 395 666 140 255)
Population mean number of perfect (error zero) cases: 4.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_760} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_938} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger})
Best program: (in1 integer_mult exec_empty integer_mult boolean_swap integer_gt boolean_flush print_integer integer_mod exec_flush exec_k (boolean_yankdup boolean_and exec_s_when_autoconstructing (exec_swap () () in3 exec_swap (exec_s_when_autoconstructing (in3) (integer_sub) (boolean_xor integer_sub) boolean_xor exec_do*while (integer_gt boolean_flush print_integer) integer_mod exec_shove (exec_when (integer_dup exec_do*times () integer_fromboolean tag_exec_760 (print_boolean exec_do*while (integer_lt) integer_dec) integer_gte) integer_shove) boolean_and boolean_eq exec_dup_items exec_when (integer_gt integer_sub tag_integer_938 exec_when (exec_while (integer_fromboolean print_integer boolean_invert_first_then_and exec_pop (boolean_frominteger))))) ()) () ()) ())
Errors: [1 1 0 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 54
Size: 77
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 5.654
Median total errors in population: 5
Error averages by case: (0.86 0.745 0.475 0.475 0.08 0.475 0.605 0.334 0.86 0.745)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.315
Average program size in population (points): 66.72
Average percent parens in population: 0.217
Minimum age in population: 32.77951812744141
Maximum age in population: 38.16752922534943
Average age in population: 36.29662939381599
Median age in population: 36.3430250287056
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 12126463
--- Timings ---
Current time: 1559584539295 milliseconds
Total Time:          74.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.9 seconds, 68.4%
Fitness Testing:     13.5 seconds, 18.2%
Report:               9.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty})
Lexicase best program: (in1 exec_do*while (integer_gt integer_lte print_integer) boolean_not exec_flush print_newline integer_pop boolean_and exec_s_when_autoconstructing (print_exec (boolean_or boolean_or) integer_add exec_k (boolean_invert_first_then_and integer_empty exec_dup_times (in3 integer_yank exec_do*while (boolean_stackdepth boolean_dup_items integer_yank integer_div boolean_xor) exec_k (in3 print_integer exec_k_when_autoconstructing (integer_pop) (boolean_or boolean_or) integer_add integer_dup_items integer_mod integer_dup_items boolean_or exec_s (boolean_or exec_if (boolean_empty boolean_frominteger integer_empty exec_dup_times (integer_max exec_y_when_autoconstructing (integer_lt) integer_swap exec_pop (integer_lt boolean_empty))) ()) () ()) ())) ()) () ())
Lexicase best errors: [1 0 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 75
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty})
Zero cases best program: (in1 exec_do*while (integer_gt integer_lte print_integer) boolean_not exec_flush print_newline integer_pop boolean_and exec_s_when_autoconstructing (print_exec (boolean_or boolean_or) integer_add exec_k (boolean_invert_first_then_and integer_empty exec_dup_times (in3 integer_yank exec_do*while (boolean_stackdepth boolean_dup_items integer_yank integer_div boolean_xor) exec_k (in3 print_integer exec_k_when_autoconstructing (integer_pop) (boolean_or boolean_or) integer_add integer_dup_items integer_mod integer_dup_items boolean_or exec_s (boolean_or exec_if (boolean_empty boolean_frominteger integer_empty exec_dup_times (integer_max exec_y_when_autoconstructing (integer_lt) integer_swap exec_pop (integer_lt boolean_empty))) ()) () ()) ())) ()) () ())
Zero cases best errors: [1 0 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 75
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 335 328 580 918 1 335 252 336 336)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (252 335 328 580 918 1 335 252 336 336)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 0, :instruction boolean_dup_times})
Best program: (in1 print_integer integer_dup boolean_yankdup integer_dec boolean_flush integer_add print_integer integer_yank exec_empty exec_do*while (exec_noop exec_eq integer_yank integer_div boolean_xor) tagged_339 boolean_dup_times)
Errors: [1 0 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.327
Median total errors in population: 6
Error averages by case: (0.748 0.665 0.672 0.42 0.082 0.999 0.665 0.748 0.664 0.664)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.921
Average program size in population (points): 66.754
Average percent parens in population: 0.224
Minimum age in population: 34.27925872802734
Maximum age in population: 39.63087296485901
Average age in population: 37.77428515660763
Median age in population: 37.86763024330139
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 12419775
--- Timings ---
Current time: 1559584541735 milliseconds
Total Time:          76.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 68.7%
Fitness Testing:     13.8 seconds, 18.0%
Report:              10.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_339} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty})
Lexicase best program: (in1 print_integer boolean_dup boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (boolean_yankdup tagged_339 exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty)))
Lexicase best errors: [1 1 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_339} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty})
Zero cases best program: (in1 print_integer boolean_dup boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (boolean_yankdup tagged_339 exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty)))
Zero cases best errors: [1 1 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (133 1000 271 271 423 828 423 423 926 133)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (133 0 271 271 423 828 423 423 926 133)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction tag_integer_938} {:close 1, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger})
Best program: (in1 integer_mult exec_empty integer_mult exec_do*while (integer_gt boolean_flush print_integer integer_mod) exec_flush boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_add print_integer integer_flush integer_gt boolean_invert_second_then_and integer_yank boolean_or boolean_shove exec_s (integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_dup_times (in3 integer_yank) boolean_dup exec_when (integer_add in1) print_integer integer_dup_items) in3 exec_empty integer_inc boolean_invert_first_then_and exec_when (integer_gt integer_sub) tag_integer_938 exec_when () exec_while (integer_fromboolean integer_lte boolean_yankdup exec_pop (boolean_frominteger))) ()) () ())
Errors: [1 1 1 1 0 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 52
Size: 66
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 6.169
Median total errors in population: 6
Error averages by case: (0.867 1.0 0.729 0.729 0.577 0.172 0.577 0.577 0.074 0.867)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.199
Average program size in population (points): 65.201
Average percent parens in population: 0.216
Minimum age in population: 36.32054996490479
Maximum age in population: 41.26711219549179
Average age in population: 39.34164188122749
Median age in population: 39.43624855577946
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 12689822
--- Timings ---
Current time: 1559584544254 milliseconds
Total Time:          79.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.9 seconds, 69.1%
Fitness Testing:     14.1 seconds, 17.8%
Report:              10.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and})
Lexicase best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing (integer_yank in3) (integer_sub boolean_xor integer_rot boolean_flush integer_add) () print_integer integer_mod exec_do*times () in2 boolean_dup_items integer_add print_integer integer_pop exec_do*times (in2 integer_yank boolean_yankdup integer_inc boolean_yank boolean_invert_first_then_and integer_lt) boolean_flush boolean_shove boolean_or boolean_dup_times boolean_or integer_swap boolean_stackdepth exec_do*times (exec_do*while (integer_lt) integer_dec) integer_gte integer_shove boolean_and)
Lexicase best errors: [0 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 50
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and})
Zero cases best program: (boolean_shove boolean_rot exec_while () exec_s_when_autoconstructing (integer_yank in3) (integer_sub boolean_xor integer_rot boolean_flush integer_add) () print_integer integer_mod exec_do*times () in2 boolean_dup_items integer_add print_integer integer_pop exec_do*times (in2 integer_yank boolean_yankdup integer_inc boolean_yank boolean_invert_first_then_and integer_lt) boolean_flush boolean_shove boolean_or boolean_dup_times boolean_or integer_swap boolean_stackdepth exec_do*times (exec_do*while (integer_lt) integer_dec) integer_gte integer_shove boolean_and)
Zero cases best errors: [0 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 50
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (523 266 928 257 401 257 257 920 656 266)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (523 266 928 257 401 257 257 920 656 266)
Population mean number of perfect (error zero) cases: 4.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and})
Best program: (integer_sub exec_stackdepth in1 integer_min boolean_invert_second_then_and exec_pop (exec_dup_items) exec_eq integer_max boolean_and exec_s_when_autoconstructing (in3 print_integer exec_do*while (boolean_invert_second_then_and integer_yank exec_empty) exec_do*while (boolean_stackdepth boolean_dup_items integer_yank integer_div boolean_xor integer_div exec_dup_times () integer_inc boolean_yank boolean_invert_first_then_and integer_lt) boolean_flush boolean_shove boolean_or integer_mult boolean_or integer_swap boolean_stackdepth) (boolean_pop exec_y_when_autoconstructing (integer_lt) integer_dec) (integer_gte) integer_shove boolean_and)
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 43
Size: 52
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 5.269
Median total errors in population: 5
Error averages by case: (0.477 0.734 0.072 0.743 0.599 0.743 0.743 0.08 0.344 0.734)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.334
Average program size in population (points): 64.533
Average percent parens in population: 0.221
Minimum age in population: 37.32054996490479
Maximum age in population: 42.63364599645138
Average age in population: 40.79584777480364
Median age in population: 40.87951000034809
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 12971072
--- Timings ---
Current time: 1559584547423 milliseconds
Total Time:          82.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.5 seconds, 69.7%
Fitness Testing:     14.4 seconds, 17.5%
Report:              10.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_integer_938} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 1, :instruction tag_integer_27} {:close 0, :instruction tag_exec_934} {:close 1, :instruction -57} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_shove})
Lexicase best program: (boolean_xor integer_max boolean_stackdepth boolean_dup_times exec_rot () (in3 integer_stackdepth boolean_dup boolean_dup_times boolean_empty print_boolean) (in3 exec_swap () () exec_s_when_autoconstructing (exec_while () print_integer exec_flush) (exec_do*count (integer_dup_times integer_gte integer_gt) exec_dup_times (boolean_invert_first_then_and) boolean_yankdup boolean_or exec_do*times (exec_y (boolean_or boolean_pop exec_s () (in3 boolean_stackdepth exec_do*times (exec_y_when_autoconstructing (exec_s (tag_integer_819 integer_add) (integer_eq) (print_integer) integer_dup_items) in3 exec_empty integer_inc exec_when (boolean_invert_second_then_and tag_integer_938 exec_when (exec_while (integer_fromboolean tag_exec_5 (integer_yankdup boolean_stackdepth in1 boolean_rot boolean_and exec_do*times () in2) boolean_xor integer_inc exec_empty boolean_dup integer_gte exec_when (tag_integer_27) tag_exec_934 (-57) integer_empty boolean_dup print_boolean exec_eq integer_empty exec_dup () boolean_dup_times print_newline exec_noop) boolean_shove)))) ()))) ()))
Lexicase best errors: [1 0 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 106
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_integer_938} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 1, :instruction tag_integer_27} {:close 0, :instruction tag_exec_934} {:close 1, :instruction -57} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_shove})
Zero cases best program: (boolean_xor integer_max boolean_stackdepth boolean_dup_times exec_rot () (in3 integer_stackdepth boolean_dup boolean_dup_times boolean_empty print_boolean) (in3 exec_swap () () exec_s_when_autoconstructing (exec_while () print_integer exec_flush) (exec_do*count (integer_dup_times integer_gte integer_gt) exec_dup_times (boolean_invert_first_then_and) boolean_yankdup boolean_or exec_do*times (exec_y (boolean_or boolean_pop exec_s () (in3 boolean_stackdepth exec_do*times (exec_y_when_autoconstructing (exec_s (tag_integer_819 integer_add) (integer_eq) (print_integer) integer_dup_items) in3 exec_empty integer_inc exec_when (boolean_invert_second_then_and tag_integer_938 exec_when (exec_while (integer_fromboolean tag_exec_5 (integer_yankdup boolean_stackdepth in1 boolean_rot boolean_and exec_do*times () in2) boolean_xor integer_inc exec_empty boolean_dup integer_gte exec_when (tag_integer_27) tag_exec_934 (-57) integer_empty boolean_dup print_boolean exec_eq integer_empty exec_dup () boolean_dup_times print_newline exec_noop) boolean_shove)))) ()))) ()))
Zero cases best errors: [1 0 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 106
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (147 913 1000 256 913 1000 509 256 506 509)
Population mean number of elite cases: 6.01
Count of perfect (error zero) individuals by case: (147 913 0 256 913 0 509 256 506 509)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_55} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop})
Best program: (integer_sub exec_y_when_autoconstructing (integer_mult) integer_min boolean_invert_second_then_and exec_pop (integer_shove) integer_rot integer_max boolean_yank exec_k (in3 print_integer exec_do*while (integer_pop exec_do*while (integer_lt integer_dec) integer_gte exec_do*times (in2 integer_yank boolean_yankdup exec_when (integer_mult integer_mod exec_y_when_autoconstructing (boolean_or boolean_or boolean_flush integer_empty exec_if (integer_max tagged_55 boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_shove (exec_when (integer_yankdup in4 integer_gte boolean_invert_second_then_and boolean_xor integer_lte integer_pop))) ()) ()))))) ())
Errors: [1 0 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 64
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.991
Median total errors in population: 5
Error averages by case: (0.853 0.087 1.0 0.744 0.087 1.0 0.491 0.744 0.494 0.491)
Error minima by case: (0 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 49.283
Average program size in population (points): 64.313
Average percent parens in population: 0.234
Minimum age in population: 39.56376779079437
Maximum age in population: 43.99575571715832
Average age in population: 42.31020665298402
Median age in population: 42.37928752228618
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 13242547
--- Timings ---
Current time: 1559584550159 milliseconds
Total Time:          85.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.7 seconds, 70.0%
Fitness Testing:     14.7 seconds, 17.2%
Report:              10.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_55} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty})
Lexicase best program: (boolean_dup_times exec_stackdepth in1 integer_min boolean_invert_second_then_and exec_pop (integer_shove) exec_eq integer_max exec_s_when_autoconstructing (exec_k (in3 print_integer exec_do*while (integer_pop) integer_empty boolean_invert_second_then_and boolean_dup_items exec_empty) (exec_do*while (boolean_stackdepth boolean_dup_items integer_yank integer_div boolean_xor tagged_339 exec_dup_times () integer_inc exec_dup (print_integer) in3 boolean_flush integer_empty exec_if (integer_max tagged_55 boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_shove (integer_empty exec_dup_times (in3 integer_yank boolean_dup exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and integer_dup_items integer_lte integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_empty)) ())))) ()) ()))) () ())
Lexicase best errors: [1 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 81
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_55} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty})
Zero cases best program: (boolean_dup_times exec_stackdepth in1 integer_min boolean_invert_second_then_and exec_pop (integer_shove) exec_eq integer_max exec_s_when_autoconstructing (exec_k (in3 print_integer exec_do*while (integer_pop) integer_empty boolean_invert_second_then_and boolean_dup_items exec_empty) (exec_do*while (boolean_stackdepth boolean_dup_items integer_yank integer_div boolean_xor tagged_339 exec_dup_times () integer_inc exec_dup (print_integer) in3 boolean_flush integer_empty exec_if (integer_max tagged_55 boolean_or boolean_flush integer_empty exec_if (boolean_empty exec_shove (integer_empty exec_dup_times (in3 integer_yank boolean_dup exec_when (integer_yankdup in4 integer_yankdup boolean_invert_second_then_and integer_dup_items integer_lte integer_pop boolean_dup exec_k_when_autoconstructing (tag_exec_5 (integer_min exec_empty)) ())))) ()) ()))) () ())
Zero cases best errors: [1 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 81
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 310 469 144 472 472 468 613 468)
Population mean number of elite cases: 5.42
Count of perfect (error zero) individuals by case: (0 0 310 469 144 472 472 468 613 468)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_integer_27} {:close 0, :instruction tag_exec_934} {:close 1, :instruction -57} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times})
Best program: (in1 boolean_eq exec_empty integer_mult exec_do*while (integer_gt exec_s_when_autoconstructing (exec_k (in3 print_integer integer_mod) (integer_dup boolean_yankdup boolean_yank integer_lte exec_s_when_autoconstructing (exec_k (in3 print_integer exec_do*while (integer_div) boolean_or boolean_or) (exec_k (in3 print_integer boolean_pop integer_pop) (boolean_or boolean_or) exec_pop (exec_empty exec_yank integer_gte exec_dup_times (integer_empty integer_div boolean_frominteger tag_integer_27) tag_exec_934 (-57) boolean_not boolean_dup integer_swap exec_noop boolean_shove exec_pop (exec_do*times ())))) () ())) () ()))
Errors: [1 1 1 0 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 68
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 6.584
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.69 0.531 0.856 0.528 0.528 0.532 0.387 0.532)
Error minima by case: (1 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.684
Average program size in population (points): 64.618
Average percent parens in population: 0.231
Minimum age in population: 40.56376779079437
Maximum age in population: 45.7168590798974
Average age in population: 43.78999337654188
Median age in population: 43.89202683605254
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 13503566
--- Timings ---
Current time: 1559584552693 milliseconds
Total Time:          87.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.7 seconds, 70.3%
Fitness Testing:     14.9 seconds, 17.0%
Report:              11.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in1 print_integer integer_dup boolean_yankdup integer_dec boolean_flush integer_add print_integer integer_yank exec_empty exec_do*while (integer_min exec_eq integer_yank integer_div boolean_xor) tagged_339 boolean_dup_times)
Lexicase best errors: [1 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in1 print_integer integer_dup boolean_yankdup integer_dec boolean_flush integer_add print_integer integer_yank exec_empty exec_do*while (integer_min exec_eq integer_yank integer_div boolean_xor) tagged_339 boolean_dup_times)
Zero cases best errors: [1 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 2 117 1 143 143 143 117 143 144)
Population mean number of elite cases: 0.95
Count of perfect (error zero) individuals by case: (1 2 117 1 143 143 143 117 143 144)
Population mean number of perfect (error zero) cases: 0.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 1, :instruction tagged_339} {:close 0, :instruction boolean_dup_times})
Best program: (in1 print_integer integer_dup boolean_yankdup integer_dec boolean_flush integer_add print_integer integer_yank exec_empty exec_do*while (exec_noop exec_eq integer_eq integer_div boolean_xor) tagged_339 boolean_dup_times)
Errors: [1 1 1 1 0 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 9.046
Median total errors in population: 10
Error averages by case: (0.999 0.998 0.883 0.999 0.857 0.857 0.857 0.883 0.857 0.856)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.288
Average program size in population (points): 62.72
Average percent parens in population: 0.243
Minimum age in population: 41.56376779079437
Maximum age in population: 47.19474586471915
Average age in population: 45.24555008871295
Median age in population: 45.3477801354602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 13802570
--- Timings ---
Current time: 1559584555849 milliseconds
Total Time:          91.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.4 seconds, 70.8%
Fitness Testing:     15.3 seconds, 16.8%
Report:              11.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))) ()))
Lexicase best errors: [1 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))) ()))
Zero cases best errors: [1 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (305 945 1 211 1 1 211 1 211 305)
Population mean number of elite cases: 2.19
Count of perfect (error zero) individuals by case: (305 945 1 211 1 1 211 1 211 305)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))) ()))
Errors: [1 0 0 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 37
Size: 49
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 7.808
Median total errors in population: 7
Error averages by case: (0.695 0.055 0.999 0.789 0.999 0.999 0.789 0.999 0.789 0.695)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.419
Average program size in population (points): 55.965
Average percent parens in population: 0.224
Minimum age in population: 42.85444894433022
Maximum age in population: 48.67487497907132
Average age in population: 46.93748100646585
Median age in population: 47.16067377664149
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 186
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 14291565
--- Timings ---
Current time: 1559584558168 milliseconds
Total Time:          93.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.1 seconds, 70.8%
Fitness Testing:     15.7 seconds, 16.8%
Report:              11.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))) ()))
Lexicase best errors: [1 0 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))) ()))
Zero cases best errors: [1 0 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 399 399 193 1000 399 913 192 200 399)
Population mean number of elite cases: 5.09
Count of perfect (error zero) individuals by case: (0 399 399 193 0 399 913 192 200 399)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))) ()))
Errors: [1 0 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 49
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 6.906
Median total errors in population: 6
Error averages by case: (1.0 0.601 0.601 0.807 1.0 0.601 0.087 0.808 0.8 0.601)
Error minima by case: (1 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 41.536
Average program size in population (points): 54.214
Average percent parens in population: 0.236
Minimum age in population: 46.094208214432
Maximum age in population: 50.30761491553858
Average age in population: 48.71365026102168
Median age in population: 48.61129460274242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 244
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 246
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 14608742
--- Timings ---
Current time: 1559584560701 milliseconds
Total Time:          95.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.1 seconds, 71.0%
Fitness Testing:     16.0 seconds, 16.7%
Report:              11.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))) ()))
Lexicase best errors: [1 0 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))) ()))
Zero cases best errors: [1 0 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 507 1000 507 393 393 875 507 507 1000)
Population mean number of elite cases: 6.69
Count of perfect (error zero) individuals by case: (0 507 0 507 393 393 875 507 507 0)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_pop})
Best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty) integer_add boolean_empty exec_y_when_autoconstructing (boolean_xor tagged_339 exec_dup_times () integer_inc boolean_yank) print_integer exec_dup_items integer_mod exec_pop ()))
Errors: [1 0 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 29
Size: 35
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 6.311
Median total errors in population: 5
Error averages by case: (1.0 0.493 1.0 0.493 0.607 0.607 0.125 0.493 0.493 1.0)
Error minima by case: (1 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 37.83
Average program size in population (points): 50.599
Average percent parens in population: 0.252
Minimum age in population: 47.90025832131505
Maximum age in population: 51.90672895172611
Average age in population: 50.32094484501169
Median age in population: 50.37826831499115
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 185
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 189
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 15190751
--- Timings ---
Current time: 1559584563426 milliseconds
Total Time:          98.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.1 seconds, 71.1%
Fitness Testing:     16.5 seconds, 16.7%
Report:              11.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 593 1 1 292 1 304 293 1 1)
Population mean number of elite cases: 1.49
Count of perfect (error zero) individuals by case: (1 593 1 1 292 1 304 293 1 1)
Population mean number of perfect (error zero) cases: 1.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 8.512
Median total errors in population: 9
Error averages by case: (0.999 0.407 0.999 0.999 0.708 0.999 0.696 0.707 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.752
Average program size in population (points): 50.266
Average percent parens in population: 0.248
Minimum age in population: 49.66832094313577
Maximum age in population: 53.46957151999231
Average age in population: 51.8176547613492
Median age in population: 51.8724833058659
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 15689730
--- Timings ---
Current time: 1559584565923 milliseconds
Total Time:         101.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.9 seconds, 71.2%
Fitness Testing:     16.9 seconds, 16.7%
Report:              12.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup) boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1 print_integer integer_dup_items)))) ())
Lexicase best errors: [0 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup) boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1 print_integer integer_dup_items)))) ())
Zero cases best errors: [0 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (499 100 366 366 509 228 101 181 181 100)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (499 100 366 366 509 228 101 181 181 100)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer})
Best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub integer_fromboolean integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer)))
Errors: [0 0 1 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.369
Median total errors in population: 8
Error averages by case: (0.501 0.9 0.634 0.634 0.491 0.772 0.899 0.819 0.819 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.311
Average program size in population (points): 46.369
Average percent parens in population: 0.236
Minimum age in population: 51.14199272939004
Maximum age in population: 55.06543553742813
Average age in population: 53.96103069963958
Median age in population: 53.88472386950161
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 236
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 241
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 16152245
--- Timings ---
Current time: 1559584568292 milliseconds
Total Time:         103.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.6 seconds, 71.2%
Fitness Testing:     17.3 seconds, 16.7%
Report:              12.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Lexicase best errors: [1 1 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Zero cases best errors: [1 1 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (245 364 153 245 245 153 364 154 871 153)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (245 364 153 245 245 153 364 154 871 153)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer) integer_dup_items))
Errors: [1 1 0 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.053
Median total errors in population: 7
Error averages by case: (0.755 0.636 0.847 0.755 0.755 0.847 0.636 0.846 0.129 0.847)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.564
Average program size in population (points): 47.911
Average percent parens in population: 0.235
Minimum age in population: 52.16067377664149
Maximum age in population: 56.9275114054908
Average age in population: 55.33577163973646
Median age in population: 55.40615250676638
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 16515215
--- Timings ---
Current time: 1559584571561 milliseconds
Total Time:         106.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.3 seconds, 71.6%
Fitness Testing:     17.6 seconds, 16.5%
Report:              12.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))))
Lexicase best errors: [0 0 1 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))))
Zero cases best errors: [0 0 1 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (558 388 307 170 1000 1000 387 170 388 170)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (558 388 307 170 0 0 387 170 388 170)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Errors: [0 0 1 1 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 7.462
Median total errors in population: 6
Error averages by case: (0.442 0.612 0.693 0.83 1.0 1.0 0.613 0.83 0.612 0.83)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 35.284
Average program size in population (points): 45.753
Average percent parens in population: 0.227
Minimum age in population: 54.19140924443491
Maximum age in population: 58.79823786110501
Average age in population: 57.02477195965468
Median age in population: 57.06720693585521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 16832347
--- Timings ---
Current time: 1559584575012 milliseconds
Total Time:         110.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.2 seconds, 71.9%
Fitness Testing:     17.9 seconds, 16.3%
Report:              12.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup integer_dup_times integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Lexicase best errors: [1 1 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup integer_dup_times integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Zero cases best errors: [1 1 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (413 1000 1000 361 413 361 869 361 361 412)
Population mean number of elite cases: 5.55
Count of perfect (error zero) individuals by case: (413 0 0 361 413 361 869 361 361 412)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth})
Best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_stackdepth)))
Errors: [1 1 1 0 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.449
Median total errors in population: 6
Error averages by case: (0.587 1.0 1.0 0.639 0.587 0.639 0.131 0.639 0.639 0.588)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 35.574
Average program size in population (points): 45.997
Average percent parens in population: 0.224
Minimum age in population: 55.29844898730516
Maximum age in population: 60.31874730118579
Average age in population: 58.41756341860234
Median age in population: 58.49906371662655
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 17155745
--- Timings ---
Current time: 1559584577626 milliseconds
Total Time:         112.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.2 seconds, 72.1%
Fitness Testing:     18.3 seconds, 16.2%
Report:              13.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_808} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_pop})
Lexicase best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec tagged_808 integer_add integer_empty boolean_invert_second_then_and boolean_or) (exec_y_when_autoconstructing (boolean_xor tagged_339 exec_dup_times () integer_inc boolean_yank) print_integer exec_dup_items integer_mod exec_pop ()) ()))
Lexicase best errors: [1 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 41
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_808} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_pop})
Zero cases best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec tagged_808 integer_add integer_empty boolean_invert_second_then_and boolean_or) (exec_y_when_autoconstructing (boolean_xor tagged_339 exec_dup_times () integer_inc boolean_yank) print_integer exec_dup_items integer_mod exec_pop ()) ()))
Zero cases best errors: [1 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 41
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 474 474 3 1000 1000 395 872 395 395)
Population mean number of elite cases: 6.01
Count of perfect (error zero) individuals by case: (0 474 474 3 0 0 395 872 395 395)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_pop})
Best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_dup_times exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush integer_empty) integer_add boolean_empty exec_y_when_autoconstructing (boolean_xor tagged_339 exec_dup_times () integer_inc boolean_yank) print_integer exec_dup_items integer_mod exec_pop ()) () ()))
Errors: [1 1 1 1 1 1 0 0 0 0]
Total: 6
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 6.992
Median total errors in population: 7
Error averages by case: (1.0 0.526 0.526 0.997 1.0 1.0 0.605 0.128 0.605 0.605)
Error minima by case: (1 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 34.999
Average program size in population (points): 45.055
Average percent parens in population: 0.221
Minimum age in population: 56.29844898730516
Maximum age in population: 61.80310813016695
Average age in population: 59.92352110217149
Median age in population: 59.98883453444614
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 17492373
--- Timings ---
Current time: 1559584580368 milliseconds
Total Time:         115.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.4 seconds, 72.2%
Fitness Testing:     18.6 seconds, 16.1%
Report:              13.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items in2 boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Lexicase best errors: [0 1 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items in2 boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Zero cases best errors: [0 1 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (282 443 282 1000 282 1000 1000 133 723 1000)
Population mean number of elite cases: 6.14
Count of perfect (error zero) individuals by case: (282 443 282 0 282 0 0 133 723 0)
Population mean number of perfect (error zero) cases: 2.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_dup_items integer_add in1 print_integer integer_dup_items)
Errors: [0 1 0 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 24
Size: 26
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 7.855
Median total errors in population: 8
Error averages by case: (0.718 0.557 0.718 1.0 0.718 1.0 1.0 0.867 0.277 1.0)
Error minima by case: (0 0 0 1 0 1 1 0 0 1)
Average genome size in population (length): 34.802
Average program size in population (points): 45.011
Average percent parens in population: 0.223
Minimum age in population: 58.73710682310048
Maximum age in population: 63.44397168901742
Average age in population: 61.35853954907702
Median age in population: 61.43775469149205
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 17816109
--- Timings ---
Current time: 1559584582705 milliseconds
Total Time:         117.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.2 seconds, 72.3%
Fitness Testing:     18.9 seconds, 16.0%
Report:              13.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop exec_when (boolean_yank exec_noop integer_div in3 integer_dec boolean_dup_items integer_add boolean_yankdup integer_mod integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (boolean_xor in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))
Lexicase best errors: [0 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop exec_when (boolean_yank exec_noop integer_div in3 integer_dec boolean_dup_items integer_add boolean_yankdup integer_mod integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (boolean_xor in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))
Zero cases best errors: [0 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (594 309 171 594 138 589 138 1000 592 589)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (594 309 171 594 138 589 138 0 592 589)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Best program: (in3 exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Errors: [0 1 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 32
Size: 41
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.286
Median total errors in population: 5
Error averages by case: (0.406 0.691 0.829 0.406 0.862 0.411 0.862 1.0 0.408 0.411)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 33.757
Average program size in population (points): 43.555
Average percent parens in population: 0.223
Minimum age in population: 59.89509575089323
Maximum age in population: 64.62070670100002
Average age in population: 62.88465449389648
Median age in population: 62.97897533541845
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 18148328
--- Timings ---
Current time: 1559584585368 milliseconds
Total Time:         120.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.3 seconds, 72.5%
Fitness Testing:     19.2 seconds, 16.0%
Report:              13.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_do*range (exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items exec_s (integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) boolean_rot exec_rot (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)) () ()))
Lexicase best errors: [1 1 1 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 43
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_do*range (exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items exec_s (integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) boolean_rot exec_rot (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)) () ()))
Zero cases best errors: [1 1 1 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 43
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (499 1000 500 1000 1000 232 132 1000 232 132)
Population mean number of elite cases: 5.73
Count of perfect (error zero) individuals by case: (499 0 500 0 0 232 132 0 232 132)
Population mean number of perfect (error zero) cases: 1.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Errors: [0 1 0 1 1 1 1 1 1 1]
Total: 8
Mean: 0.8
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 8.273
Median total errors in population: 8
Error averages by case: (0.501 1.0 0.5 1.0 1.0 0.768 0.868 1.0 0.768 0.868)
Error minima by case: (0 1 0 1 1 0 0 1 0 0)
Average genome size in population (length): 33.289
Average program size in population (points): 42.996
Average percent parens in population: 0.222
Minimum age in population: 60.89509575089323
Maximum age in population: 66.11844095290644
Average age in population: 64.38134611773386
Median age in population: 64.46707461173605
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 18475544
--- Timings ---
Current time: 1559584587892 milliseconds
Total Time:         123.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.3 seconds, 72.6%
Fitness Testing:     19.6 seconds, 15.9%
Report:              14.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 2, :instruction tag_integer_819} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec exec_when (integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add boolean_invert_second_then_and in4) exec_y_when_autoconstructing (boolean_eq tag_integer_819) integer_add in1 print_integer integer_dup_items)
Lexicase best errors: [1 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.121
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 2, :instruction tag_integer_819} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec exec_when (integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add boolean_invert_second_then_and in4) exec_y_when_autoconstructing (boolean_eq tag_integer_819) integer_add in1 print_integer integer_dup_items)
Zero cases best errors: [1 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.121
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 320 320 282 320 1000 282 288 282 282)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (0 320 320 282 320 0 282 288 282 282)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_not boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup integer_lt integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_eq boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (exec_when () tag_integer_819) integer_add) in1 boolean_xor integer_fromboolean exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s () (tag_integer_819) (integer_add) integer_add) in1) print_integer integer_dup_items)
Errors: [1 1 1 0 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 42
Size: 55
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 7.624
Median total errors in population: 7
Error averages by case: (1.0 0.68 0.68 0.718 0.68 1.0 0.718 0.712 0.718 0.718)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 34.102
Average program size in population (points): 44.132
Average percent parens in population: 0.222
Minimum age in population: 61.89509575089323
Maximum age in population: 67.71244874537774
Average age in population: 65.80779530997982
Median age in population: 65.87174066592729
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 18794826
--- Timings ---
Current time: 1559584590468 milliseconds
Total Time:         125.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.2 seconds, 72.7%
Fitness Testing:     19.9 seconds, 15.8%
Report:              14.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: 49                 
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 54                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 90                 
Correct output: 46                  | Program output: 73                 
Correct output: 16                  | Program output: 96                 
Correct output: 40                  | Program output: 70                 
Correct output: 16                  | Program output: 59                 
Correct output: 6                   | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 68                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 28                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 46                 
Correct output: 0                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 69                 
Correct output: -41                 | Program output: 74                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: 17                 
Correct output: 16                  | Program output: 97                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: 55                 
Correct output: -75                 | Program output: 65                 
Correct output: -46                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: 2                  
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: 2                  
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -9                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: 98                 
Correct output: -78                 | Program output: 73                 
Correct output: -30                 | Program output: 86                 
Correct output: -62                 | Program output: -59                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: 81                 
Correct output: -76                 | Program output: 60                 
Correct output: -29                 | Program output: -18                
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: 52                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: 55                 
Correct output: -71                 | Program output: -61                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 82                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: 61                 
Correct output: -82                 | Program output: 81                 
Correct output: -56                 | Program output: 45                 
Correct output: -73                 | Program output: 93                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 53                 
Correct output: -76                 | Program output: 90                 
Correct output: -48                 | Program output: 22                 
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -29                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) print_integer integer_dup_items))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) print_integer integer_dup_items))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (345 894 114 114 891 459 431 114 430 1000)
Population mean number of elite cases: 4.79
Count of perfect (error zero) individuals by case: (345 894 114 114 891 459 431 114 430 0)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop})
Best program: (in4 print_integer exec_noop boolean_yankdup boolean_stackdepth exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (boolean_flush) (in1) print_integer boolean_pop))) ()))
Errors: [1 0 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 37
Size: 49
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 6.208
Median total errors in population: 6
Error averages by case: (0.655 0.106 0.886 0.886 0.109 0.541 0.569 0.886 0.57 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 34.447
Average program size in population (points): 44.511
Average percent parens in population: 0.221
Minimum age in population: 64.35687363233592
Maximum age in population: 69.31430971714508
Average age in population: 67.26860164922613
Median age in population: 67.33111411549442
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.711
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 19114830
--- Timings ---
Current time: 1559584593125 milliseconds
Total Time:         128.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.4 seconds, 72.8%
Fitness Testing:     20.2 seconds, 15.7%
Report:              14.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: 49                 
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 54                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 90                 
Correct output: 46                  | Program output: 73                 
Correct output: 16                  | Program output: 96                 
Correct output: 40                  | Program output: 70                 
Correct output: 16                  | Program output: 59                 
Correct output: 6                   | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 68                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 28                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 46                 
Correct output: 0                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 69                 
Correct output: -41                 | Program output: 74                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: 17                 
Correct output: 16                  | Program output: 97                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: 55                 
Correct output: -75                 | Program output: 65                 
Correct output: -46                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: 2                  
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: 2                  
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -9                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: 98                 
Correct output: -78                 | Program output: 73                 
Correct output: -30                 | Program output: 86                 
Correct output: -62                 | Program output: -59                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: 81                 
Correct output: -76                 | Program output: 60                 
Correct output: -29                 | Program output: -18                
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: 52                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: 55                 
Correct output: -71                 | Program output: -61                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 82                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: 61                 
Correct output: -82                 | Program output: 81                 
Correct output: -56                 | Program output: 45                 
Correct output: -73                 | Program output: 93                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 53                 
Correct output: -76                 | Program output: 90                 
Correct output: -48                 | Program output: 22                 
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -29                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in4 print_integer boolean_stackdepth boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup exec_s_when_autoconstructing (integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (boolean_flush) (in1) print_integer integer_dup_items))) ()) () ()))
Lexicase best errors: [1 1 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 52
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in4 print_integer boolean_stackdepth boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup exec_s_when_autoconstructing (integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (boolean_flush) (in1) print_integer integer_dup_items))) ()) () ()))
Zero cases best errors: [1 1 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 52
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 232 479 170 480 480 170 1 231)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (0 0 232 479 170 480 480 170 1 231)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_dup_items})
Best program: (in4 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (exec_y () tagged_339 exec_dup_times () integer_dup_items) ()))) ()))
Errors: [1 1 1 0 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 38
Size: 52
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.757
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.768 0.521 0.83 0.52 0.52 0.83 0.999 0.769)
Error minima by case: (1 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.312
Average program size in population (points): 43.042
Average percent parens in population: 0.219
Minimum age in population: 66.09937631990579
Maximum age in population: 71.13014737924868
Average age in population: 68.71659750803823
Median age in population: 68.77693846373745
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 19426721
--- Timings ---
Current time: 1559584595834 milliseconds
Total Time:         131.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.6 seconds, 73.0%
Fitness Testing:     20.5 seconds, 15.6%
Report:              14.8 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add) boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (exec_swap () (exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))))
Lexicase best errors: [0 1 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add) boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (exec_swap () (exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))))
Zero cases best errors: [0 1 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 552 1000 209 224 329 223 329 210 210)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (210 552 0 209 224 329 223 329 210 210)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items exec_if (boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor in1) print_integer integer_dup_items))
Errors: [0 1 1 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 25
Size: 29
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 7.504
Median total errors in population: 7
Error averages by case: (0.79 0.448 1.0 0.791 0.776 0.671 0.777 0.671 0.79 0.79)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 33.969
Average program size in population (points): 43.582
Average percent parens in population: 0.216
Minimum age in population: 67.20741315597115
Maximum age in population: 72.34990307299978
Average age in population: 70.36926110612058
Median age in population: 70.48709570373184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 19738243
--- Timings ---
Current time: 1559584598391 milliseconds
Total Time:         133.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.6 seconds, 73.1%
Fitness Testing:     20.8 seconds, 15.6%
Report:              15.0 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: 49                 
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 54                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 90                 
Correct output: 46                  | Program output: 73                 
Correct output: 16                  | Program output: 96                 
Correct output: 40                  | Program output: 70                 
Correct output: 16                  | Program output: 59                 
Correct output: 6                   | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 68                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 28                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 46                 
Correct output: 0                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 69                 
Correct output: -41                 | Program output: 74                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: 17                 
Correct output: 16                  | Program output: 97                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: 55                 
Correct output: -75                 | Program output: 65                 
Correct output: -46                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: 2                  
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: 2                  
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -9                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: 98                 
Correct output: -78                 | Program output: 73                 
Correct output: -30                 | Program output: 86                 
Correct output: -62                 | Program output: -59                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: 81                 
Correct output: -76                 | Program output: 60                 
Correct output: -29                 | Program output: -18                
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: 52                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: 55                 
Correct output: -71                 | Program output: -61                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 82                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: 61                 
Correct output: -82                 | Program output: 81                 
Correct output: -56                 | Program output: 45                 
Correct output: -73                 | Program output: 93                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 53                 
Correct output: -76                 | Program output: 90                 
Correct output: -48                 | Program output: 22                 
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -29                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in4 print_integer exec_noop exec_k (boolean_yank boolean_dup_times in1 in3 integer_dec boolean_dup_items boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items exec_s (integer_dup_items exec_if () (exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (exec_rot (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))) () ()))
Lexicase best errors: [1 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in4 print_integer exec_noop exec_k (boolean_yank boolean_dup_times in1 in3 integer_dec boolean_dup_items boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items exec_s (integer_dup_items exec_if () (exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (exec_rot (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))) () ()))
Zero cases best errors: [1 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 256 258 354 258 1000 256 258 258)
Population mean number of elite cases: 4.90
Count of perfect (error zero) individuals by case: (0 0 256 258 354 258 0 256 258 258)
Population mean number of perfect (error zero) cases: 1.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in4 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (boolean_flush) (in1) print_integer integer_dup_items))) ()))
Errors: [1 1 1 0 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 37
Size: 49
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 8.102
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.744 0.742 0.646 0.742 1.0 0.744 0.742 0.742)
Error minima by case: (1 1 0 0 0 0 1 0 0 0)
Average genome size in population (length): 32.998
Average program size in population (points): 42.396
Average percent parens in population: 0.216
Minimum age in population: 68.69708890518041
Maximum age in population: 73.7899209629704
Average age in population: 71.8139349187362
Median age in population: 71.91049747289237
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 20047353
--- Timings ---
Current time: 1559584601325 milliseconds
Total Time:         136.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.0 seconds, 73.3%
Fitness Testing:     21.1 seconds, 15.5%
Report:              15.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items in3 integer_dec boolean_dup_items integer_add integer_dup_times boolean_flush integer_dec boolean_yankdup integer_add integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_eq) (in4 integer_empty exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))) ()))
Lexicase best errors: [0 1 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items in3 integer_dec boolean_dup_items integer_add integer_dup_times boolean_flush integer_dec boolean_yankdup integer_add integer_sub exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_eq) (in4 integer_empty exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))) ()))
Zero cases best errors: [0 1 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 485 128 394 485 881 128 1000 266 266)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (128 485 128 394 485 881 128 0 266 266)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup exec_do*while (integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items integer_dup_items in4 integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))))
Errors: [0 1 0 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.839
Median total errors in population: 7
Error averages by case: (0.872 0.515 0.872 0.606 0.515 0.119 0.872 1.0 0.734 0.734)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 32.625
Average program size in population (points): 41.828
Average percent parens in population: 0.213
Minimum age in population: 70.07377565861597
Maximum age in population: 75.19507300370977
Average age in population: 73.30726390963585
Median age in population: 73.38194349364342
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 20342439
--- Timings ---
Current time: 1559584604288 milliseconds
Total Time:         139.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.4 seconds, 73.5%
Fitness Testing:     21.4 seconds, 15.3%
Report:              15.4 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_integer_819} {:close 0, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add integer_min boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items exec_s (integer_dup_items exec_if () (exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (exec_rot (tag_integer_819) (integer_add in1) () print_integer integer_dup_items)))) () ())
Lexicase best errors: [0 1 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_integer_819} {:close 0, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add integer_min boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items exec_s (integer_dup_items exec_if () (exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (exec_rot (tag_integer_819) (integer_add in1) () print_integer integer_dup_items)))) () ())
Zero cases best errors: [0 1 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (395 1000 1000 394 275 275 275 275 397 394)
Population mean number of elite cases: 4.68
Count of perfect (error zero) individuals by case: (395 0 0 394 275 275 275 275 397 394)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup exec_do*while (boolean_xor) integer_dup_items exec_if () (boolean_shove in4) exec_y_when_autoconstructing () exec_s (tag_integer_819 integer_add) (in1) (print_integer integer_dup_items))))
Errors: [0 1 1 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 33
Size: 43
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.32
Median total errors in population: 6
Error averages by case: (0.605 1.0 1.0 0.606 0.725 0.725 0.725 0.725 0.603 0.606)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 32.531
Average program size in population (points): 41.481
Average percent parens in population: 0.212
Minimum age in population: 71.07377565861597
Maximum age in population: 76.9283020009921
Average age in population: 74.83849663274741
Median age in population: 74.8882438843679
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 20663655
--- Timings ---
Current time: 1559584606917 milliseconds
Total Time:         142.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.5 seconds, 73.6%
Fitness Testing:     21.7 seconds, 15.3%
Report:              15.7 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (boolean_shove boolean_rot boolean_yankdup integer_mod integer_dec exec_shove (integer_add boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) boolean_yankdup integer_stackdepth boolean_or integer_add integer_dup_items print_integer integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))))
Lexicase best errors: [0 1 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (boolean_shove boolean_rot boolean_yankdup integer_mod integer_dec exec_shove (integer_add boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) boolean_yankdup integer_stackdepth boolean_or integer_add integer_dup_items print_integer integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))))
Zero cases best errors: [0 1 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (423 482 422 475 422 423 1000 7 421 475)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (423 482 422 475 422 423 0 7 421 475)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (boolean_shove boolean_rot boolean_yankdup integer_mod integer_dec exec_shove (integer_add boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) boolean_yankdup integer_stackdepth boolean_or integer_add integer_dup_items print_integer integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))))
Errors: [0 1 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 44
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.45
Median total errors in population: 7
Error averages by case: (0.577 0.518 0.578 0.525 0.578 0.577 1.0 0.993 0.579 0.525)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 32.554
Average program size in population (points): 41.275
Average percent parens in population: 0.206
Minimum age in population: 73.42593025512535
Maximum age in population: 78.13402436528958
Average age in population: 76.41739736621255
Median age in population: 76.50698658378828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 20976597
--- Timings ---
Current time: 1559584609425 milliseconds
Total Time:         144.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       106.4 seconds, 73.7%
Fitness Testing:     22.0 seconds, 15.2%
Report:              16.0 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction tagged_339} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (in3 print_integer exec_noop boolean_swap boolean_yank exec_noop exec_y_when_autoconstructing () in3 integer_dec boolean_dup_items integer_add boolean_and boolean_flush integer_sub boolean_yankdup integer_div boolean_xor tagged_339 boolean_frominteger integer_dup_items boolean_yank integer_max exec_empty boolean_flush boolean_shove boolean_or integer_yankdup exec_do*times (exec_pop (boolean_dup) print_integer exec_flush integer_pop) boolean_dup boolean_dup_times tag_exec_5 (integer_yankdup boolean_stackdepth))
Lexicase best errors: [1 1 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.116
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction tagged_339} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tag_exec_5} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (in3 print_integer exec_noop boolean_swap boolean_yank exec_noop exec_y_when_autoconstructing () in3 integer_dec boolean_dup_items integer_add boolean_and boolean_flush integer_sub boolean_yankdup integer_div boolean_xor tagged_339 boolean_frominteger integer_dup_items boolean_yank integer_max exec_empty boolean_flush boolean_shove boolean_or integer_yankdup exec_do*times (exec_pop (boolean_dup) print_integer exec_flush integer_pop) boolean_dup boolean_dup_times tag_exec_5 (integer_yankdup boolean_stackdepth))
Zero cases best errors: [1 1 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.116
--- Lexicase Population Statistics ---
Count of elite individuals by case: (479 137 269 1000 269 269 888 1000 137 269)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (479 137 269 0 269 269 888 0 137 269)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_985} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 print_integer exec_noop exec_flush boolean_not boolean_yankdup boolean_and boolean_flush print_exec (boolean_invert_first_then_and) -28 boolean_invert_second_then_and integer_yank boolean_yankdup tag_boolean_985 boolean_swap print_integer boolean_yankdup boolean_and boolean_flush integer_add integer_eq boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (exec_when ()) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer) integer_dup_items))
Errors: [1 1 0 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 7.283
Median total errors in population: 8
Error averages by case: (0.521 0.863 0.731 1.0 0.731 0.731 0.112 1.0 0.863 0.731)
Error minima by case: (0 0 0 1 0 0 0 1 0 0)
Average genome size in population (length): 32.202
Average program size in population (points): 40.878
Average percent parens in population: 0.209
Minimum age in population: 74.85632367720035
Maximum age in population: 79.72415930193335
Average age in population: 77.90079415453515
Median age in population: 77.95697846953729
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 21304174
--- Timings ---
Current time: 1559584611678 milliseconds
Total Time:         146.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.3 seconds, 73.7%
Fitness Testing:     22.4 seconds, 15.2%
Report:              16.2 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4})
Lexicase best program: (in4 in3 print_integer integer_lt boolean_yankdup in4 exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_empty boolean_invert_second_then_and integer_yank exec_empty) integer_gte boolean_stackdepth boolean_dup_items integer_add boolean_pop boolean_invert_second_then_and boolean_or in3 integer_dup_items boolean_xor print_integer exec_if () (exec_y_when_autoconstructing (in4)))
Lexicase best errors: [1 0 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.128
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4})
Zero cases best program: (in4 in3 print_integer integer_lt boolean_yankdup in4 exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_empty boolean_invert_second_then_and integer_yank exec_empty) integer_gte boolean_stackdepth boolean_dup_items integer_add boolean_pop boolean_invert_second_then_and boolean_or in3 integer_dup_items boolean_xor print_integer exec_if () (exec_y_when_autoconstructing (in4)))
Zero cases best errors: [1 0 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (120 520 251 250 1000 643 250 523 521 521)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (120 520 251 250 0 643 250 523 521 521)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4})
Best program: (boolean_not in3 print_integer integer_lt boolean_yankdup in4 exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_empty boolean_invert_second_then_and integer_yank exec_empty) integer_gte boolean_stackdepth boolean_dup_items integer_add boolean_pop boolean_invert_second_then_and boolean_or in3 integer_dup_items boolean_xor print_integer exec_if () (exec_y_when_autoconstructing (in4)))
Errors: [1 0 1 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 39
Percent parens: 0.128
--- Population Statistics ---
Average total errors in population: 6.401
Median total errors in population: 5
Error averages by case: (0.88 0.48 0.749 0.75 1.0 0.357 0.75 0.477 0.479 0.479)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 30.573
Average program size in population (points): 38.773
Average percent parens in population: 0.207
Minimum age in population: 76.06802224386321
Maximum age in population: 81.43777437879947
Average age in population: 79.34359633854147
Median age in population: 79.35794915509798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 21603474
--- Timings ---
Current time: 1559584614627 milliseconds
Total Time:         149.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       110.7 seconds, 73.9%
Fitness Testing:     22.7 seconds, 15.1%
Report:              16.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop})
Lexicase best program: (boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush boolean_dup_items integer_add boolean_yankdup boolean_flush) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (boolean_flush) (in1) print_integer boolean_pop))
Lexicase best errors: [1 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop})
Zero cases best program: (boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush boolean_dup_items integer_add boolean_yankdup boolean_flush) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (boolean_flush) (in1) print_integer boolean_pop))
Zero cases best errors: [1 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 287 889 488 1000 890 114 114 889 1000)
Population mean number of elite cases: 6.67
Count of perfect (error zero) individuals by case: (0 287 889 488 0 890 114 114 889 0)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer})
Best program: (in3 integer_div boolean_flush exec_s_when_autoconstructing (boolean_yank exec_noop exec_y_when_autoconstructing (boolean_yank exec_noop exec_y_when_autoconstructing () in3 integer_dec boolean_dup_items boolean_yankdup boolean_flush integer_dec boolean_yankdup boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer)))) () ())
Errors: [1 1 0 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 44
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 6.329
Median total errors in population: 6
Error averages by case: (1.0 0.713 0.111 0.512 1.0 0.11 0.886 0.886 0.111 1.0)
Error minima by case: (1 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 30.126
Average program size in population (points): 38.16
Average percent parens in population: 0.205
Minimum age in population: 77.06802224386321
Maximum age in population: 82.7839484190902
Average age in population: 80.78494671819092
Median age in population: 80.83957898501046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 21899481
--- Timings ---
Current time: 1559584617082 milliseconds
Total Time:         152.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       112.6 seconds, 74.0%
Fitness Testing:     23.0 seconds, 15.1%
Report:              16.5 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 619
Test mean error for best: 0.61900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in3 integer_gt exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))))
Lexicase best errors: [0 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in3 integer_gt exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))))
Zero cases best errors: [0 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (416 417 460 417 883 421 241 241 241 1000)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (416 417 460 417 883 421 241 241 241 0)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop integer_gte boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add exec_while (boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) boolean_dup_times exec_s (tag_integer_819) (exec_yank) (in1) print_integer integer_dup_items)))
Errors: [0 0 1 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.263
Median total errors in population: 5
Error averages by case: (0.584 0.583 0.54 0.583 0.117 0.579 0.759 0.759 0.759 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 31.07
Average program size in population (points): 39.564
Average percent parens in population: 0.209
Minimum age in population: 79.46305017121857
Maximum age in population: 84.03948887145665
Average age in population: 82.16712898530982
Median age in population: 82.21696125846643
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 22221556
--- Timings ---
Current time: 1559584619651 milliseconds
Total Time:         154.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       114.6 seconds, 74.1%
Fitness Testing:     23.3 seconds, 15.0%
Report:              16.7 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction 40} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup 40 exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add exec_do*while (boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_mult exec_if () (exec_y_when_autoconstructing () in4 exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))))
Lexicase best errors: [0 1 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction 40} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup 40 exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add exec_do*while (boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_mult exec_if () (exec_y_when_autoconstructing () in4 exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))))
Zero cases best errors: [0 1 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (428 3 451 882 882 424 1000 2 1000 3)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (428 3 451 882 882 424 0 2 0 3)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction 0} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_swap boolean_yank exec_noop exec_y_when_autoconstructing () in3 integer_dec boolean_dup_items integer_add boolean_and boolean_flush integer_sub boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_inc 0 integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Errors: [0 1 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.925
Median total errors in population: 7
Error averages by case: (0.572 0.997 0.549 0.118 0.118 0.576 1.0 0.998 1.0 0.997)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 31.041
Average program size in population (points): 39.315
Average percent parens in population: 0.203
Minimum age in population: 80.46305017121857
Maximum age in population: 85.58020667945975
Average age in population: 83.6758672440172
Median age in population: 83.73174015212408
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 22536052
--- Timings ---
Current time: 1559584622398 milliseconds
Total Time:         157.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       116.8 seconds, 74.2%
Fitness Testing:     23.6 seconds, 15.0%
Report:              17.0 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop integer_gt boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items) integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (exec_s () (tag_integer_819) (integer_add) in1) print_integer integer_dup_items)))
Lexicase best errors: [1 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop integer_gt boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items) integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (exec_s () (tag_integer_819) (integer_add) in1) print_integer integer_dup_items)))
Zero cases best errors: [1 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 616 475 312 306 786 786 305 304 169)
Population mean number of elite cases: 5.06
Count of perfect (error zero) individuals by case: (0 616 475 312 306 786 786 305 304 169)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_items})
Best program: (in3 boolean_yankdup integer_dec boolean_yankdup integer_add exec_shove (boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Errors: [1 0 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 5.941
Median total errors in population: 5
Error averages by case: (1.0 0.384 0.525 0.688 0.694 0.214 0.214 0.695 0.696 0.831)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.312
Average program size in population (points): 36.72
Average percent parens in population: 0.230
Minimum age in population: 82.42633545952086
Maximum age in population: 87.31478250896666
Average age in population: 85.2660143362477
Median age in population: 85.33938473825413
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 22824341
--- Timings ---
Current time: 1559584624697 milliseconds
Total Time:         159.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       118.6 seconds, 74.2%
Fitness Testing:     23.9 seconds, 14.9%
Report:              17.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop in3 boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add exec_while (boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if (exec_y_when_autoconstructing (in4) boolean_dup_times exec_s (tag_integer_819) (exec_yank) (in1) print_integer boolean_yankdup boolean_flush integer_dup_items boolean_xor integer_dup_items exec_if (integer_empty integer_lte boolean_or) (integer_dup_items integer_min integer_stackdepth exec_if () (exec_y_when_autoconstructing (in4) print_integer integer_dup_items))) ()))
Lexicase best errors: [1 0 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 63
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop in3 boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add exec_while (boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if (exec_y_when_autoconstructing (in4) boolean_dup_times exec_s (tag_integer_819) (exec_yank) (in1) print_integer boolean_yankdup boolean_flush integer_dup_items boolean_xor integer_dup_items exec_if (integer_empty integer_lte boolean_or) (integer_dup_items integer_min integer_stackdepth exec_if () (exec_y_when_autoconstructing (in4) print_integer integer_dup_items))) ()))
Zero cases best errors: [1 0 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 63
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 432 432 268 432 188 1000 268 902 268)
Population mean number of elite cases: 5.19
Count of perfect (error zero) individuals by case: (0 432 432 268 432 188 0 268 902 268)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop integer_gt boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush exec_noop boolean_yankdup exec_do*while (integer_empty boolean_invert_second_then_and boolean_or) integer_mult integer_dup_items integer_dup_items in4 integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))))
Errors: [1 0 0 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 6.81
Median total errors in population: 6
Error averages by case: (1.0 0.568 0.568 0.732 0.568 0.812 1.0 0.732 0.098 0.732)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 29.032
Average program size in population (points): 37.541
Average percent parens in population: 0.225
Minimum age in population: 83.58093838576075
Maximum age in population: 88.8726154946088
Average age in population: 86.72546938180498
Median age in population: 86.80536836299456
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 23126000
--- Timings ---
Current time: 1559584627295 milliseconds
Total Time:         162.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       120.6 seconds, 74.3%
Fitness Testing:     24.2 seconds, 14.9%
Report:              17.4 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_div} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div in3 integer_div boolean_flush exec_s_when_autoconstructing (integer_add exec_stackdepth boolean_invert_second_then_and boolean_or) (integer_dup_items boolean_xor integer_dup_items integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items exec_s (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (tag_integer_819) (integer_add) (in1) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))) () ()))
Lexicase best errors: [0 0 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_div} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div in3 integer_div boolean_flush exec_s_when_autoconstructing (integer_add exec_stackdepth boolean_invert_second_then_and boolean_or) (integer_dup_items boolean_xor integer_dup_items integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items exec_s (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (tag_integer_819) (integer_add) (in1) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))) () ()))
Zero cases best errors: [0 0 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (366 367 1000 136 367 1000 381 366 366 136)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (366 367 0 136 367 0 381 366 366 136)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Best program: (boolean_shove boolean_rot boolean_yankdup integer_mod integer_dec exec_shove (integer_add boolean_or) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add integer_empty boolean_invert_second_then_and exec_while () integer_flush integer_dup_items boolean_xor exec_if () (integer_add integer_dup_items boolean_xor integer_dup_items integer_add integer_dup_items boolean_xor integer_dup_items in1) print_integer integer_dup_items)))
Errors: [0 0 1 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 43
Size: 52
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 7.515
Median total errors in population: 8
Error averages by case: (0.634 0.633 1.0 0.864 0.633 1.0 0.619 0.634 0.634 0.864)
Error minima by case: (0 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 27.988
Average program size in population (points): 36.619
Average percent parens in population: 0.235
Minimum age in population: 84.89351865220478
Maximum age in population: 90.24251427865025
Average age in population: 88.23701866732007
Median age in population: 88.31826573245544
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 23411609
--- Timings ---
Current time: 1559584629855 milliseconds
Total Time:         164.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       122.7 seconds, 74.4%
Fitness Testing:     24.5 seconds, 14.8%
Report:              17.7 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_swap boolean_yank exec_noop exec_y_when_autoconstructing (in3 exec_empty boolean_flush boolean_shove boolean_or integer_yankdup integer_dup exec_pop (integer_dec) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_or integer_add integer_dup_items) boolean_xor integer_dup_items) exec_if () (exec_y_when_autoconstructing () in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Lexicase best errors: [0 1 0 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 53
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_swap boolean_yank exec_noop exec_y_when_autoconstructing (in3 exec_empty boolean_flush boolean_shove boolean_or integer_yankdup integer_dup exec_pop (integer_dec) integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_or integer_add integer_dup_items) boolean_xor integer_dup_items) exec_if () (exec_y_when_autoconstructing () in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)))
Zero cases best errors: [0 1 0 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 53
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (552 120 553 552 120 220 120 1000 772 219)
Population mean number of elite cases: 4.23
Count of perfect (error zero) individuals by case: (552 120 553 552 120 220 120 0 772 219)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer})
Best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_empty integer_add integer_empty boolean_invert_second_then_and integer_dup_items exec_noop) exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_empty tag_integer_819) integer_add in1 print_integer)
Errors: [0 1 0 0 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 34
Percent parens: 0.118
--- Population Statistics ---
Average total errors in population: 6.772
Median total errors in population: 6
Error averages by case: (0.448 0.88 0.447 0.448 0.88 0.78 0.88 1.0 0.228 0.781)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 28.943
Average program size in population (points): 37.305
Average percent parens in population: 0.218
Minimum age in population: 85.89351865220478
Maximum age in population: 91.75140865671497
Average age in population: 89.64113335225424
Median age in population: 89.74066430821347
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 23709278
--- Timings ---
Current time: 1559584632377 milliseconds
Total Time:         167.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.7 seconds, 74.4%
Fitness Testing:     24.8 seconds, 14.8%
Report:              17.9 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec})
Lexicase best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup integer_dup_items integer_dec boolean_dup_items integer_add integer_dec boolean_yankdup integer_dec))
Lexicase best errors: [1 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.095
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec})
Zero cases best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup integer_dup_items integer_dec boolean_dup_items integer_add integer_dec boolean_yankdup integer_dec))
Zero cases best errors: [1 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.095
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 359 1000 361 894 238 238 1000 360 238)
Population mean number of elite cases: 5.69
Count of perfect (error zero) individuals by case: (0 359 0 361 894 238 238 0 360 238)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yankdup in3 in3 integer_dec integer_empty boolean_invert_second_then_and integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items boolean_xor in1 print_integer integer_dup_items)
Errors: [1 0 1 0 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 7.312
Median total errors in population: 6
Error averages by case: (1.0 0.641 1.0 0.639 0.106 0.762 0.762 1.0 0.64 0.762)
Error minima by case: (1 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 26.981
Average program size in population (points): 35.104
Average percent parens in population: 0.227
Minimum age in population: 87.48239287966258
Maximum age in population: 93.29850500825538
Average age in population: 91.13299791431798
Median age in population: 91.16378350203296
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 23984911
--- Timings ---
Current time: 1559584635107 milliseconds
Total Time:         170.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       126.9 seconds, 74.5%
Fitness Testing:     25.1 seconds, 14.7%
Report:              18.2 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction 0} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_items})
Lexicase best program: (integer_mult integer_div boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3) integer_div exec_noop in1 boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_inc 0 integer_dup_items boolean_xor integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (integer_gte tag_integer_819) integer_add) in1 print_integer integer_dup_items)
Lexicase best errors: [1 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction 0} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_items})
Zero cases best program: (integer_mult integer_div boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3) integer_div exec_noop in1 boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and integer_inc 0 integer_dup_items boolean_xor integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (integer_gte tag_integer_819) integer_add) in1 print_integer integer_dup_items)
Zero cases best errors: [1 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (452 429 6 435 1000 429 887 6 431 451)
Population mean number of elite cases: 4.53
Count of perfect (error zero) individuals by case: (452 429 6 435 0 429 887 6 431 451)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop in3 exec_do*range (exec_noop boolean_yankdup boolean_flush integer_dec boolean_yankdup integer_add integer_add integer_dup_items) boolean_xor integer_dup_items boolean_flush exec_y_when_autoconstructing (in4) boolean_shove exec_s (tag_integer_819) (boolean_flush) (in1) print_integer integer_dup_items)
Errors: [1 0 1 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 31
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 6.474
Median total errors in population: 7
Error averages by case: (0.548 0.571 0.994 0.565 1.0 0.571 0.113 0.994 0.569 0.549)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 28.512
Average program size in population (points): 36.375
Average percent parens in population: 0.203
Minimum age in population: 88.48239287966258
Maximum age in population: 94.71972456934517
Average age in population: 92.63538859505434
Median age in population: 92.7782845534432
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 24280968
--- Timings ---
Current time: 1559584637739 milliseconds
Total Time:         172.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       129.0 seconds, 74.7%
Fitness Testing:     25.4 seconds, 14.7%
Report:              18.3 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 print_integer integer_div boolean_yankdup in4 exec_noop exec_y_when_autoconstructing (in3 integer_dec integer_dup_times integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_empty integer_mod exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush)))
Lexicase best errors: [0 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 print_integer integer_div boolean_yankdup in4 exec_noop exec_y_when_autoconstructing (in3 integer_dec integer_dup_times integer_add boolean_yankdup boolean_and boolean_flush integer_pop integer_empty integer_mod exec_y_when_autoconstructing (integer_yankdup boolean_or boolean_flush)))
Zero cases best errors: [0 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 270 215 216 485 485 401 403 398 891)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (216 270 215 216 485 485 401 403 398 891)
Population mean number of perfect (error zero) cases: 3.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 print_integer exec_noop boolean_swap boolean_yank exec_noop exec_y_when_autoconstructing () in3 integer_fromboolean integer_dup_items in1 integer_dup_items integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items exec_s (exec_yank exec_if () (integer_swap integer_shove) exec_y_when_autoconstructing (exec_rot (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items)) () ())
Errors: [0 1 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 40
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 6.02
Median total errors in population: 6
Error averages by case: (0.784 0.73 0.785 0.784 0.515 0.515 0.599 0.597 0.602 0.109)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.867
Average program size in population (points): 35.543
Average percent parens in population: 0.207
Minimum age in population: 91.09550565756955
Maximum age in population: 96.5434781759895
Average age in population: 94.13565002057092
Median age in population: 94.24021386348963
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 24566021
--- Timings ---
Current time: 1559584640275 milliseconds
Total Time:         175.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       131.1 seconds, 74.7%
Fitness Testing:     25.7 seconds, 14.6%
Report:              18.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop integer_gt in3 exec_empty boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_empty boolean_invert_second_then_and boolean_or integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) print_integer integer_dup_items))
Lexicase best errors: [1 0 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop integer_gt in3 exec_empty boolean_dup_items integer_add boolean_yankdup boolean_and boolean_flush integer_empty boolean_invert_second_then_and boolean_or integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) print_integer integer_dup_items))
Zero cases best errors: [1 0 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 453 453 310 453 310 455 453 453 453)
Population mean number of elite cases: 4.79
Count of perfect (error zero) individuals by case: (0 453 453 310 453 310 455 453 453 453)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items})
Best program: (in3 print_integer exec_noop exec_y_when_autoconstructing (integer_pop integer_dec boolean_dup_items integer_add boolean_yankdup boolean_xor boolean_invert_second_then_and integer_pop) exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (exec_s (integer_dup_items) () ())))
Errors: [1 0 0 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.207
Median total errors in population: 7
Error averages by case: (1.0 0.547 0.547 0.69 0.547 0.69 0.545 0.547 0.547 0.547)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.05
Average program size in population (points): 34.394
Average percent parens in population: 0.201
Minimum age in population: 92.09550565756955
Maximum age in population: 97.91455351282661
Average age in population: 95.61984490885472
Median age in population: 95.73283792824782
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 24837759
--- Timings ---
Current time: 1559584642822 milliseconds
Total Time:         178.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       133.2 seconds, 74.8%
Fitness Testing:     26.0 seconds, 14.6%
Report:              18.8 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_div} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div in3 print_integer in3 boolean_yankdup boolean_yank exec_noop integer_yank integer_pop integer_dec boolean_dup_items integer_add boolean_yankdup boolean_xor exec_when (exec_if () (exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (exec_s (integer_dup_items) () ())))))
Lexicase best errors: [1 1 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_div} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div in3 print_integer in3 boolean_yankdup boolean_yank exec_noop integer_yank integer_pop integer_dec boolean_dup_items integer_add boolean_yankdup boolean_xor exec_when (exec_if () (exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (exec_s (integer_dup_items) () ())))))
Zero cases best errors: [1 1 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 1 635 277 636 1 1 917 1000 635)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (277 1 635 277 636 1 1 917 0 635)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_819} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 print_integer exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup integer_dup_items integer_dec boolean_dup_items exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yankdup integer_add boolean_flush boolean_pop integer_pop integer_sub exec_s_when_autoconstructing (integer_dec exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing () boolean_flush exec_y_when_autoconstructing (exec_s (tag_integer_819 boolean_flush) (in1) (print_integer integer_dup_items)))) () ()) () ()) () ()) () ()) () ()))
Errors: [1 1 0 1 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 44
Size: 68
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.62
Median total errors in population: 6
Error averages by case: (0.723 0.999 0.365 0.723 0.364 0.999 0.999 0.083 1.0 0.365)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 27.077
Average program size in population (points): 34.366
Average percent parens in population: 0.197
Minimum age in population: 93.7130319580506
Maximum age in population: 99.5842804494354
Average age in population: 97.0838456604391
Median age in population: 97.15347260908467
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 25115545
--- Timings ---
Current time: 1559584645249 milliseconds
Total Time:         180.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       135.1 seconds, 74.9%
Fitness Testing:     26.2 seconds, 14.5%
Report:              18.9 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_316} {:close 1, :instruction in1})
Lexicase best program: (in3 boolean_shove exec_noop boolean_yankdup exec_eq exec_noop exec_y_when_autoconstructing (in3 print_integer boolean_dup_items integer_add boolean_yankdup boolean_flush boolean_yankdup boolean_flush exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (exec_yank integer_dup_items in3 boolean_frominteger boolean_dup_items integer_yank in1 boolean_xor tagged_316 in1) ()))
Lexicase best errors: [1 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.135
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_316} {:close 1, :instruction in1})
Zero cases best program: (in3 boolean_shove exec_noop boolean_yankdup exec_eq exec_noop exec_y_when_autoconstructing (in3 print_integer boolean_dup_items integer_add boolean_yankdup boolean_flush boolean_yankdup boolean_flush exec_s_when_autoconstructing (integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (exec_yank integer_dup_items in3 boolean_frominteger boolean_dup_items integer_yank in1 boolean_xor tagged_316 in1) ()))
Zero cases best errors: [1 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.135
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 646 230 228 229 1 328 328 328 319)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (229 646 230 228 229 1 328 328 328 319)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_integer_819} {:close 0, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3) in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add in3 boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) integer_add integer_dup_items exec_s (integer_dup_items exec_if () (exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (exec_rot (tag_integer_819) (integer_add in1) () print_integer integer_dup_items)))) () ())
Errors: [0 1 0 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 41
Size: 54
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.134
Median total errors in population: 6
Error averages by case: (0.771 0.354 0.77 0.772 0.771 0.999 0.672 0.672 0.672 0.681)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.88
Average program size in population (points): 37.603
Average percent parens in population: 0.245
Minimum age in population: 95.24300377114038
Maximum age in population: 100.5842804494354
Average age in population: 98.16694240825268
Median age in population: 98.15334082376724
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 260
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 263
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 25396367
--- Timings ---
Current time: 1559584647569 milliseconds
Total Time:         182.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       136.8 seconds, 74.9%
Fitness Testing:     26.5 seconds, 14.5%
Report:              19.1 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_728} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop})
Lexicase best program: (in3 integer_div exec_noop integer_div boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add integer_sub boolean_flush integer_dec in3 in3 exec_y_when_autoconstructing (in3 exec_noop exec_y_when_autoconstructing (in4) in4) exec_y_when_autoconstructing (exec_s (tag_integer_728) (boolean_flush) (in1) print_integer boolean_pop)))
Lexicase best errors: [0 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_728} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop})
Zero cases best program: (in3 integer_div exec_noop integer_div boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add integer_sub boolean_flush integer_dec in3 in3 exec_y_when_autoconstructing (in3 exec_noop exec_y_when_autoconstructing (in4) in4) exec_y_when_autoconstructing (exec_s (tag_integer_728) (boolean_flush) (in1) print_integer boolean_pop)))
Zero cases best errors: [0 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (344 346 1000 101 340 343 101 347 1000 340)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (344 346 0 101 340 343 101 347 0 340)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yank exec_s_when_autoconstructing (integer_add exec_stackdepth boolean_invert_second_then_and boolean_or) (integer_dup_items boolean_xor integer_dup_items integer_add boolean_rot boolean_flush integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or) (integer_add integer_dup_items exec_dup_items integer_dup_items exec_if () (exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (exec_s () (tag_integer_819) (integer_add) in1) print_integer integer_dup_items))))
Errors: [0 0 1 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 46
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 7.738
Median total errors in population: 9
Error averages by case: (0.656 0.654 1.0 0.899 0.66 0.657 0.899 0.653 1.0 0.66)
Error minima by case: (0 0 1 0 0 0 0 0 1 0)
Average genome size in population (length): 27.881
Average program size in population (points): 36.339
Average percent parens in population: 0.220
Minimum age in population: 96.24300377114038
Maximum age in population: 102.2963782368405
Average age in population: 99.90656365645829
Median age in population: 99.96389135201056
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 25681371
--- Timings ---
Current time: 1559584650286 milliseconds
Total Time:         185.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       139.0 seconds, 75.0%
Fitness Testing:     26.8 seconds, 14.5%
Report:              19.4 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup in3 in3 integer_dec integer_empty boolean_invert_second_then_and integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items boolean_xor in1 print_integer print_integer integer_dup_items)
Lexicase best errors: [1 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 23
Percent parens: 0.043
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup in3 in3 integer_dec integer_empty boolean_invert_second_then_and integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items boolean_xor in1 print_integer print_integer integer_dup_items)
Zero cases best errors: [1 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 23
Percent parens: 0.043
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 574 574 1000 206 1000 575 211 694 784)
Population mean number of elite cases: 5.62
Count of perfect (error zero) individuals by case: (2 574 574 0 206 0 575 211 694 784)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction 40} {:close 0, :instruction tag_integer_819} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Best program: (in3 exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add boolean_yankdup integer_div exec_noop boolean_yankdup 40) tag_integer_819 integer_add in1 print_integer integer_dup_items)
Errors: [1 0 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 17
Size: 19
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 6.38
Median total errors in population: 5
Error averages by case: (0.998 0.426 0.426 1.0 0.794 1.0 0.425 0.789 0.306 0.216)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 26.762
Average program size in population (points): 36.286
Average percent parens in population: 0.254
Minimum age in population: 97.24300377114038
Maximum age in population: 103.5838671557195
Average age in population: 101.368648287692
Median age in population: 101.5017714588099
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.514
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 26056959
--- Timings ---
Current time: 1559584652954 milliseconds
Total Time:         188.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       141.1 seconds, 75.0%
Fitness Testing:     27.2 seconds, 14.5%
Report:              19.7 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yank exec_s_when_autoconstructing (integer_add exec_stackdepth boolean_invert_second_then_and boolean_or) (integer_dup_items boolean_xor integer_dup_items print_integer) (integer_dup_items))
Lexicase best errors: [0 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yank exec_s_when_autoconstructing (integer_add exec_stackdepth boolean_invert_second_then_and boolean_or) (integer_dup_items boolean_xor integer_dup_items print_integer) (integer_dup_items))
Zero cases best errors: [0 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 1000 566 110 489 487 110 293 110 109)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (110 0 566 110 489 487 110 293 110 109)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yank exec_s_when_autoconstructing (integer_add exec_stackdepth boolean_invert_second_then_and boolean_or) (integer_dup_items boolean_xor integer_dup_items integer_empty boolean_invert_second_then_and boolean_or) (print_integer integer_dup_items))
Errors: [0 1 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 17
Size: 21
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 7.616
Median total errors in population: 7
Error averages by case: (0.89 1.0 0.434 0.89 0.511 0.513 0.89 0.707 0.89 0.891)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.627
Average program size in population (points): 35.918
Average percent parens in population: 0.245
Minimum age in population: 98.24300377114038
Maximum age in population: 105.0209263118634
Average age in population: 102.8534045734353
Median age in population: 102.9329809552108
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 26331547
--- Timings ---
Current time: 1559584655351 milliseconds
Total Time:         190.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       143.1 seconds, 75.1%
Fitness Testing:     27.5 seconds, 14.4%
Report:              19.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Smallest problem report - generation 69
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_items})
Lexicase best program: (in3 integer_min in3 integer_div exec_noop boolean_yankdup in3 in3 integer_dec integer_empty integer_add boolean_yankdup boolean_flush integer_dec boolean_or integer_add integer_dup_items integer_sub integer_mult integer_dup_items boolean_xor exec_y_when_autoconstructing (exec_rot (tag_integer_819) (integer_add) (in1) print_integer integer_mult integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))))
Lexicase best errors: [1 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_819} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_items})
Zero cases best program: (in3 integer_min in3 integer_div exec_noop boolean_yankdup in3 in3 integer_dec integer_empty integer_add boolean_yankdup boolean_flush integer_dec boolean_or integer_add integer_dup_items integer_sub integer_mult integer_dup_items boolean_xor exec_y_when_autoconstructing (exec_rot (tag_integer_819) (integer_add) (in1) print_integer integer_mult integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (tag_integer_819) (integer_add) (in1) print_integer integer_dup_items))))
Zero cases best errors: [1 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (120 271 483 5 271 483 753 871 271 272)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (120 271 483 5 271 483 753 871 271 272)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yank integer_dec integer_empty boolean_invert_second_then_and in3 integer_max integer_add integer_empty boolean_invert_second_then_and boolean_or integer_add integer_shove boolean_xor in1 print_integer integer_dup_items)
Errors: [1 0 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 6.2
Median total errors in population: 6
Error averages by case: (0.88 0.729 0.517 0.995 0.729 0.517 0.247 0.129 0.729 0.728)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.951
Average program size in population (points): 27.388
Average percent parens in population: 0.220
Minimum age in population: 101.1764123166953
Maximum age in population: 106.1233299793973
Average age in population: 104.3261693514518
Median age in population: 104.3870924623593
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 186
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 26546930
--- Timings ---
Current time: 1559584657781 milliseconds
Total Time:         193.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       145.1 seconds, 75.2%
Fitness Testing:     27.7 seconds, 14.4%
Report:              20.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Smallest problem report - generation 70
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add integer_sub boolean_flush integer_flush boolean_yankdup integer_add integer_empty boolean_invert_second_then_and in1) print_integer integer_dup_items)
Lexicase best errors: [1 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 23
Percent parens: 0.087
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_dec boolean_dup_items integer_add integer_sub boolean_flush integer_flush boolean_yankdup integer_add integer_empty boolean_invert_second_then_and in1) print_integer integer_dup_items)
Zero cases best errors: [1 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 23
Percent parens: 0.087
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 110 843 236 481 1000 592 235 837 1000)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (0 110 843 236 481 0 592 235 837 0)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_819} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank})
Best program: (in3 integer_div in3 integer_div exec_noop boolean_yankdup in3 in3 integer_dec integer_empty integer_add boolean_yankdup boolean_flush integer_gte boolean_or integer_add integer_dup_items exec_y_when_autoconstructing (in4 exec_empty) exec_y_when_autoconstructing () exec_s (tag_integer_819 boolean_flush) (in1) (print_integer boolean_yank))
Errors: [1 1 0 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 33
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.666
Median total errors in population: 6
Error averages by case: (1.0 0.89 0.157 0.764 0.519 1.0 0.408 0.765 0.163 1.0)
Error minima by case: (1 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 24.155
Average program size in population (points): 32.02
Average percent parens in population: 0.231
Minimum age in population: 102.528889574795
Maximum age in population: 107.7678447032042
Average age in population: 105.8916182988395
Median age in population: 105.9849932877593
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.549
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 26793333
--- Timings ---
Current time: 1559584660189 milliseconds
Total Time:         195.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       147.1 seconds, 75.3%
Fitness Testing:     28.0 seconds, 14.3%
Report:              20.2 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Smallest problem report - generation 71
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: 52                 
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 69                 
Correct output: 6                   | Program output: 34                 
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 68                 
Correct output: 34                  | Program output: 100                
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 17                 
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 83                 
Correct output: 1                   | Program output: 57                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 95                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: 76                 
Correct output: -89                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 31                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: 27                 
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -41                
Correct output: -98                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: 12                 
Correct output: -64                 | Program output: 63                 
Correct output: -73                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -3                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 97                 
Correct output: -90                 | Program output: 49                 
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 62                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: 19                 
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: 66                 
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: 20                 
Correct output: -73                 | Program output: -65                
Correct output: -37                 | Program output: 69                 
Correct output: -86                 | Program output: -1                 
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_728} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop})
Lexicase best program: (in3 integer_div exec_noop integer_div boolean_yank in2 exec_y_when_autoconstructing (in3 exec_noop boolean_yankdup exec_y_when_autoconstructing (in4) in4) exec_y_when_autoconstructing (exec_s (tag_integer_728) (boolean_flush) (in1) print_integer boolean_pop))
Lexicase best errors: [1 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tag_integer_728} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop})
Zero cases best program: (in3 integer_div exec_noop integer_div boolean_yank in2 exec_y_when_autoconstructing (in3 exec_noop boolean_yankdup exec_y_when_autoconstructing (in4) in4) exec_y_when_autoconstructing (exec_s (tag_integer_728) (boolean_flush) (in1) print_integer boolean_pop))
Zero cases best errors: [1 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (362 1000 360 513 1000 285 1000 286 1000 286)
Population mean number of elite cases: 6.09
Count of perfect (error zero) individuals by case: (362 0 360 513 0 285 0 286 0 286)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Best program: (in3 integer_shove exec_noop integer_div exec_noop boolean_yankdup boolean_yank integer_dec boolean_yankdup integer_add integer_empty boolean_invert_second_then_and boolean_or integer_add integer_dup_items boolean_xor integer_dup_items exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_s (exec_s_when_autoconstructing () (boolean_dup_times in1 print_integer integer_dup_items) ()) () ())))
Errors: [1 1 1 0 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 38
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 7.908
Median total errors in population: 8
Error averages by case: (0.638 1.0 0.64 0.487 1.0 0.715 1.0 0.714 1.0 0.714)
Error minima by case: (0 1 0 0 1 0 1 0 1 0)
Average genome size in population (length): 23.013
Average program size in population (points): 30.462
Average percent parens in population: 0.227
Minimum age in population: 104.4657882441689
Maximum age in population: 109.088307749967
Average age in population: 107.3273986755628
Median age in population: 107.3858551752248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.531
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 27027693
--- Timings ---
Current time: 1559584662741 milliseconds
Total Time:         197.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       149.1 seconds, 75.4%
Fitness Testing:     28.3 seconds, 14.3%
Report:              20.4 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Smallest problem report - generation 72
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 53
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 53
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 1000 599 1000 599 595 601 4 296 598)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (4 0 599 0 599 595 601 4 296 598)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 53
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 6.704
Median total errors in population: 5
Error averages by case: (0.996 1.0 0.401 1.0 0.401 0.405 0.399 0.996 0.704 0.402)
Error minima by case: (0 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 21.693
Average program size in population (points): 27.794
Average percent parens in population: 0.206
Minimum age in population: 106.3265888598409
Maximum age in population: 110.7505954004388
Average age in population: 108.8244799237675
Median age in population: 108.8878375137626
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.547
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 27250341
--- Timings ---
Current time: 1559584665418 milliseconds
Total Time:         200.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.4 seconds, 75.5%
Fitness Testing:     28.5 seconds, 14.2%
Report:              20.6 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Smallest problem report - generation 73
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div integer_lte boolean_yank exec_s_when_autoconstructing (integer_add exec_stackdepth boolean_invert_second_then_and boolean_or integer_dup_items boolean_xor boolean_frominteger print_integer) (integer_dup_items) ())
Lexicase best errors: [0 0 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div integer_lte boolean_yank exec_s_when_autoconstructing (integer_add exec_stackdepth boolean_invert_second_then_and boolean_or integer_dup_items boolean_xor boolean_frominteger print_integer) (integer_dup_items) ())
Zero cases best errors: [0 0 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 115 1000 809 691 816 711 116 116 671)
Population mean number of elite cases: 5.16
Count of perfect (error zero) individuals by case: (115 115 0 809 691 816 711 116 116 671)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yank exec_s_when_autoconstructing (integer_add exec_stackdepth boolean_invert_second_then_and boolean_or) (integer_dup_items boolean_xor integer_dup_items integer_empty boolean_invert_second_then_and boolean_or print_integer integer_dup_items) ())
Errors: [0 0 1 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 17
Size: 21
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 5.84
Median total errors in population: 5
Error averages by case: (0.885 0.885 1.0 0.191 0.309 0.184 0.289 0.884 0.884 0.329)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 33.359
Average program size in population (points): 48.615
Average percent parens in population: 0.303
Minimum age in population: 108.3656193644429
Maximum age in population: 112.2091703970697
Average age in population: 111.0996889189533
Median age in population: 111.0887456014765
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 482
Genome diversity (% unique genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 485
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 27584329
--- Timings ---
Current time: 1559584667846 milliseconds
Total Time:         203.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.3 seconds, 75.5%
Fitness Testing:     28.8 seconds, 14.2%
Report:              20.8 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Smallest problem report - generation 74
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Lexicase best errors: [0 0 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Zero cases best errors: [0 0 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 859 339 523 334 329 1000 521 327 521)
Population mean number of elite cases: 5.09
Count of perfect (error zero) individuals by case: (334 859 339 523 334 329 0 521 327 521)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items))))))))
Errors: [0 0 0 1 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 38
Size: 57
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.913
Median total errors in population: 6
Error averages by case: (0.666 0.141 0.661 0.477 0.666 0.671 1.0 0.479 0.673 0.479)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 23.878
Average program size in population (points): 33.129
Average percent parens in population: 0.249
Minimum age in population: 109.3656193644429
Maximum age in population: 113.7883694214093
Average age in population: 112.2866912533673
Median age in population: 112.3539955693354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.432
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 27825637
--- Timings ---
Current time: 1559584670235 milliseconds
Total Time:         205.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.1 seconds, 75.6%
Fitness Testing:     29.1 seconds, 14.2%
Report:              21.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Smallest problem report - generation 75
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: 57                 
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 87                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 89                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 95                 
Correct output: 3                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 98                 
Correct output: 20                  | Program output: 61                 
Correct output: 16                  | Program output: 100                
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 100                
Correct output: -81                 | Program output: 19                 
Correct output: -37                 | Program output: 32                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: 77                 
Correct output: -100                | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: 29                 
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 13                 
Correct output: -43                 | Program output: 31                 
Correct output: -43                 | Program output: -16                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 88                 
Correct output: -62                 | Program output: 18                 
Correct output: -26                 | Program output: 88                 
Correct output: -63                 | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 6                  
Correct output: -36                 | Program output: 18                 
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: 69                 
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -44                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: 90                 
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 97                 
Correct output: -71                 | Program output: 37                 
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: 17                 
Correct output: -45                 | Program output: 45                 
Correct output: -90                 | Program output: 16                 
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -60                
Correct output: -84                 | Program output: -10                
Correct output: -31                 | Program output: 98                 
Correct output: -73                 | Program output: 32                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 87                 
Correct output: -92                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Lexicase best errors: [0 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Zero cases best errors: [0 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (809 485 1000 490 491 336 844 339 339 1000)
Population mean number of elite cases: 6.13
Count of perfect (error zero) individuals by case: (809 485 0 490 491 336 844 339 339 0)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop boolean_yank exec_s_when_autoconstructing (integer_dup_times exec_stackdepth boolean_invert_second_then_and boolean_or) (integer_dup_items boolean_xor integer_dup_items print_integer) (integer_dup_items))
Errors: [0 1 1 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.867
Median total errors in population: 5
Error averages by case: (0.191 0.515 1.0 0.51 0.509 0.664 0.156 0.661 0.661 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 28.039
Average program size in population (points): 39.879
Average percent parens in population: 0.271
Minimum age in population: 110.3656193644429
Maximum age in population: 115.6979014006277
Average age in population: 113.8460294498131
Median age in population: 113.9163780671672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 186
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 28110743
--- Timings ---
Current time: 1559584672742 milliseconds
Total Time:         207.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.2 seconds, 75.6%
Fitness Testing:     29.4 seconds, 14.1%
Report:              21.2 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Smallest problem report - generation 76
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yank exec_s_when_autoconstructing (integer_add exec_stackdepth boolean_invert_second_then_and boolean_or) (integer_dup_items boolean_xor integer_dup_items print_integer) (integer_dup_items))
Lexicase best errors: [1 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yank exec_s_when_autoconstructing (integer_add exec_stackdepth boolean_invert_second_then_and boolean_or) (integer_dup_items boolean_xor integer_dup_items print_integer) (integer_dup_items))
Zero cases best errors: [1 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 412 411 1000 413 825 413 412 414)
Population mean number of elite cases: 6.30
Count of perfect (error zero) individuals by case: (0 0 412 411 0 413 825 413 412 414)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div integer_eq boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Errors: [1 1 1 1 1 0 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 36
Size: 53
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 6.7
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.588 0.589 1.0 0.587 0.175 0.587 0.588 0.586)
Error minima by case: (1 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 26.07
Average program size in population (points): 36.63
Average percent parens in population: 0.259
Minimum age in population: 112.3785024850877
Maximum age in population: 117.5729014006277
Average age in population: 115.2750507858581
Median age in population: 115.330835917
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 28375037
--- Timings ---
Current time: 1559584675170 milliseconds
Total Time:         210.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.1 seconds, 75.7%
Fitness Testing:     29.7 seconds, 14.1%
Report:              21.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Smallest problem report - generation 77
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Lexicase best errors: [0 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Zero cases best errors: [0 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 475 370 369 1000 9 372 475 366 851)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (372 475 370 369 0 9 372 475 366 851)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction in3})
Best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer in3))) ()))))
Errors: [0 1 0 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 36
Size: 53
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 6.341
Median total errors in population: 7
Error averages by case: (0.628 0.525 0.63 0.631 1.0 0.991 0.628 0.525 0.634 0.149)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 25.32
Average program size in population (points): 35.399
Average percent parens in population: 0.254
Minimum age in population: 113.8838052486887
Maximum age in population: 118.4227747094087
Average age in population: 116.7208149225482
Median age in population: 116.8080381003726
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 28630842
--- Timings ---
Current time: 1559584677668 milliseconds
Total Time:         212.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.1 seconds, 75.7%
Fitness Testing:     29.9 seconds, 14.1%
Report:              21.6 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Smallest problem report - generation 78
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing () exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items))))))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 53
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing () exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items))))))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 53
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (723 482 479 501 723 224 482 224 484 224)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (723 482 479 501 723 224 482 224 484 224)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Errors: [0 0 0 0 0 1 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 36
Size: 53
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 5.454
Median total errors in population: 5
Error averages by case: (0.277 0.518 0.521 0.499 0.277 0.776 0.518 0.776 0.516 0.776)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.013
Average program size in population (points): 41.184
Average percent parens in population: 0.269
Minimum age in population: 115.6677453937006
Maximum age in population: 120.3283588602179
Average age in population: 118.2214298110926
Median age in population: 118.3354014699918
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 28934338
--- Timings ---
Current time: 1559584680194 milliseconds
Total Time:         215.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.0 seconds, 75.7%
Fitness Testing:     30.2 seconds, 14.1%
Report:              21.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Smallest problem report - generation 79
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 53
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 53
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (882 412 199 1000 424 4 621 433 619 429)
Population mean number of elite cases: 5.02
Count of perfect (error zero) individuals by case: (882 412 199 0 424 4 621 433 619 429)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if (exec_yank exec_if () (integer_swap in4 exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items))) ())))) ()))
Errors: [0 0 1 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 57
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.977
Median total errors in population: 7
Error averages by case: (0.118 0.588 0.801 1.0 0.576 0.996 0.379 0.567 0.381 0.571)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 29.134
Average program size in population (points): 41.602
Average percent parens in population: 0.281
Minimum age in population: 116.6677453937006
Maximum age in population: 121.7676583705677
Average age in population: 119.9814326349049
Median age in population: 120.0734599294588
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 29234997
--- Timings ---
Current time: 1559584682644 milliseconds
Total Time:         217.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.9 seconds, 75.7%
Fitness Testing:     30.6 seconds, 14.0%
Report:              22.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Smallest problem report - generation 80
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 83                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 40                  | Program output: 70                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 28                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 46                 
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: 74                 
Correct output: -81                 | Program output: -31                
Correct output: -37                 | Program output: 17                 
Correct output: 16                  | Program output: 49                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -15                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -9                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: 80                 
Correct output: -78                 | Program output: 9                  
Correct output: -30                 | Program output: 86                 
Correct output: -62                 | Program output: -59                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -58                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -31                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: -18                
Correct output: -34                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: 55                 
Correct output: -71                 | Program output: -61                
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -18                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -29                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_shove exec_noop boolean_yankdup exec_yank exec_noop exec_y_when_autoconstructing (in3 exec_y_when_autoconstructing (exec_k_when_autoconstructing (integer_div exec_noop boolean_yankdup in4) (exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (boolean_shove) print_integer integer_dup_items))))))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_shove exec_noop boolean_yankdup exec_yank exec_noop exec_y_when_autoconstructing (in3 exec_y_when_autoconstructing (exec_k_when_autoconstructing (integer_div exec_noop boolean_yankdup in4) (exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (boolean_shove) print_integer integer_dup_items))))))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 197 779 197 702 484 197 886 480 481)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (0 197 779 197 702 484 197 886 480 481)
Population mean number of perfect (error zero) cases: 4.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_shove exec_noop boolean_yankdup exec_yank exec_noop exec_y_when_autoconstructing (in3 exec_y_when_autoconstructing (exec_k_when_autoconstructing (integer_div exec_noop boolean_yankdup in4) (exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (boolean_shove) print_integer integer_dup_items))))))
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.597
Median total errors in population: 4
Error averages by case: (1.0 0.803 0.221 0.803 0.298 0.516 0.803 0.114 0.52 0.519)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.261
Average program size in population (points): 43.495
Average percent parens in population: 0.293
Minimum age in population: 117.6677453937006
Maximum age in population: 123.4172049079092
Average age in population: 121.7126704100965
Median age in population: 121.8423552863596
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 29538481
--- Timings ---
Current time: 1559584685126 milliseconds
Total Time:         220.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.9 seconds, 75.8%
Fitness Testing:     30.9 seconds, 14.0%
Report:              22.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Smallest problem report - generation 81
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_shove exec_noop exec_noop exec_noop exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if (integer_swap in4) (exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items))))))))
Lexicase best errors: [1 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 56
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_shove exec_noop exec_noop exec_noop exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if (integer_swap in4) (exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items))))))))
Zero cases best errors: [1 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 56
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 706 675 306 306 311 706 1000 700 675)
Population mean number of elite cases: 6.39
Count of perfect (error zero) individuals by case: (0 706 675 306 306 311 706 0 700 675)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_shove exec_noop boolean_yankdup in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Errors: [1 0 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 5.615
Median total errors in population: 5
Error averages by case: (1.0 0.294 0.325 0.694 0.694 0.689 0.294 1.0 0.3 0.325)
Error minima by case: (1 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 25.952
Average program size in population (points): 37.552
Average percent parens in population: 0.302
Minimum age in population: 118.7999026106668
Maximum age in population: 125.0632186905582
Average age in population: 123.5279645848385
Median age in population: 123.4323668756604
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 392
Genome diversity (% unique genomes):	 0.428
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 399
Syntactic diversity (% unique Push programs):	 0.406
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 29804501
--- Timings ---
Current time: 1559584687576 milliseconds
Total Time:         222.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.8 seconds, 75.8%
Fitness Testing:     31.2 seconds, 14.0%
Report:              22.6 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Smallest problem report - generation 82
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_items})
Lexicase best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if (integer_swap in4 exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)) ()))) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 55
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_items})
Zero cases best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if (integer_swap in4 exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)) ()))) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 55
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (743 742 659 734 678 827 665 1000 858 659)
Population mean number of elite cases: 7.57
Count of perfect (error zero) individuals by case: (743 742 659 734 678 827 665 0 858 659)
Population mean number of perfect (error zero) cases: 6.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 53
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 3.435
Median total errors in population: 1
Error averages by case: (0.257 0.258 0.341 0.266 0.322 0.173 0.335 1.0 0.142 0.341)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 31.516
Average program size in population (points): 45.93
Average percent parens in population: 0.308
Minimum age in population: 119.7999026106668
Maximum age in population: 126.4679293956147
Average age in population: 124.6975995885686
Median age in population: 124.7774600696195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.009
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 30123808
--- Timings ---
Current time: 1559584690048 milliseconds
Total Time:         225.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.6 seconds, 75.8%
Fitness Testing:     31.5 seconds, 14.0%
Report:              22.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Smallest problem report - generation 83
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 in3 integer_shove exec_noop boolean_yankdup boolean_yank integer_dup_times exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) boolean_invert_first_then_and exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items))))))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 53
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 in3 integer_shove exec_noop boolean_yankdup boolean_yank integer_dup_times exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) boolean_invert_first_then_and exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items))))))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 53
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (820 1000 843 830 804 843 1000 813 1000 817)
Population mean number of elite cases: 8.77
Count of perfect (error zero) individuals by case: (820 0 843 830 804 843 0 813 0 817)
Population mean number of perfect (error zero) cases: 5.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_if (exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4 exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))))))) ())
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 41
Size: 63
Percent parens: 0.349
--- Population Statistics ---
Average total errors in population: 4.23
Median total errors in population: 3
Error averages by case: (0.18 1.0 0.157 0.17 0.196 0.157 1.0 0.187 1.0 0.183)
Error minima by case: (0 1 0 0 0 0 1 0 1 0)
Average genome size in population (length): 35.814
Average program size in population (points): 52.447
Average percent parens in population: 0.315
Minimum age in population: 122.8836911051096
Maximum age in population: 128.0265167191531
Average age in population: 126.0584405356812
Median age in population: 126.1517600782347
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 30484152
--- Timings ---
Current time: 1559584692655 milliseconds
Total Time:         227.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.6 seconds, 75.8%
Fitness Testing:     31.9 seconds, 14.0%
Report:              23.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Smallest problem report - generation 84
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 38                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 45                 
Correct output: 58                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 27                 
Correct output: 42                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -19                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -66                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: 47                 
Correct output: -94                 | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: 58                 
Correct output: -98                 | Program output: -39                
Correct output: -82                 | Program output: -18                
Correct output: -56                 | Program output: -12                
Correct output: -73                 | Program output: 8                  
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -29                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: 18                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup integer_sub) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items))))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_noop exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup integer_sub) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items))))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 846 827 827 810 818 1000 805 2 1000)
Population mean number of elite cases: 6.94
Count of perfect (error zero) individuals by case: (3 846 827 827 810 818 0 805 2 0)
Population mean number of perfect (error zero) cases: 4.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank integer_max exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_pop) exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))))
Errors: [1 0 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 5.062
Median total errors in population: 4
Error averages by case: (0.997 0.154 0.173 0.173 0.19 0.182 1.0 0.195 0.998 1.0)
Error minima by case: (0 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 35.45
Average program size in population (points): 51.913
Average percent parens in population: 0.315
Minimum age in population: 124.27094485721
Maximum age in population: 129.6565269243524
Average age in population: 127.4893953947273
Median age in population: 127.5724647331047
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 30843435
--- Timings ---
Current time: 1559584695144 milliseconds
Total Time:         230.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.4 seconds, 75.8%
Fitness Testing:     32.2 seconds, 14.0%
Report:              23.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Smallest problem report - generation 85
Test total error for best: 201
Test mean error for best: 0.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: -1                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop exec_noop boolean_yank exec_noop exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank boolean_dup_items) integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop exec_noop boolean_yank exec_noop exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank boolean_dup_items) integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (719 528 1000 770 727 722 361 526 510 724)
Population mean number of elite cases: 6.59
Count of perfect (error zero) individuals by case: (719 528 0 770 727 722 361 526 510 724)
Population mean number of perfect (error zero) cases: 5.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer})
Best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 45
Size: 70
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 4.413
Median total errors in population: 4
Error averages by case: (0.281 0.472 1.0 0.23 0.273 0.278 0.639 0.474 0.49 0.276)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 33.936
Average program size in population (points): 50.042
Average percent parens in population: 0.321
Minimum age in population: 125.6480065383948
Maximum age in population: 131.1665347597878
Average age in population: 129.2289307774482
Median age in population: 129.1131473741964
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 211
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.01
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 31190798
--- Timings ---
Current time: 1559584697831 milliseconds
Total Time:         232.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.4 seconds, 75.8%
Fitness Testing:     32.6 seconds, 14.0%
Report:              23.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Smallest problem report - generation 86
Test total error for best: 201
Test mean error for best: 0.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: -1                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in3 integer_div exec_noop exec_noop boolean_yank exec_noop exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank boolean_dup_items) integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in3 integer_div exec_noop exec_noop boolean_yank exec_noop exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank boolean_dup_items) integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (773 1000 773 847 766 766 782 786 1000 821)
Population mean number of elite cases: 8.31
Count of perfect (error zero) individuals by case: (773 0 773 847 766 766 782 786 0 821)
Population mean number of perfect (error zero) cases: 6.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer})
Best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 45
Size: 70
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 3.686
Median total errors in population: 2
Error averages by case: (0.227 1.0 0.227 0.153 0.234 0.234 0.218 0.214 1.0 0.179)
Error minima by case: (0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 33.266
Average program size in population (points): 50.613
Average percent parens in population: 0.334
Minimum age in population: 130.103508399938
Maximum age in population: 131.9135645627374
Average age in population: 131.0189275484309
Median age in population: 130.9135645627374
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 328
Genome diversity (% unique genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 338
Syntactic diversity (% unique Push programs):	 0.404
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 31526319
--- Timings ---
Current time: 1559584700401 milliseconds
Total Time:         235.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.4 seconds, 75.8%
Fitness Testing:     33.0 seconds, 14.0%
Report:              24.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Smallest problem report - generation 87
Test total error for best: 305
Test mean error for best: 0.30500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 96                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 24                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 85                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -33                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 28                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer})
Lexicase best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (exec_noop boolean_yankdup) boolean_yank)) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4 exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1)) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer))))))) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 81
Percent parens: 0.358
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 2, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer})
Zero cases best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (exec_noop boolean_yankdup) boolean_yank)) exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4 exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4 exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1)) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer))))))) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 81
Percent parens: 0.358
--- Lexicase Population Statistics ---
Count of elite individuals by case: (805 854 801 808 785 843 801 844 1 786)
Population mean number of elite cases: 7.33
Count of perfect (error zero) individuals by case: (805 854 801 808 785 843 801 844 1 786)
Population mean number of perfect (error zero) cases: 7.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items})
Best program: (in3 integer_div exec_noop exec_noop boolean_yank exec_noop exec_y_when_autoconstructing (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (exec_yank boolean_dup_items) integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) print_integer integer_dup_items)))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 22
Size: 32
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 2.672
Median total errors in population: 1
Error averages by case: (0.195 0.146 0.199 0.192 0.215 0.157 0.199 0.156 0.999 0.214)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.737
Average program size in population (points): 48.054
Average percent parens in population: 0.330
Minimum age in population: 131.103508399938
Maximum age in population: 133.9135645627374
Average age in population: 132.4564806108143
Median age in population: 132.5085364813377
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 332
Genome diversity (% unique genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 346
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.01
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 31849855
--- Timings ---
Current time: 1559584702851 milliseconds
Total Time:         238.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.2 seconds, 75.7%
Fitness Testing:     33.3 seconds, 14.0%
Report:              24.3 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Smallest problem report - generation 88
Test total error for best: 201
Test mean error for best: 0.20100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 1
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 1
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: -1                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer})
Lexicase best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 70
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer})
Zero cases best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 70
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (688 832 687 815 667 696 859 665 709 664)
Population mean number of elite cases: 7.28
Count of perfect (error zero) individuals by case: (688 832 687 815 667 696 859 665 709 664)
Population mean number of perfect (error zero) cases: 7.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer})
Best program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 45
Size: 70
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 2.718
Median total errors in population: 0
Error averages by case: (0.312 0.168 0.313 0.185 0.333 0.304 0.141 0.335 0.291 0.336)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.316
Average program size in population (points): 49.033
Average percent parens in population: 0.332
Minimum age in population: 132.103508399938
Maximum age in population: 135.6097935016876
Average age in population: 133.9819045074862
Median age in population: 134.0085364813377
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 281
Genome diversity (% unique genomes):	 0.489
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 296
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.01
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 32175238
--- Timings ---
Current time: 1559584705421 milliseconds
Total Time:         240.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.2 seconds, 75.8%
Fitness Testing:     33.6 seconds, 14.0%
Report:              24.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 88
Successful program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 70


Auto-simplifying with starting size: 70
step: 0
program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 500
program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1000
program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1500
program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2000
program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2500
program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3000
program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3500
program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4000
program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4500
program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 5000
program: (in3 integer_shove exec_noop boolean_yankdup boolean_yank exec_y_when_autoconstructing (in3 integer_div exec_noop boolean_yankdup) boolean_yank exec_noop exec_y_when_autoconstructing (integer_div integer_dec integer_mult exec_if () (exec_y_when_autoconstructing (in4) exec_rot (exec_if () (exec_y_when_autoconstructing (in4) exec_y_when_autoconstructing (boolean_yankdup boolean_yank) exec_noop exec_y_when_autoconstructing (integer_div integer_dec exec_y_when_autoconstructing (exec_if () (integer_swap in4) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in1) exec_y_when_autoconstructing (exec_rot (integer_min) (integer_add) (in3) print_integer)))))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 88
Test total error for best: 201
Test mean error for best: 0.20100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 1
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 1
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: -1                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -13                 | Program output: -13                
Correct output: -47                 | Program output: -47                
Correct output: 64                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: -67                 | Program output: 49                 
Correct output: -61                 | Program output: -61                
Correct output: 30                  | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: 44                  | Program output: 44                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 44                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 46                  | Program output: 46                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: 58                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 25                 
Correct output: 42                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -37                 | Program output: -37                
Correct output: 16                  | Program output: 32                 
Correct output: -6                  | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: -46                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -31                
Correct output: -30                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -26                 | Program output: 30                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -42                
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -29                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -45                 | Program output: -45                
Correct output: -94                 | Program output: 59                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -38                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -56                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
;;******************************
