Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-91 -91 -16 -91] -91] [[-17 -17 -15 -17] -17] [[-3 -91 -91 -91] -91] [[89 89 32 89] 32] [[-95 72 72 72] -95] [[-10 -10 -10 65] -10] [[-33 -33 5 -33] -33] [[-18 -26 -18 -18] -26] [[-33 -39 -39 -39] -39] [[-41 -78 -78 -78] -78] [(-70 -70 -70 -70) -70] [(5 5 5 5) 5] [(10 10 10 10) 10] [(81 81 81 81) 81] [(56 56 56 56) 56] [(15 59 11 0) 0] [(73 88 1 25) 1] [(18 26 4 86) 4] [(47 83 21 97) 21] [(94 40 95 19) 19] [(57 50 25 85) 25] [(55 51 16 2) 2] [(82 0 18 92) 0] [(15 49 30 37) 15] [(41 12 91 43) 12] [(78 63 47 46) 46] [(19 65 39 99) 19] [(51 92 86 60) 51] [(40 66 82 12) 12] [(94 98 64 74) 64] [(24 5 32 29) 5] [(57 66 58 47) 47] [(0 40 42 68) 0] [(54 65 68 10) 10] [(44 86 53 17) 17] [(77 26 -78 -35) -78] [(-78 6 -36 -75) -78] [(33 25 -33 31) -33] [(22 -8 -44 76) -44] [(83 48 85 86) 48] [(75 12 36 17) 12] [(50 16 -84 -53) -84] [(73 -32 -7 -17) -32] [(24 4 -18 82) -18] [(-51 73 -42 73) -51] [(-8 95 33 -46) -46] [(59 -95 -10 -40) -95] [(56 93 9 81) 9] [(40 81 -37 26) -37] [(42 -83 63 -45) -83] [(81 -15 34 -17) -17] [(-27 -57 -59 47) -59] [(89 20 24 48) 20] [(-51 -90 -8 -89) -90] [(-31 -1 -1 -23) -31] [(-28 88 53 -88) -88] [(11 53 61 43) 11] [(-62 -73 92 91) -73] [(74 34 34 88) 34] [(-26 -91 14 -47) -91] [(46 19 -74 44) -74] [(-1 -29 -20 -41) -41] [(-23 -22 -53 97) -53] [(-47 9 47 21) -47] [(-26 14 -3 95) -26] [(-22 -75 -70 -4) -75] [(-56 -51 35 70) -56] [(-69 -27 29 -15) -69] [(-70 -13 22 -36) -70] [(-48 -48 50 -85) -85] [(32 -54 -11 -59) -59] [(85 -35 16 85) -35] [(36 -79 -61 0) -79] [(81 -39 41 -18) -39] [(-96 41 24 38) -96] [(-83 59 -87 -38) -87] [(-45 62 -24 -9) -45] [(-40 39 49 27) -40] [(-52 -54 -27 -10) -54] [(-75 37 97 -100) -100] [(73 6 18 25) 6] [(-19 -74 22 1) -74] [(-51 5 67 -52) -52] [(-88 -73 23 16) -88] [(68 -25 44 -19) -25] [(47 93 -23 73) -23] [(-36 -98 85 14) -98] [(-32 -93 -84 -51) -93] [(-85 47 -54 22) -85] [(88 31 -44 -33) -44] [(25 -28 95 11) -28] [(-96 20 -4 92) -96] [(-85 -24 -67 0) -85] [(80 -12 1 45) -12] [(65 73 -88 1) -88])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-91 -91 -16 -91] -91]
Train Case:   6 | Input/Output: [[-17 -17 -15 -17] -17]
Train Case:   7 | Input/Output: [[-3 -91 -91 -91] -91]
Train Case:   8 | Input/Output: [[89 89 32 89] 32]
Train Case:   9 | Input/Output: [[-95 72 72 72] -95]
Train Case:  10 | Input/Output: [[-10 -10 -10 65] -10]
Train Case:  11 | Input/Output: [[-33 -33 5 -33] -33]
Train Case:  12 | Input/Output: [[-18 -26 -18 -18] -26]
Train Case:  13 | Input/Output: [[-33 -39 -39 -39] -39]
Train Case:  14 | Input/Output: [[-41 -78 -78 -78] -78]
Train Case:  15 | Input/Output: [(-70 -70 -70 -70) -70]
Train Case:  16 | Input/Output: [(5 5 5 5) 5]
Train Case:  17 | Input/Output: [(10 10 10 10) 10]
Train Case:  18 | Input/Output: [(81 81 81 81) 81]
Train Case:  19 | Input/Output: [(56 56 56 56) 56]
Train Case:  20 | Input/Output: [(15 59 11 0) 0]
Train Case:  21 | Input/Output: [(73 88 1 25) 1]
Train Case:  22 | Input/Output: [(18 26 4 86) 4]
Train Case:  23 | Input/Output: [(47 83 21 97) 21]
Train Case:  24 | Input/Output: [(94 40 95 19) 19]
Train Case:  25 | Input/Output: [(57 50 25 85) 25]
Train Case:  26 | Input/Output: [(55 51 16 2) 2]
Train Case:  27 | Input/Output: [(82 0 18 92) 0]
Train Case:  28 | Input/Output: [(15 49 30 37) 15]
Train Case:  29 | Input/Output: [(41 12 91 43) 12]
Train Case:  30 | Input/Output: [(78 63 47 46) 46]
Train Case:  31 | Input/Output: [(19 65 39 99) 19]
Train Case:  32 | Input/Output: [(51 92 86 60) 51]
Train Case:  33 | Input/Output: [(40 66 82 12) 12]
Train Case:  34 | Input/Output: [(94 98 64 74) 64]
Train Case:  35 | Input/Output: [(24 5 32 29) 5]
Train Case:  36 | Input/Output: [(57 66 58 47) 47]
Train Case:  37 | Input/Output: [(0 40 42 68) 0]
Train Case:  38 | Input/Output: [(54 65 68 10) 10]
Train Case:  39 | Input/Output: [(44 86 53 17) 17]
Train Case:  40 | Input/Output: [(77 26 -78 -35) -78]
Train Case:  41 | Input/Output: [(-78 6 -36 -75) -78]
Train Case:  42 | Input/Output: [(33 25 -33 31) -33]
Train Case:  43 | Input/Output: [(22 -8 -44 76) -44]
Train Case:  44 | Input/Output: [(83 48 85 86) 48]
Train Case:  45 | Input/Output: [(75 12 36 17) 12]
Train Case:  46 | Input/Output: [(50 16 -84 -53) -84]
Train Case:  47 | Input/Output: [(73 -32 -7 -17) -32]
Train Case:  48 | Input/Output: [(24 4 -18 82) -18]
Train Case:  49 | Input/Output: [(-51 73 -42 73) -51]
Train Case:  50 | Input/Output: [(-8 95 33 -46) -46]
Train Case:  51 | Input/Output: [(59 -95 -10 -40) -95]
Train Case:  52 | Input/Output: [(56 93 9 81) 9]
Train Case:  53 | Input/Output: [(40 81 -37 26) -37]
Train Case:  54 | Input/Output: [(42 -83 63 -45) -83]
Train Case:  55 | Input/Output: [(81 -15 34 -17) -17]
Train Case:  56 | Input/Output: [(-27 -57 -59 47) -59]
Train Case:  57 | Input/Output: [(89 20 24 48) 20]
Train Case:  58 | Input/Output: [(-51 -90 -8 -89) -90]
Train Case:  59 | Input/Output: [(-31 -1 -1 -23) -31]
Train Case:  60 | Input/Output: [(-28 88 53 -88) -88]
Train Case:  61 | Input/Output: [(11 53 61 43) 11]
Train Case:  62 | Input/Output: [(-62 -73 92 91) -73]
Train Case:  63 | Input/Output: [(74 34 34 88) 34]
Train Case:  64 | Input/Output: [(-26 -91 14 -47) -91]
Train Case:  65 | Input/Output: [(46 19 -74 44) -74]
Train Case:  66 | Input/Output: [(-1 -29 -20 -41) -41]
Train Case:  67 | Input/Output: [(-23 -22 -53 97) -53]
Train Case:  68 | Input/Output: [(-47 9 47 21) -47]
Train Case:  69 | Input/Output: [(-26 14 -3 95) -26]
Train Case:  70 | Input/Output: [(-22 -75 -70 -4) -75]
Train Case:  71 | Input/Output: [(-56 -51 35 70) -56]
Train Case:  72 | Input/Output: [(-69 -27 29 -15) -69]
Train Case:  73 | Input/Output: [(-70 -13 22 -36) -70]
Train Case:  74 | Input/Output: [(-48 -48 50 -85) -85]
Train Case:  75 | Input/Output: [(32 -54 -11 -59) -59]
Train Case:  76 | Input/Output: [(85 -35 16 85) -35]
Train Case:  77 | Input/Output: [(36 -79 -61 0) -79]
Train Case:  78 | Input/Output: [(81 -39 41 -18) -39]
Train Case:  79 | Input/Output: [(-96 41 24 38) -96]
Train Case:  80 | Input/Output: [(-83 59 -87 -38) -87]
Train Case:  81 | Input/Output: [(-45 62 -24 -9) -45]
Train Case:  82 | Input/Output: [(-40 39 49 27) -40]
Train Case:  83 | Input/Output: [(-52 -54 -27 -10) -54]
Train Case:  84 | Input/Output: [(-75 37 97 -100) -100]
Train Case:  85 | Input/Output: [(73 6 18 25) 6]
Train Case:  86 | Input/Output: [(-19 -74 22 1) -74]
Train Case:  87 | Input/Output: [(-51 5 67 -52) -52]
Train Case:  88 | Input/Output: [(-88 -73 23 16) -88]
Train Case:  89 | Input/Output: [(68 -25 44 -19) -25]
Train Case:  90 | Input/Output: [(47 93 -23 73) -23]
Train Case:  91 | Input/Output: [(-36 -98 85 14) -98]
Train Case:  92 | Input/Output: [(-32 -93 -84 -51) -93]
Train Case:  93 | Input/Output: [(-85 47 -54 22) -85]
Train Case:  94 | Input/Output: [(88 31 -44 -33) -44]
Train Case:  95 | Input/Output: [(25 -28 95 11) -28]
Train Case:  96 | Input/Output: [(-96 20 -4 92) -96]
Train Case:  97 | Input/Output: [(-85 -24 -67 0) -85]
Train Case:  98 | Input/Output: [(80 -12 1 45) -12]
Train Case:  99 | Input/Output: [(65 73 -88 1) -88]
Test Case:   0 | Input/Output: [[-52 -64 -52 -52] -64]
Test Case:   1 | Input/Output: [[-6 -32 -6 -6] -32]
Test Case:   2 | Input/Output: [[97 97 97 -1] -1]
Test Case:   3 | Input/Output: [[-85 64 -85 -85] -85]
Test Case:   4 | Input/Output: [[-74 50 -74 -74] -74]
Test Case:   5 | Input/Output: [[-17 35 35 35] -17]
Test Case:   6 | Input/Output: [[-4 -83 -83 -83] -83]
Test Case:   7 | Input/Output: [[-53 -53 -14 -53] -53]
Test Case:   8 | Input/Output: [[8 60 8 8] 8]
Test Case:   9 | Input/Output: [[-97 -59 -59 -59] -97]
Test Case:  10 | Input/Output: [[87 -94 87 87] -94]
Test Case:  11 | Input/Output: [[-62 98 98 98] -62]
Test Case:  12 | Input/Output: [[69 69 -44 69] -44]
Test Case:  13 | Input/Output: [[39 -61 39 39] -61]
Test Case:  14 | Input/Output: [[90 90 90 -18] -18]
Test Case:  15 | Input/Output: [[-91 -91 -91 -63] -91]
Test Case:  16 | Input/Output: [[-74 -74 -74 12] -74]
Test Case:  17 | Input/Output: [[46 75 75 75] 46]
Test Case:  18 | Input/Output: [[-16 -16 -55 -16] -55]
Test Case:  19 | Input/Output: [[95 95 -89 95] -89]
Test Case:  20 | Input/Output: [[29 -56 -56 -56] -56]
Test Case:  21 | Input/Output: [[-23 85 85 85] -23]
Test Case:  22 | Input/Output: [[85 37 37 37] 37]
Test Case:  23 | Input/Output: [[-97 -97 -28 -97] -97]
Test Case:  24 | Input/Output: [[-58 34 -58 -58] -58]
Test Case:  25 | Input/Output: [[-72 -72 -72 -20] -72]
Test Case:  26 | Input/Output: [[-41 -41 58 -41] -41]
Test Case:  27 | Input/Output: [[37 -5 -5 -5] -5]
Test Case:  28 | Input/Output: [[38 -57 -57 -57] -57]
Test Case:  29 | Input/Output: [[-43 -43 83 -43] -43]
Test Case:  30 | Input/Output: [[89 89 89 -15] -15]
Test Case:  31 | Input/Output: [[-37 -70 -37 -37] -70]
Test Case:  32 | Input/Output: [[79 79 43 79] 43]
Test Case:  33 | Input/Output: [[-99 -29 -29 -29] -99]
Test Case:  34 | Input/Output: [[78 78 63 78] 63]
Test Case:  35 | Input/Output: [[-35 48 -35 -35] -35]
Test Case:  36 | Input/Output: [[93 79 79 79] 79]
Test Case:  37 | Input/Output: [[58 58 58 40] 40]
Test Case:  38 | Input/Output: [[65 -24 -24 -24] -24]
Test Case:  39 | Input/Output: [[-72 -3 -72 -72] -72]
Test Case:  40 | Input/Output: [[-2 -2 -2 -67] -67]
Test Case:  41 | Input/Output: [[71 -16 71 71] -16]
Test Case:  42 | Input/Output: [[-23 -77 -23 -23] -77]
Test Case:  43 | Input/Output: [[-53 -15 -15 -15] -53]
Test Case:  44 | Input/Output: [[-99 -99 -99 -96] -99]
Test Case:  45 | Input/Output: [[67 53 53 53] 53]
Test Case:  46 | Input/Output: [[-19 -16 -16 -16] -19]
Test Case:  47 | Input/Output: [[-67 -67 -67 -77] -77]
Test Case:  48 | Input/Output: [[56 56 56 -34] -34]
Test Case:  49 | Input/Output: [[-12 -12 -12 -88] -88]
Test Case:  50 | Input/Output: [[-44 63 -44 -44] -44]
Test Case:  51 | Input/Output: [[25 -74 25 25] -74]
Test Case:  52 | Input/Output: [[23 24 24 24] 23]
Test Case:  53 | Input/Output: [[24 24 83 24] 24]
Test Case:  54 | Input/Output: [[60 12 12 12] 12]
Test Case:  55 | Input/Output: [[-55 28 -55 -55] -55]
Test Case:  56 | Input/Output: [[68 29 68 68] 29]
Test Case:  57 | Input/Output: [[-18 -18 -43 -18] -43]
Test Case:  58 | Input/Output: [[-44 41 -44 -44] -44]
Test Case:  59 | Input/Output: [[78 64 64 64] 64]
Test Case:  60 | Input/Output: [[-87 -77 -87 -87] -87]
Test Case:  61 | Input/Output: [[31 -91 -91 -91] -91]
Test Case:  62 | Input/Output: [[80 80 -86 80] -86]
Test Case:  63 | Input/Output: [[16 16 58 16] 16]
Test Case:  64 | Input/Output: [[-18 -18 -18 35] -18]
Test Case:  65 | Input/Output: [[-26 -26 -26 -87] -87]
Test Case:  66 | Input/Output: [[-71 -71 -71 67] -71]
Test Case:  67 | Input/Output: [[97 76 97 97] 76]
Test Case:  68 | Input/Output: [[-79 56 -79 -79] -79]
Test Case:  69 | Input/Output: [[31 31 31 -27] -27]
Test Case:  70 | Input/Output: [[31 31 -76 31] -76]
Test Case:  71 | Input/Output: [[-1 -1 -14 -1] -14]
Test Case:  72 | Input/Output: [[-15 -15 47 -15] -15]
Test Case:  73 | Input/Output: [[75 -16 75 75] -16]
Test Case:  74 | Input/Output: [[-89 -89 -41 -89] -89]
Test Case:  75 | Input/Output: [[-74 -91 -91 -91] -91]
Test Case:  76 | Input/Output: [[-34 85 85 85] -34]
Test Case:  77 | Input/Output: [[10 10 95 10] 10]
Test Case:  78 | Input/Output: [[-4 66 66 66] -4]
Test Case:  79 | Input/Output: [[-76 -52 -52 -52] -76]
Test Case:  80 | Input/Output: [[-35 -35 -35 59] -35]
Test Case:  81 | Input/Output: [[55 42 55 55] 42]
Test Case:  82 | Input/Output: [[-23 -23 -23 92] -23]
Test Case:  83 | Input/Output: [[84 -11 84 84] -11]
Test Case:  84 | Input/Output: [[86 -59 -59 -59] -59]
Test Case:  85 | Input/Output: [[1 96 1 1] 1]
Test Case:  86 | Input/Output: [[70 -28 70 70] -28]
Test Case:  87 | Input/Output: [[70 67 67 67] 67]
Test Case:  88 | Input/Output: [[-88 -88 83 -88] -88]
Test Case:  89 | Input/Output: [[-76 -76 -76 -100] -100]
Test Case:  90 | Input/Output: [[-50 79 -50 -50] -50]
Test Case:  91 | Input/Output: [[39 30 39 39] 30]
Test Case:  92 | Input/Output: [[40 40 82 40] 40]
Test Case:  93 | Input/Output: [[-44 -44 -44 -74] -74]
Test Case:  94 | Input/Output: [[49 -62 -62 -62] -62]
Test Case:  95 | Input/Output: [[48 -68 -68 -68] -68]
Test Case:  96 | Input/Output: [[-7 -7 -7 -80] -80]
Test Case:  97 | Input/Output: [[15 15 26 15] 15]
Test Case:  98 | Input/Output: [[-78 -12 -12 -12] -78]
Test Case:  99 | Input/Output: [[36 36 36 85] 36]
Test Case: 100 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 101 | Input/Output: [(64 64 64 64) 64]
Test Case: 102 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 103 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 104 | Input/Output: [(68 68 68 68) 68]
Test Case: 105 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 106 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 107 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 108 | Input/Output: [(59 59 59 59) 59]
Test Case: 109 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 110 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 111 | Input/Output: [(92 92 92 92) 92]
Test Case: 112 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 113 | Input/Output: [(33 33 33 33) 33]
Test Case: 114 | Input/Output: [(11 11 11 11) 11]
Test Case: 115 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 116 | Input/Output: [(67 67 67 67) 67]
Test Case: 117 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 118 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 119 | Input/Output: [(92 92 92 92) 92]
Test Case: 120 | Input/Output: [(13 13 13 13) 13]
Test Case: 121 | Input/Output: [(23 23 23 23) 23]
Test Case: 122 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 123 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 124 | Input/Output: [(100 100 100 100) 100]
Test Case: 125 | Input/Output: [(99 99 99 99) 99]
Test Case: 126 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 127 | Input/Output: [(74 74 74 74) 74]
Test Case: 128 | Input/Output: [(62 62 62 62) 62]
Test Case: 129 | Input/Output: [(29 29 29 29) 29]
Test Case: 130 | Input/Output: [(65 65 65 65) 65]
Test Case: 131 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 132 | Input/Output: [(50 50 50 50) 50]
Test Case: 133 | Input/Output: [(26 26 26 26) 26]
Test Case: 134 | Input/Output: [(85 85 85 85) 85]
Test Case: 135 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 136 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 137 | Input/Output: [(49 49 49 49) 49]
Test Case: 138 | Input/Output: [(29 29 29 29) 29]
Test Case: 139 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 140 | Input/Output: [(26 26 26 26) 26]
Test Case: 141 | Input/Output: [(32 32 32 32) 32]
Test Case: 142 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 143 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 144 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 145 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 146 | Input/Output: [(65 65 65 65) 65]
Test Case: 147 | Input/Output: [(22 22 22 22) 22]
Test Case: 148 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 149 | Input/Output: [(96 96 96 96) 96]
Test Case: 150 | Input/Output: [(69 69 69 69) 69]
Test Case: 151 | Input/Output: [(46 46 46 46) 46]
Test Case: 152 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 153 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 154 | Input/Output: [(86 86 86 86) 86]
Test Case: 155 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 156 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 157 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 158 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 159 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 160 | Input/Output: [(29 29 29 29) 29]
Test Case: 161 | Input/Output: [(10 10 10 10) 10]
Test Case: 162 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 163 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 164 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 165 | Input/Output: [(57 57 57 57) 57]
Test Case: 166 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 167 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 168 | Input/Output: [(27 27 27 27) 27]
Test Case: 169 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 170 | Input/Output: [(29 29 29 29) 29]
Test Case: 171 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 172 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 173 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 174 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 175 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 176 | Input/Output: [(54 54 54 54) 54]
Test Case: 177 | Input/Output: [(8 8 8 8) 8]
Test Case: 178 | Input/Output: [(73 73 73 73) 73]
Test Case: 179 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 180 | Input/Output: [(37 37 37 37) 37]
Test Case: 181 | Input/Output: [(74 74 74 74) 74]
Test Case: 182 | Input/Output: [(65 65 65 65) 65]
Test Case: 183 | Input/Output: [(58 58 58 58) 58]
Test Case: 184 | Input/Output: [(80 80 80 80) 80]
Test Case: 185 | Input/Output: [(45 45 45 45) 45]
Test Case: 186 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 187 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 188 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 189 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 190 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 191 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 192 | Input/Output: [(45 45 45 45) 45]
Test Case: 193 | Input/Output: [(10 10 10 10) 10]
Test Case: 194 | Input/Output: [(9 9 9 9) 9]
Test Case: 195 | Input/Output: [(85 85 85 85) 85]
Test Case: 196 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 197 | Input/Output: [(81 81 81 81) 81]
Test Case: 198 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 199 | Input/Output: [(24 24 24 24) 24]
Test Case: 200 | Input/Output: [(96 44 78 36) 36]
Test Case: 201 | Input/Output: [(58 7 30 22) 7]
Test Case: 202 | Input/Output: [(32 40 40 83) 32]
Test Case: 203 | Input/Output: [(18 18 80 14) 14]
Test Case: 204 | Input/Output: [(47 45 65 12) 12]
Test Case: 205 | Input/Output: [(84 74 95 42) 42]
Test Case: 206 | Input/Output: [(80 0 50 74) 0]
Test Case: 207 | Input/Output: [(13 73 61 7) 7]
Test Case: 208 | Input/Output: [(4 55 42 52) 4]
Test Case: 209 | Input/Output: [(61 19 9 13) 9]
Test Case: 210 | Input/Output: [(61 35 46 28) 28]
Test Case: 211 | Input/Output: [(48 71 75 16) 16]
Test Case: 212 | Input/Output: [(51 0 93 29) 0]
Test Case: 213 | Input/Output: [(73 94 69 12) 12]
Test Case: 214 | Input/Output: [(66 20 15 66) 15]
Test Case: 215 | Input/Output: [(73 87 46 45) 45]
Test Case: 216 | Input/Output: [(56 82 96 13) 13]
Test Case: 217 | Input/Output: [(7 23 43 30) 7]
Test Case: 218 | Input/Output: [(24 46 59 95) 24]
Test Case: 219 | Input/Output: [(79 55 56 74) 55]
Test Case: 220 | Input/Output: [(1 19 4 72) 1]
Test Case: 221 | Input/Output: [(6 27 20 45) 6]
Test Case: 222 | Input/Output: [(33 60 18 93) 18]
Test Case: 223 | Input/Output: [(94 67 68 77) 67]
Test Case: 224 | Input/Output: [(33 27 70 4) 4]
Test Case: 225 | Input/Output: [(66 38 28 56) 28]
Test Case: 226 | Input/Output: [(80 84 66 94) 66]
Test Case: 227 | Input/Output: [(2 88 42 86) 2]
Test Case: 228 | Input/Output: [(16 20 68 37) 16]
Test Case: 229 | Input/Output: [(87 52 96 25) 25]
Test Case: 230 | Input/Output: [(24 36 55 53) 24]
Test Case: 231 | Input/Output: [(38 39 75 58) 38]
Test Case: 232 | Input/Output: [(19 61 8 97) 8]
Test Case: 233 | Input/Output: [(91 10 76 58) 10]
Test Case: 234 | Input/Output: [(58 32 75 35) 32]
Test Case: 235 | Input/Output: [(29 93 9 78) 9]
Test Case: 236 | Input/Output: [(86 6 93 64) 6]
Test Case: 237 | Input/Output: [(12 31 47 59) 12]
Test Case: 238 | Input/Output: [(53 66 83 56) 53]
Test Case: 239 | Input/Output: [(98 18 93 0) 0]
Test Case: 240 | Input/Output: [(79 68 57 7) 7]
Test Case: 241 | Input/Output: [(13 93 47 11) 11]
Test Case: 242 | Input/Output: [(42 100 92 32) 32]
Test Case: 243 | Input/Output: [(1 12 91 52) 1]
Test Case: 244 | Input/Output: [(0 17 47 35) 0]
Test Case: 245 | Input/Output: [(86 79 65 12) 12]
Test Case: 246 | Input/Output: [(59 87 54 83) 54]
Test Case: 247 | Input/Output: [(6 82 79 25) 6]
Test Case: 248 | Input/Output: [(46 84 6 35) 6]
Test Case: 249 | Input/Output: [(89 7 91 94) 7]
Test Case: 250 | Input/Output: [(54 88 25 54) 25]
Test Case: 251 | Input/Output: [(22 73 0 62) 0]
Test Case: 252 | Input/Output: [(61 59 77 81) 59]
Test Case: 253 | Input/Output: [(0 40 96 68) 0]
Test Case: 254 | Input/Output: [(70 46 48 68) 46]
Test Case: 255 | Input/Output: [(73 63 98 72) 63]
Test Case: 256 | Input/Output: [(68 17 88 52) 17]
Test Case: 257 | Input/Output: [(46 43 11 49) 11]
Test Case: 258 | Input/Output: [(69 18 43 7) 7]
Test Case: 259 | Input/Output: [(25 2 30 83) 2]
Test Case: 260 | Input/Output: [(82 26 52 63) 26]
Test Case: 261 | Input/Output: [(21 94 9 53) 9]
Test Case: 262 | Input/Output: [(28 52 85 96) 28]
Test Case: 263 | Input/Output: [(1 49 50 76) 1]
Test Case: 264 | Input/Output: [(15 97 69 80) 15]
Test Case: 265 | Input/Output: [(2 67 27 23) 2]
Test Case: 266 | Input/Output: [(73 72 46 56) 46]
Test Case: 267 | Input/Output: [(80 78 16 62) 16]
Test Case: 268 | Input/Output: [(85 11 47 31) 11]
Test Case: 269 | Input/Output: [(97 88 21 85) 21]
Test Case: 270 | Input/Output: [(79 5 85 70) 5]
Test Case: 271 | Input/Output: [(6 43 30 57) 6]
Test Case: 272 | Input/Output: [(9 28 71 14) 9]
Test Case: 273 | Input/Output: [(36 80 40 73) 36]
Test Case: 274 | Input/Output: [(37 36 89 35) 35]
Test Case: 275 | Input/Output: [(71 4 60 45) 4]
Test Case: 276 | Input/Output: [(61 64 23 46) 23]
Test Case: 277 | Input/Output: [(6 31 14 42) 6]
Test Case: 278 | Input/Output: [(63 52 96 50) 50]
Test Case: 279 | Input/Output: [(51 94 59 90) 51]
Test Case: 280 | Input/Output: [(41 92 51 46) 41]
Test Case: 281 | Input/Output: [(3 29 53 34) 3]
Test Case: 282 | Input/Output: [(83 63 20 94) 20]
Test Case: 283 | Input/Output: [(54 86 72 70) 54]
Test Case: 284 | Input/Output: [(5 77 0 8) 0]
Test Case: 285 | Input/Output: [(12 42 95 71) 12]
Test Case: 286 | Input/Output: [(36 26 44 38) 26]
Test Case: 287 | Input/Output: [(9 19 74 57) 9]
Test Case: 288 | Input/Output: [(72 22 37 65) 22]
Test Case: 289 | Input/Output: [(57 22 63 59) 22]
Test Case: 290 | Input/Output: [(40 34 19 10) 10]
Test Case: 291 | Input/Output: [(25 10 16 74) 10]
Test Case: 292 | Input/Output: [(86 3 16 83) 3]
Test Case: 293 | Input/Output: [(12 76 97 37) 12]
Test Case: 294 | Input/Output: [(97 73 48 83) 48]
Test Case: 295 | Input/Output: [(52 6 88 72) 6]
Test Case: 296 | Input/Output: [(45 26 14 4) 4]
Test Case: 297 | Input/Output: [(90 44 13 0) 0]
Test Case: 298 | Input/Output: [(6 0 96 49) 0]
Test Case: 299 | Input/Output: [(97 51 57 55) 51]
Test Case: 300 | Input/Output: [(79 6 91 34) 6]
Test Case: 301 | Input/Output: [(42 0 5 27) 0]
Test Case: 302 | Input/Output: [(75 67 64 7) 7]
Test Case: 303 | Input/Output: [(68 31 63 81) 31]
Test Case: 304 | Input/Output: [(24 63 4 9) 4]
Test Case: 305 | Input/Output: [(86 49 31 91) 31]
Test Case: 306 | Input/Output: [(75 86 75 11) 11]
Test Case: 307 | Input/Output: [(84 57 85 10) 10]
Test Case: 308 | Input/Output: [(86 90 68 38) 38]
Test Case: 309 | Input/Output: [(72 27 91 37) 27]
Test Case: 310 | Input/Output: [(47 30 92 98) 30]
Test Case: 311 | Input/Output: [(68 69 42 55) 42]
Test Case: 312 | Input/Output: [(57 46 41 57) 41]
Test Case: 313 | Input/Output: [(46 57 83 59) 46]
Test Case: 314 | Input/Output: [(19 59 60 11) 11]
Test Case: 315 | Input/Output: [(33 32 54 24) 24]
Test Case: 316 | Input/Output: [(92 56 77 74) 56]
Test Case: 317 | Input/Output: [(66 87 100 62) 62]
Test Case: 318 | Input/Output: [(20 94 70 71) 20]
Test Case: 319 | Input/Output: [(89 33 11 31) 11]
Test Case: 320 | Input/Output: [(98 26 24 40) 24]
Test Case: 321 | Input/Output: [(34 29 91 57) 29]
Test Case: 322 | Input/Output: [(38 59 72 31) 31]
Test Case: 323 | Input/Output: [(10 66 82 28) 10]
Test Case: 324 | Input/Output: [(29 74 78 33) 29]
Test Case: 325 | Input/Output: [(80 68 34 50) 34]
Test Case: 326 | Input/Output: [(46 41 59 54) 41]
Test Case: 327 | Input/Output: [(87 43 18 61) 18]
Test Case: 328 | Input/Output: [(13 15 30 51) 13]
Test Case: 329 | Input/Output: [(95 80 66 26) 26]
Test Case: 330 | Input/Output: [(92 90 95 21) 21]
Test Case: 331 | Input/Output: [(94 37 26 14) 14]
Test Case: 332 | Input/Output: [(18 81 42 84) 18]
Test Case: 333 | Input/Output: [(95 69 21 95) 21]
Test Case: 334 | Input/Output: [(60 98 31 41) 31]
Test Case: 335 | Input/Output: [(49 21 82 44) 21]
Test Case: 336 | Input/Output: [(99 64 41 93) 41]
Test Case: 337 | Input/Output: [(39 32 45 10) 10]
Test Case: 338 | Input/Output: [(99 69 66 59) 59]
Test Case: 339 | Input/Output: [(29 63 81 96) 29]
Test Case: 340 | Input/Output: [(61 64 37 38) 37]
Test Case: 341 | Input/Output: [(99 100 42 44) 42]
Test Case: 342 | Input/Output: [(98 43 72 81) 43]
Test Case: 343 | Input/Output: [(5 44 22 22) 5]
Test Case: 344 | Input/Output: [(73 63 43 24) 24]
Test Case: 345 | Input/Output: [(8 95 46 89) 8]
Test Case: 346 | Input/Output: [(56 93 88 40) 40]
Test Case: 347 | Input/Output: [(97 10 19 2) 2]
Test Case: 348 | Input/Output: [(51 47 51 90) 47]
Test Case: 349 | Input/Output: [(6 33 0 8) 0]
Test Case: 350 | Input/Output: [(89 56 19 94) 19]
Test Case: 351 | Input/Output: [(68 40 81 25) 25]
Test Case: 352 | Input/Output: [(90 30 13 20) 13]
Test Case: 353 | Input/Output: [(45 90 38 68) 38]
Test Case: 354 | Input/Output: [(70 65 22 19) 19]
Test Case: 355 | Input/Output: [(32 8 55 53) 8]
Test Case: 356 | Input/Output: [(14 3 16 44) 3]
Test Case: 357 | Input/Output: [(97 22 100 29) 22]
Test Case: 358 | Input/Output: [(56 36 75 10) 10]
Test Case: 359 | Input/Output: [(76 68 74 89) 68]
Test Case: 360 | Input/Output: [(8 9 52 82) 8]
Test Case: 361 | Input/Output: [(5 40 12 56) 5]
Test Case: 362 | Input/Output: [(76 6 59 75) 6]
Test Case: 363 | Input/Output: [(49 64 94 56) 49]
Test Case: 364 | Input/Output: [(1 16 17 94) 1]
Test Case: 365 | Input/Output: [(31 53 69 14) 14]
Test Case: 366 | Input/Output: [(25 54 21 97) 21]
Test Case: 367 | Input/Output: [(3 77 44 96) 3]
Test Case: 368 | Input/Output: [(69 59 39 74) 39]
Test Case: 369 | Input/Output: [(47 33 21 8) 8]
Test Case: 370 | Input/Output: [(54 36 96 27) 27]
Test Case: 371 | Input/Output: [(40 86 29 95) 29]
Test Case: 372 | Input/Output: [(29 49 35 18) 18]
Test Case: 373 | Input/Output: [(90 11 80 16) 11]
Test Case: 374 | Input/Output: [(43 40 32 94) 32]
Test Case: 375 | Input/Output: [(33 31 87 7) 7]
Test Case: 376 | Input/Output: [(77 72 62 92) 62]
Test Case: 377 | Input/Output: [(40 3 21 50) 3]
Test Case: 378 | Input/Output: [(75 66 29 26) 26]
Test Case: 379 | Input/Output: [(83 19 27 55) 19]
Test Case: 380 | Input/Output: [(76 78 63 36) 36]
Test Case: 381 | Input/Output: [(3 62 4 28) 3]
Test Case: 382 | Input/Output: [(63 63 69 83) 63]
Test Case: 383 | Input/Output: [(18 25 98 42) 18]
Test Case: 384 | Input/Output: [(11 34 15 39) 11]
Test Case: 385 | Input/Output: [(39 15 21 20) 15]
Test Case: 386 | Input/Output: [(79 73 39 86) 39]
Test Case: 387 | Input/Output: [(4 51 66 8) 4]
Test Case: 388 | Input/Output: [(39 7 68 61) 7]
Test Case: 389 | Input/Output: [(29 70 45 28) 28]
Test Case: 390 | Input/Output: [(84 6 73 93) 6]
Test Case: 391 | Input/Output: [(46 42 59 37) 37]
Test Case: 392 | Input/Output: [(81 85 93 89) 81]
Test Case: 393 | Input/Output: [(44 45 97 45) 44]
Test Case: 394 | Input/Output: [(24 3 43 51) 3]
Test Case: 395 | Input/Output: [(70 30 84 80) 30]
Test Case: 396 | Input/Output: [(100 50 84 73) 50]
Test Case: 397 | Input/Output: [(13 10 34 51) 10]
Test Case: 398 | Input/Output: [(17 1 16 60) 1]
Test Case: 399 | Input/Output: [(82 70 54 96) 54]
Test Case: 400 | Input/Output: [(-25 86 -79 -78) -79]
Test Case: 401 | Input/Output: [(28 -84 65 -15) -84]
Test Case: 402 | Input/Output: [(-100 80 -23 -2) -100]
Test Case: 403 | Input/Output: [(-58 58 29 -22) -58]
Test Case: 404 | Input/Output: [(-6 -29 61 42) -29]
Test Case: 405 | Input/Output: [(78 62 -57 -58) -58]
Test Case: 406 | Input/Output: [(17 81 -32 40) -32]
Test Case: 407 | Input/Output: [(-1 -45 -29 73) -45]
Test Case: 408 | Input/Output: [(-3 -55 -43 -51) -55]
Test Case: 409 | Input/Output: [(-89 -58 30 -52) -89]
Test Case: 410 | Input/Output: [(33 3 -85 -53) -85]
Test Case: 411 | Input/Output: [(8 74 -97 -69) -97]
Test Case: 412 | Input/Output: [(7 79 -65 50) -65]
Test Case: 413 | Input/Output: [(66 28 13 2) 2]
Test Case: 414 | Input/Output: [(-53 97 -77 -90) -90]
Test Case: 415 | Input/Output: [(27 -23 96 -65) -65]
Test Case: 416 | Input/Output: [(-55 -92 3 -25) -92]
Test Case: 417 | Input/Output: [(77 32 48 -18) -18]
Test Case: 418 | Input/Output: [(-75 78 -65 46) -75]
Test Case: 419 | Input/Output: [(-53 11 -55 -30) -55]
Test Case: 420 | Input/Output: [(-80 66 -50 -86) -86]
Test Case: 421 | Input/Output: [(73 -90 93 -10) -90]
Test Case: 422 | Input/Output: [(-76 88 71 14) -76]
Test Case: 423 | Input/Output: [(39 59 34 -1) -1]
Test Case: 424 | Input/Output: [(19 24 45 67) 19]
Test Case: 425 | Input/Output: [(61 -44 60 -67) -67]
Test Case: 426 | Input/Output: [(84 -6 -54 -88) -88]
Test Case: 427 | Input/Output: [(-100 56 -11 11) -100]
Test Case: 428 | Input/Output: [(79 -30 -4 46) -30]
Test Case: 429 | Input/Output: [(-84 51 -48 96) -84]
Test Case: 430 | Input/Output: [(91 61 34 20) 20]
Test Case: 431 | Input/Output: [(-94 -51 -93 -56) -94]
Test Case: 432 | Input/Output: [(-45 -4 -95 58) -95]
Test Case: 433 | Input/Output: [(20 -13 -72 -50) -72]
Test Case: 434 | Input/Output: [(18 31 12 33) 12]
Test Case: 435 | Input/Output: [(90 80 45 23) 23]
Test Case: 436 | Input/Output: [(58 -5 -100 -75) -100]
Test Case: 437 | Input/Output: [(66 31 -11 -27) -27]
Test Case: 438 | Input/Output: [(-96 -45 -67 71) -96]
Test Case: 439 | Input/Output: [(-46 -25 -18 46) -46]
Test Case: 440 | Input/Output: [(-75 96 -56 50) -75]
Test Case: 441 | Input/Output: [(-68 -1 -57 -95) -95]
Test Case: 442 | Input/Output: [(-59 19 72 -34) -59]
Test Case: 443 | Input/Output: [(-48 31 74 -74) -74]
Test Case: 444 | Input/Output: [(-83 -68 -49 95) -83]
Test Case: 445 | Input/Output: [(63 -5 -93 81) -93]
Test Case: 446 | Input/Output: [(-69 37 -41 -51) -69]
Test Case: 447 | Input/Output: [(-16 61 -40 17) -40]
Test Case: 448 | Input/Output: [(99 -98 -77 82) -98]
Test Case: 449 | Input/Output: [(72 56 -62 -46) -62]
Test Case: 450 | Input/Output: [(-79 -63 -92 70) -92]
Test Case: 451 | Input/Output: [(-72 -45 -56 -79) -79]
Test Case: 452 | Input/Output: [(-56 -81 7 72) -81]
Test Case: 453 | Input/Output: [(-27 -8 68 27) -27]
Test Case: 454 | Input/Output: [(14 81 30 84) 14]
Test Case: 455 | Input/Output: [(-47 -54 -22 23) -54]
Test Case: 456 | Input/Output: [(24 83 49 72) 24]
Test Case: 457 | Input/Output: [(-29 -8 -9 -2) -29]
Test Case: 458 | Input/Output: [(-73 -14 -90 -7) -90]
Test Case: 459 | Input/Output: [(86 -56 56 -41) -56]
Test Case: 460 | Input/Output: [(-57 60 51 -26) -57]
Test Case: 461 | Input/Output: [(46 -5 -83 89) -83]
Test Case: 462 | Input/Output: [(-54 -61 -98 -13) -98]
Test Case: 463 | Input/Output: [(-67 0 76 88) -67]
Test Case: 464 | Input/Output: [(89 96 57 21) 21]
Test Case: 465 | Input/Output: [(-87 -3 -52 -44) -87]
Test Case: 466 | Input/Output: [(-20 -61 9 44) -61]
Test Case: 467 | Input/Output: [(49 51 43 48) 43]
Test Case: 468 | Input/Output: [(57 -98 55 78) -98]
Test Case: 469 | Input/Output: [(98 -88 -70 72) -88]
Test Case: 470 | Input/Output: [(91 -93 37 44) -93]
Test Case: 471 | Input/Output: [(-35 23 79 -72) -72]
Test Case: 472 | Input/Output: [(-69 22 90 -68) -69]
Test Case: 473 | Input/Output: [(-36 -85 21 -46) -85]
Test Case: 474 | Input/Output: [(-50 -95 28 -84) -95]
Test Case: 475 | Input/Output: [(31 -52 80 67) -52]
Test Case: 476 | Input/Output: [(95 71 6 -42) -42]
Test Case: 477 | Input/Output: [(72 20 20 -40) -40]
Test Case: 478 | Input/Output: [(97 -37 63 63) -37]
Test Case: 479 | Input/Output: [(-29 78 0 -6) -29]
Test Case: 480 | Input/Output: [(80 5 29 80) 5]
Test Case: 481 | Input/Output: [(-46 63 73 -29) -46]
Test Case: 482 | Input/Output: [(69 51 83 41) 41]
Test Case: 483 | Input/Output: [(-47 13 -57 -76) -76]
Test Case: 484 | Input/Output: [(55 36 3 -82) -82]
Test Case: 485 | Input/Output: [(69 -58 72 40) -58]
Test Case: 486 | Input/Output: [(24 70 70 94) 24]
Test Case: 487 | Input/Output: [(-58 56 87 -44) -58]
Test Case: 488 | Input/Output: [(31 2 51 33) 2]
Test Case: 489 | Input/Output: [(96 -90 40 -85) -90]
Test Case: 490 | Input/Output: [(-81 32 -82 -43) -82]
Test Case: 491 | Input/Output: [(-98 38 65 47) -98]
Test Case: 492 | Input/Output: [(-75 14 15 -8) -75]
Test Case: 493 | Input/Output: [(-60 38 -23 48) -60]
Test Case: 494 | Input/Output: [(66 -7 62 72) -7]
Test Case: 495 | Input/Output: [(-34 -45 -56 26) -56]
Test Case: 496 | Input/Output: [(-53 -36 76 39) -53]
Test Case: 497 | Input/Output: [(9 51 49 18) 9]
Test Case: 498 | Input/Output: [(71 -3 72 -14) -14]
Test Case: 499 | Input/Output: [(84 49 -61 93) -61]
Test Case: 500 | Input/Output: [(12 21 -95 -51) -95]
Test Case: 501 | Input/Output: [(37 -83 53 91) -83]
Test Case: 502 | Input/Output: [(36 23 45 -62) -62]
Test Case: 503 | Input/Output: [(-7 99 32 88) -7]
Test Case: 504 | Input/Output: [(-48 75 -81 80) -81]
Test Case: 505 | Input/Output: [(62 12 34 67) 12]
Test Case: 506 | Input/Output: [(98 -72 -3 -47) -72]
Test Case: 507 | Input/Output: [(-75 18 -17 -39) -75]
Test Case: 508 | Input/Output: [(-17 27 -55 11) -55]
Test Case: 509 | Input/Output: [(-37 -17 43 -43) -43]
Test Case: 510 | Input/Output: [(-52 33 -79 82) -79]
Test Case: 511 | Input/Output: [(-56 94 2 -11) -56]
Test Case: 512 | Input/Output: [(-73 -98 -73 -77) -98]
Test Case: 513 | Input/Output: [(6 -40 -92 -83) -92]
Test Case: 514 | Input/Output: [(72 -84 5 -85) -85]
Test Case: 515 | Input/Output: [(-22 -43 62 -37) -43]
Test Case: 516 | Input/Output: [(-61 46 -54 17) -61]
Test Case: 517 | Input/Output: [(86 -72 -33 -87) -87]
Test Case: 518 | Input/Output: [(-29 -58 -93 -96) -96]
Test Case: 519 | Input/Output: [(-25 -34 -74 16) -74]
Test Case: 520 | Input/Output: [(100 64 -40 -34) -40]
Test Case: 521 | Input/Output: [(-18 0 -20 -8) -20]
Test Case: 522 | Input/Output: [(20 -13 89 -100) -100]
Test Case: 523 | Input/Output: [(-85 45 1 39) -85]
Test Case: 524 | Input/Output: [(-29 -32 -54 56) -54]
Test Case: 525 | Input/Output: [(-31 -23 74 34) -31]
Test Case: 526 | Input/Output: [(-69 -12 5 43) -69]
Test Case: 527 | Input/Output: [(-3 50 -49 87) -49]
Test Case: 528 | Input/Output: [(84 95 -5 92) -5]
Test Case: 529 | Input/Output: [(14 -81 39 100) -81]
Test Case: 530 | Input/Output: [(-61 -13 68 80) -61]
Test Case: 531 | Input/Output: [(-80 -55 -79 37) -80]
Test Case: 532 | Input/Output: [(-51 78 -84 24) -84]
Test Case: 533 | Input/Output: [(-36 99 -5 81) -36]
Test Case: 534 | Input/Output: [(47 -97 -21 75) -97]
Test Case: 535 | Input/Output: [(43 -84 -66 5) -84]
Test Case: 536 | Input/Output: [(-49 17 -57 21) -57]
Test Case: 537 | Input/Output: [(-68 49 2 88) -68]
Test Case: 538 | Input/Output: [(-71 -85 -85 -39) -85]
Test Case: 539 | Input/Output: [(-45 96 -79 -42) -79]
Test Case: 540 | Input/Output: [(100 -98 77 -99) -99]
Test Case: 541 | Input/Output: [(80 83 -68 -9) -68]
Test Case: 542 | Input/Output: [(-37 -40 -14 -21) -40]
Test Case: 543 | Input/Output: [(-100 39 51 -35) -100]
Test Case: 544 | Input/Output: [(68 -17 29 81) -17]
Test Case: 545 | Input/Output: [(63 3 -19 -92) -92]
Test Case: 546 | Input/Output: [(4 -93 -40 93) -93]
Test Case: 547 | Input/Output: [(-86 74 -98 5) -98]
Test Case: 548 | Input/Output: [(20 51 -43 -93) -93]
Test Case: 549 | Input/Output: [(76 82 3 21) 3]
Test Case: 550 | Input/Output: [(-7 -57 -13 -46) -57]
Test Case: 551 | Input/Output: [(47 75 -53 -94) -94]
Test Case: 552 | Input/Output: [(-87 79 -62 -32) -87]
Test Case: 553 | Input/Output: [(-13 -46 -56 18) -56]
Test Case: 554 | Input/Output: [(-93 -40 70 -3) -93]
Test Case: 555 | Input/Output: [(6 -1 38 37) -1]
Test Case: 556 | Input/Output: [(36 15 70 -32) -32]
Test Case: 557 | Input/Output: [(65 -6 8 72) -6]
Test Case: 558 | Input/Output: [(-41 66 -94 -86) -94]
Test Case: 559 | Input/Output: [(10 47 89 85) 10]
Test Case: 560 | Input/Output: [(-34 -12 -31 94) -34]
Test Case: 561 | Input/Output: [(95 91 34 74) 34]
Test Case: 562 | Input/Output: [(-3 -11 -91 -34) -91]
Test Case: 563 | Input/Output: [(30 58 -71 33) -71]
Test Case: 564 | Input/Output: [(93 -58 -88 -64) -88]
Test Case: 565 | Input/Output: [(-92 32 -70 47) -92]
Test Case: 566 | Input/Output: [(62 -2 -47 40) -47]
Test Case: 567 | Input/Output: [(51 -90 -61 12) -90]
Test Case: 568 | Input/Output: [(9 58 -60 -17) -60]
Test Case: 569 | Input/Output: [(-13 86 -47 56) -47]
Test Case: 570 | Input/Output: [(-18 -84 35 -48) -84]
Test Case: 571 | Input/Output: [(-9 27 -71 -28) -71]
Test Case: 572 | Input/Output: [(-69 -39 12 -10) -69]
Test Case: 573 | Input/Output: [(13 79 40 45) 13]
Test Case: 574 | Input/Output: [(48 -36 -36 -46) -46]
Test Case: 575 | Input/Output: [(74 -72 -15 76) -72]
Test Case: 576 | Input/Output: [(78 69 -40 92) -40]
Test Case: 577 | Input/Output: [(-39 94 3 73) -39]
Test Case: 578 | Input/Output: [(21 -41 61 14) -41]
Test Case: 579 | Input/Output: [(52 67 -55 49) -55]
Test Case: 580 | Input/Output: [(-49 99 84 34) -49]
Test Case: 581 | Input/Output: [(57 80 44 -40) -40]
Test Case: 582 | Input/Output: [(42 67 -28 -7) -28]
Test Case: 583 | Input/Output: [(19 -81 22 43) -81]
Test Case: 584 | Input/Output: [(-36 26 -73 -67) -73]
Test Case: 585 | Input/Output: [(38 -67 75 7) -67]
Test Case: 586 | Input/Output: [(56 -43 -94 74) -94]
Test Case: 587 | Input/Output: [(89 -4 66 -23) -23]
Test Case: 588 | Input/Output: [(-64 68 92 34) -64]
Test Case: 589 | Input/Output: [(-100 -97 -11 -60) -100]
Test Case: 590 | Input/Output: [(56 -46 -99 62) -99]
Test Case: 591 | Input/Output: [(31 -17 16 1) -17]
Test Case: 592 | Input/Output: [(-70 44 -15 24) -70]
Test Case: 593 | Input/Output: [(-59 30 62 -42) -59]
Test Case: 594 | Input/Output: [(-29 -88 5 95) -88]
Test Case: 595 | Input/Output: [(27 -38 -64 -30) -64]
Test Case: 596 | Input/Output: [(60 -38 -40 -85) -85]
Test Case: 597 | Input/Output: [(99 52 -37 73) -37]
Test Case: 598 | Input/Output: [(-72 45 -40 -91) -91]
Test Case: 599 | Input/Output: [(38 -25 5 8) -25]
Test Case: 600 | Input/Output: [(-80 95 -16 57) -80]
Test Case: 601 | Input/Output: [(45 30 -19 -94) -94]
Test Case: 602 | Input/Output: [(-35 48 72 -91) -91]
Test Case: 603 | Input/Output: [(-26 -87 -57 -100) -100]
Test Case: 604 | Input/Output: [(-21 77 -24 25) -24]
Test Case: 605 | Input/Output: [(-60 -81 -94 49) -94]
Test Case: 606 | Input/Output: [(43 -90 53 -57) -90]
Test Case: 607 | Input/Output: [(-53 -1 20 50) -53]
Test Case: 608 | Input/Output: [(39 -11 8 -98) -98]
Test Case: 609 | Input/Output: [(-64 -73 -51 -54) -73]
Test Case: 610 | Input/Output: [(-18 74 -87 46) -87]
Test Case: 611 | Input/Output: [(-96 86 -100 -99) -100]
Test Case: 612 | Input/Output: [(-54 53 -16 28) -54]
Test Case: 613 | Input/Output: [(70 86 45 6) 6]
Test Case: 614 | Input/Output: [(52 -81 -44 -24) -81]
Test Case: 615 | Input/Output: [(-82 19 -25 -40) -82]
Test Case: 616 | Input/Output: [(92 -54 49 26) -54]
Test Case: 617 | Input/Output: [(14 92 4 55) 4]
Test Case: 618 | Input/Output: [(-54 -66 -86 -44) -86]
Test Case: 619 | Input/Output: [(18 36 33 89) 18]
Test Case: 620 | Input/Output: [(-8 48 -52 57) -52]
Test Case: 621 | Input/Output: [(-80 -14 -93 -58) -93]
Test Case: 622 | Input/Output: [(47 -39 -31 21) -39]
Test Case: 623 | Input/Output: [(-48 -66 -52 -28) -66]
Test Case: 624 | Input/Output: [(73 82 -25 6) -25]
Test Case: 625 | Input/Output: [(-67 -12 -85 44) -85]
Test Case: 626 | Input/Output: [(-10 -33 -83 -39) -83]
Test Case: 627 | Input/Output: [(34 -82 30 34) -82]
Test Case: 628 | Input/Output: [(76 96 28 32) 28]
Test Case: 629 | Input/Output: [(-13 -99 83 88) -99]
Test Case: 630 | Input/Output: [(28 3 94 81) 3]
Test Case: 631 | Input/Output: [(-54 -1 75 -53) -54]
Test Case: 632 | Input/Output: [(17 62 -19 84) -19]
Test Case: 633 | Input/Output: [(81 -35 -79 15) -79]
Test Case: 634 | Input/Output: [(-74 47 -89 17) -89]
Test Case: 635 | Input/Output: [(-64 46 -11 -50) -64]
Test Case: 636 | Input/Output: [(-37 -18 -48 -16) -48]
Test Case: 637 | Input/Output: [(96 -47 57 16) -47]
Test Case: 638 | Input/Output: [(35 93 16 -15) -15]
Test Case: 639 | Input/Output: [(-39 -32 -66 8) -66]
Test Case: 640 | Input/Output: [(-54 -79 24 -100) -100]
Test Case: 641 | Input/Output: [(63 9 -51 99) -51]
Test Case: 642 | Input/Output: [(-11 24 -68 -57) -68]
Test Case: 643 | Input/Output: [(55 -36 -58 -98) -98]
Test Case: 644 | Input/Output: [(99 24 -71 30) -71]
Test Case: 645 | Input/Output: [(33 96 45 53) 33]
Test Case: 646 | Input/Output: [(-3 27 81 -87) -87]
Test Case: 647 | Input/Output: [(26 -99 -6 16) -99]
Test Case: 648 | Input/Output: [(-25 -97 -24 41) -97]
Test Case: 649 | Input/Output: [(-59 31 -10 -7) -59]
Test Case: 650 | Input/Output: [(-53 -20 -13 42) -53]
Test Case: 651 | Input/Output: [(-70 53 27 -18) -70]
Test Case: 652 | Input/Output: [(-20 45 64 -53) -53]
Test Case: 653 | Input/Output: [(-4 25 35 12) -4]
Test Case: 654 | Input/Output: [(-8 -45 -63 29) -63]
Test Case: 655 | Input/Output: [(17 58 -39 14) -39]
Test Case: 656 | Input/Output: [(-24 35 -56 -12) -56]
Test Case: 657 | Input/Output: [(-60 -21 -16 -59) -60]
Test Case: 658 | Input/Output: [(-79 -43 -99 -3) -99]
Test Case: 659 | Input/Output: [(-21 42 4 -58) -58]
Test Case: 660 | Input/Output: [(51 90 38 49) 38]
Test Case: 661 | Input/Output: [(-2 10 -14 58) -14]
Test Case: 662 | Input/Output: [(16 -52 -88 77) -88]
Test Case: 663 | Input/Output: [(86 -9 40 -34) -34]
Test Case: 664 | Input/Output: [(-76 18 33 5) -76]
Test Case: 665 | Input/Output: [(90 56 86 -32) -32]
Test Case: 666 | Input/Output: [(12 -10 72 25) -10]
Test Case: 667 | Input/Output: [(-76 76 -19 60) -76]
Test Case: 668 | Input/Output: [(49 -62 19 -100) -100]
Test Case: 669 | Input/Output: [(-69 62 -75 -27) -75]
Test Case: 670 | Input/Output: [(64 88 -35 52) -35]
Test Case: 671 | Input/Output: [(-10 -46 41 -70) -70]
Test Case: 672 | Input/Output: [(-18 -41 -91 60) -91]
Test Case: 673 | Input/Output: [(-88 92 51 -37) -88]
Test Case: 674 | Input/Output: [(35 -45 -86 53) -86]
Test Case: 675 | Input/Output: [(44 -90 -12 31) -90]
Test Case: 676 | Input/Output: [(-24 -48 -13 -44) -48]
Test Case: 677 | Input/Output: [(49 9 -31 -19) -31]
Test Case: 678 | Input/Output: [(55 60 60 8) 8]
Test Case: 679 | Input/Output: [(-15 -31 -22 79) -31]
Test Case: 680 | Input/Output: [(-48 -59 -100 68) -100]
Test Case: 681 | Input/Output: [(-58 71 58 28) -58]
Test Case: 682 | Input/Output: [(-13 -62 7 87) -62]
Test Case: 683 | Input/Output: [(-29 -28 -79 51) -79]
Test Case: 684 | Input/Output: [(83 -82 -5 50) -82]
Test Case: 685 | Input/Output: [(4 85 -47 63) -47]
Test Case: 686 | Input/Output: [(27 -8 12 21) -8]
Test Case: 687 | Input/Output: [(18 30 82 71) 18]
Test Case: 688 | Input/Output: [(-25 -31 -65 45) -65]
Test Case: 689 | Input/Output: [(0 -28 99 -41) -41]
Test Case: 690 | Input/Output: [(98 4 59 73) 4]
Test Case: 691 | Input/Output: [(-20 34 -52 95) -52]
Test Case: 692 | Input/Output: [(49 11 -90 -96) -96]
Test Case: 693 | Input/Output: [(56 -66 66 84) -66]
Test Case: 694 | Input/Output: [(94 13 -14 0) -14]
Test Case: 695 | Input/Output: [(77 -35 27 -89) -89]
Test Case: 696 | Input/Output: [(-73 -34 -4 -38) -73]
Test Case: 697 | Input/Output: [(62 -39 -35 97) -39]
Test Case: 698 | Input/Output: [(-53 -88 77 -62) -88]
Test Case: 699 | Input/Output: [(-9 -73 -84 -79) -84]
Test Case: 700 | Input/Output: [(79 94 -83 98) -83]
Test Case: 701 | Input/Output: [(54 -98 -73 34) -98]
Test Case: 702 | Input/Output: [(-76 4 16 -19) -76]
Test Case: 703 | Input/Output: [(-78 -12 82 72) -78]
Test Case: 704 | Input/Output: [(27 -75 3 48) -75]
Test Case: 705 | Input/Output: [(-57 -62 -2 82) -62]
Test Case: 706 | Input/Output: [(-31 -76 57 -94) -94]
Test Case: 707 | Input/Output: [(-27 -26 -11 -1) -27]
Test Case: 708 | Input/Output: [(93 -7 92 -55) -55]
Test Case: 709 | Input/Output: [(-10 -1 -19 -38) -38]
Test Case: 710 | Input/Output: [(-88 -91 19 45) -91]
Test Case: 711 | Input/Output: [(18 -46 22 81) -46]
Test Case: 712 | Input/Output: [(-2 16 -71 -80) -80]
Test Case: 713 | Input/Output: [(11 73 -89 -73) -89]
Test Case: 714 | Input/Output: [(49 -62 -3 -59) -62]
Test Case: 715 | Input/Output: [(44 -85 28 36) -85]
Test Case: 716 | Input/Output: [(69 83 59 44) 44]
Test Case: 717 | Input/Output: [(100 -43 -22 84) -43]
Test Case: 718 | Input/Output: [(-70 24 65 -30) -70]
Test Case: 719 | Input/Output: [(-73 3 41 69) -73]
Test Case: 720 | Input/Output: [(-81 31 -94 -1) -94]
Test Case: 721 | Input/Output: [(14 -94 2 -8) -94]
Test Case: 722 | Input/Output: [(67 94 66 42) 42]
Test Case: 723 | Input/Output: [(83 -72 99 -12) -72]
Test Case: 724 | Input/Output: [(21 96 23 57) 21]
Test Case: 725 | Input/Output: [(58 15 -56 -57) -57]
Test Case: 726 | Input/Output: [(73 53 -56 52) -56]
Test Case: 727 | Input/Output: [(-10 98 26 -96) -96]
Test Case: 728 | Input/Output: [(-75 -97 -1 2) -97]
Test Case: 729 | Input/Output: [(51 17 -89 89) -89]
Test Case: 730 | Input/Output: [(-60 95 -55 -67) -67]
Test Case: 731 | Input/Output: [(68 -41 -41 21) -41]
Test Case: 732 | Input/Output: [(-46 1 -77 15) -77]
Test Case: 733 | Input/Output: [(-94 23 -76 -47) -94]
Test Case: 734 | Input/Output: [(-10 -1 -37 51) -37]
Test Case: 735 | Input/Output: [(25 -18 57 42) -18]
Test Case: 736 | Input/Output: [(-31 -53 17 28) -53]
Test Case: 737 | Input/Output: [(-10 -78 64 -29) -78]
Test Case: 738 | Input/Output: [(95 46 10 48) 10]
Test Case: 739 | Input/Output: [(-15 2 84 -19) -19]
Test Case: 740 | Input/Output: [(-93 -58 43 -34) -93]
Test Case: 741 | Input/Output: [(-12 39 46 -8) -12]
Test Case: 742 | Input/Output: [(58 -36 -49 -58) -58]
Test Case: 743 | Input/Output: [(-20 -42 -83 80) -83]
Test Case: 744 | Input/Output: [(19 -77 -78 -84) -84]
Test Case: 745 | Input/Output: [(-67 -73 75 41) -73]
Test Case: 746 | Input/Output: [(-38 4 -89 -20) -89]
Test Case: 747 | Input/Output: [(-23 65 -7 55) -23]
Test Case: 748 | Input/Output: [(-91 -16 -96 36) -96]
Test Case: 749 | Input/Output: [(27 2 -21 -91) -91]
Test Case: 750 | Input/Output: [(-64 -97 27 75) -97]
Test Case: 751 | Input/Output: [(-60 0 -40 -90) -90]
Test Case: 752 | Input/Output: [(-8 61 -29 24) -29]
Test Case: 753 | Input/Output: [(15 -10 86 -6) -10]
Test Case: 754 | Input/Output: [(12 85 -94 37) -94]
Test Case: 755 | Input/Output: [(50 33 47 18) 18]
Test Case: 756 | Input/Output: [(-29 -59 -84 26) -84]
Test Case: 757 | Input/Output: [(-39 -51 -31 14) -51]
Test Case: 758 | Input/Output: [(-72 47 -5 56) -72]
Test Case: 759 | Input/Output: [(-45 -66 49 -92) -92]
Test Case: 760 | Input/Output: [(17 -98 -23 -55) -98]
Test Case: 761 | Input/Output: [(-91 9 35 34) -91]
Test Case: 762 | Input/Output: [(-99 1 4 13) -99]
Test Case: 763 | Input/Output: [(99 -97 -2 26) -97]
Test Case: 764 | Input/Output: [(28 7 -86 -85) -86]
Test Case: 765 | Input/Output: [(81 -56 54 -53) -56]
Test Case: 766 | Input/Output: [(-4 -89 47 50) -89]
Test Case: 767 | Input/Output: [(-61 -9 -5 3) -61]
Test Case: 768 | Input/Output: [(-95 -66 81 19) -95]
Test Case: 769 | Input/Output: [(81 -44 13 72) -44]
Test Case: 770 | Input/Output: [(13 -48 32 -44) -48]
Test Case: 771 | Input/Output: [(73 89 43 -55) -55]
Test Case: 772 | Input/Output: [(3 93 -23 -70) -70]
Test Case: 773 | Input/Output: [(86 21 -28 -40) -40]
Test Case: 774 | Input/Output: [(-95 71 -42 39) -95]
Test Case: 775 | Input/Output: [(92 78 87 91) 78]
Test Case: 776 | Input/Output: [(99 -38 -89 -76) -89]
Test Case: 777 | Input/Output: [(-22 12 2 29) -22]
Test Case: 778 | Input/Output: [(-81 -86 -38 -86) -86]
Test Case: 779 | Input/Output: [(61 18 -99 74) -99]
Test Case: 780 | Input/Output: [(42 -45 47 -43) -45]
Test Case: 781 | Input/Output: [(-95 3 -89 -33) -95]
Test Case: 782 | Input/Output: [(62 32 -61 -78) -78]
Test Case: 783 | Input/Output: [(-98 -20 25 64) -98]
Test Case: 784 | Input/Output: [(6 -98 -42 -65) -98]
Test Case: 785 | Input/Output: [(18 25 -16 59) -16]
Test Case: 786 | Input/Output: [(-20 -98 -31 -18) -98]
Test Case: 787 | Input/Output: [(-14 -2 -48 79) -48]
Test Case: 788 | Input/Output: [(2 -81 49 78) -81]
Test Case: 789 | Input/Output: [(88 11 40 61) 11]
Test Case: 790 | Input/Output: [(75 -54 69 -28) -54]
Test Case: 791 | Input/Output: [(-75 30 -54 56) -75]
Test Case: 792 | Input/Output: [(-21 9 -72 54) -72]
Test Case: 793 | Input/Output: [(-9 -59 -91 -14) -91]
Test Case: 794 | Input/Output: [(-79 -83 -37 91) -83]
Test Case: 795 | Input/Output: [(27 -18 -9 93) -18]
Test Case: 796 | Input/Output: [(-56 -80 8 -97) -97]
Test Case: 797 | Input/Output: [(-37 91 -44 -6) -44]
Test Case: 798 | Input/Output: [(-97 -72 87 -98) -98]
Test Case: 799 | Input/Output: [(20 -86 -7 40) -86]
Test Case: 800 | Input/Output: [(-15 -84 -11 4) -84]
Test Case: 801 | Input/Output: [(7 12 34 -29) -29]
Test Case: 802 | Input/Output: [(25 -33 70 -69) -69]
Test Case: 803 | Input/Output: [(-80 -68 -84 -4) -84]
Test Case: 804 | Input/Output: [(42 -22 -71 75) -71]
Test Case: 805 | Input/Output: [(32 97 -58 -13) -58]
Test Case: 806 | Input/Output: [(84 98 -32 24) -32]
Test Case: 807 | Input/Output: [(90 62 94 -27) -27]
Test Case: 808 | Input/Output: [(-20 -67 55 -14) -67]
Test Case: 809 | Input/Output: [(13 37 -81 -80) -81]
Test Case: 810 | Input/Output: [(33 -96 -85 75) -96]
Test Case: 811 | Input/Output: [(90 44 -51 -32) -51]
Test Case: 812 | Input/Output: [(0 70 -2 52) -2]
Test Case: 813 | Input/Output: [(-14 -59 37 -56) -59]
Test Case: 814 | Input/Output: [(6 -79 -88 37) -88]
Test Case: 815 | Input/Output: [(18 -17 40 6) -17]
Test Case: 816 | Input/Output: [(67 86 44 70) 44]
Test Case: 817 | Input/Output: [(29 -30 48 24) -30]
Test Case: 818 | Input/Output: [(-22 3 -2 -72) -72]
Test Case: 819 | Input/Output: [(94 77 50 -10) -10]
Test Case: 820 | Input/Output: [(5 9 99 -36) -36]
Test Case: 821 | Input/Output: [(-40 89 69 52) -40]
Test Case: 822 | Input/Output: [(98 -60 -86 -32) -86]
Test Case: 823 | Input/Output: [(2 23 9 60) 2]
Test Case: 824 | Input/Output: [(39 -56 8 -45) -56]
Test Case: 825 | Input/Output: [(-34 -42 78 -49) -49]
Test Case: 826 | Input/Output: [(-26 91 -89 -19) -89]
Test Case: 827 | Input/Output: [(-74 16 60 -33) -74]
Test Case: 828 | Input/Output: [(63 66 -7 -58) -58]
Test Case: 829 | Input/Output: [(-54 80 77 -89) -89]
Test Case: 830 | Input/Output: [(-21 32 30 21) -21]
Test Case: 831 | Input/Output: [(-85 72 45 43) -85]
Test Case: 832 | Input/Output: [(89 91 -89 43) -89]
Test Case: 833 | Input/Output: [(76 56 60 -35) -35]
Test Case: 834 | Input/Output: [(4 24 -34 -22) -34]
Test Case: 835 | Input/Output: [(-61 22 24 -68) -68]
Test Case: 836 | Input/Output: [(46 60 -68 -42) -68]
Test Case: 837 | Input/Output: [(54 9 10 71) 9]
Test Case: 838 | Input/Output: [(34 -7 -55 -4) -55]
Test Case: 839 | Input/Output: [(-11 96 12 -18) -18]
Test Case: 840 | Input/Output: [(21 -41 95 -26) -41]
Test Case: 841 | Input/Output: [(-6 81 90 -45) -45]
Test Case: 842 | Input/Output: [(68 -43 15 -78) -78]
Test Case: 843 | Input/Output: [(0 -50 41 -34) -50]
Test Case: 844 | Input/Output: [(37 39 -4 -15) -15]
Test Case: 845 | Input/Output: [(69 -75 90 -76) -76]
Test Case: 846 | Input/Output: [(-26 93 -72 -49) -72]
Test Case: 847 | Input/Output: [(-22 -70 73 86) -70]
Test Case: 848 | Input/Output: [(9 -99 -49 82) -99]
Test Case: 849 | Input/Output: [(-81 4 26 -100) -100]
Test Case: 850 | Input/Output: [(29 21 -57 -49) -57]
Test Case: 851 | Input/Output: [(47 100 50 -1) -1]
Test Case: 852 | Input/Output: [(-79 90 91 -62) -79]
Test Case: 853 | Input/Output: [(36 -68 35 19) -68]
Test Case: 854 | Input/Output: [(-5 -6 10 -61) -61]
Test Case: 855 | Input/Output: [(18 -13 -41 -30) -41]
Test Case: 856 | Input/Output: [(55 73 37 28) 28]
Test Case: 857 | Input/Output: [(85 -86 87 75) -86]
Test Case: 858 | Input/Output: [(41 41 -68 16) -68]
Test Case: 859 | Input/Output: [(43 -75 -95 61) -95]
Test Case: 860 | Input/Output: [(6 -33 82 -78) -78]
Test Case: 861 | Input/Output: [(77 25 37 68) 25]
Test Case: 862 | Input/Output: [(31 50 83 -29) -29]
Test Case: 863 | Input/Output: [(-53 -100 36 -81) -100]
Test Case: 864 | Input/Output: [(-85 14 73 93) -85]
Test Case: 865 | Input/Output: [(40 -27 -100 26) -100]
Test Case: 866 | Input/Output: [(-96 75 79 -62) -96]
Test Case: 867 | Input/Output: [(-21 -33 -75 -21) -75]
Test Case: 868 | Input/Output: [(-34 69 -26 8) -34]
Test Case: 869 | Input/Output: [(68 28 72 -27) -27]
Test Case: 870 | Input/Output: [(-63 90 43 -96) -96]
Test Case: 871 | Input/Output: [(39 23 -45 -82) -82]
Test Case: 872 | Input/Output: [(-13 82 25 2) -13]
Test Case: 873 | Input/Output: [(-57 -81 -34 -19) -81]
Test Case: 874 | Input/Output: [(14 -8 5 -23) -23]
Test Case: 875 | Input/Output: [(32 -46 -15 14) -46]
Test Case: 876 | Input/Output: [(14 96 54 96) 14]
Test Case: 877 | Input/Output: [(66 -10 89 -63) -63]
Test Case: 878 | Input/Output: [(95 38 -66 88) -66]
Test Case: 879 | Input/Output: [(76 85 -51 58) -51]
Test Case: 880 | Input/Output: [(46 7 -35 -19) -35]
Test Case: 881 | Input/Output: [(78 -11 -79 -94) -94]
Test Case: 882 | Input/Output: [(79 85 -55 64) -55]
Test Case: 883 | Input/Output: [(66 -39 -75 71) -75]
Test Case: 884 | Input/Output: [(7 39 8 -9) -9]
Test Case: 885 | Input/Output: [(27 36 90 -51) -51]
Test Case: 886 | Input/Output: [(-47 -30 -38 -55) -55]
Test Case: 887 | Input/Output: [(-82 -14 14 -24) -82]
Test Case: 888 | Input/Output: [(94 -90 76 -72) -90]
Test Case: 889 | Input/Output: [(77 -62 58 91) -62]
Test Case: 890 | Input/Output: [(45 -12 -10 -83) -83]
Test Case: 891 | Input/Output: [(58 -91 40 83) -91]
Test Case: 892 | Input/Output: [(75 48 -81 55) -81]
Test Case: 893 | Input/Output: [(26 28 11 42) 11]
Test Case: 894 | Input/Output: [(75 -7 -47 41) -47]
Test Case: 895 | Input/Output: [(-80 -75 -51 35) -80]
Test Case: 896 | Input/Output: [(-29 63 45 26) -29]
Test Case: 897 | Input/Output: [(-88 -97 -89 81) -97]
Test Case: 898 | Input/Output: [(-56 60 -25 -67) -67]
Test Case: 899 | Input/Output: [(96 -93 -98 88) -98]
Test Case: 900 | Input/Output: [(48 16 -32 80) -32]
Test Case: 901 | Input/Output: [(66 52 -72 -63) -72]
Test Case: 902 | Input/Output: [(42 -28 40 -90) -90]
Test Case: 903 | Input/Output: [(6 91 0 90) 0]
Test Case: 904 | Input/Output: [(98 94 -38 -42) -42]
Test Case: 905 | Input/Output: [(-30 -73 -73 62) -73]
Test Case: 906 | Input/Output: [(92 -23 -88 9) -88]
Test Case: 907 | Input/Output: [(41 -35 42 67) -35]
Test Case: 908 | Input/Output: [(-86 -94 61 35) -94]
Test Case: 909 | Input/Output: [(38 -91 92 33) -91]
Test Case: 910 | Input/Output: [(10 26 42 -75) -75]
Test Case: 911 | Input/Output: [(-35 87 23 93) -35]
Test Case: 912 | Input/Output: [(39 68 -9 -23) -23]
Test Case: 913 | Input/Output: [(-81 -5 -3 32) -81]
Test Case: 914 | Input/Output: [(94 -12 -77 31) -77]
Test Case: 915 | Input/Output: [(34 18 -17 5) -17]
Test Case: 916 | Input/Output: [(-90 -36 28 22) -90]
Test Case: 917 | Input/Output: [(-90 40 -89 -94) -94]
Test Case: 918 | Input/Output: [(-76 -49 -75 -56) -76]
Test Case: 919 | Input/Output: [(44 16 16 -52) -52]
Test Case: 920 | Input/Output: [(95 26 82 -83) -83]
Test Case: 921 | Input/Output: [(-6 -95 -70 -20) -95]
Test Case: 922 | Input/Output: [(-73 -5 5 -75) -75]
Test Case: 923 | Input/Output: [(90 50 56 77) 50]
Test Case: 924 | Input/Output: [(6 -52 -79 -10) -79]
Test Case: 925 | Input/Output: [(-44 26 34 -22) -44]
Test Case: 926 | Input/Output: [(-40 17 47 62) -40]
Test Case: 927 | Input/Output: [(44 97 5 58) 5]
Test Case: 928 | Input/Output: [(64 73 68 -61) -61]
Test Case: 929 | Input/Output: [(22 45 -22 -38) -38]
Test Case: 930 | Input/Output: [(22 -85 53 -32) -85]
Test Case: 931 | Input/Output: [(-21 -45 35 -58) -58]
Test Case: 932 | Input/Output: [(-95 19 44 -50) -95]
Test Case: 933 | Input/Output: [(-49 -8 -87 65) -87]
Test Case: 934 | Input/Output: [(98 81 46 -24) -24]
Test Case: 935 | Input/Output: [(74 -56 25 -85) -85]
Test Case: 936 | Input/Output: [(7 -72 92 -98) -98]
Test Case: 937 | Input/Output: [(-24 -65 30 32) -65]
Test Case: 938 | Input/Output: [(39 -56 94 7) -56]
Test Case: 939 | Input/Output: [(-30 64 -13 -90) -90]
Test Case: 940 | Input/Output: [(79 12 6 -7) -7]
Test Case: 941 | Input/Output: [(-24 -16 4 -54) -54]
Test Case: 942 | Input/Output: [(92 -44 51 74) -44]
Test Case: 943 | Input/Output: [(60 28 74 7) 7]
Test Case: 944 | Input/Output: [(97 -47 55 -34) -47]
Test Case: 945 | Input/Output: [(-92 -12 69 65) -92]
Test Case: 946 | Input/Output: [(-75 -25 -46 -92) -92]
Test Case: 947 | Input/Output: [(36 -50 -54 22) -54]
Test Case: 948 | Input/Output: [(-60 -45 81 -64) -64]
Test Case: 949 | Input/Output: [(39 48 39 -42) -42]
Test Case: 950 | Input/Output: [(69 36 -76 -47) -76]
Test Case: 951 | Input/Output: [(-72 -49 -62 -98) -98]
Test Case: 952 | Input/Output: [(-13 -41 51 34) -41]
Test Case: 953 | Input/Output: [(11 87 71 -40) -40]
Test Case: 954 | Input/Output: [(-28 79 -90 47) -90]
Test Case: 955 | Input/Output: [(-2 -73 -13 97) -73]
Test Case: 956 | Input/Output: [(60 88 -84 -20) -84]
Test Case: 957 | Input/Output: [(-35 -56 51 19) -56]
Test Case: 958 | Input/Output: [(67 34 -52 -27) -52]
Test Case: 959 | Input/Output: [(95 76 29 -39) -39]
Test Case: 960 | Input/Output: [(70 67 -13 -93) -93]
Test Case: 961 | Input/Output: [(55 -92 11 -100) -100]
Test Case: 962 | Input/Output: [(-60 -95 6 -39) -95]
Test Case: 963 | Input/Output: [(-79 17 -66 80) -79]
Test Case: 964 | Input/Output: [(96 33 92 -24) -24]
Test Case: 965 | Input/Output: [(-10 -81 7 -92) -92]
Test Case: 966 | Input/Output: [(-70 53 -64 45) -70]
Test Case: 967 | Input/Output: [(78 -84 -78 -97) -97]
Test Case: 968 | Input/Output: [(-66 -75 4 -85) -85]
Test Case: 969 | Input/Output: [(68 -13 81 44) -13]
Test Case: 970 | Input/Output: [(73 84 25 44) 25]
Test Case: 971 | Input/Output: [(9 -51 12 3) -51]
Test Case: 972 | Input/Output: [(66 -17 64 23) -17]
Test Case: 973 | Input/Output: [(-49 79 -5 5) -49]
Test Case: 974 | Input/Output: [(-16 96 -46 1) -46]
Test Case: 975 | Input/Output: [(-90 -14 21 0) -90]
Test Case: 976 | Input/Output: [(34 24 87 98) 24]
Test Case: 977 | Input/Output: [(-10 85 24 44) -10]
Test Case: 978 | Input/Output: [(-76 -32 -69 61) -76]
Test Case: 979 | Input/Output: [(-29 -28 -47 -4) -47]
Test Case: 980 | Input/Output: [(79 -68 -42 23) -68]
Test Case: 981 | Input/Output: [(-85 -32 -29 81) -85]
Test Case: 982 | Input/Output: [(72 27 28 91) 27]
Test Case: 983 | Input/Output: [(-27 5 67 55) -27]
Test Case: 984 | Input/Output: [(-18 -68 27 -72) -72]
Test Case: 985 | Input/Output: [(-71 94 10 31) -71]
Test Case: 986 | Input/Output: [(57 -60 -51 18) -60]
Test Case: 987 | Input/Output: [(58 -11 -100 10) -100]
Test Case: 988 | Input/Output: [(42 85 91 100) 42]
Test Case: 989 | Input/Output: [(-3 -87 78 21) -87]
Test Case: 990 | Input/Output: [(25 -78 61 70) -78]
Test Case: 991 | Input/Output: [(59 -67 -100 -44) -100]
Test Case: 992 | Input/Output: [(18 -53 54 49) -53]
Test Case: 993 | Input/Output: [(29 -28 77 -18) -28]
Test Case: 994 | Input/Output: [(-15 -50 -29 -16) -50]
Test Case: 995 | Input/Output: [(66 51 49 -99) -99]
Test Case: 996 | Input/Output: [(-12 42 -45 42) -45]
Test Case: 997 | Input/Output: [(-48 -50 -31 -12) -50]
Test Case: 998 | Input/Output: [(-82 16 -88 34) -88]
Test Case: 999 | Input/Output: [(31 87 64 -91) -91]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -11 36 102 83 72 -118 35 44 72 90 -95 17 9 20 114 101
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-91 -91 -16 -91] -91] [[-17 -17 -15 -17] -17] [[-3 -91 -91 -91] -91] [[89 89 32 89] 32] [[-95 72 72 72] -95] [[-10 -10 -10 65] -10] [[-33 -33 5 -33] -33] [[-18 -26 -18 -18] -26] [[-33 -39 -39 -39] -39] [[-41 -78 -78 -78] -78] [(-70 -70 -70 -70) -70] [(5 5 5 5) 5] [(10 10 10 10) 10] [(81 81 81 81) 81] [(56 56 56 56) 56] [(15 59 11 0) 0] [(73 88 1 25) 1] [(18 26 4 86) 4] [(47 83 21 97) 21] [(94 40 95 19) 19] [(57 50 25 85) 25] [(55 51 16 2) 2] [(82 0 18 92) 0] [(15 49 30 37) 15] [(41 12 91 43) 12] [(78 63 47 46) 46] [(19 65 39 99) 19] [(51 92 86 60) 51] [(40 66 82 12) 12] [(94 98 64 74) 64] [(24 5 32 29) 5] [(57 66 58 47) 47] [(0 40 42 68) 0] [(54 65 68 10) 10] [(44 86 53 17) 17] [(77 26 -78 -35) -78] [(-78 6 -36 -75) -78] [(33 25 -33 31) -33] [(22 -8 -44 76) -44] [(83 48 85 86) 48] [(75 12 36 17) 12] [(50 16 -84 -53) -84] [(73 -32 -7 -17) -32] [(24 4 -18 82) -18] [(-51 73 -42 73) -51] [(-8 95 33 -46) -46] [(59 -95 -10 -40) -95] [(56 93 9 81) 9] [(40 81 -37 26) -37] [(42 -83 63 -45) -83] [(81 -15 34 -17) -17] [(-27 -57 -59 47) -59] [(89 20 24 48) 20] [(-51 -90 -8 -89) -90] [(-31 -1 -1 -23) -31] [(-28 88 53 -88) -88] [(11 53 61 43) 11] [(-62 -73 92 91) -73] [(74 34 34 88) 34] [(-26 -91 14 -47) -91] [(46 19 -74 44) -74] [(-1 -29 -20 -41) -41] [(-23 -22 -53 97) -53] [(-47 9 47 21) -47] [(-26 14 -3 95) -26] [(-22 -75 -70 -4) -75] [(-56 -51 35 70) -56] [(-69 -27 29 -15) -69] [(-70 -13 22 -36) -70] [(-48 -48 50 -85) -85] [(32 -54 -11 -59) -59] [(85 -35 16 85) -35] [(36 -79 -61 0) -79] [(81 -39 41 -18) -39] [(-96 41 24 38) -96] [(-83 59 -87 -38) -87] [(-45 62 -24 -9) -45] [(-40 39 49 27) -40] [(-52 -54 -27 -10) -54] [(-75 37 97 -100) -100] [(73 6 18 25) 6] [(-19 -74 22 1) -74] [(-51 5 67 -52) -52] [(-88 -73 23 16) -88] [(68 -25 44 -19) -25] [(47 93 -23 73) -23] [(-36 -98 85 14) -98] [(-32 -93 -84 -51) -93] [(-85 47 -54 22) -85] [(88 31 -44 -33) -44] [(25 -28 95 11) -28] [(-96 20 -4 92) -96] [(-85 -24 -67 0) -85] [(80 -12 1 45) -12] [(65 73 -88 1) -88])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 59                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 83                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 50                 
Correct output: 2                   | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 63                 
Correct output: 19                  | Program output: 65                 
Correct output: 51                  | Program output: 92                 
Correct output: 12                  | Program output: 66                 
Correct output: 64                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 66                 
Correct output: 0                   | Program output: 40                 
Correct output: 10                  | Program output: 65                 
Correct output: 17                  | Program output: 86                 
Correct output: -78                 | Program output: 26                 
Correct output: -78                 | Program output: 6                  
Correct output: -33                 | Program output: 25                 
Correct output: -44                 | Program output: -8                 
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: 16                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 4                  
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 93                 
Correct output: -37                 | Program output: 81                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -57                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 88                 
Correct output: 11                  | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 19                 
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -22                
Correct output: -47                 | Program output: 9                  
Correct output: -26                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -51                
Correct output: -69                 | Program output: -27                
Correct output: -70                 | Program output: -13                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: 41                 
Correct output: -87                 | Program output: 59                 
Correct output: -45                 | Program output: 62                 
Correct output: -40                 | Program output: 39                 
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: 5                  
Correct output: -88                 | Program output: -73                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 47                 
Correct output: -44                 | Program output: 31                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 20                 
Correct output: -85                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 2, :instruction -11} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tagged_926} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (boolean_dup boolean_stackdepth exec_while (boolean_shove exec_flush boolean_shove integer_dup_items) boolean_frominteger integer_mod in2 boolean_invert_second_then_and boolean_pop print_integer exec_dup (exec_y () exec_dup_items integer_mod integer_gte exec_y (integer_swap print_integer exec_do*times (integer_dup integer_rot) exec_yankdup exec_stackdepth integer_rot) exec_noop exec_stackdepth) integer_fromboolean integer_fromboolean exec_y_when_autoconstructing () integer_empty integer_mult exec_flush exec_s () (in1 integer_eq boolean_swap) () boolean_not exec_do*times (boolean_or -11) integer_pop integer_lte integer_lte integer_fromboolean boolean_invert_second_then_and boolean_dup boolean_flush integer_min exec_when () exec_eq in4 exec_do*count () integer_lt integer_flush integer_eq integer_stackdepth integer_gte integer_stackdepth boolean_stackdepth integer_lte exec_pop (exec_yank exec_yankdup exec_shove (integer_stackdepth integer_flush integer_yankdup tagged_926) integer_lte boolean_yank integer_gte in3 boolean_dup_items))
Lexicase best errors: [0 1 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 91
Percent parens: 0.165
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 2, :instruction -11} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tagged_926} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (boolean_dup boolean_stackdepth exec_while (boolean_shove exec_flush boolean_shove integer_dup_items) boolean_frominteger integer_mod in2 boolean_invert_second_then_and boolean_pop print_integer exec_dup (exec_y () exec_dup_items integer_mod integer_gte exec_y (integer_swap print_integer exec_do*times (integer_dup integer_rot) exec_yankdup exec_stackdepth integer_rot) exec_noop exec_stackdepth) integer_fromboolean integer_fromboolean exec_y_when_autoconstructing () integer_empty integer_mult exec_flush exec_s () (in1 integer_eq boolean_swap) () boolean_not exec_do*times (boolean_or -11) integer_pop integer_lte integer_lte integer_fromboolean boolean_invert_second_then_and boolean_dup boolean_flush integer_min exec_when () exec_eq in4 exec_do*count () integer_lt integer_flush integer_eq integer_stackdepth integer_gte integer_stackdepth boolean_stackdepth integer_lte exec_pop (exec_yank exec_yankdup exec_shove (integer_stackdepth integer_flush integer_yankdup tagged_926) integer_lte boolean_yank integer_gte in3 boolean_dup_items))
Zero cases best errors: [0 1 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 91
Percent parens: 0.165
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 5 4 1 3 3 1 4 3 1000)
Population mean number of elite cases: 1.03
Count of perfect (error zero) individuals by case: (8 5 4 1 3 3 1 4 3 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -12} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_empty} {:close 1, :instruction in3} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup} {:close 1, :instruction tagged_384} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_max} {:close 0, :instruction 39} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_139} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_467} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup})
Best program: (in1 exec_yank in1 exec_if (exec_empty exec_do*while (integer_yankdup boolean_dup integer_dup_times) boolean_yankdup in2 integer_shove print_integer integer_eq integer_gte exec_yankdup -12 boolean_dup exec_y (in4 boolean_shove exec_do*count (exec_dup_times (integer_lt boolean_xor) exec_empty exec_flush) boolean_and integer_yankdup integer_gt exec_while () integer_sub integer_lte exec_empty)) (in3) exec_stackdepth exec_s (in2) (boolean_not integer_swap exec_if (exec_do*while (exec_dup () tagged_384) integer_dup_times) (exec_empty integer_dup) in4 exec_k (integer_gt exec_flush exec_do*count () boolean_rot) (exec_empty print_exec (integer_yank integer_max) 39 exec_k (boolean_dup_items exec_yankdup integer_dec exec_empty exec_do*count () integer_rot boolean_or) (exec_y () integer_dup boolean_dup_times exec_k_when_autoconstructing (integer_mult print_boolean) (exec_do*count (exec_s (tagged_139 integer_dec integer_pop) () (in1 integer_dup exec_eq) integer_inc in1) tag_exec_467 (exec_eq boolean_invert_second_then_and in3 integer_rot boolean_eq exec_dup_items integer_pop boolean_yankdup integer_gt exec_s_when_autoconstructing () () (integer_mod exec_dup ())))))) ())
Errors: [0 1 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 95
Size: 129
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 9.968
Median total errors in population: 10
Error averages by case: (0.992 0.995 0.996 0.999 0.997 0.997 0.999 0.996 0.997 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 51.063
Average program size in population (points): 70.356
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 528158
--- Timings ---
Current time: 1559583924490 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.6%
Reproduction:         0.8 seconds, 29.7%
Fitness Testing:      1.7 seconds, 65.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -16                
Correct output: -17                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: 5                  
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 95                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 18                 
Correct output: 15                  | Program output: 30                 
Correct output: 12                  | Program output: 91                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 39                 
Correct output: 51                  | Program output: 86                 
Correct output: 12                  | Program output: 82                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 32                 
Correct output: 47                  | Program output: 58                 
Correct output: 0                   | Program output: 42                 
Correct output: 10                  | Program output: 68                 
Correct output: 17                  | Program output: 53                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 85                 
Correct output: 12                  | Program output: 36                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -7                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -42                
Correct output: -46                 | Program output: 33                 
Correct output: -95                 | Program output: -10                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: 63                 
Correct output: -17                 | Program output: 34                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 24                 
Correct output: -90                 | Program output: -8                 
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 53                 
Correct output: 11                  | Program output: 61                 
Correct output: -73                 | Program output: 92                 
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: 14                 
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -20                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 47                 
Correct output: -26                 | Program output: -3                 
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: 35                 
Correct output: -69                 | Program output: 29                 
Correct output: -70                 | Program output: 22                 
Correct output: -85                 | Program output: 50                 
Correct output: -59                 | Program output: -11                
Correct output: -35                 | Program output: 16                 
Correct output: -79                 | Program output: -61                
Correct output: -39                 | Program output: 41                 
Correct output: -96                 | Program output: 24                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -24                
Correct output: -40                 | Program output: 49                 
Correct output: -54                 | Program output: -27                
Correct output: -100                | Program output: 97                 
Correct output: 6                   | Program output: 18                 
Correct output: -74                 | Program output: 22                 
Correct output: -52                 | Program output: 67                 
Correct output: -88                 | Program output: 23                 
Correct output: -25                 | Program output: 44                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: 85                 
Correct output: -93                 | Program output: -84                
Correct output: -85                 | Program output: -54                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -4                 
Correct output: -85                 | Program output: -67                
Correct output: -12                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup integer_shove) boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () integer_lt exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop boolean_stackdepth tagged_641) (boolean_xor) boolean_shove integer_mod in1 boolean_and exec_do*times () integer_pop integer_dup_items exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in4 integer_empty boolean_or integer_empty integer_rot integer_stackdepth exec_k_when_autoconstructing (print_boolean boolean_frominteger) ())
Lexicase best errors: [0 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 94
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup integer_shove) boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () integer_lt exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop boolean_stackdepth tagged_641) (boolean_xor) boolean_shove integer_mod in1 boolean_and exec_do*times () integer_pop integer_dup_items exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in4 integer_empty boolean_or integer_empty integer_rot integer_stackdepth exec_k_when_autoconstructing (print_boolean boolean_frominteger) ())
Zero cases best errors: [0 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 94
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (717 204 317 195 203 316 316 188 195 189)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (717 204 317 195 203 316 316 188 195 189)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction -16} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_pop})
Best program: (integer_lte exec_do*times (boolean_dup_items boolean_stackdepth) exec_dup_times (exec_pop (integer_pop exec_y () integer_mod) boolean_not integer_eq exec_do*times (integer_div exec_y_when_autoconstructing () integer_max integer_dup_times integer_dup_items boolean_dup_items in4 boolean_dup_times) integer_flush exec_stackdepth integer_div boolean_dup_items) exec_dup (exec_yank exec_while (integer_min print_newline) boolean_rot integer_dup_items) integer_mult integer_div in3 exec_dup (exec_eq) integer_yank integer_rot integer_sub integer_div integer_mod integer_lte integer_shove in2 in1 boolean_rot exec_when () -16 integer_dup integer_empty exec_do*while (integer_eq) print_integer integer_lt exec_pop () boolean_eq integer_fromboolean integer_min exec_rot () (boolean_empty) (integer_add integer_pop integer_max boolean_empty integer_eq exec_do*range (integer_div in3 exec_when (boolean_and boolean_empty exec_do*while (exec_dup (integer_add boolean_xor) boolean_yankdup) integer_gt integer_stackdepth exec_stackdepth) integer_stackdepth in2 boolean_dup_items) boolean_and exec_pop ()))
Errors: [0 1 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 84
Size: 105
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.16
Median total errors in population: 6
Error averages by case: (0.283 0.796 0.683 0.805 0.797 0.684 0.684 0.812 0.805 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.679
Average program size in population (points): 90.851
Average percent parens in population: 0.246
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.498
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1365202
--- Timings ---
Current time: 1559583927506 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         2.3 seconds, 41.1%
Fitness Testing:      2.6 seconds, 47.1%
Report:               0.5 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: 65                 
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 25                 
Correct output: 4                   | Program output: 86                 
Correct output: 21                  | Program output: 97                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 85                 
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 92                 
Correct output: 15                  | Program output: 37                 
Correct output: 12                  | Program output: 43                 
Correct output: 46                  | Program output: 46                 
Correct output: 19                  | Program output: 99                 
Correct output: 51                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 64                  | Program output: 74                 
Correct output: 5                   | Program output: 29                 
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 68                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: -35                
Correct output: -78                 | Program output: -75                
Correct output: -33                 | Program output: 31                 
Correct output: -44                 | Program output: 76                 
Correct output: 48                  | Program output: 86                 
Correct output: 12                  | Program output: 17                 
Correct output: -84                 | Program output: -53                
Correct output: -32                 | Program output: -17                
Correct output: -18                 | Program output: 82                 
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: -40                
Correct output: 9                   | Program output: 81                 
Correct output: -37                 | Program output: 26                 
Correct output: -83                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: 47                 
Correct output: 20                  | Program output: 48                 
Correct output: -90                 | Program output: -89                
Correct output: -31                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 43                 
Correct output: -73                 | Program output: 91                 
Correct output: 34                  | Program output: 88                 
Correct output: -91                 | Program output: -47                
Correct output: -74                 | Program output: 44                 
Correct output: -41                 | Program output: -41                
Correct output: -53                 | Program output: 97                 
Correct output: -47                 | Program output: 21                 
Correct output: -26                 | Program output: 95                 
Correct output: -75                 | Program output: -4                 
Correct output: -56                 | Program output: 70                 
Correct output: -69                 | Program output: -15                
Correct output: -70                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -35                 | Program output: 85                 
Correct output: -79                 | Program output: 0                  
Correct output: -39                 | Program output: -18                
Correct output: -96                 | Program output: 38                 
Correct output: -87                 | Program output: -38                
Correct output: -45                 | Program output: -9                 
Correct output: -40                 | Program output: 27                 
Correct output: -54                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: 6                   | Program output: 25                 
Correct output: -74                 | Program output: 1                  
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: 16                 
Correct output: -25                 | Program output: -19                
Correct output: -23                 | Program output: 73                 
Correct output: -98                 | Program output: 14                 
Correct output: -93                 | Program output: -51                
Correct output: -85                 | Program output: 22                 
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: 11                 
Correct output: -96                 | Program output: 92                 
Correct output: -85                 | Program output: 0                  
Correct output: -12                 | Program output: 45                 
Correct output: -88                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction 44} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction tagged_618} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction tagged_173} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_576} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_rot exec_rot (boolean_not boolean_invert_first_then_and exec_rot () (integer_add) (exec_when (integer_inc -30 integer_lte integer_gt in4 exec_when (exec_do*while (boolean_invert_first_then_and print_integer integer_shove boolean_dup_items integer_gte exec_eq integer_fromboolean exec_k () (boolean_not exec_dup_items) boolean_stackdepth integer_gte exec_do*range (44 integer_lte integer_dup_items integer_min exec_if (boolean_frominteger exec_noop) (exec_k_when_autoconstructing (exec_y_when_autoconstructing (print_newline exec_do*while () exec_do*count (integer_gt integer_flush integer_pop) integer_mult integer_yankdup in3 in4 tagged_618 in4 integer_inc exec_flush boolean_xor print_exec (tagged_173 integer_lt exec_yankdup) boolean_dup_times print_exec (integer_inc exec_stackdepth boolean_frominteger tag_exec_576 (boolean_not integer_inc) boolean_stackdepth boolean_stackdepth) exec_k_when_autoconstructing (integer_mult) (boolean_swap exec_eq boolean_stackdepth) exec_y_when_autoconstructing ())) ()))))))) () ())
Lexicase best errors: [0 1 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 97
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction 44} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction tagged_618} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction tagged_173} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_576} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_rot exec_rot (boolean_not boolean_invert_first_then_and exec_rot () (integer_add) (exec_when (integer_inc -30 integer_lte integer_gt in4 exec_when (exec_do*while (boolean_invert_first_then_and print_integer integer_shove boolean_dup_items integer_gte exec_eq integer_fromboolean exec_k () (boolean_not exec_dup_items) boolean_stackdepth integer_gte exec_do*range (44 integer_lte integer_dup_items integer_min exec_if (boolean_frominteger exec_noop) (exec_k_when_autoconstructing (exec_y_when_autoconstructing (print_newline exec_do*while () exec_do*count (integer_gt integer_flush integer_pop) integer_mult integer_yankdup in3 in4 tagged_618 in4 integer_inc exec_flush boolean_xor print_exec (tagged_173 integer_lt exec_yankdup) boolean_dup_times print_exec (integer_inc exec_stackdepth boolean_frominteger tag_exec_576 (boolean_not integer_inc) boolean_stackdepth boolean_stackdepth) exec_k_when_autoconstructing (integer_mult) (boolean_swap exec_eq boolean_stackdepth) exec_y_when_autoconstructing ())) ()))))))) () ())
Zero cases best errors: [0 1 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 97
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (817 269 370 833 194 821 277 370 193 193)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (817 269 370 833 194 821 277 370 193 193)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction 44} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction tagged_618} {:close 1, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction tagged_173} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_576} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_467} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq})
Best program: (integer_rot exec_rot (boolean_not boolean_invert_first_then_and exec_rot () (integer_add) (exec_when (integer_inc -30 integer_lte integer_gt in4 exec_when (exec_do*while (boolean_invert_first_then_and print_integer integer_shove exec_dup (integer_gte exec_eq integer_fromboolean exec_k () (boolean_not exec_dup_items) boolean_stackdepth integer_gte exec_do*range (44 integer_lte integer_dup_items integer_min exec_if (boolean_frominteger exec_noop) (exec_k_when_autoconstructing (exec_y_when_autoconstructing (print_newline exec_do*while () exec_do*count (integer_gt integer_flush integer_pop) integer_mult integer_yankdup in3 in4 tagged_618 in4) integer_inc exec_flush boolean_xor) (print_exec (tagged_173 integer_lt exec_yankdup) boolean_dup_times print_exec (integer_inc exec_k_when_autoconstructing (boolean_frominteger tag_exec_576 (boolean_not integer_inc) boolean_stackdepth boolean_stackdepth) (exec_k_when_autoconstructing (integer_mult) (boolean_swap exec_y ()) integer_dup boolean_dup_times exec_k_when_autoconstructing (integer_mult print_boolean) (exec_do*count (exec_s (boolean_empty integer_dec integer_pop) () (in1 integer_dup exec_eq) integer_inc in1) tag_exec_467 (exec_eq) boolean_invert_second_then_and print_boolean integer_rot boolean_eq)))))))))))) () ())
Errors: [0 1 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 90
Size: 126
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.663
Median total errors in population: 5
Error averages by case: (0.183 0.731 0.63 0.167 0.806 0.179 0.723 0.63 0.807 0.807)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.028
Average program size in population (points): 88.721
Average percent parens in population: 0.238
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9375
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2206941
--- Timings ---
Current time: 1559583931100 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.3 seconds, 47.7%
Fitness Testing:      3.4 seconds, 37.6%
Report:               1.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 94                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 24                 
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 83                 
Correct output: 12                  | Program output: 36                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -7                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: -10                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: 42                 
Correct output: -17                 | Program output: 34                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 24                 
Correct output: -90                 | Program output: -51                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -62                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -20                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -11                
Correct output: -35                 | Program output: 16                 
Correct output: -79                 | Program output: -61                
Correct output: -39                 | Program output: 41                 
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -52                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 18                 
Correct output: -74                 | Program output: -19                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: 44                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -36                
Correct output: -93                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () integer_lt exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop boolean_stackdepth tagged_641) boolean_xor) boolean_shove integer_mod) (in1 boolean_and) exec_do*times () integer_pop integer_dup_items exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop exec_stackdepth) exec_rot (integer_empty boolean_or) (integer_empty boolean_stackdepth) (exec_y_when_autoconstructing ()))
Lexicase best errors: [0 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 95
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () integer_lt exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop boolean_stackdepth tagged_641) boolean_xor) boolean_shove integer_mod) (in1 boolean_and) exec_do*times () integer_pop integer_dup_items exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop exec_stackdepth) exec_rot (integer_empty boolean_or) (integer_empty boolean_stackdepth) (exec_y_when_autoconstructing ()))
Zero cases best errors: [0 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 95
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 173 222 353 840 221 221 299 219 222)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (221 173 222 353 840 221 221 299 219 222)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () integer_lt exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop boolean_stackdepth tagged_641) boolean_xor) boolean_shove integer_mod) (in1 boolean_and) exec_do*times (integer_pop) integer_dup_items exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in4 integer_empty boolean_or integer_empty boolean_stackdepth exec_y_when_autoconstructing ())
Errors: [0 1 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 73
Size: 92
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 7.009
Median total errors in population: 8
Error averages by case: (0.779 0.827 0.778 0.647 0.16 0.779 0.779 0.701 0.781 0.778)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.7
Average program size in population (points): 93.308
Average percent parens in population: 0.246
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.2615
Median age in population: 4.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3354848
--- Timings ---
Current time: 1559583934684 milliseconds
Total Time:          12.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.1 seconds, 48.9%
Fitness Testing:      4.2 seconds, 34.0%
Report:               2.0 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 94                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 24                 
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 83                 
Correct output: 12                  | Program output: 36                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -7                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: -10                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: 42                 
Correct output: -17                 | Program output: 34                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 24                 
Correct output: -90                 | Program output: -51                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -62                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -20                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -11                
Correct output: -35                 | Program output: 16                 
Correct output: -79                 | Program output: -61                
Correct output: -39                 | Program output: 41                 
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -52                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 18                 
Correct output: -74                 | Program output: -19                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: 44                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -36                
Correct output: -93                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_pop boolean_shove) boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop boolean_stackdepth tagged_641) boolean_xor) boolean_shove integer_mod) (in1 boolean_and) exec_do*times (integer_pop) integer_dup_items exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in4 integer_empty boolean_or integer_empty boolean_stackdepth exec_y_when_autoconstructing ())
Lexicase best errors: [0 1 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 77
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_pop boolean_shove) boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop boolean_stackdepth tagged_641) boolean_xor) boolean_shove integer_mod) (in1 boolean_and) exec_do*times (integer_pop) integer_dup_items exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in4 integer_empty boolean_or integer_empty boolean_stackdepth exec_y_when_autoconstructing ())
Zero cases best errors: [0 1 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 77
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (646 87 649 97 459 638 800 88 459 462)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (646 87 649 97 459 638 800 88 459 462)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () integer_lt exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop boolean_stackdepth tagged_641) boolean_xor) boolean_shove integer_mod) (in1 boolean_and) exec_do*times () integer_pop integer_dup_items exec_while (exec_yankdup integer_mod exec_flush integer_div integer_empty boolean_or) integer_empty boolean_stackdepth exec_y_when_autoconstructing ())
Errors: [0 1 0 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 70
Size: 89
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 5.615
Median total errors in population: 6
Error averages by case: (0.354 0.913 0.351 0.903 0.541 0.362 0.2 0.912 0.541 0.538)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.129
Average program size in population (points): 94.514
Average percent parens in population: 0.218
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.65
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4690390
--- Timings ---
Current time: 1559583938467 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.0 seconds, 49.2%
Fitness Testing:      5.2 seconds, 32.2%
Report:               2.9 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 94                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 24                 
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 83                 
Correct output: 12                  | Program output: 36                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -7                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: -10                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: 42                 
Correct output: -17                 | Program output: 34                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 24                 
Correct output: -90                 | Program output: -51                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -62                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -20                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -11                
Correct output: -35                 | Program output: 16                 
Correct output: -79                 | Program output: -61                
Correct output: -39                 | Program output: 41                 
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -52                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 18                 
Correct output: -74                 | Program output: -19                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: 44                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -36                
Correct output: -93                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () integer_lt exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop boolean_stackdepth tagged_641) boolean_xor) boolean_shove integer_mod) (in1 boolean_and) exec_do*times () integer_pop integer_dup_items exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in4 integer_empty boolean_or integer_empty boolean_stackdepth exec_y_when_autoconstructing ())
Lexicase best errors: [0 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 92
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () integer_lt exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop boolean_stackdepth tagged_641) boolean_xor) boolean_shove integer_mod) (in1 boolean_and) exec_do*times () integer_pop integer_dup_items exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in4 integer_empty boolean_or integer_empty boolean_stackdepth exec_y_when_autoconstructing ())
Zero cases best errors: [0 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 92
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (330 1000 769 330 330 769 292 294 1000 330)
Population mean number of elite cases: 5.44
Count of perfect (error zero) individuals by case: (330 0 769 330 330 769 292 294 0 330)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_fromboolean boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_yankdup integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (exec_stackdepth integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () integer_lt exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop boolean_stackdepth tagged_641) boolean_xor) boolean_shove integer_mod) (in1 boolean_and) exec_do*times () integer_pop integer_dup_items exec_while (exec_shove (integer_mod integer_div integer_div exec_noop integer_div integer_empty boolean_or) integer_empty boolean_stackdepth) exec_y_when_autoconstructing ())
Errors: [0 1 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 72
Size: 92
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 6.556
Median total errors in population: 6
Error averages by case: (0.67 1.0 0.231 0.67 0.67 0.231 0.708 0.706 1.0 0.67)
Error minima by case: (0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 67.971
Average program size in population (points): 86.405
Average percent parens in population: 0.214
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.258875
Median age in population: 7.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6139856
--- Timings ---
Current time: 1559583942243 milliseconds
Total Time:          20.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.8 seconds, 49.1%
Fitness Testing:      6.3 seconds, 31.4%
Report:               3.8 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 402
Test mean error for best: 0.40200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 30                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 39                 
Correct output: 51                  | Program output: 86                 
Correct output: 12                  | Program output: 66                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 58                 
Correct output: 0                   | Program output: 40                 
Correct output: 10                  | Program output: 65                 
Correct output: 17                  | Program output: 53                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -42                
Correct output: -46                 | Program output: 33                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 53                 
Correct output: 11                  | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 9                  
Correct output: -26                 | Program output: -3                 
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -51                
Correct output: -69                 | Program output: -27                
Correct output: -70                 | Program output: -13                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: 24                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -24                
Correct output: -40                 | Program output: 39                 
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: 5                  
Correct output: -88                 | Program output: -73                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -54                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -4                 
Correct output: -85                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Lexicase best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop integer_mod) in1 boolean_and) exec_do*times () integer_pop) integer_dup_items) (exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Zero cases best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop integer_mod) in1 boolean_and) exec_do*times () integer_pop) integer_dup_items) (exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 569 825 1 494 837 569 1 333 1)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (1 569 825 1 494 837 569 1 333 1)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop integer_mod) in1 boolean_and) exec_do*times () integer_pop) integer_dup_items) (exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 60
Size: 77
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 6.369
Median total errors in population: 6
Error averages by case: (0.999 0.431 0.175 0.999 0.506 0.163 0.431 0.999 0.667 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.671
Average program size in population (points): 87.807
Average percent parens in population: 0.207
Minimum age in population: 6.0
Maximum age in population: 10.125
Average age in population: 8.668
Median age in population: 8.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 7578803
--- Timings ---
Current time: 1559583946486 milliseconds
Total Time:          24.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.2 seconds, 50.1%
Fitness Testing:      7.3 seconds, 30.2%
Report:               4.7 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 446
Test mean error for best: 0.44600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: -95                
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 25                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 47                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 12                 
Correct output: 64                  | Program output: 74                 
Correct output: 5                   | Program output: 24                 
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: -35                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 31                 
Correct output: -44                 | Program output: 22                 
Correct output: 48                  | Program output: 83                 
Correct output: 12                  | Program output: 17                 
Correct output: -84                 | Program output: -53                
Correct output: -32                 | Program output: -17                
Correct output: -18                 | Program output: 24                 
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: -40                
Correct output: 9                   | Program output: 56                 
Correct output: -37                 | Program output: 26                 
Correct output: -83                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -27                
Correct output: 20                  | Program output: 48                 
Correct output: -90                 | Program output: -89                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -62                
Correct output: 34                  | Program output: 74                 
Correct output: -91                 | Program output: -47                
Correct output: -74                 | Program output: 44                 
Correct output: -41                 | Program output: -41                
Correct output: -53                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -22                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -35                 | Program output: 85                 
Correct output: -79                 | Program output: 0                  
Correct output: -39                 | Program output: -18                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -83                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -52                
Correct output: -100                | Program output: -100               
Correct output: 6                   | Program output: 25                 
Correct output: -74                 | Program output: -19                
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -19                
Correct output: -23                 | Program output: 47                 
Correct output: -98                 | Program output: -36                
Correct output: -93                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 45                 
Correct output: -88                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_yankdup print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () integer_lt exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) exec_yank) boolean_pop boolean_stackdepth tagged_641) boolean_xor) boolean_shove integer_mod) (in1 boolean_and) exec_do*times (integer_pop) integer_dup_items exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in4 integer_empty boolean_or integer_empty boolean_stackdepth exec_y_when_autoconstructing ())
Lexicase best errors: [0 1 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 92
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_yankdup print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () integer_lt exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) exec_yank) boolean_pop boolean_stackdepth tagged_641) boolean_xor) boolean_shove integer_mod) (in1 boolean_and) exec_do*times (integer_pop) integer_dup_items exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in4 integer_empty boolean_or integer_empty boolean_stackdepth exec_y_when_autoconstructing ())
Zero cases best errors: [0 1 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 92
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (117 111 112 114 749 117 117 773 398 397)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (117 111 112 114 749 117 117 773 398 397)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4})
Best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () integer_lt exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop boolean_stackdepth tagged_641) boolean_xor) boolean_yank integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in4))
Errors: [0 0 0 0 1 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 68
Size: 85
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.995
Median total errors in population: 6
Error averages by case: (0.883 0.889 0.888 0.886 0.251 0.883 0.883 0.227 0.602 0.603)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.104
Average program size in population (points): 79.375
Average percent parens in population: 0.218
Minimum age in population: 7.8125
Maximum age in population: 11.59375
Average age in population: 10.45575
Median age in population: 10.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 259
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 9038710
--- Timings ---
Current time: 1559583950175 milliseconds
Total Time:          28.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.9 seconds, 49.8%
Fitness Testing:      8.4 seconds, 30.0%
Report:               5.5 seconds, 19.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 402
Test mean error for best: 0.40200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 30                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 39                 
Correct output: 51                  | Program output: 86                 
Correct output: 12                  | Program output: 66                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 58                 
Correct output: 0                   | Program output: 40                 
Correct output: 10                  | Program output: 65                 
Correct output: 17                  | Program output: 53                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -42                
Correct output: -46                 | Program output: 33                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 53                 
Correct output: 11                  | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 9                  
Correct output: -26                 | Program output: -3                 
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -51                
Correct output: -69                 | Program output: -27                
Correct output: -70                 | Program output: -13                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: 24                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -24                
Correct output: -40                 | Program output: 39                 
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: 5                  
Correct output: -88                 | Program output: -73                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -54                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -4                 
Correct output: -85                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Lexicase best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop integer_mod) in1 boolean_and) exec_do*times () integer_pop) integer_dup_items) (exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Zero cases best program: (in3 exec_swap (exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop integer_mod) in1 boolean_and) exec_do*times () integer_pop) integer_dup_items) (exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 347 176 826 176 519 822 176 529 176)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (361 347 176 826 176 519 822 176 529 176)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 2, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Best program: (in3 exec_swap (exec_if (integer_min) (print_integer exec_if (integer_min) (print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 integer_min integer_dup_items integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty boolean_frominteger print_newline boolean_and boolean_eq boolean_shove) integer_dec exec_shove (exec_empty exec_dup (print_newline print_newline)) exec_y (boolean_not integer_yank boolean_stackdepth) integer_max) boolean_pop integer_mod) in1 boolean_and) exec_do*times () integer_pop) integer_dup_items) (exec_while (exec_yankdup integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 63
Size: 81
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.892
Median total errors in population: 6
Error averages by case: (0.639 0.653 0.824 0.174 0.824 0.481 0.178 0.824 0.471 0.824)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.824
Average program size in population (points): 83.459
Average percent parens in population: 0.212
Minimum age in population: 9.5625
Maximum age in population: 13.4296875
Average age in population: 11.9566328125
Median age in population: 12.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 10485485
--- Timings ---
Current time: 1559583953822 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.7 seconds, 49.5%
Fitness Testing:      9.5 seconds, 29.9%
Report:               6.4 seconds, 20.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 2, :instruction print_newline} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Lexicase best program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 71
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 2, :instruction print_newline} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Zero cases best program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 71
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 486 486 833 243 249 486 558 248 489)
Population mean number of elite cases: 4.33
Count of perfect (error zero) individuals by case: (249 486 486 833 243 249 486 558 248 489)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 2, :instruction print_newline} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Best program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 56
Size: 71
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 5.673
Median total errors in population: 4
Error averages by case: (0.751 0.514 0.514 0.167 0.757 0.751 0.514 0.442 0.752 0.511)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.557
Average program size in population (points): 78.214
Average percent parens in population: 0.213
Minimum age in population: 11.328125
Maximum age in population: 15.1796875
Average age in population: 13.7214765625
Median age in population: 13.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 11936606
--- Timings ---
Current time: 1559583957443 milliseconds
Total Time:          35.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.4 seconds, 49.3%
Fitness Testing:     10.5 seconds, 29.8%
Report:               7.2 seconds, 20.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 210
Test mean error for best: 0.21000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 2, :instruction print_newline} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Lexicase best program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 71
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 2, :instruction print_newline} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Zero cases best program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 71
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (761 761 516 899 522 522 515 517 874 761)
Population mean number of elite cases: 6.65
Count of perfect (error zero) individuals by case: (761 761 516 899 522 522 515 517 874 761)
Population mean number of perfect (error zero) cases: 6.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction 7} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 1, :instruction exec_y} {:close 2, :instruction print_newline} {:close 1, :instruction tagged_641} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2})
Best program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 56
Size: 71
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 3.352
Median total errors in population: 3
Error averages by case: (0.239 0.239 0.484 0.101 0.478 0.478 0.485 0.483 0.126 0.239)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.749
Average program size in population (points): 74.423
Average percent parens in population: 0.211
Minimum age in population: 13.09375
Maximum age in population: 16.58984375
Average age in population: 15.137912109375
Median age in population: 15.298828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 282
Genome diversity (% unique genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 282
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.01
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 13376972
--- Timings ---
Current time: 1559583961134 milliseconds
Total Time:          38.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.1 seconds, 49.1%
Fitness Testing:     11.6 seconds, 29.8%
Report:               8.1 seconds, 20.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 10
Successful program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 71


Auto-simplifying with starting size: 71
step: 0
program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 500
program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 1000
program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 1500
program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 2000
program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 2500
program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 3000
program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 3500
program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 4000
program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 4500
program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 5000
program: (in3 exec_swap (exec_dup (integer_min) print_integer integer_dup_items integer_gt boolean_yankdup integer_dup_items exec_swap () (integer_dup_items exec_y (exec_y (integer_eq integer_inc integer_add exec_yankdup integer_div) in1 exec_do*times (exec_do*range (integer_mod integer_div exec_dup_times (boolean_dup 7 exec_yankdup exec_if () (boolean_frominteger boolean_empty integer_div print_newline boolean_and boolean_eq boolean_shove) integer_dec boolean_dup_times print_newline) exec_y () print_newline)) tagged_641) boolean_xor) boolean_shove integer_mod) (in1 exec_while (exec_yankdup integer_mod exec_flush integer_div integer_mod exec_flush integer_div exec_noop boolean_stackdepth) in2))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 210
Test mean error for best: 0.21000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: -88                
;;******************************
