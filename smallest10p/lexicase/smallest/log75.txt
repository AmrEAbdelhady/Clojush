Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-5 -5 -80 -5] -80] [[96 -32 96 96] -32] [[99 99 86 99] 86] [[-50 -50 61 -50] -50] [[-20 -20 -20 96] -20] [[70 84 84 84] 70] [[89 -12 89 89] -12] [[-63 58 58 58] -63] [[97 97 97 93] 93] [[50 -61 50 50] -61] [(63 63 63 63) 63] [(-18 -18 -18 -18) -18] [(52 52 52 52) 52] [(59 59 59 59) 59] [(-47 -47 -47 -47) -47] [(33 13 45 25) 13] [(75 49 76 100) 49] [(50 39 16 14) 14] [(88 38 31 100) 31] [(85 46 57 60) 46] [(69 93 85 55) 55] [(32 86 0 24) 0] [(60 37 24 13) 13] [(18 45 70 71) 18] [(92 35 83 93) 35] [(37 20 11 72) 11] [(79 10 98 64) 10] [(71 80 83 95) 71] [(85 21 25 68) 21] [(13 63 78 69) 13] [(56 41 82 53) 41] [(58 87 18 53) 18] [(95 78 94 17) 17] [(4 41 36 46) 4] [(91 8 11 37) 8] [(79 46 7 75) 7] [(92 36 63 18) 18] [(-99 -27 30 -4) -99] [(-75 -46 -52 57) -75] [(-76 33 60 -27) -76] [(19 13 -87 -66) -87] [(69 25 0 45) 0] [(-13 -49 36 66) -49] [(-51 27 36 -77) -77] [(-21 21 -79 32) -79] [(47 0 -39 16) -39] [(-82 35 92 -59) -82] [(-21 68 -85 -22) -85] [(80 80 1 -52) -52] [(-64 -95 91 -7) -95] [(-52 -22 -56 80) -56] [(-54 -95 -72 -35) -95] [(-46 3 -96 31) -96] [(39 81 -2 -51) -51] [(50 6 -91 53) -91] [(-5 84 74 -30) -30] [(-87 -49 -27 64) -87] [(93 -88 -14 99) -88] [(-81 -15 87 -44) -81] [(91 10 -52 59) -52] [(77 34 -44 -18) -44] [(-61 31 -97 -30) -97] [(-66 -28 -96 59) -96] [(-25 -46 -32 8) -46] [(-25 -56 20 80) -56] [(-74 67 14 -78) -78] [(7 -96 -90 100) -96] [(8 72 -75 38) -75] [(37 -9 57 83) -9] [(30 84 -50 -95) -95] [(25 -34 -41 49) -41] [(61 -41 -56 -6) -56] [(-88 20 -57 36) -88] [(-10 93 52 54) -10] [(-30 89 -38 33) -38] [(44 -43 49 79) -43] [(-81 26 34 45) -81] [(76 76 31 -41) -41] [(-72 -88 95 33) -88] [(99 49 76 11) 11] [(8 99 -87 43) -87] [(26 -30 -65 58) -65] [(-35 24 23 70) -35] [(53 -15 48 11) -15] [(-70 -76 70 -43) -76] [(30 100 28 20) 20] [(-58 -23 43 -88) -88] [(12 -97 73 87) -97] [(1 94 34 6) 1] [(-44 -24 -65 60) -65] [(34 -7 11 57) -7] [(52 -88 -55 -4) -88] [(-87 -58 -70 -51) -87] [(14 56 3 -44) -44] [(38 -32 35 -27) -32])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-5 -5 -80 -5] -80]
Train Case:   6 | Input/Output: [[96 -32 96 96] -32]
Train Case:   7 | Input/Output: [[99 99 86 99] 86]
Train Case:   8 | Input/Output: [[-50 -50 61 -50] -50]
Train Case:   9 | Input/Output: [[-20 -20 -20 96] -20]
Train Case:  10 | Input/Output: [[70 84 84 84] 70]
Train Case:  11 | Input/Output: [[89 -12 89 89] -12]
Train Case:  12 | Input/Output: [[-63 58 58 58] -63]
Train Case:  13 | Input/Output: [[97 97 97 93] 93]
Train Case:  14 | Input/Output: [[50 -61 50 50] -61]
Train Case:  15 | Input/Output: [(63 63 63 63) 63]
Train Case:  16 | Input/Output: [(-18 -18 -18 -18) -18]
Train Case:  17 | Input/Output: [(52 52 52 52) 52]
Train Case:  18 | Input/Output: [(59 59 59 59) 59]
Train Case:  19 | Input/Output: [(-47 -47 -47 -47) -47]
Train Case:  20 | Input/Output: [(33 13 45 25) 13]
Train Case:  21 | Input/Output: [(75 49 76 100) 49]
Train Case:  22 | Input/Output: [(50 39 16 14) 14]
Train Case:  23 | Input/Output: [(88 38 31 100) 31]
Train Case:  24 | Input/Output: [(85 46 57 60) 46]
Train Case:  25 | Input/Output: [(69 93 85 55) 55]
Train Case:  26 | Input/Output: [(32 86 0 24) 0]
Train Case:  27 | Input/Output: [(60 37 24 13) 13]
Train Case:  28 | Input/Output: [(18 45 70 71) 18]
Train Case:  29 | Input/Output: [(92 35 83 93) 35]
Train Case:  30 | Input/Output: [(37 20 11 72) 11]
Train Case:  31 | Input/Output: [(79 10 98 64) 10]
Train Case:  32 | Input/Output: [(71 80 83 95) 71]
Train Case:  33 | Input/Output: [(85 21 25 68) 21]
Train Case:  34 | Input/Output: [(13 63 78 69) 13]
Train Case:  35 | Input/Output: [(56 41 82 53) 41]
Train Case:  36 | Input/Output: [(58 87 18 53) 18]
Train Case:  37 | Input/Output: [(95 78 94 17) 17]
Train Case:  38 | Input/Output: [(4 41 36 46) 4]
Train Case:  39 | Input/Output: [(91 8 11 37) 8]
Train Case:  40 | Input/Output: [(79 46 7 75) 7]
Train Case:  41 | Input/Output: [(92 36 63 18) 18]
Train Case:  42 | Input/Output: [(-99 -27 30 -4) -99]
Train Case:  43 | Input/Output: [(-75 -46 -52 57) -75]
Train Case:  44 | Input/Output: [(-76 33 60 -27) -76]
Train Case:  45 | Input/Output: [(19 13 -87 -66) -87]
Train Case:  46 | Input/Output: [(69 25 0 45) 0]
Train Case:  47 | Input/Output: [(-13 -49 36 66) -49]
Train Case:  48 | Input/Output: [(-51 27 36 -77) -77]
Train Case:  49 | Input/Output: [(-21 21 -79 32) -79]
Train Case:  50 | Input/Output: [(47 0 -39 16) -39]
Train Case:  51 | Input/Output: [(-82 35 92 -59) -82]
Train Case:  52 | Input/Output: [(-21 68 -85 -22) -85]
Train Case:  53 | Input/Output: [(80 80 1 -52) -52]
Train Case:  54 | Input/Output: [(-64 -95 91 -7) -95]
Train Case:  55 | Input/Output: [(-52 -22 -56 80) -56]
Train Case:  56 | Input/Output: [(-54 -95 -72 -35) -95]
Train Case:  57 | Input/Output: [(-46 3 -96 31) -96]
Train Case:  58 | Input/Output: [(39 81 -2 -51) -51]
Train Case:  59 | Input/Output: [(50 6 -91 53) -91]
Train Case:  60 | Input/Output: [(-5 84 74 -30) -30]
Train Case:  61 | Input/Output: [(-87 -49 -27 64) -87]
Train Case:  62 | Input/Output: [(93 -88 -14 99) -88]
Train Case:  63 | Input/Output: [(-81 -15 87 -44) -81]
Train Case:  64 | Input/Output: [(91 10 -52 59) -52]
Train Case:  65 | Input/Output: [(77 34 -44 -18) -44]
Train Case:  66 | Input/Output: [(-61 31 -97 -30) -97]
Train Case:  67 | Input/Output: [(-66 -28 -96 59) -96]
Train Case:  68 | Input/Output: [(-25 -46 -32 8) -46]
Train Case:  69 | Input/Output: [(-25 -56 20 80) -56]
Train Case:  70 | Input/Output: [(-74 67 14 -78) -78]
Train Case:  71 | Input/Output: [(7 -96 -90 100) -96]
Train Case:  72 | Input/Output: [(8 72 -75 38) -75]
Train Case:  73 | Input/Output: [(37 -9 57 83) -9]
Train Case:  74 | Input/Output: [(30 84 -50 -95) -95]
Train Case:  75 | Input/Output: [(25 -34 -41 49) -41]
Train Case:  76 | Input/Output: [(61 -41 -56 -6) -56]
Train Case:  77 | Input/Output: [(-88 20 -57 36) -88]
Train Case:  78 | Input/Output: [(-10 93 52 54) -10]
Train Case:  79 | Input/Output: [(-30 89 -38 33) -38]
Train Case:  80 | Input/Output: [(44 -43 49 79) -43]
Train Case:  81 | Input/Output: [(-81 26 34 45) -81]
Train Case:  82 | Input/Output: [(76 76 31 -41) -41]
Train Case:  83 | Input/Output: [(-72 -88 95 33) -88]
Train Case:  84 | Input/Output: [(99 49 76 11) 11]
Train Case:  85 | Input/Output: [(8 99 -87 43) -87]
Train Case:  86 | Input/Output: [(26 -30 -65 58) -65]
Train Case:  87 | Input/Output: [(-35 24 23 70) -35]
Train Case:  88 | Input/Output: [(53 -15 48 11) -15]
Train Case:  89 | Input/Output: [(-70 -76 70 -43) -76]
Train Case:  90 | Input/Output: [(30 100 28 20) 20]
Train Case:  91 | Input/Output: [(-58 -23 43 -88) -88]
Train Case:  92 | Input/Output: [(12 -97 73 87) -97]
Train Case:  93 | Input/Output: [(1 94 34 6) 1]
Train Case:  94 | Input/Output: [(-44 -24 -65 60) -65]
Train Case:  95 | Input/Output: [(34 -7 11 57) -7]
Train Case:  96 | Input/Output: [(52 -88 -55 -4) -88]
Train Case:  97 | Input/Output: [(-87 -58 -70 -51) -87]
Train Case:  98 | Input/Output: [(14 56 3 -44) -44]
Train Case:  99 | Input/Output: [(38 -32 35 -27) -32]
Test Case:   0 | Input/Output: [[78 78 78 91] 78]
Test Case:   1 | Input/Output: [[-2 -2 63 -2] -2]
Test Case:   2 | Input/Output: [[-63 47 47 47] -63]
Test Case:   3 | Input/Output: [[-84 -84 -20 -84] -84]
Test Case:   4 | Input/Output: [[-39 -54 -54 -54] -54]
Test Case:   5 | Input/Output: [[-76 -76 8 -76] -76]
Test Case:   6 | Input/Output: [[75 75 -68 75] -68]
Test Case:   7 | Input/Output: [[21 21 21 -79] -79]
Test Case:   8 | Input/Output: [[40 88 88 88] 40]
Test Case:   9 | Input/Output: [[-82 -41 -41 -41] -82]
Test Case:  10 | Input/Output: [[-81 -81 -81 3] -81]
Test Case:  11 | Input/Output: [[45 79 45 45] 45]
Test Case:  12 | Input/Output: [[100 100 65 100] 65]
Test Case:  13 | Input/Output: [[12 12 -54 12] -54]
Test Case:  14 | Input/Output: [[-78 -78 -78 -11] -78]
Test Case:  15 | Input/Output: [[78 -70 78 78] -70]
Test Case:  16 | Input/Output: [[-52 -52 -52 -69] -69]
Test Case:  17 | Input/Output: [[-13 0 -13 -13] -13]
Test Case:  18 | Input/Output: [[-55 8 8 8] -55]
Test Case:  19 | Input/Output: [[67 67 67 -14] -14]
Test Case:  20 | Input/Output: [[3 24 3 3] 3]
Test Case:  21 | Input/Output: [[65 65 36 65] 36]
Test Case:  22 | Input/Output: [[67 23 23 23] 23]
Test Case:  23 | Input/Output: [[48 -68 -68 -68] -68]
Test Case:  24 | Input/Output: [[-84 -65 -65 -65] -84]
Test Case:  25 | Input/Output: [[98 98 98 71] 71]
Test Case:  26 | Input/Output: [[14 14 -71 14] -71]
Test Case:  27 | Input/Output: [[-18 -87 -87 -87] -87]
Test Case:  28 | Input/Output: [[-72 -72 -72 -79] -79]
Test Case:  29 | Input/Output: [[-5 -5 -8 -5] -8]
Test Case:  30 | Input/Output: [[-51 -51 21 -51] -51]
Test Case:  31 | Input/Output: [[-59 -20 -59 -59] -59]
Test Case:  32 | Input/Output: [[-48 -48 -48 -37] -48]
Test Case:  33 | Input/Output: [[-49 -49 -49 38] -49]
Test Case:  34 | Input/Output: [[57 -99 -99 -99] -99]
Test Case:  35 | Input/Output: [[97 -25 97 97] -25]
Test Case:  36 | Input/Output: [[76 76 -55 76] -55]
Test Case:  37 | Input/Output: [[27 19 27 27] 19]
Test Case:  38 | Input/Output: [[-10 56 56 56] -10]
Test Case:  39 | Input/Output: [[-65 -98 -65 -65] -98]
Test Case:  40 | Input/Output: [[41 41 -22 41] -22]
Test Case:  41 | Input/Output: [[-52 -52 -52 29] -52]
Test Case:  42 | Input/Output: [[13 13 33 13] 13]
Test Case:  43 | Input/Output: [[28 28 -15 28] -15]
Test Case:  44 | Input/Output: [[45 -29 -29 -29] -29]
Test Case:  45 | Input/Output: [[52 52 20 52] 20]
Test Case:  46 | Input/Output: [[50 -100 -100 -100] -100]
Test Case:  47 | Input/Output: [[-78 -41 -41 -41] -78]
Test Case:  48 | Input/Output: [[-23 -95 -95 -95] -95]
Test Case:  49 | Input/Output: [[26 26 26 53] 26]
Test Case:  50 | Input/Output: [[-73 -73 -73 -28] -73]
Test Case:  51 | Input/Output: [[-85 -85 -95 -85] -95]
Test Case:  52 | Input/Output: [[-81 -81 -81 -21] -81]
Test Case:  53 | Input/Output: [[-59 -92 -92 -92] -92]
Test Case:  54 | Input/Output: [[-38 60 -38 -38] -38]
Test Case:  55 | Input/Output: [[-1 -1 18 -1] -1]
Test Case:  56 | Input/Output: [[-54 -54 -54 -62] -62]
Test Case:  57 | Input/Output: [[18 22 18 18] 18]
Test Case:  58 | Input/Output: [[-99 -99 -99 -76] -99]
Test Case:  59 | Input/Output: [[3 3 20 3] 3]
Test Case:  60 | Input/Output: [[-17 -30 -30 -30] -30]
Test Case:  61 | Input/Output: [[-53 -53 -87 -53] -87]
Test Case:  62 | Input/Output: [[-40 83 -40 -40] -40]
Test Case:  63 | Input/Output: [[40 40 20 40] 20]
Test Case:  64 | Input/Output: [[-70 36 36 36] -70]
Test Case:  65 | Input/Output: [[11 13 11 11] 11]
Test Case:  66 | Input/Output: [[98 -23 98 98] -23]
Test Case:  67 | Input/Output: [[25 25 25 56] 25]
Test Case:  68 | Input/Output: [[-10 -10 -85 -10] -85]
Test Case:  69 | Input/Output: [[-34 -34 -77 -34] -77]
Test Case:  70 | Input/Output: [[97 41 97 97] 41]
Test Case:  71 | Input/Output: [[-57 -57 -14 -57] -57]
Test Case:  72 | Input/Output: [[-99 20 -99 -99] -99]
Test Case:  73 | Input/Output: [[-26 42 42 42] -26]
Test Case:  74 | Input/Output: [[26 26 29 26] 26]
Test Case:  75 | Input/Output: [[-42 -42 98 -42] -42]
Test Case:  76 | Input/Output: [[-37 -37 15 -37] -37]
Test Case:  77 | Input/Output: [[-86 52 -86 -86] -86]
Test Case:  78 | Input/Output: [[-36 -75 -75 -75] -75]
Test Case:  79 | Input/Output: [[19 91 91 91] 19]
Test Case:  80 | Input/Output: [[90 -45 90 90] -45]
Test Case:  81 | Input/Output: [[-45 34 34 34] -45]
Test Case:  82 | Input/Output: [[84 22 22 22] 22]
Test Case:  83 | Input/Output: [[23 23 45 23] 23]
Test Case:  84 | Input/Output: [[44 31 44 44] 31]
Test Case:  85 | Input/Output: [[86 86 86 -40] -40]
Test Case:  86 | Input/Output: [[0 0 -57 0] -57]
Test Case:  87 | Input/Output: [[29 -16 29 29] -16]
Test Case:  88 | Input/Output: [[-66 -66 89 -66] -66]
Test Case:  89 | Input/Output: [[97 -15 -15 -15] -15]
Test Case:  90 | Input/Output: [[-48 -8 -8 -8] -48]
Test Case:  91 | Input/Output: [[-26 -26 -26 -88] -88]
Test Case:  92 | Input/Output: [[-89 -89 -78 -89] -89]
Test Case:  93 | Input/Output: [[-13 -13 -13 -2] -13]
Test Case:  94 | Input/Output: [[-5 -93 -5 -5] -93]
Test Case:  95 | Input/Output: [[45 45 40 45] 40]
Test Case:  96 | Input/Output: [[62 14 62 62] 14]
Test Case:  97 | Input/Output: [[-43 -43 -43 -43] -43]
Test Case:  98 | Input/Output: [[-9 73 73 73] -9]
Test Case:  99 | Input/Output: [[-91 -91 5 -91] -91]
Test Case: 100 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 101 | Input/Output: [(76 76 76 76) 76]
Test Case: 102 | Input/Output: [(82 82 82 82) 82]
Test Case: 103 | Input/Output: [(59 59 59 59) 59]
Test Case: 104 | Input/Output: [(58 58 58 58) 58]
Test Case: 105 | Input/Output: [(20 20 20 20) 20]
Test Case: 106 | Input/Output: [(77 77 77 77) 77]
Test Case: 107 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 108 | Input/Output: [(73 73 73 73) 73]
Test Case: 109 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 110 | Input/Output: [(7 7 7 7) 7]
Test Case: 111 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 112 | Input/Output: [(43 43 43 43) 43]
Test Case: 113 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 114 | Input/Output: [(67 67 67 67) 67]
Test Case: 115 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 116 | Input/Output: [(87 87 87 87) 87]
Test Case: 117 | Input/Output: [(21 21 21 21) 21]
Test Case: 118 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 119 | Input/Output: [(34 34 34 34) 34]
Test Case: 120 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 121 | Input/Output: [(97 97 97 97) 97]
Test Case: 122 | Input/Output: [(89 89 89 89) 89]
Test Case: 123 | Input/Output: [(88 88 88 88) 88]
Test Case: 124 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 125 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 126 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 127 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 128 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 129 | Input/Output: [(65 65 65 65) 65]
Test Case: 130 | Input/Output: [(95 95 95 95) 95]
Test Case: 131 | Input/Output: [(39 39 39 39) 39]
Test Case: 132 | Input/Output: [(11 11 11 11) 11]
Test Case: 133 | Input/Output: [(34 34 34 34) 34]
Test Case: 134 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 135 | Input/Output: [(56 56 56 56) 56]
Test Case: 136 | Input/Output: [(23 23 23 23) 23]
Test Case: 137 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 138 | Input/Output: [(19 19 19 19) 19]
Test Case: 139 | Input/Output: [(18 18 18 18) 18]
Test Case: 140 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 141 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 142 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 143 | Input/Output: [(4 4 4 4) 4]
Test Case: 144 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 145 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 146 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 147 | Input/Output: [(86 86 86 86) 86]
Test Case: 148 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 149 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 150 | Input/Output: [(20 20 20 20) 20]
Test Case: 151 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 152 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 153 | Input/Output: [(60 60 60 60) 60]
Test Case: 154 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 155 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 156 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 157 | Input/Output: [(77 77 77 77) 77]
Test Case: 158 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 159 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 160 | Input/Output: [(43 43 43 43) 43]
Test Case: 161 | Input/Output: [(18 18 18 18) 18]
Test Case: 162 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 163 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 164 | Input/Output: [(68 68 68 68) 68]
Test Case: 165 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 166 | Input/Output: [(46 46 46 46) 46]
Test Case: 167 | Input/Output: [(30 30 30 30) 30]
Test Case: 168 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 169 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 170 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 171 | Input/Output: [(70 70 70 70) 70]
Test Case: 172 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 173 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 174 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 175 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 176 | Input/Output: [(2 2 2 2) 2]
Test Case: 177 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 178 | Input/Output: [(64 64 64 64) 64]
Test Case: 179 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 180 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 181 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 182 | Input/Output: [(19 19 19 19) 19]
Test Case: 183 | Input/Output: [(15 15 15 15) 15]
Test Case: 184 | Input/Output: [(56 56 56 56) 56]
Test Case: 185 | Input/Output: [(4 4 4 4) 4]
Test Case: 186 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 187 | Input/Output: [(14 14 14 14) 14]
Test Case: 188 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 189 | Input/Output: [(35 35 35 35) 35]
Test Case: 190 | Input/Output: [(83 83 83 83) 83]
Test Case: 191 | Input/Output: [(3 3 3 3) 3]
Test Case: 192 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 193 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 194 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 195 | Input/Output: [(2 2 2 2) 2]
Test Case: 196 | Input/Output: [(80 80 80 80) 80]
Test Case: 197 | Input/Output: [(30 30 30 30) 30]
Test Case: 198 | Input/Output: [(19 19 19 19) 19]
Test Case: 199 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 200 | Input/Output: [(67 92 97 29) 29]
Test Case: 201 | Input/Output: [(47 30 31 96) 30]
Test Case: 202 | Input/Output: [(62 57 54 21) 21]
Test Case: 203 | Input/Output: [(84 33 36 79) 33]
Test Case: 204 | Input/Output: [(17 7 87 61) 7]
Test Case: 205 | Input/Output: [(33 19 11 50) 11]
Test Case: 206 | Input/Output: [(80 50 58 36) 36]
Test Case: 207 | Input/Output: [(82 37 17 10) 10]
Test Case: 208 | Input/Output: [(7 82 40 13) 7]
Test Case: 209 | Input/Output: [(46 94 93 29) 29]
Test Case: 210 | Input/Output: [(17 87 29 57) 17]
Test Case: 211 | Input/Output: [(63 33 13 0) 0]
Test Case: 212 | Input/Output: [(59 26 16 64) 16]
Test Case: 213 | Input/Output: [(84 25 60 86) 25]
Test Case: 214 | Input/Output: [(72 77 75 40) 40]
Test Case: 215 | Input/Output: [(71 89 57 78) 57]
Test Case: 216 | Input/Output: [(71 46 53 44) 44]
Test Case: 217 | Input/Output: [(1 83 43 68) 1]
Test Case: 218 | Input/Output: [(31 45 5 70) 5]
Test Case: 219 | Input/Output: [(42 70 79 76) 42]
Test Case: 220 | Input/Output: [(20 91 90 69) 20]
Test Case: 221 | Input/Output: [(81 58 54 42) 42]
Test Case: 222 | Input/Output: [(99 87 27 75) 27]
Test Case: 223 | Input/Output: [(3 23 69 88) 3]
Test Case: 224 | Input/Output: [(52 40 50 61) 40]
Test Case: 225 | Input/Output: [(96 5 34 25) 5]
Test Case: 226 | Input/Output: [(62 23 23 69) 23]
Test Case: 227 | Input/Output: [(45 67 19 41) 19]
Test Case: 228 | Input/Output: [(26 4 92 7) 4]
Test Case: 229 | Input/Output: [(18 54 4 41) 4]
Test Case: 230 | Input/Output: [(93 20 30 63) 20]
Test Case: 231 | Input/Output: [(98 39 51 81) 39]
Test Case: 232 | Input/Output: [(39 38 87 12) 12]
Test Case: 233 | Input/Output: [(67 40 22 1) 1]
Test Case: 234 | Input/Output: [(79 40 89 0) 0]
Test Case: 235 | Input/Output: [(16 41 76 38) 16]
Test Case: 236 | Input/Output: [(10 48 5 73) 5]
Test Case: 237 | Input/Output: [(58 52 51 31) 31]
Test Case: 238 | Input/Output: [(22 40 41 53) 22]
Test Case: 239 | Input/Output: [(55 6 84 38) 6]
Test Case: 240 | Input/Output: [(20 59 62 94) 20]
Test Case: 241 | Input/Output: [(66 24 21 2) 2]
Test Case: 242 | Input/Output: [(44 61 76 77) 44]
Test Case: 243 | Input/Output: [(49 57 15 57) 15]
Test Case: 244 | Input/Output: [(12 85 98 4) 4]
Test Case: 245 | Input/Output: [(50 68 27 73) 27]
Test Case: 246 | Input/Output: [(75 56 60 71) 56]
Test Case: 247 | Input/Output: [(59 96 66 35) 35]
Test Case: 248 | Input/Output: [(35 25 17 77) 17]
Test Case: 249 | Input/Output: [(7 16 30 60) 7]
Test Case: 250 | Input/Output: [(17 34 37 60) 17]
Test Case: 251 | Input/Output: [(85 49 10 1) 1]
Test Case: 252 | Input/Output: [(63 85 70 31) 31]
Test Case: 253 | Input/Output: [(26 88 80 34) 26]
Test Case: 254 | Input/Output: [(35 4 39 3) 3]
Test Case: 255 | Input/Output: [(12 88 4 12) 4]
Test Case: 256 | Input/Output: [(43 66 70 96) 43]
Test Case: 257 | Input/Output: [(56 63 91 48) 48]
Test Case: 258 | Input/Output: [(13 100 91 21) 13]
Test Case: 259 | Input/Output: [(55 64 54 16) 16]
Test Case: 260 | Input/Output: [(74 45 53 83) 45]
Test Case: 261 | Input/Output: [(70 71 67 15) 15]
Test Case: 262 | Input/Output: [(27 44 66 99) 27]
Test Case: 263 | Input/Output: [(12 93 16 60) 12]
Test Case: 264 | Input/Output: [(53 91 44 84) 44]
Test Case: 265 | Input/Output: [(57 4 100 35) 4]
Test Case: 266 | Input/Output: [(81 61 90 20) 20]
Test Case: 267 | Input/Output: [(73 80 86 17) 17]
Test Case: 268 | Input/Output: [(41 90 99 39) 39]
Test Case: 269 | Input/Output: [(85 34 68 21) 21]
Test Case: 270 | Input/Output: [(57 13 40 40) 13]
Test Case: 271 | Input/Output: [(90 92 55 5) 5]
Test Case: 272 | Input/Output: [(84 13 8 23) 8]
Test Case: 273 | Input/Output: [(97 48 1 46) 1]
Test Case: 274 | Input/Output: [(83 7 29 2) 2]
Test Case: 275 | Input/Output: [(10 97 22 48) 10]
Test Case: 276 | Input/Output: [(37 39 85 29) 29]
Test Case: 277 | Input/Output: [(4 20 79 13) 4]
Test Case: 278 | Input/Output: [(84 28 59 5) 5]
Test Case: 279 | Input/Output: [(70 52 13 18) 13]
Test Case: 280 | Input/Output: [(97 29 55 52) 29]
Test Case: 281 | Input/Output: [(5 17 51 43) 5]
Test Case: 282 | Input/Output: [(11 22 87 2) 2]
Test Case: 283 | Input/Output: [(4 76 41 11) 4]
Test Case: 284 | Input/Output: [(39 13 5 14) 5]
Test Case: 285 | Input/Output: [(26 28 80 0) 0]
Test Case: 286 | Input/Output: [(55 24 56 42) 24]
Test Case: 287 | Input/Output: [(58 57 28 25) 25]
Test Case: 288 | Input/Output: [(45 21 58 64) 21]
Test Case: 289 | Input/Output: [(89 72 22 63) 22]
Test Case: 290 | Input/Output: [(83 95 36 22) 22]
Test Case: 291 | Input/Output: [(1 52 6 6) 1]
Test Case: 292 | Input/Output: [(3 66 53 71) 3]
Test Case: 293 | Input/Output: [(85 44 10 87) 10]
Test Case: 294 | Input/Output: [(90 25 31 43) 25]
Test Case: 295 | Input/Output: [(100 20 8 81) 8]
Test Case: 296 | Input/Output: [(94 93 44 92) 44]
Test Case: 297 | Input/Output: [(91 79 56 74) 56]
Test Case: 298 | Input/Output: [(96 36 46 4) 4]
Test Case: 299 | Input/Output: [(39 99 35 45) 35]
Test Case: 300 | Input/Output: [(4 63 88 7) 4]
Test Case: 301 | Input/Output: [(18 78 88 51) 18]
Test Case: 302 | Input/Output: [(81 79 27 3) 3]
Test Case: 303 | Input/Output: [(93 20 100 23) 20]
Test Case: 304 | Input/Output: [(58 97 5 66) 5]
Test Case: 305 | Input/Output: [(95 0 24 59) 0]
Test Case: 306 | Input/Output: [(87 72 95 12) 12]
Test Case: 307 | Input/Output: [(3 6 0 26) 0]
Test Case: 308 | Input/Output: [(5 69 1 67) 1]
Test Case: 309 | Input/Output: [(63 40 73 6) 6]
Test Case: 310 | Input/Output: [(34 2 99 47) 2]
Test Case: 311 | Input/Output: [(21 40 36 43) 21]
Test Case: 312 | Input/Output: [(6 42 49 21) 6]
Test Case: 313 | Input/Output: [(47 61 6 39) 6]
Test Case: 314 | Input/Output: [(95 5 83 97) 5]
Test Case: 315 | Input/Output: [(99 82 91 28) 28]
Test Case: 316 | Input/Output: [(94 6 6 14) 6]
Test Case: 317 | Input/Output: [(22 20 46 25) 20]
Test Case: 318 | Input/Output: [(85 68 10 48) 10]
Test Case: 319 | Input/Output: [(9 18 77 12) 9]
Test Case: 320 | Input/Output: [(11 43 60 14) 11]
Test Case: 321 | Input/Output: [(73 20 69 53) 20]
Test Case: 322 | Input/Output: [(16 44 23 92) 16]
Test Case: 323 | Input/Output: [(15 86 32 30) 15]
Test Case: 324 | Input/Output: [(60 73 56 19) 19]
Test Case: 325 | Input/Output: [(78 13 16 19) 13]
Test Case: 326 | Input/Output: [(52 38 43 96) 38]
Test Case: 327 | Input/Output: [(10 89 85 8) 8]
Test Case: 328 | Input/Output: [(51 59 97 53) 51]
Test Case: 329 | Input/Output: [(100 27 87 66) 27]
Test Case: 330 | Input/Output: [(72 83 98 94) 72]
Test Case: 331 | Input/Output: [(92 34 21 70) 21]
Test Case: 332 | Input/Output: [(25 85 7 43) 7]
Test Case: 333 | Input/Output: [(57 40 19 95) 19]
Test Case: 334 | Input/Output: [(55 48 32 61) 32]
Test Case: 335 | Input/Output: [(24 38 11 47) 11]
Test Case: 336 | Input/Output: [(30 19 80 86) 19]
Test Case: 337 | Input/Output: [(93 62 56 24) 24]
Test Case: 338 | Input/Output: [(41 100 67 71) 41]
Test Case: 339 | Input/Output: [(49 44 57 66) 44]
Test Case: 340 | Input/Output: [(68 12 98 43) 12]
Test Case: 341 | Input/Output: [(11 7 63 38) 7]
Test Case: 342 | Input/Output: [(3 72 57 82) 3]
Test Case: 343 | Input/Output: [(28 32 39 97) 28]
Test Case: 344 | Input/Output: [(25 79 32 39) 25]
Test Case: 345 | Input/Output: [(26 28 77 87) 26]
Test Case: 346 | Input/Output: [(7 7 39 77) 7]
Test Case: 347 | Input/Output: [(7 69 37 90) 7]
Test Case: 348 | Input/Output: [(82 97 48 24) 24]
Test Case: 349 | Input/Output: [(93 90 98 66) 66]
Test Case: 350 | Input/Output: [(96 42 100 63) 42]
Test Case: 351 | Input/Output: [(65 3 48 87) 3]
Test Case: 352 | Input/Output: [(14 97 91 81) 14]
Test Case: 353 | Input/Output: [(33 12 17 53) 12]
Test Case: 354 | Input/Output: [(82 4 31 80) 4]
Test Case: 355 | Input/Output: [(20 89 88 40) 20]
Test Case: 356 | Input/Output: [(97 3 45 11) 3]
Test Case: 357 | Input/Output: [(64 8 35 48) 8]
Test Case: 358 | Input/Output: [(96 16 1 83) 1]
Test Case: 359 | Input/Output: [(12 22 66 93) 12]
Test Case: 360 | Input/Output: [(98 67 46 89) 46]
Test Case: 361 | Input/Output: [(12 60 12 93) 12]
Test Case: 362 | Input/Output: [(23 97 85 17) 17]
Test Case: 363 | Input/Output: [(66 75 71 64) 64]
Test Case: 364 | Input/Output: [(53 39 97 35) 35]
Test Case: 365 | Input/Output: [(95 88 78 75) 75]
Test Case: 366 | Input/Output: [(87 16 31 88) 16]
Test Case: 367 | Input/Output: [(90 57 34 3) 3]
Test Case: 368 | Input/Output: [(91 20 30 93) 20]
Test Case: 369 | Input/Output: [(66 64 85 59) 59]
Test Case: 370 | Input/Output: [(49 29 39 70) 29]
Test Case: 371 | Input/Output: [(36 33 55 72) 33]
Test Case: 372 | Input/Output: [(85 42 50 22) 22]
Test Case: 373 | Input/Output: [(68 53 32 27) 27]
Test Case: 374 | Input/Output: [(2 70 72 18) 2]
Test Case: 375 | Input/Output: [(87 85 51 61) 51]
Test Case: 376 | Input/Output: [(59 90 95 17) 17]
Test Case: 377 | Input/Output: [(26 79 11 93) 11]
Test Case: 378 | Input/Output: [(97 50 77 30) 30]
Test Case: 379 | Input/Output: [(6 85 46 44) 6]
Test Case: 380 | Input/Output: [(58 65 91 95) 58]
Test Case: 381 | Input/Output: [(61 16 50 66) 16]
Test Case: 382 | Input/Output: [(21 76 92 85) 21]
Test Case: 383 | Input/Output: [(17 13 10 7) 7]
Test Case: 384 | Input/Output: [(32 14 32 12) 12]
Test Case: 385 | Input/Output: [(60 75 63 11) 11]
Test Case: 386 | Input/Output: [(57 22 12 87) 12]
Test Case: 387 | Input/Output: [(79 64 68 51) 51]
Test Case: 388 | Input/Output: [(57 31 69 1) 1]
Test Case: 389 | Input/Output: [(86 98 89 89) 86]
Test Case: 390 | Input/Output: [(30 23 1 30) 1]
Test Case: 391 | Input/Output: [(27 90 87 4) 4]
Test Case: 392 | Input/Output: [(72 82 89 65) 65]
Test Case: 393 | Input/Output: [(63 22 67 12) 12]
Test Case: 394 | Input/Output: [(24 21 43 62) 21]
Test Case: 395 | Input/Output: [(100 69 11 58) 11]
Test Case: 396 | Input/Output: [(49 55 56 56) 49]
Test Case: 397 | Input/Output: [(80 73 78 24) 24]
Test Case: 398 | Input/Output: [(70 92 36 88) 36]
Test Case: 399 | Input/Output: [(19 39 94 86) 19]
Test Case: 400 | Input/Output: [(81 -69 -13 46) -69]
Test Case: 401 | Input/Output: [(21 -77 68 -8) -77]
Test Case: 402 | Input/Output: [(-18 48 -12 -74) -74]
Test Case: 403 | Input/Output: [(60 -81 -66 -15) -81]
Test Case: 404 | Input/Output: [(-94 -37 -68 27) -94]
Test Case: 405 | Input/Output: [(96 3 -30 90) -30]
Test Case: 406 | Input/Output: [(-81 -72 90 -9) -81]
Test Case: 407 | Input/Output: [(-84 23 18 69) -84]
Test Case: 408 | Input/Output: [(-54 15 58 3) -54]
Test Case: 409 | Input/Output: [(-66 -21 3 -57) -66]
Test Case: 410 | Input/Output: [(31 -61 -71 38) -71]
Test Case: 411 | Input/Output: [(5 61 43 -1) -1]
Test Case: 412 | Input/Output: [(-59 2 -10 65) -59]
Test Case: 413 | Input/Output: [(59 -42 -75 22) -75]
Test Case: 414 | Input/Output: [(89 87 -57 44) -57]
Test Case: 415 | Input/Output: [(-39 44 70 -19) -39]
Test Case: 416 | Input/Output: [(13 53 67 12) 12]
Test Case: 417 | Input/Output: [(-80 30 90 -83) -83]
Test Case: 418 | Input/Output: [(31 79 -91 -39) -91]
Test Case: 419 | Input/Output: [(67 15 -10 99) -10]
Test Case: 420 | Input/Output: [(1 48 10 -35) -35]
Test Case: 421 | Input/Output: [(-3 -89 65 -7) -89]
Test Case: 422 | Input/Output: [(41 79 27 -66) -66]
Test Case: 423 | Input/Output: [(32 68 71 9) 9]
Test Case: 424 | Input/Output: [(-6 20 37 1) -6]
Test Case: 425 | Input/Output: [(29 -60 -32 -48) -60]
Test Case: 426 | Input/Output: [(92 10 -39 -30) -39]
Test Case: 427 | Input/Output: [(85 65 -7 82) -7]
Test Case: 428 | Input/Output: [(90 -4 31 41) -4]
Test Case: 429 | Input/Output: [(-1 58 25 69) -1]
Test Case: 430 | Input/Output: [(-97 32 19 -99) -99]
Test Case: 431 | Input/Output: [(-56 74 75 -66) -66]
Test Case: 432 | Input/Output: [(-31 40 95 -85) -85]
Test Case: 433 | Input/Output: [(-100 -58 -60 84) -100]
Test Case: 434 | Input/Output: [(84 17 6 72) 6]
Test Case: 435 | Input/Output: [(-33 -36 -1 -40) -40]
Test Case: 436 | Input/Output: [(30 20 71 -71) -71]
Test Case: 437 | Input/Output: [(-58 -8 85 -77) -77]
Test Case: 438 | Input/Output: [(64 -70 42 62) -70]
Test Case: 439 | Input/Output: [(-37 31 89 62) -37]
Test Case: 440 | Input/Output: [(21 99 -84 -22) -84]
Test Case: 441 | Input/Output: [(-40 19 31 -86) -86]
Test Case: 442 | Input/Output: [(65 85 44 -43) -43]
Test Case: 443 | Input/Output: [(29 -76 72 27) -76]
Test Case: 444 | Input/Output: [(57 55 -39 -21) -39]
Test Case: 445 | Input/Output: [(-32 29 75 86) -32]
Test Case: 446 | Input/Output: [(21 57 -73 43) -73]
Test Case: 447 | Input/Output: [(73 -51 -80 -50) -80]
Test Case: 448 | Input/Output: [(-11 -66 75 68) -66]
Test Case: 449 | Input/Output: [(79 61 -2 -44) -44]
Test Case: 450 | Input/Output: [(-4 -77 99 100) -77]
Test Case: 451 | Input/Output: [(65 31 -58 59) -58]
Test Case: 452 | Input/Output: [(-54 76 57 37) -54]
Test Case: 453 | Input/Output: [(-76 48 -69 -19) -76]
Test Case: 454 | Input/Output: [(14 49 -17 -4) -17]
Test Case: 455 | Input/Output: [(-76 19 87 44) -76]
Test Case: 456 | Input/Output: [(-33 -35 85 58) -35]
Test Case: 457 | Input/Output: [(-57 -7 88 81) -57]
Test Case: 458 | Input/Output: [(48 44 84 53) 44]
Test Case: 459 | Input/Output: [(-32 47 70 -10) -32]
Test Case: 460 | Input/Output: [(37 27 -30 43) -30]
Test Case: 461 | Input/Output: [(-45 -70 66 100) -70]
Test Case: 462 | Input/Output: [(-22 31 25 34) -22]
Test Case: 463 | Input/Output: [(-46 94 31 91) -46]
Test Case: 464 | Input/Output: [(50 11 -35 25) -35]
Test Case: 465 | Input/Output: [(54 -29 76 2) -29]
Test Case: 466 | Input/Output: [(-14 40 -34 97) -34]
Test Case: 467 | Input/Output: [(-61 -92 -12 -9) -92]
Test Case: 468 | Input/Output: [(28 -51 -2 -80) -80]
Test Case: 469 | Input/Output: [(-10 -65 -46 -32) -65]
Test Case: 470 | Input/Output: [(59 -59 43 47) -59]
Test Case: 471 | Input/Output: [(82 -63 -80 27) -80]
Test Case: 472 | Input/Output: [(-6 82 30 14) -6]
Test Case: 473 | Input/Output: [(60 0 17 -1) -1]
Test Case: 474 | Input/Output: [(-37 78 -80 31) -80]
Test Case: 475 | Input/Output: [(62 76 10 -32) -32]
Test Case: 476 | Input/Output: [(18 30 -33 5) -33]
Test Case: 477 | Input/Output: [(-6 -18 12 -58) -58]
Test Case: 478 | Input/Output: [(95 -97 -20 19) -97]
Test Case: 479 | Input/Output: [(-33 -95 51 -5) -95]
Test Case: 480 | Input/Output: [(12 96 55 92) 12]
Test Case: 481 | Input/Output: [(-48 -75 -49 59) -75]
Test Case: 482 | Input/Output: [(-63 37 -93 80) -93]
Test Case: 483 | Input/Output: [(42 17 9 42) 9]
Test Case: 484 | Input/Output: [(91 81 27 8) 8]
Test Case: 485 | Input/Output: [(-5 5 40 1) -5]
Test Case: 486 | Input/Output: [(-65 43 96 68) -65]
Test Case: 487 | Input/Output: [(77 -45 6 -69) -69]
Test Case: 488 | Input/Output: [(-16 51 100 50) -16]
Test Case: 489 | Input/Output: [(-22 -74 98 -86) -86]
Test Case: 490 | Input/Output: [(-80 96 -26 -4) -80]
Test Case: 491 | Input/Output: [(74 -88 -2 55) -88]
Test Case: 492 | Input/Output: [(-90 -25 92 71) -90]
Test Case: 493 | Input/Output: [(-92 85 -31 -82) -92]
Test Case: 494 | Input/Output: [(23 -1 -52 -10) -52]
Test Case: 495 | Input/Output: [(90 14 85 -62) -62]
Test Case: 496 | Input/Output: [(100 31 59 -88) -88]
Test Case: 497 | Input/Output: [(-13 84 -12 -73) -73]
Test Case: 498 | Input/Output: [(59 76 71 12) 12]
Test Case: 499 | Input/Output: [(100 -3 94 -48) -48]
Test Case: 500 | Input/Output: [(56 100 50 -28) -28]
Test Case: 501 | Input/Output: [(47 70 -43 -16) -43]
Test Case: 502 | Input/Output: [(82 57 75 32) 32]
Test Case: 503 | Input/Output: [(75 -58 -86 -62) -86]
Test Case: 504 | Input/Output: [(36 -92 97 -48) -92]
Test Case: 505 | Input/Output: [(81 19 -12 -93) -93]
Test Case: 506 | Input/Output: [(82 45 -59 95) -59]
Test Case: 507 | Input/Output: [(75 -37 -60 54) -60]
Test Case: 508 | Input/Output: [(-39 44 2 -79) -79]
Test Case: 509 | Input/Output: [(-68 -5 -89 55) -89]
Test Case: 510 | Input/Output: [(-91 41 56 57) -91]
Test Case: 511 | Input/Output: [(-87 -20 22 -31) -87]
Test Case: 512 | Input/Output: [(-79 -36 -7 5) -79]
Test Case: 513 | Input/Output: [(81 60 -95 -4) -95]
Test Case: 514 | Input/Output: [(5 62 -62 83) -62]
Test Case: 515 | Input/Output: [(-17 98 -98 33) -98]
Test Case: 516 | Input/Output: [(-87 -71 -13 -62) -87]
Test Case: 517 | Input/Output: [(14 75 55 -54) -54]
Test Case: 518 | Input/Output: [(-88 90 -72 -54) -88]
Test Case: 519 | Input/Output: [(-68 37 -19 -28) -68]
Test Case: 520 | Input/Output: [(12 35 68 4) 4]
Test Case: 521 | Input/Output: [(85 -57 4 -48) -57]
Test Case: 522 | Input/Output: [(-73 48 -2 43) -73]
Test Case: 523 | Input/Output: [(34 75 45 -55) -55]
Test Case: 524 | Input/Output: [(77 -38 -86 -36) -86]
Test Case: 525 | Input/Output: [(94 45 -79 92) -79]
Test Case: 526 | Input/Output: [(-34 32 11 70) -34]
Test Case: 527 | Input/Output: [(-85 -6 -36 -100) -100]
Test Case: 528 | Input/Output: [(49 -46 -75 -11) -75]
Test Case: 529 | Input/Output: [(-77 -69 3 -99) -99]
Test Case: 530 | Input/Output: [(70 93 -28 81) -28]
Test Case: 531 | Input/Output: [(92 70 -67 -41) -67]
Test Case: 532 | Input/Output: [(94 -95 -63 50) -95]
Test Case: 533 | Input/Output: [(-84 49 -81 -23) -84]
Test Case: 534 | Input/Output: [(79 -28 -36 66) -36]
Test Case: 535 | Input/Output: [(97 -94 75 11) -94]
Test Case: 536 | Input/Output: [(1 26 -24 -26) -26]
Test Case: 537 | Input/Output: [(3 -30 -54 64) -54]
Test Case: 538 | Input/Output: [(78 -87 -95 -53) -95]
Test Case: 539 | Input/Output: [(81 -60 42 -45) -60]
Test Case: 540 | Input/Output: [(44 5 53 81) 5]
Test Case: 541 | Input/Output: [(-17 8 47 41) -17]
Test Case: 542 | Input/Output: [(-14 -39 78 -73) -73]
Test Case: 543 | Input/Output: [(-51 -31 91 -18) -51]
Test Case: 544 | Input/Output: [(-52 32 42 -54) -54]
Test Case: 545 | Input/Output: [(10 -97 36 76) -97]
Test Case: 546 | Input/Output: [(83 -30 -32 -4) -32]
Test Case: 547 | Input/Output: [(-62 12 41 25) -62]
Test Case: 548 | Input/Output: [(16 95 75 50) 16]
Test Case: 549 | Input/Output: [(9 -26 -72 29) -72]
Test Case: 550 | Input/Output: [(-67 68 65 10) -67]
Test Case: 551 | Input/Output: [(-14 -55 -84 58) -84]
Test Case: 552 | Input/Output: [(46 -34 63 -19) -34]
Test Case: 553 | Input/Output: [(-34 85 71 -37) -37]
Test Case: 554 | Input/Output: [(-87 21 -42 -91) -91]
Test Case: 555 | Input/Output: [(-4 -28 -42 -59) -59]
Test Case: 556 | Input/Output: [(-15 57 100 -83) -83]
Test Case: 557 | Input/Output: [(-96 28 16 -92) -96]
Test Case: 558 | Input/Output: [(31 55 99 81) 31]
Test Case: 559 | Input/Output: [(-69 -70 -66 52) -70]
Test Case: 560 | Input/Output: [(11 -58 -35 -23) -58]
Test Case: 561 | Input/Output: [(54 6 -72 55) -72]
Test Case: 562 | Input/Output: [(47 -68 -91 9) -91]
Test Case: 563 | Input/Output: [(9 -40 -41 -74) -74]
Test Case: 564 | Input/Output: [(-85 55 -93 76) -93]
Test Case: 565 | Input/Output: [(-48 -60 21 85) -60]
Test Case: 566 | Input/Output: [(58 10 9 -7) -7]
Test Case: 567 | Input/Output: [(-31 80 93 79) -31]
Test Case: 568 | Input/Output: [(46 95 15 -40) -40]
Test Case: 569 | Input/Output: [(70 -38 3 8) -38]
Test Case: 570 | Input/Output: [(-3 59 9 -56) -56]
Test Case: 571 | Input/Output: [(19 74 73 -89) -89]
Test Case: 572 | Input/Output: [(-84 1 -75 -42) -84]
Test Case: 573 | Input/Output: [(94 -81 -55 -73) -81]
Test Case: 574 | Input/Output: [(63 56 85 34) 34]
Test Case: 575 | Input/Output: [(-24 -77 52 -4) -77]
Test Case: 576 | Input/Output: [(-57 -86 -81 78) -86]
Test Case: 577 | Input/Output: [(7 -63 -73 -88) -88]
Test Case: 578 | Input/Output: [(33 76 -48 22) -48]
Test Case: 579 | Input/Output: [(10 -57 11 -90) -90]
Test Case: 580 | Input/Output: [(21 75 33 7) 7]
Test Case: 581 | Input/Output: [(0 -37 -11 -69) -69]
Test Case: 582 | Input/Output: [(-8 -64 17 91) -64]
Test Case: 583 | Input/Output: [(-87 61 -18 93) -87]
Test Case: 584 | Input/Output: [(5 -74 -57 71) -74]
Test Case: 585 | Input/Output: [(-88 -2 29 29) -88]
Test Case: 586 | Input/Output: [(34 70 -75 37) -75]
Test Case: 587 | Input/Output: [(33 24 45 -82) -82]
Test Case: 588 | Input/Output: [(-77 -11 62 -35) -77]
Test Case: 589 | Input/Output: [(-6 -5 -48 33) -48]
Test Case: 590 | Input/Output: [(-27 49 -50 -87) -87]
Test Case: 591 | Input/Output: [(-7 -54 -13 11) -54]
Test Case: 592 | Input/Output: [(-13 18 83 82) -13]
Test Case: 593 | Input/Output: [(81 -88 -61 25) -88]
Test Case: 594 | Input/Output: [(39 29 49 35) 29]
Test Case: 595 | Input/Output: [(82 99 -47 81) -47]
Test Case: 596 | Input/Output: [(59 -87 -65 -36) -87]
Test Case: 597 | Input/Output: [(-37 -72 -60 87) -72]
Test Case: 598 | Input/Output: [(71 0 70 -59) -59]
Test Case: 599 | Input/Output: [(40 51 29 19) 19]
Test Case: 600 | Input/Output: [(-40 -70 89 5) -70]
Test Case: 601 | Input/Output: [(-31 60 -16 -93) -93]
Test Case: 602 | Input/Output: [(15 38 79 -84) -84]
Test Case: 603 | Input/Output: [(-83 16 70 -5) -83]
Test Case: 604 | Input/Output: [(-43 6 65 46) -43]
Test Case: 605 | Input/Output: [(84 -83 23 -92) -92]
Test Case: 606 | Input/Output: [(93 59 30 88) 30]
Test Case: 607 | Input/Output: [(-71 30 -35 -80) -80]
Test Case: 608 | Input/Output: [(-65 60 27 -4) -65]
Test Case: 609 | Input/Output: [(-18 -26 -85 71) -85]
Test Case: 610 | Input/Output: [(54 65 -46 -13) -46]
Test Case: 611 | Input/Output: [(-31 -42 61 -97) -97]
Test Case: 612 | Input/Output: [(-52 -44 -73 81) -73]
Test Case: 613 | Input/Output: [(-11 31 21 84) -11]
Test Case: 614 | Input/Output: [(3 -61 93 56) -61]
Test Case: 615 | Input/Output: [(78 7 -69 -21) -69]
Test Case: 616 | Input/Output: [(85 18 95 -38) -38]
Test Case: 617 | Input/Output: [(94 -70 33 98) -70]
Test Case: 618 | Input/Output: [(8 -31 -94 -65) -94]
Test Case: 619 | Input/Output: [(-41 27 75 -7) -41]
Test Case: 620 | Input/Output: [(11 -18 8 34) -18]
Test Case: 621 | Input/Output: [(62 -13 -74 -40) -74]
Test Case: 622 | Input/Output: [(-94 81 71 -15) -94]
Test Case: 623 | Input/Output: [(-60 27 -39 10) -60]
Test Case: 624 | Input/Output: [(-50 -42 -17 78) -50]
Test Case: 625 | Input/Output: [(-24 -31 -38 66) -38]
Test Case: 626 | Input/Output: [(-86 9 -9 -90) -90]
Test Case: 627 | Input/Output: [(-63 -16 28 84) -63]
Test Case: 628 | Input/Output: [(-8 82 83 -83) -83]
Test Case: 629 | Input/Output: [(51 -65 86 23) -65]
Test Case: 630 | Input/Output: [(-9 13 -83 -19) -83]
Test Case: 631 | Input/Output: [(36 84 94 -32) -32]
Test Case: 632 | Input/Output: [(97 2 -21 -43) -43]
Test Case: 633 | Input/Output: [(93 17 -72 -50) -72]
Test Case: 634 | Input/Output: [(36 59 91 -76) -76]
Test Case: 635 | Input/Output: [(39 52 -14 -53) -53]
Test Case: 636 | Input/Output: [(-95 24 -27 -9) -95]
Test Case: 637 | Input/Output: [(87 57 -20 -44) -44]
Test Case: 638 | Input/Output: [(-90 -17 -93 -49) -93]
Test Case: 639 | Input/Output: [(50 27 -70 -69) -70]
Test Case: 640 | Input/Output: [(-71 -81 31 -91) -91]
Test Case: 641 | Input/Output: [(-69 -71 33 -57) -71]
Test Case: 642 | Input/Output: [(38 26 -60 -64) -64]
Test Case: 643 | Input/Output: [(8 -98 86 -89) -98]
Test Case: 644 | Input/Output: [(-31 79 55 56) -31]
Test Case: 645 | Input/Output: [(-10 -45 96 -48) -48]
Test Case: 646 | Input/Output: [(-72 -69 -5 -61) -72]
Test Case: 647 | Input/Output: [(37 -14 -84 -93) -93]
Test Case: 648 | Input/Output: [(-24 -98 45 -37) -98]
Test Case: 649 | Input/Output: [(7 -48 -73 -9) -73]
Test Case: 650 | Input/Output: [(-39 -13 -11 -28) -39]
Test Case: 651 | Input/Output: [(-5 63 -22 -51) -51]
Test Case: 652 | Input/Output: [(5 58 62 57) 5]
Test Case: 653 | Input/Output: [(-21 -17 -78 62) -78]
Test Case: 654 | Input/Output: [(44 -90 -77 79) -90]
Test Case: 655 | Input/Output: [(14 82 33 -36) -36]
Test Case: 656 | Input/Output: [(-82 -63 -40 81) -82]
Test Case: 657 | Input/Output: [(-39 -20 -43 15) -43]
Test Case: 658 | Input/Output: [(-80 -38 -40 23) -80]
Test Case: 659 | Input/Output: [(57 71 -94 -2) -94]
Test Case: 660 | Input/Output: [(-73 -51 -71 -43) -73]
Test Case: 661 | Input/Output: [(29 -1 -31 29) -31]
Test Case: 662 | Input/Output: [(44 16 40 73) 16]
Test Case: 663 | Input/Output: [(-84 -94 7 -17) -94]
Test Case: 664 | Input/Output: [(-12 20 -30 53) -30]
Test Case: 665 | Input/Output: [(57 26 1 -33) -33]
Test Case: 666 | Input/Output: [(-62 17 -58 -14) -62]
Test Case: 667 | Input/Output: [(67 99 -96 51) -96]
Test Case: 668 | Input/Output: [(28 -78 -48 7) -78]
Test Case: 669 | Input/Output: [(-30 32 -16 -15) -30]
Test Case: 670 | Input/Output: [(-81 -70 28 80) -81]
Test Case: 671 | Input/Output: [(-10 -68 -63 1) -68]
Test Case: 672 | Input/Output: [(-34 85 -8 63) -34]
Test Case: 673 | Input/Output: [(-53 73 26 67) -53]
Test Case: 674 | Input/Output: [(-59 48 -21 -43) -59]
Test Case: 675 | Input/Output: [(-42 31 1 -48) -48]
Test Case: 676 | Input/Output: [(47 68 61 -43) -43]
Test Case: 677 | Input/Output: [(71 -47 33 16) -47]
Test Case: 678 | Input/Output: [(-28 -85 88 -37) -85]
Test Case: 679 | Input/Output: [(-60 -75 -19 -69) -75]
Test Case: 680 | Input/Output: [(-64 -75 86 8) -75]
Test Case: 681 | Input/Output: [(5 -99 -28 -69) -99]
Test Case: 682 | Input/Output: [(45 -57 99 58) -57]
Test Case: 683 | Input/Output: [(-99 -64 -94 -17) -99]
Test Case: 684 | Input/Output: [(92 28 96 -62) -62]
Test Case: 685 | Input/Output: [(79 57 -59 -11) -59]
Test Case: 686 | Input/Output: [(-34 95 -91 96) -91]
Test Case: 687 | Input/Output: [(-100 -65 -91 23) -100]
Test Case: 688 | Input/Output: [(1 32 -63 33) -63]
Test Case: 689 | Input/Output: [(54 2 54 -72) -72]
Test Case: 690 | Input/Output: [(-95 -87 72 -13) -95]
Test Case: 691 | Input/Output: [(90 -81 -57 -23) -81]
Test Case: 692 | Input/Output: [(-78 -49 91 -40) -78]
Test Case: 693 | Input/Output: [(-80 16 84 -8) -80]
Test Case: 694 | Input/Output: [(-38 -23 -9 -89) -89]
Test Case: 695 | Input/Output: [(-63 96 36 -75) -75]
Test Case: 696 | Input/Output: [(42 42 66 -11) -11]
Test Case: 697 | Input/Output: [(-81 -18 74 82) -81]
Test Case: 698 | Input/Output: [(62 70 38 -14) -14]
Test Case: 699 | Input/Output: [(19 -95 -16 -69) -95]
Test Case: 700 | Input/Output: [(36 -85 56 12) -85]
Test Case: 701 | Input/Output: [(31 -17 -17 -61) -61]
Test Case: 702 | Input/Output: [(42 -71 -54 -56) -71]
Test Case: 703 | Input/Output: [(35 -64 -20 -40) -64]
Test Case: 704 | Input/Output: [(37 71 100 -92) -92]
Test Case: 705 | Input/Output: [(85 -98 -52 11) -98]
Test Case: 706 | Input/Output: [(99 -78 -81 -87) -87]
Test Case: 707 | Input/Output: [(71 19 -29 -60) -60]
Test Case: 708 | Input/Output: [(-28 46 90 79) -28]
Test Case: 709 | Input/Output: [(-60 -81 -50 47) -81]
Test Case: 710 | Input/Output: [(-48 99 54 45) -48]
Test Case: 711 | Input/Output: [(-22 -52 -77 -81) -81]
Test Case: 712 | Input/Output: [(71 61 21 46) 21]
Test Case: 713 | Input/Output: [(-34 26 65 19) -34]
Test Case: 714 | Input/Output: [(-3 39 77 90) -3]
Test Case: 715 | Input/Output: [(-42 62 95 37) -42]
Test Case: 716 | Input/Output: [(93 8 32 -95) -95]
Test Case: 717 | Input/Output: [(-1 -65 21 48) -65]
Test Case: 718 | Input/Output: [(-84 -65 74 -92) -92]
Test Case: 719 | Input/Output: [(97 -68 -30 -81) -81]
Test Case: 720 | Input/Output: [(32 67 46 -6) -6]
Test Case: 721 | Input/Output: [(64 -31 29 -69) -69]
Test Case: 722 | Input/Output: [(29 -31 -10 41) -31]
Test Case: 723 | Input/Output: [(36 -100 80 37) -100]
Test Case: 724 | Input/Output: [(22 -76 -56 -60) -76]
Test Case: 725 | Input/Output: [(-56 34 1 98) -56]
Test Case: 726 | Input/Output: [(94 28 34 -99) -99]
Test Case: 727 | Input/Output: [(-44 17 -98 74) -98]
Test Case: 728 | Input/Output: [(-34 -86 12 -79) -86]
Test Case: 729 | Input/Output: [(11 -36 4 26) -36]
Test Case: 730 | Input/Output: [(90 -82 -10 88) -82]
Test Case: 731 | Input/Output: [(-6 75 98 -81) -81]
Test Case: 732 | Input/Output: [(-1 -39 48 -88) -88]
Test Case: 733 | Input/Output: [(-39 93 53 14) -39]
Test Case: 734 | Input/Output: [(3 -81 -99 53) -99]
Test Case: 735 | Input/Output: [(-83 36 61 27) -83]
Test Case: 736 | Input/Output: [(-72 -91 39 -100) -100]
Test Case: 737 | Input/Output: [(-29 49 100 -4) -29]
Test Case: 738 | Input/Output: [(-50 93 -86 42) -86]
Test Case: 739 | Input/Output: [(-3 63 -100 -49) -100]
Test Case: 740 | Input/Output: [(-94 66 -5 42) -94]
Test Case: 741 | Input/Output: [(4 -66 21 63) -66]
Test Case: 742 | Input/Output: [(-87 -2 55 0) -87]
Test Case: 743 | Input/Output: [(-49 75 30 22) -49]
Test Case: 744 | Input/Output: [(25 78 91 89) 25]
Test Case: 745 | Input/Output: [(-61 86 -35 59) -61]
Test Case: 746 | Input/Output: [(-45 25 42 -52) -52]
Test Case: 747 | Input/Output: [(-15 93 6 -18) -18]
Test Case: 748 | Input/Output: [(-97 43 91 -20) -97]
Test Case: 749 | Input/Output: [(99 -79 -54 -17) -79]
Test Case: 750 | Input/Output: [(-36 67 -95 -86) -95]
Test Case: 751 | Input/Output: [(87 -65 -18 80) -65]
Test Case: 752 | Input/Output: [(26 26 -93 -70) -93]
Test Case: 753 | Input/Output: [(-88 67 18 44) -88]
Test Case: 754 | Input/Output: [(54 36 53 11) 11]
Test Case: 755 | Input/Output: [(-25 -31 15 25) -31]
Test Case: 756 | Input/Output: [(-33 43 18 0) -33]
Test Case: 757 | Input/Output: [(19 43 12 31) 12]
Test Case: 758 | Input/Output: [(63 17 -66 -20) -66]
Test Case: 759 | Input/Output: [(10 -16 92 2) -16]
Test Case: 760 | Input/Output: [(-23 -48 88 84) -48]
Test Case: 761 | Input/Output: [(19 -54 -25 -94) -94]
Test Case: 762 | Input/Output: [(-35 36 15 -63) -63]
Test Case: 763 | Input/Output: [(-99 -83 -27 6) -99]
Test Case: 764 | Input/Output: [(14 -48 -25 -88) -88]
Test Case: 765 | Input/Output: [(-31 28 -96 -42) -96]
Test Case: 766 | Input/Output: [(36 -98 2 -45) -98]
Test Case: 767 | Input/Output: [(-82 -66 94 -53) -82]
Test Case: 768 | Input/Output: [(-88 10 63 -32) -88]
Test Case: 769 | Input/Output: [(-22 -32 -78 -14) -78]
Test Case: 770 | Input/Output: [(17 -88 8 -87) -88]
Test Case: 771 | Input/Output: [(38 98 84 8) 8]
Test Case: 772 | Input/Output: [(86 -61 33 81) -61]
Test Case: 773 | Input/Output: [(-99 4 -76 24) -99]
Test Case: 774 | Input/Output: [(25 -68 -71 16) -71]
Test Case: 775 | Input/Output: [(95 -14 -74 -100) -100]
Test Case: 776 | Input/Output: [(-74 -33 13 36) -74]
Test Case: 777 | Input/Output: [(-57 22 -95 68) -95]
Test Case: 778 | Input/Output: [(-31 -39 20 -72) -72]
Test Case: 779 | Input/Output: [(10 -6 -54 -79) -79]
Test Case: 780 | Input/Output: [(-51 -96 74 -79) -96]
Test Case: 781 | Input/Output: [(13 74 -33 -40) -40]
Test Case: 782 | Input/Output: [(-4 -68 -74 80) -74]
Test Case: 783 | Input/Output: [(34 64 -28 -21) -28]
Test Case: 784 | Input/Output: [(15 4 71 22) 4]
Test Case: 785 | Input/Output: [(7 -1 -52 56) -52]
Test Case: 786 | Input/Output: [(32 -44 76 28) -44]
Test Case: 787 | Input/Output: [(-35 7 -37 50) -37]
Test Case: 788 | Input/Output: [(88 -25 -61 28) -61]
Test Case: 789 | Input/Output: [(66 -34 -93 71) -93]
Test Case: 790 | Input/Output: [(14 -96 0 -10) -96]
Test Case: 791 | Input/Output: [(15 -79 62 17) -79]
Test Case: 792 | Input/Output: [(17 34 91 33) 17]
Test Case: 793 | Input/Output: [(14 58 35 24) 14]
Test Case: 794 | Input/Output: [(51 -82 -71 -68) -82]
Test Case: 795 | Input/Output: [(-11 31 -50 -70) -70]
Test Case: 796 | Input/Output: [(-62 -93 -40 -100) -100]
Test Case: 797 | Input/Output: [(-90 19 89 21) -90]
Test Case: 798 | Input/Output: [(-1 -44 -32 -59) -59]
Test Case: 799 | Input/Output: [(80 -10 65 -47) -47]
Test Case: 800 | Input/Output: [(-20 60 -70 -82) -82]
Test Case: 801 | Input/Output: [(-24 14 22 31) -24]
Test Case: 802 | Input/Output: [(-63 84 -35 20) -63]
Test Case: 803 | Input/Output: [(50 18 -80 -41) -80]
Test Case: 804 | Input/Output: [(26 -90 -42 78) -90]
Test Case: 805 | Input/Output: [(-77 -49 24 55) -77]
Test Case: 806 | Input/Output: [(93 -64 43 28) -64]
Test Case: 807 | Input/Output: [(-86 -68 -24 16) -86]
Test Case: 808 | Input/Output: [(52 71 70 96) 52]
Test Case: 809 | Input/Output: [(50 -21 90 59) -21]
Test Case: 810 | Input/Output: [(71 -46 23 97) -46]
Test Case: 811 | Input/Output: [(-72 37 63 9) -72]
Test Case: 812 | Input/Output: [(-94 -17 81 52) -94]
Test Case: 813 | Input/Output: [(-72 -72 -29 95) -72]
Test Case: 814 | Input/Output: [(-73 94 -31 34) -73]
Test Case: 815 | Input/Output: [(-97 -40 -69 55) -97]
Test Case: 816 | Input/Output: [(-43 58 81 -2) -43]
Test Case: 817 | Input/Output: [(80 65 -54 40) -54]
Test Case: 818 | Input/Output: [(67 -86 -23 31) -86]
Test Case: 819 | Input/Output: [(29 -88 90 51) -88]
Test Case: 820 | Input/Output: [(77 69 25 -26) -26]
Test Case: 821 | Input/Output: [(52 0 -28 83) -28]
Test Case: 822 | Input/Output: [(88 18 -28 -17) -28]
Test Case: 823 | Input/Output: [(25 -44 -48 31) -48]
Test Case: 824 | Input/Output: [(92 1 59 37) 1]
Test Case: 825 | Input/Output: [(33 2 31 -61) -61]
Test Case: 826 | Input/Output: [(-100 59 46 61) -100]
Test Case: 827 | Input/Output: [(74 18 -6 -34) -34]
Test Case: 828 | Input/Output: [(46 32 69 -49) -49]
Test Case: 829 | Input/Output: [(67 15 -7 33) -7]
Test Case: 830 | Input/Output: [(5 14 -12 41) -12]
Test Case: 831 | Input/Output: [(16 26 93 20) 16]
Test Case: 832 | Input/Output: [(59 -95 -57 -52) -95]
Test Case: 833 | Input/Output: [(-38 48 3 88) -38]
Test Case: 834 | Input/Output: [(-13 -86 -1 -62) -86]
Test Case: 835 | Input/Output: [(-25 90 58 -41) -41]
Test Case: 836 | Input/Output: [(69 -43 -80 -69) -80]
Test Case: 837 | Input/Output: [(59 -73 -48 -64) -73]
Test Case: 838 | Input/Output: [(90 -49 -68 3) -68]
Test Case: 839 | Input/Output: [(23 -4 -9 -50) -50]
Test Case: 840 | Input/Output: [(24 100 -15 28) -15]
Test Case: 841 | Input/Output: [(80 11 -87 -43) -87]
Test Case: 842 | Input/Output: [(-18 90 -82 -35) -82]
Test Case: 843 | Input/Output: [(-50 23 -19 -31) -50]
Test Case: 844 | Input/Output: [(14 47 -72 -75) -75]
Test Case: 845 | Input/Output: [(-34 92 80 51) -34]
Test Case: 846 | Input/Output: [(23 -81 60 24) -81]
Test Case: 847 | Input/Output: [(-87 67 49 -84) -87]
Test Case: 848 | Input/Output: [(-27 -68 91 84) -68]
Test Case: 849 | Input/Output: [(58 33 19 93) 19]
Test Case: 850 | Input/Output: [(91 -91 -82 9) -91]
Test Case: 851 | Input/Output: [(13 -48 -55 -86) -86]
Test Case: 852 | Input/Output: [(67 89 2 93) 2]
Test Case: 853 | Input/Output: [(21 -22 100 96) -22]
Test Case: 854 | Input/Output: [(-3 32 -75 -36) -75]
Test Case: 855 | Input/Output: [(37 -11 -43 -30) -43]
Test Case: 856 | Input/Output: [(22 -16 -65 -58) -65]
Test Case: 857 | Input/Output: [(-11 -69 -52 -61) -69]
Test Case: 858 | Input/Output: [(59 13 -93 -55) -93]
Test Case: 859 | Input/Output: [(89 -56 35 73) -56]
Test Case: 860 | Input/Output: [(17 35 -67 64) -67]
Test Case: 861 | Input/Output: [(-75 19 21 30) -75]
Test Case: 862 | Input/Output: [(97 -62 -73 -57) -73]
Test Case: 863 | Input/Output: [(-27 13 24 -38) -38]
Test Case: 864 | Input/Output: [(32 36 33 -14) -14]
Test Case: 865 | Input/Output: [(58 -78 -18 45) -78]
Test Case: 866 | Input/Output: [(80 36 -95 -89) -95]
Test Case: 867 | Input/Output: [(-4 30 23 7) -4]
Test Case: 868 | Input/Output: [(-45 -53 -43 78) -53]
Test Case: 869 | Input/Output: [(27 -36 62 -64) -64]
Test Case: 870 | Input/Output: [(0 -15 -90 57) -90]
Test Case: 871 | Input/Output: [(29 19 -86 47) -86]
Test Case: 872 | Input/Output: [(-16 -19 -63 -18) -63]
Test Case: 873 | Input/Output: [(-79 -61 -49 45) -79]
Test Case: 874 | Input/Output: [(63 -26 -88 -85) -88]
Test Case: 875 | Input/Output: [(5 45 98 -13) -13]
Test Case: 876 | Input/Output: [(-44 -20 92 86) -44]
Test Case: 877 | Input/Output: [(22 -15 -88 29) -88]
Test Case: 878 | Input/Output: [(-37 -10 -72 18) -72]
Test Case: 879 | Input/Output: [(75 18 -48 33) -48]
Test Case: 880 | Input/Output: [(-20 -68 -8 38) -68]
Test Case: 881 | Input/Output: [(-34 -89 -95 75) -95]
Test Case: 882 | Input/Output: [(-37 93 -46 -13) -46]
Test Case: 883 | Input/Output: [(-84 22 78 -23) -84]
Test Case: 884 | Input/Output: [(-7 -37 -56 -76) -76]
Test Case: 885 | Input/Output: [(-87 -95 74 53) -95]
Test Case: 886 | Input/Output: [(-65 62 92 20) -65]
Test Case: 887 | Input/Output: [(16 64 78 21) 16]
Test Case: 888 | Input/Output: [(-71 42 5 51) -71]
Test Case: 889 | Input/Output: [(-2 63 -99 98) -99]
Test Case: 890 | Input/Output: [(14 -89 -80 27) -89]
Test Case: 891 | Input/Output: [(50 -80 -45 -32) -80]
Test Case: 892 | Input/Output: [(-27 20 -95 23) -95]
Test Case: 893 | Input/Output: [(-83 80 -95 64) -95]
Test Case: 894 | Input/Output: [(49 -79 52 97) -79]
Test Case: 895 | Input/Output: [(91 65 -21 -70) -70]
Test Case: 896 | Input/Output: [(7 -45 -81 81) -81]
Test Case: 897 | Input/Output: [(64 73 -20 32) -20]
Test Case: 898 | Input/Output: [(32 -78 -18 98) -78]
Test Case: 899 | Input/Output: [(-71 100 -81 66) -81]
Test Case: 900 | Input/Output: [(7 -94 22 -49) -94]
Test Case: 901 | Input/Output: [(-6 -80 -98 2) -98]
Test Case: 902 | Input/Output: [(95 -6 -51 40) -51]
Test Case: 903 | Input/Output: [(-18 -58 -59 -30) -59]
Test Case: 904 | Input/Output: [(-67 -7 47 -45) -67]
Test Case: 905 | Input/Output: [(6 -28 -26 -84) -84]
Test Case: 906 | Input/Output: [(6 52 16 -50) -50]
Test Case: 907 | Input/Output: [(-76 -29 -5 -42) -76]
Test Case: 908 | Input/Output: [(8 -15 -11 -53) -53]
Test Case: 909 | Input/Output: [(-69 11 23 -27) -69]
Test Case: 910 | Input/Output: [(-17 100 41 98) -17]
Test Case: 911 | Input/Output: [(-69 19 60 65) -69]
Test Case: 912 | Input/Output: [(-42 41 -57 -32) -57]
Test Case: 913 | Input/Output: [(-89 0 -15 85) -89]
Test Case: 914 | Input/Output: [(49 -8 63 53) -8]
Test Case: 915 | Input/Output: [(95 55 -60 23) -60]
Test Case: 916 | Input/Output: [(-43 -37 17 27) -43]
Test Case: 917 | Input/Output: [(29 80 -74 41) -74]
Test Case: 918 | Input/Output: [(-6 57 -12 -92) -92]
Test Case: 919 | Input/Output: [(-30 89 66 69) -30]
Test Case: 920 | Input/Output: [(64 -89 34 -56) -89]
Test Case: 921 | Input/Output: [(84 -59 10 93) -59]
Test Case: 922 | Input/Output: [(5 4 -48 93) -48]
Test Case: 923 | Input/Output: [(-1 58 -10 -43) -43]
Test Case: 924 | Input/Output: [(-24 -43 -35 57) -43]
Test Case: 925 | Input/Output: [(-34 75 -52 83) -52]
Test Case: 926 | Input/Output: [(19 -9 63 94) -9]
Test Case: 927 | Input/Output: [(-97 37 -30 32) -97]
Test Case: 928 | Input/Output: [(-96 49 86 88) -96]
Test Case: 929 | Input/Output: [(85 -38 14 23) -38]
Test Case: 930 | Input/Output: [(84 98 42 -84) -84]
Test Case: 931 | Input/Output: [(-34 68 -19 -34) -34]
Test Case: 932 | Input/Output: [(-19 58 -38 -43) -43]
Test Case: 933 | Input/Output: [(79 21 -2 52) -2]
Test Case: 934 | Input/Output: [(91 -55 23 -95) -95]
Test Case: 935 | Input/Output: [(-9 -53 19 67) -53]
Test Case: 936 | Input/Output: [(32 27 86 46) 27]
Test Case: 937 | Input/Output: [(-35 -77 -9 -8) -77]
Test Case: 938 | Input/Output: [(-22 -27 65 -57) -57]
Test Case: 939 | Input/Output: [(70 -85 45 12) -85]
Test Case: 940 | Input/Output: [(90 39 -26 30) -26]
Test Case: 941 | Input/Output: [(20 3 73 86) 3]
Test Case: 942 | Input/Output: [(92 -10 -18 49) -18]
Test Case: 943 | Input/Output: [(57 48 100 -51) -51]
Test Case: 944 | Input/Output: [(32 67 51 18) 18]
Test Case: 945 | Input/Output: [(-55 98 15 -42) -55]
Test Case: 946 | Input/Output: [(17 -44 80 60) -44]
Test Case: 947 | Input/Output: [(8 75 -57 40) -57]
Test Case: 948 | Input/Output: [(20 -46 44 56) -46]
Test Case: 949 | Input/Output: [(98 -43 -62 -79) -79]
Test Case: 950 | Input/Output: [(65 -8 -36 87) -36]
Test Case: 951 | Input/Output: [(87 66 42 93) 42]
Test Case: 952 | Input/Output: [(-4 66 -6 -78) -78]
Test Case: 953 | Input/Output: [(52 51 -37 -6) -37]
Test Case: 954 | Input/Output: [(-70 -10 -84 53) -84]
Test Case: 955 | Input/Output: [(-55 2 82 -64) -64]
Test Case: 956 | Input/Output: [(4 39 23 -82) -82]
Test Case: 957 | Input/Output: [(21 73 -76 27) -76]
Test Case: 958 | Input/Output: [(-25 37 78 -60) -60]
Test Case: 959 | Input/Output: [(16 50 -35 31) -35]
Test Case: 960 | Input/Output: [(-73 -2 23 -27) -73]
Test Case: 961 | Input/Output: [(-83 58 -6 24) -83]
Test Case: 962 | Input/Output: [(66 40 49 -67) -67]
Test Case: 963 | Input/Output: [(9 58 -6 68) -6]
Test Case: 964 | Input/Output: [(-55 -67 -17 -40) -67]
Test Case: 965 | Input/Output: [(-27 68 39 -1) -27]
Test Case: 966 | Input/Output: [(-87 -98 47 -17) -98]
Test Case: 967 | Input/Output: [(-14 -66 81 15) -66]
Test Case: 968 | Input/Output: [(6 42 -69 33) -69]
Test Case: 969 | Input/Output: [(24 -65 -18 43) -65]
Test Case: 970 | Input/Output: [(-33 21 -74 71) -74]
Test Case: 971 | Input/Output: [(57 -65 100 -55) -65]
Test Case: 972 | Input/Output: [(94 88 -21 -95) -95]
Test Case: 973 | Input/Output: [(-31 36 76 -57) -57]
Test Case: 974 | Input/Output: [(-26 74 1 -94) -94]
Test Case: 975 | Input/Output: [(37 -10 -74 -18) -74]
Test Case: 976 | Input/Output: [(37 91 8 3) 3]
Test Case: 977 | Input/Output: [(-5 15 -76 -67) -76]
Test Case: 978 | Input/Output: [(30 -9 60 76) -9]
Test Case: 979 | Input/Output: [(96 55 63 87) 55]
Test Case: 980 | Input/Output: [(-18 -21 -39 -88) -88]
Test Case: 981 | Input/Output: [(73 -90 22 -3) -90]
Test Case: 982 | Input/Output: [(10 -96 3 -67) -96]
Test Case: 983 | Input/Output: [(-91 -19 63 -63) -91]
Test Case: 984 | Input/Output: [(-75 -86 -76 43) -86]
Test Case: 985 | Input/Output: [(41 69 -20 -48) -48]
Test Case: 986 | Input/Output: [(88 -59 -73 -95) -95]
Test Case: 987 | Input/Output: [(-90 -21 90 31) -90]
Test Case: 988 | Input/Output: [(14 -75 -8 -24) -75]
Test Case: 989 | Input/Output: [(-96 -69 -39 70) -96]
Test Case: 990 | Input/Output: [(19 91 -93 88) -93]
Test Case: 991 | Input/Output: [(2 -63 35 40) -63]
Test Case: 992 | Input/Output: [(83 -80 -84 -61) -84]
Test Case: 993 | Input/Output: [(-27 -10 -72 -22) -72]
Test Case: 994 | Input/Output: [(-60 -96 -59 -23) -96]
Test Case: 995 | Input/Output: [(93 -51 62 -15) -51]
Test Case: 996 | Input/Output: [(96 4 98 17) 4]
Test Case: 997 | Input/Output: [(79 -78 43 35) -78]
Test Case: 998 | Input/Output: [(-32 -95 -32 65) -95]
Test Case: 999 | Input/Output: [(-67 -27 7 -32) -67]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -62 2 -116 -45 -86 83 2 122 93 -17 -16 109 -65 85 102 57
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-5 -5 -80 -5] -80] [[96 -32 96 96] -32] [[99 99 86 99] 86] [[-50 -50 61 -50] -50] [[-20 -20 -20 96] -20] [[70 84 84 84] 70] [[89 -12 89 89] -12] [[-63 58 58 58] -63] [[97 97 97 93] 93] [[50 -61 50 50] -61] [(63 63 63 63) 63] [(-18 -18 -18 -18) -18] [(52 52 52 52) 52] [(59 59 59 59) 59] [(-47 -47 -47 -47) -47] [(33 13 45 25) 13] [(75 49 76 100) 49] [(50 39 16 14) 14] [(88 38 31 100) 31] [(85 46 57 60) 46] [(69 93 85 55) 55] [(32 86 0 24) 0] [(60 37 24 13) 13] [(18 45 70 71) 18] [(92 35 83 93) 35] [(37 20 11 72) 11] [(79 10 98 64) 10] [(71 80 83 95) 71] [(85 21 25 68) 21] [(13 63 78 69) 13] [(56 41 82 53) 41] [(58 87 18 53) 18] [(95 78 94 17) 17] [(4 41 36 46) 4] [(91 8 11 37) 8] [(79 46 7 75) 7] [(92 36 63 18) 18] [(-99 -27 30 -4) -99] [(-75 -46 -52 57) -75] [(-76 33 60 -27) -76] [(19 13 -87 -66) -87] [(69 25 0 45) 0] [(-13 -49 36 66) -49] [(-51 27 36 -77) -77] [(-21 21 -79 32) -79] [(47 0 -39 16) -39] [(-82 35 92 -59) -82] [(-21 68 -85 -22) -85] [(80 80 1 -52) -52] [(-64 -95 91 -7) -95] [(-52 -22 -56 80) -56] [(-54 -95 -72 -35) -95] [(-46 3 -96 31) -96] [(39 81 -2 -51) -51] [(50 6 -91 53) -91] [(-5 84 74 -30) -30] [(-87 -49 -27 64) -87] [(93 -88 -14 99) -88] [(-81 -15 87 -44) -81] [(91 10 -52 59) -52] [(77 34 -44 -18) -44] [(-61 31 -97 -30) -97] [(-66 -28 -96 59) -96] [(-25 -46 -32 8) -46] [(-25 -56 20 80) -56] [(-74 67 14 -78) -78] [(7 -96 -90 100) -96] [(8 72 -75 38) -75] [(37 -9 57 83) -9] [(30 84 -50 -95) -95] [(25 -34 -41 49) -41] [(61 -41 -56 -6) -56] [(-88 20 -57 36) -88] [(-10 93 52 54) -10] [(-30 89 -38 33) -38] [(44 -43 49 79) -43] [(-81 26 34 45) -81] [(76 76 31 -41) -41] [(-72 -88 95 33) -88] [(99 49 76 11) 11] [(8 99 -87 43) -87] [(26 -30 -65 58) -65] [(-35 24 23 70) -35] [(53 -15 48 11) -15] [(-70 -76 70 -43) -76] [(30 100 28 20) 20] [(-58 -23 43 -88) -88] [(12 -97 73 87) -97] [(1 94 34 6) 1] [(-44 -24 -65 60) -65] [(34 -7 11 57) -7] [(52 -88 -55 -4) -88] [(-87 -58 -70 -51) -87] [(14 56 3 -44) -44] [(38 -32 35 -27) -32])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: 61                 
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup})
Lexicase best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) boolean_rot boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank boolean_swap integer_add in4 exec_shove () integer_shove integer_pop integer_flush) (integer_gt) boolean_rot exec_do*times (in4 integer_dup_items exec_pop ()) integer_max exec_k_when_autoconstructing (exec_noop integer_gt integer_yankdup) ()))
Lexicase best errors: [0 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup})
Zero cases best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) boolean_rot boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank boolean_swap integer_add in4 exec_shove () integer_shove integer_pop integer_flush) (integer_gt) boolean_rot exec_do*times (in4 integer_dup_items exec_pop ()) integer_max exec_k_when_autoconstructing (exec_noop integer_gt integer_yankdup) ()))
Zero cases best errors: [0 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 12 2 7 1 2 2 1 8 2)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (2 12 2 7 1 2 2 1 8 2)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_970} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_156} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_add} {:close 0, :instruction -88} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_675} {:close 0, :instruction tagged_897} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction 20} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_min})
Best program: (print_integer integer_dup_items exec_if (boolean_frominteger exec_rot (integer_dec boolean_eq exec_stackdepth tagged_970 exec_dup_items in3 integer_lte boolean_shove boolean_empty boolean_invert_first_then_and print_integer) (tagged_156 integer_stackdepth integer_min exec_k_when_autoconstructing () (boolean_yank exec_k_when_autoconstructing (integer_shove) (integer_sub integer_gte exec_stackdepth) boolean_flush exec_flush boolean_frominteger exec_dup_items integer_mult exec_do*range (in1) in4 exec_do*while (exec_noop print_boolean) exec_pop () boolean_invert_second_then_and in3) exec_rot () (in4 boolean_xor print_boolean exec_while (integer_dup_items boolean_dup_items integer_lte exec_s (boolean_dup_times integer_lt) (integer_add) (-88 print_exec (integer_eq integer_mod boolean_rot) in4 boolean_not exec_k (exec_dup (exec_while (integer_inc exec_if () (exec_do*count (exec_flush) boolean_flush integer_rot tagged_675 tagged_897 exec_pop (integer_inc integer_yankdup integer_gt) boolean_and integer_div integer_max boolean_swap 20 exec_stackdepth) integer_min))) ()))) ()) ()) ())
Errors: [0 0 1 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 81
Size: 110
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 9.961
Median total errors in population: 10
Error averages by case: (0.998 0.988 0.998 0.993 0.999 0.998 0.998 0.999 0.992 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.942
Average program size in population (points): 69.112
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 476036
--- Timings ---
Current time: 1559584145068 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.3%
Reproduction:         0.8 seconds, 29.1%
Fitness Testing:      1.8 seconds, 67.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: 61                 
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup})
Lexicase best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) boolean_rot boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank boolean_swap integer_add in4 exec_shove () integer_shove integer_pop integer_flush) (integer_gt) boolean_rot exec_do*times (in4 integer_dup_items exec_pop ()) integer_max exec_k_when_autoconstructing (exec_noop integer_gt integer_yankdup) ()))
Lexicase best errors: [1 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup})
Zero cases best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) boolean_rot boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank boolean_swap integer_add in4 exec_shove () integer_shove integer_pop integer_flush) (integer_gt) boolean_rot exec_do*times (in4 integer_dup_items exec_pop ()) integer_max exec_k_when_autoconstructing (exec_noop integer_gt integer_yankdup) ()))
Zero cases best errors: [1 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 385 384 348 872 384 348 384 142 137)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (0 385 384 348 872 384 348 384 142 137)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_970} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_156} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_add} {:close 0, :instruction -88} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_675} {:close 0, :instruction tagged_897} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction 20} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_min})
Best program: (print_integer integer_dup_items exec_if (boolean_frominteger exec_rot (integer_dec boolean_eq exec_stackdepth tagged_970 exec_dup_items in3 integer_lte boolean_shove boolean_empty boolean_invert_first_then_and print_integer) (tagged_156 integer_stackdepth integer_min exec_k_when_autoconstructing () (boolean_yank exec_k_when_autoconstructing (integer_shove) (integer_sub integer_gte exec_stackdepth) boolean_flush exec_flush boolean_frominteger exec_dup_items integer_mult exec_do*range (in1) in4 exec_do*while (exec_noop print_boolean) exec_pop () boolean_invert_second_then_and in3) exec_rot () (in4 boolean_xor print_boolean exec_while (integer_dup_items boolean_dup_items integer_lte exec_s (boolean_dup_times integer_lt) (integer_add) (-88 print_exec (integer_eq integer_mod boolean_rot) in4 boolean_not exec_k (exec_dup (exec_while (integer_inc exec_if () (exec_do*count (exec_flush) boolean_flush integer_rot tagged_675 tagged_897 exec_pop (integer_inc integer_yankdup integer_gt) exec_s (integer_div integer_max boolean_swap 20 exec_stackdepth) (integer_min) ())))) ()))) ()) ()) ())
Errors: [1 0 0 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 81
Size: 113
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 6.616
Median total errors in population: 7
Error averages by case: (1.0 0.615 0.616 0.652 0.128 0.616 0.652 0.616 0.858 0.863)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.47
Average program size in population (points): 58.981
Average percent parens in population: 0.261
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.496
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 221
Genome diversity (% unique genomes):	 0.511
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.505
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 860086
--- Timings ---
Current time: 1559584147574 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.4 seconds, 46.2%
Fitness Testing:      2.3 seconds, 44.4%
Report:               0.4 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 39                 
Correct output: 31                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 93                 
Correct output: 0                   | Program output: 86                 
Correct output: 13                  | Program output: 37                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 87                 
Correct output: 17                  | Program output: 78                 
Correct output: 4                   | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 46                 
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -46                
Correct output: -76                 | Program output: 33                 
Correct output: -87                 | Program output: 13                 
Correct output: 0                   | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: 27                 
Correct output: -79                 | Program output: 21                 
Correct output: -39                 | Program output: 0                  
Correct output: -82                 | Program output: 35                 
Correct output: -85                 | Program output: 68                 
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 3                  
Correct output: -51                 | Program output: 81                 
Correct output: -91                 | Program output: 6                  
Correct output: -30                 | Program output: 84                 
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: 10                 
Correct output: -44                 | Program output: 34                 
Correct output: -97                 | Program output: 31                 
Correct output: -96                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 67                 
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: 72                 
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: 84                 
Correct output: -41                 | Program output: -34                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: 20                 
Correct output: -10                 | Program output: 93                 
Correct output: -38                 | Program output: 89                 
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 49                 
Correct output: -87                 | Program output: 99                 
Correct output: -65                 | Program output: -30                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 100                
Correct output: -88                 | Program output: -23                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 94                 
Correct output: -65                 | Program output: -24                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: 56                 
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_eq exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()))) ())
Lexicase best errors: [1 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_eq exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()))) ())
Zero cases best errors: [1 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (454 233 233 453 233 234 454 453 233 233)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (454 233 233 453 233 234 454 453 233 233)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_eq exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty) (boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank integer_flush integer_gt) in2) ()))) ())
Errors: [1 0 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 42
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.787
Median total errors in population: 6
Error averages by case: (0.546 0.767 0.767 0.547 0.767 0.766 0.546 0.547 0.767 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.381
Average program size in population (points): 60.312
Average percent parens in population: 0.262
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.963
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1303608
--- Timings ---
Current time: 1559584150593 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.6 seconds, 55.6%
Fitness Testing:      2.9 seconds, 35.1%
Report:               0.7 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 39                 
Correct output: 31                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 93                 
Correct output: 0                   | Program output: 86                 
Correct output: 13                  | Program output: 37                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 87                 
Correct output: 17                  | Program output: 78                 
Correct output: 4                   | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 46                 
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -46                
Correct output: -76                 | Program output: 33                 
Correct output: -87                 | Program output: 13                 
Correct output: 0                   | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: 27                 
Correct output: -79                 | Program output: 21                 
Correct output: -39                 | Program output: 0                  
Correct output: -82                 | Program output: 35                 
Correct output: -85                 | Program output: 68                 
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 3                  
Correct output: -51                 | Program output: 81                 
Correct output: -91                 | Program output: 6                  
Correct output: -30                 | Program output: 84                 
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: 10                 
Correct output: -44                 | Program output: 34                 
Correct output: -97                 | Program output: 31                 
Correct output: -96                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 67                 
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: 72                 
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: 84                 
Correct output: -41                 | Program output: -34                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: 20                 
Correct output: -10                 | Program output: 93                 
Correct output: -38                 | Program output: 89                 
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 49                 
Correct output: -87                 | Program output: 99                 
Correct output: -65                 | Program output: -30                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 100                
Correct output: -88                 | Program output: -23                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 94                 
Correct output: -65                 | Program output: -24                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: 56                 
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove integer_mult boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_eq exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_dup_items boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove integer_mult boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_eq exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_dup_items boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()))) ())
Zero cases best errors: [0 0 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (526 527 527 527 885 884 5 349 349 533)
Population mean number of elite cases: 5.11
Count of perfect (error zero) individuals by case: (526 527 527 527 885 884 5 349 349 533)
Population mean number of perfect (error zero) cases: 5.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_eq exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (exec_do*count (integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) exec_yank) (integer_flush integer_gt) (in2)) ()))) ())
Errors: [0 0 0 0 0 0 1 1 1 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 4.888
Median total errors in population: 3
Error averages by case: (0.474 0.473 0.473 0.473 0.115 0.116 0.995 0.651 0.651 0.467)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.563
Average program size in population (points): 52.138
Average percent parens in population: 0.257
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.40875
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 178
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 178
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1631930
--- Timings ---
Current time: 1559584153367 milliseconds
Total Time:          10.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.5 seconds, 59.6%
Fitness Testing:      3.3 seconds, 30.5%
Report:               1.0 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: 61                 
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup})
Lexicase best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) boolean_rot boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank boolean_swap integer_add in4 exec_shove (integer_shove integer_pop integer_flush) integer_gt) (boolean_rot exec_do*times (in4 integer_dup_items exec_pop ()) integer_max exec_k_when_autoconstructing (exec_noop integer_gt integer_yankdup) ())))
Lexicase best errors: [0 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup})
Zero cases best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) boolean_rot boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank boolean_swap integer_add in4 exec_shove (integer_shove integer_pop integer_flush) integer_gt) (boolean_rot exec_do*times (in4 integer_dup_items exec_pop ()) integer_max exec_k_when_autoconstructing (exec_noop integer_gt integer_yankdup) ())))
Zero cases best errors: [0 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 214 1 215 1 904 215 142 1 690)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (216 214 1 215 1 904 215 142 1 690)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup})
Best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) integer_eq boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank boolean_swap integer_add in4 exec_shove () integer_shove integer_pop integer_flush) (integer_gt) boolean_rot exec_do*times (in4 integer_dup_items exec_pop ()) integer_max exec_k_when_autoconstructing (exec_noop integer_gt integer_yankdup) ()))
Errors: [0 0 1 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 42
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.401
Median total errors in population: 8
Error averages by case: (0.784 0.786 0.999 0.785 0.999 0.096 0.785 0.858 0.999 0.31)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.134
Average program size in population (points): 49.272
Average percent parens in population: 0.265
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.958
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1966468
--- Timings ---
Current time: 1559584155823 milliseconds
Total Time:          13.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.3 seconds, 61.1%
Fitness Testing:      3.7 seconds, 27.3%
Report:               1.5 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: -63                
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 33                 
Correct output: 49                  | Program output: 75                 
Correct output: 14                  | Program output: 50                 
Correct output: 31                  | Program output: 88                 
Correct output: 46                  | Program output: 85                 
Correct output: 55                  | Program output: 69                 
Correct output: 0                   | Program output: 32                 
Correct output: 13                  | Program output: 60                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 92                 
Correct output: 11                  | Program output: 37                 
Correct output: 10                  | Program output: 79                 
Correct output: 71                  | Program output: 71                 
Correct output: 21                  | Program output: 85                 
Correct output: 13                  | Program output: 13                 
Correct output: 41                  | Program output: 56                 
Correct output: 18                  | Program output: 58                 
Correct output: 17                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 91                 
Correct output: 7                   | Program output: 79                 
Correct output: 18                  | Program output: 92                 
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 19                 
Correct output: 0                   | Program output: 69                 
Correct output: -49                 | Program output: -13                
Correct output: -77                 | Program output: -51                
Correct output: -79                 | Program output: -21                
Correct output: -39                 | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -21                
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -64                
Correct output: -56                 | Program output: -52                
Correct output: -95                 | Program output: -54                
Correct output: -96                 | Program output: -46                
Correct output: -51                 | Program output: 39                 
Correct output: -91                 | Program output: 50                 
Correct output: -30                 | Program output: -5                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: 93                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: 91                 
Correct output: -44                 | Program output: 77                 
Correct output: -97                 | Program output: -61                
Correct output: -96                 | Program output: -66                
Correct output: -46                 | Program output: -25                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: -74                
Correct output: -96                 | Program output: 7                  
Correct output: -75                 | Program output: 8                  
Correct output: -9                  | Program output: 37                 
Correct output: -95                 | Program output: 30                 
Correct output: -41                 | Program output: 25                 
Correct output: -56                 | Program output: 61                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -38                 | Program output: -30                
Correct output: -43                 | Program output: 44                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -72                
Correct output: 11                  | Program output: 99                 
Correct output: -87                 | Program output: 8                  
Correct output: -65                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -15                 | Program output: 53                 
Correct output: -76                 | Program output: -70                
Correct output: 20                  | Program output: 30                 
Correct output: -88                 | Program output: -58                
Correct output: -97                 | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: -65                 | Program output: -44                
Correct output: -7                  | Program output: 34                 
Correct output: -88                 | Program output: 52                 
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 14                 
Correct output: -32                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_swap (boolean_yankdup exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 in1 exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) boolean_dup) ()))) ())
Lexicase best errors: [0 1 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_swap (boolean_yankdup exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 in1 exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) boolean_dup) ()))) ())
Zero cases best errors: [0 1 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 6 119 792 367 369 387 386 118 36)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (367 6 119 792 367 369 387 386 118 36)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 in1 exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()))) ())
Errors: [0 1 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 42
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 7.053
Median total errors in population: 7
Error averages by case: (0.633 0.994 0.881 0.208 0.633 0.631 0.613 0.614 0.882 0.964)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.129
Average program size in population (points): 50.385
Average percent parens in population: 0.260
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.57525
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 256
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 256
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2331510
--- Timings ---
Current time: 1559584158440 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.3 seconds, 63.5%
Fitness Testing:      4.1 seconds, 25.2%
Report:               1.7 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: 61                 
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div})
Lexicase best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) boolean_rot boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank boolean_swap integer_add in4 exec_shove () integer_shove integer_pop integer_flush) (integer_gt boolean_rot exec_do*times (in4 integer_dup_items exec_pop ()) integer_max exec_k_when_autoconstructing () (exec_noop integer_gt integer_div))))
Lexicase best errors: [0 1 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div})
Zero cases best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) boolean_rot boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank boolean_swap integer_add in4 exec_shove () integer_shove integer_pop integer_flush) (integer_gt boolean_rot exec_do*times (in4 integer_dup_items exec_pop ()) integer_max exec_k_when_autoconstructing () (exec_noop integer_gt integer_div))))
Zero cases best errors: [0 1 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 181 180 214 198 324 216 925 201 200)
Population mean number of elite cases: 2.85
Count of perfect (error zero) individuals by case: (215 181 180 214 198 324 216 925 201 200)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) boolean_rot boolean_not boolean_and print_integer exec_k_when_autoconstructing (boolean_dup boolean_dup_times integer_min integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()) ())
Errors: [0 1 1 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 7.146
Median total errors in population: 7
Error averages by case: (0.785 0.819 0.82 0.786 0.802 0.676 0.784 0.075 0.799 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.191
Average program size in population (points): 46.485
Average percent parens in population: 0.263
Minimum age in population: 6.5
Maximum age in population: 10.6875
Average age in population: 9.11040625
Median age in population: 9.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2658130
--- Timings ---
Current time: 1559584161011 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.3 seconds, 65.3%
Fitness Testing:      4.4 seconds, 23.7%
Report:               2.0 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 39                 
Correct output: 31                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 93                 
Correct output: 0                   | Program output: 86                 
Correct output: 13                  | Program output: 37                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 87                 
Correct output: 17                  | Program output: 78                 
Correct output: 4                   | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 46                 
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -46                
Correct output: -76                 | Program output: 33                 
Correct output: -87                 | Program output: 13                 
Correct output: 0                   | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: 27                 
Correct output: -79                 | Program output: 21                 
Correct output: -39                 | Program output: 0                  
Correct output: -82                 | Program output: 35                 
Correct output: -85                 | Program output: 68                 
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 3                  
Correct output: -51                 | Program output: 81                 
Correct output: -91                 | Program output: 6                  
Correct output: -30                 | Program output: 84                 
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: 10                 
Correct output: -44                 | Program output: 34                 
Correct output: -97                 | Program output: 31                 
Correct output: -96                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 67                 
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: 72                 
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: 84                 
Correct output: -41                 | Program output: -34                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: 20                 
Correct output: -10                 | Program output: 93                 
Correct output: -38                 | Program output: 89                 
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 49                 
Correct output: -87                 | Program output: 99                 
Correct output: -65                 | Program output: -30                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 100                
Correct output: -88                 | Program output: -23                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 94                 
Correct output: -65                 | Program output: -24                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: 56                 
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_lt exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()))) ())
Lexicase best errors: [0 1 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_lt exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()))) ())
Zero cases best errors: [0 1 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 288 288 297 700 110 297 301 212 300)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (297 288 288 297 700 110 297 301 212 300)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_dup_times exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()))) ())
Errors: [0 1 1 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 42
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.91
Median total errors in population: 7
Error averages by case: (0.703 0.712 0.712 0.703 0.3 0.89 0.703 0.699 0.788 0.7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.403
Average program size in population (points): 46.833
Average percent parens in population: 0.262
Minimum age in population: 8.5
Maximum age in population: 12.28125
Average age in population: 10.5819375
Median age in population: 10.65625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2993764
--- Timings ---
Current time: 1559584163666 milliseconds
Total Time:          21.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.3 seconds, 66.8%
Fitness Testing:      4.8 seconds, 22.4%
Report:               2.2 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 39                 
Correct output: 31                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 93                 
Correct output: 0                   | Program output: 86                 
Correct output: 13                  | Program output: 37                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 87                 
Correct output: 17                  | Program output: 78                 
Correct output: 4                   | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 46                 
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -46                
Correct output: -76                 | Program output: 33                 
Correct output: -87                 | Program output: 13                 
Correct output: 0                   | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: 27                 
Correct output: -79                 | Program output: 21                 
Correct output: -39                 | Program output: 0                  
Correct output: -82                 | Program output: 35                 
Correct output: -85                 | Program output: 68                 
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 3                  
Correct output: -51                 | Program output: 81                 
Correct output: -91                 | Program output: 6                  
Correct output: -30                 | Program output: 84                 
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: 10                 
Correct output: -44                 | Program output: 34                 
Correct output: -97                 | Program output: 31                 
Correct output: -96                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 67                 
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: 72                 
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: 84                 
Correct output: -41                 | Program output: -34                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: 20                 
Correct output: -10                 | Program output: 93                 
Correct output: -38                 | Program output: 89                 
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 49                 
Correct output: -87                 | Program output: 99                 
Correct output: -65                 | Program output: -30                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 100                
Correct output: -88                 | Program output: -23                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 94                 
Correct output: -65                 | Program output: -24                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: 56                 
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_dup_times exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()))) ())
Lexicase best errors: [1 1 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_dup_times exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()))) ())
Zero cases best errors: [1 1 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 188 88 523 833 188 119 114 525 526)
Population mean number of elite cases: 3.29
Count of perfect (error zero) individuals by case: (188 188 88 523 833 188 119 114 525 526)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (print_integer integer_dup_items exec_if (integer_eq exec_rot (integer_dec integer_lt boolean_yank in2 in2 exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ())) () ()) ())
Errors: [1 1 1 0 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 29
Size: 42
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 6.708
Median total errors in population: 6
Error averages by case: (0.812 0.812 0.912 0.477 0.167 0.812 0.881 0.886 0.475 0.474)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.494
Average program size in population (points): 44.01
Average percent parens in population: 0.259
Minimum age in population: 9.5
Maximum age in population: 13.8359375
Average age in population: 12.0461953125
Median age in population: 12.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3344003
--- Timings ---
Current time: 1559584166389 milliseconds
Total Time:          24.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.4 seconds, 68.0%
Fitness Testing:      5.2 seconds, 21.4%
Report:               2.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: 61                 
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove print_integer integer_dup_items exec_if (boolean_frominteger exec_rot (integer_dec boolean_eq in3 exec_y_when_autoconstructing (print_integer boolean_frominteger)) (boolean_rot boolean_not boolean_and print_integer exec_noop boolean_shove exec_shove (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) exec_yank) (integer_flush integer_gt) in2) ()) ())
Lexicase best errors: [1 1 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove print_integer integer_dup_items exec_if (boolean_frominteger exec_rot (integer_dec boolean_eq in3 exec_y_when_autoconstructing (print_integer boolean_frominteger)) (boolean_rot boolean_not boolean_and print_integer exec_noop boolean_shove exec_shove (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) exec_yank) (integer_flush integer_gt) in2) ()) ())
Zero cases best errors: [1 1 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 294 322 296 218 322 322 322 217 87)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (296 294 322 296 218 322 322 322 217 87)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_empty})
Best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) boolean_rot boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and boolean_frominteger) boolean_rot boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_dup (boolean_swap integer_add in4 exec_shove (integer_shove integer_pop integer_flush) integer_gt boolean_rot exec_do*times (in4 integer_dup_items exec_pop () exec_rot (exec_k_when_autoconstructing (exec_noop integer_gt integer_empty) ()) () ()))) ()))
Errors: [1 1 0 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 41
Size: 56
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.304
Median total errors in population: 7
Error averages by case: (0.704 0.706 0.678 0.704 0.782 0.678 0.678 0.678 0.783 0.913)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.69
Average program size in population (points): 44.256
Average percent parens in population: 0.258
Minimum age in population: 10.5
Maximum age in population: 15.3203125
Average age in population: 13.44484375
Median age in population: 13.51953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3705222
--- Timings ---
Current time: 1559584169040 milliseconds
Total Time:          26.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.4 seconds, 68.8%
Fitness Testing:      5.5 seconds, 20.8%
Report:               2.7 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: 96                 
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 25                 
Correct output: 49                  | Program output: 100                
Correct output: 14                  | Program output: 14                 
Correct output: 31                  | Program output: 100                
Correct output: 46                  | Program output: 60                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 24                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 71                 
Correct output: 35                  | Program output: 93                 
Correct output: 11                  | Program output: 72                 
Correct output: 10                  | Program output: 64                 
Correct output: 71                  | Program output: 95                 
Correct output: 21                  | Program output: 68                 
Correct output: 13                  | Program output: 69                 
Correct output: 41                  | Program output: 53                 
Correct output: 18                  | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 46                 
Correct output: 8                   | Program output: 37                 
Correct output: 7                   | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -4                 
Correct output: -75                 | Program output: 57                 
Correct output: -76                 | Program output: -27                
Correct output: -87                 | Program output: -66                
Correct output: 0                   | Program output: 45                 
Correct output: -49                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 32                 
Correct output: -39                 | Program output: 16                 
Correct output: -82                 | Program output: -59                
Correct output: -85                 | Program output: -22                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -7                 
Correct output: -56                 | Program output: 80                 
Correct output: -95                 | Program output: -35                
Correct output: -96                 | Program output: 31                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: 53                 
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: 64                 
Correct output: -88                 | Program output: 99                 
Correct output: -81                 | Program output: -44                
Correct output: -52                 | Program output: 59                 
Correct output: -44                 | Program output: -18                
Correct output: -97                 | Program output: -30                
Correct output: -96                 | Program output: 59                 
Correct output: -46                 | Program output: 8                  
Correct output: -56                 | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: 100                
Correct output: -75                 | Program output: 38                 
Correct output: -9                  | Program output: 83                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 49                 
Correct output: -56                 | Program output: -6                 
Correct output: -88                 | Program output: 36                 
Correct output: -10                 | Program output: 54                 
Correct output: -38                 | Program output: 33                 
Correct output: -43                 | Program output: 79                 
Correct output: -81                 | Program output: 45                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: 43                 
Correct output: -65                 | Program output: 58                 
Correct output: -35                 | Program output: 70                 
Correct output: -15                 | Program output: 11                 
Correct output: -76                 | Program output: -43                
Correct output: 20                  | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: 87                 
Correct output: 1                   | Program output: 6                  
Correct output: -65                 | Program output: 60                 
Correct output: -7                  | Program output: 57                 
Correct output: -88                 | Program output: -4                 
Correct output: -87                 | Program output: -51                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -27                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove in4 integer_eq exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_eq integer_fromboolean exec_k (integer_lt boolean_dup_times) (exec_yank) integer_flush integer_gt) (in2) ()) ())) ())
Lexicase best errors: [1 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove in4 integer_eq exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_eq integer_fromboolean exec_k (integer_lt boolean_dup_times) (exec_yank) integer_flush integer_gt) (in2) ()) ())) ())
Zero cases best errors: [1 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 91 186 361 361 92 451 92 92 262)
Population mean number of elite cases: 2.24
Count of perfect (error zero) individuals by case: (257 91 186 361 361 92 451 92 92 262)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup})
Best program: (print_integer integer_dup_items exec_if (boolean_frominteger exec_rot (in4 integer_eq exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_flush) (integer_gt) (boolean_rot exec_do*times (in4 integer_dup_items exec_pop ()) integer_max integer_div exec_noop integer_gt integer_yankdup)) ())) () ()) ())
Errors: [1 0 1 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 28
Size: 43
Percent parens: 0.349
--- Population Statistics ---
Average total errors in population: 7.755
Median total errors in population: 8
Error averages by case: (0.743 0.909 0.814 0.639 0.639 0.908 0.549 0.908 0.908 0.738)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.341
Average program size in population (points): 43.676
Average percent parens in population: 0.256
Minimum age in population: 11.875
Maximum age in population: 16.955078125
Average age in population: 14.979529296875
Median age in population: 15.0400390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4067353
--- Timings ---
Current time: 1559584171742 milliseconds
Total Time:          29.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.5 seconds, 69.3%
Fitness Testing:      5.9 seconds, 20.1%
Report:               3.0 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: 61                 
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) boolean_rot boolean_not boolean_and integer_inc boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (boolean_shove exec_shove (boolean_invert_second_then_and exec_k (integer_sub boolean_swap integer_add in4 exec_shove () integer_shove integer_pop integer_flush) (integer_gt) boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) exec_yank) (integer_flush integer_gt) in2))
Lexicase best errors: [1 0 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 47
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) boolean_rot boolean_not boolean_and integer_inc boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (boolean_shove exec_shove (boolean_invert_second_then_and exec_k (integer_sub boolean_swap integer_add in4 exec_shove () integer_shove integer_pop integer_flush) (integer_gt) boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) exec_yank) (integer_flush integer_gt) in2))
Zero cases best errors: [1 0 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 209 209 208 274 274 323 328 114 114)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (274 209 209 208 274 274 323 328 114 114)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup})
Best program: (in3 exec_y_when_autoconstructing (boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank boolean_swap boolean_invert_second_then_and exec_k (exec_yank boolean_swap integer_add in4 exec_shove () integer_shove integer_pop integer_flush) (integer_gt) boolean_rot exec_do*times (in4 integer_dup_items exec_pop () integer_max exec_k_when_autoconstructing (exec_noop integer_gt integer_yankdup) ())) ())))
Errors: [1 0 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 32
Size: 44
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.673
Median total errors in population: 7
Error averages by case: (0.726 0.791 0.791 0.792 0.726 0.726 0.677 0.672 0.886 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.342
Average program size in population (points): 42.876
Average percent parens in population: 0.268
Minimum age in population: 13.34375
Maximum age in population: 18.6884765625
Average age in population: 16.455984375
Median age in population: 16.5546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4400189
--- Timings ---
Current time: 1559584174380 milliseconds
Total Time:          32.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.5 seconds, 70.0%
Fitness Testing:      6.3 seconds, 19.6%
Report:               3.3 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 39                 
Correct output: 31                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 93                 
Correct output: 0                   | Program output: 86                 
Correct output: 13                  | Program output: 37                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 87                 
Correct output: 17                  | Program output: 78                 
Correct output: 4                   | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 46                 
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -46                
Correct output: -76                 | Program output: 33                 
Correct output: -87                 | Program output: 13                 
Correct output: 0                   | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: 27                 
Correct output: -79                 | Program output: 21                 
Correct output: -39                 | Program output: 0                  
Correct output: -82                 | Program output: 35                 
Correct output: -85                 | Program output: 68                 
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 3                  
Correct output: -51                 | Program output: 81                 
Correct output: -91                 | Program output: 6                  
Correct output: -30                 | Program output: 84                 
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: 10                 
Correct output: -44                 | Program output: 34                 
Correct output: -97                 | Program output: 31                 
Correct output: -96                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 67                 
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: 72                 
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: 84                 
Correct output: -41                 | Program output: -34                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: 20                 
Correct output: -10                 | Program output: 93                 
Correct output: -38                 | Program output: 89                 
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 49                 
Correct output: -87                 | Program output: 99                 
Correct output: -65                 | Program output: -30                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 100                
Correct output: -88                 | Program output: -23                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 94                 
Correct output: -65                 | Program output: -24                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: 56                 
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_dup_times exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt in2)) ()))) ())
Lexicase best errors: [0 1 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_dup_times exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt in2)) ()))) ())
Zero cases best errors: [0 1 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (281 93 500 331 284 280 93 282 282 216)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (281 93 500 331 284 280 93 282 282 216)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove integer_swap boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_dup_times exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times exec_s_when_autoconstructing (exec_do*count (integer_lt boolean_dup_times) exec_yank) (integer_flush integer_gt) (in2)) () ()) ()))) ())
Errors: [0 1 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 28
Size: 43
Percent parens: 0.349
--- Population Statistics ---
Average total errors in population: 7.358
Median total errors in population: 8
Error averages by case: (0.719 0.907 0.5 0.669 0.716 0.72 0.907 0.718 0.718 0.784)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.79
Average program size in population (points): 41.586
Average percent parens in population: 0.257
Minimum age in population: 14.34375
Maximum age in population: 19.947265625
Average age in population: 17.9259150390625
Median age in population: 18.005859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4736274
--- Timings ---
Current time: 1559584177416 milliseconds
Total Time:          35.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.9 seconds, 70.9%
Fitness Testing:      6.6 seconds, 18.9%
Report:               3.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: 61                 
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) boolean_rot boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank) (exec_pop (boolean_xor integer_lt exec_yank) integer_flush integer_gt in2)))
Lexicase best errors: [1 1 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) boolean_rot boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank) (exec_pop (boolean_xor integer_lt exec_yank) integer_flush integer_gt in2)))
Zero cases best errors: [1 1 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 544 537 86 85 190 536 86 85 85)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (99 544 537 86 85 190 536 86 85 85)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap () (exec_dup_items in3 integer_lte boolean_shove boolean_not boolean_and print_integer boolean_invert_first_then_and boolean_shove exec_shove (boolean_invert_second_then_and exec_k (integer_pop boolean_swap boolean_xor integer_lt boolean_dup_times) (exec_yank) integer_flush integer_gt) in2))
Errors: [1 1 1 0 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 28
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.667
Median total errors in population: 7
Error averages by case: (0.901 0.456 0.463 0.914 0.915 0.81 0.464 0.914 0.915 0.915)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.884
Average program size in population (points): 40.912
Average percent parens in population: 0.268
Minimum age in population: 15.90625
Maximum age in population: 21.489013671875
Average age in population: 19.40876171875
Median age in population: 19.4970703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5062062
--- Timings ---
Current time: 1559584180526 milliseconds
Total Time:          38.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.5 seconds, 71.8%
Fitness Testing:      7.0 seconds, 18.2%
Report:               3.7 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: 61                 
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s})
Lexicase best program: (exec_swap (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger)) (boolean_rot boolean_invert_second_then_and exec_k (in2 boolean_swap integer_add in4 exec_shove () integer_shove integer_pop exec_do*while () integer_gt boolean_rot exec_do*times (in4 integer_dup_items exec_pop ()) integer_max exec_k_when_autoconstructing (exec_noop in2) (exec_do*while (exec_noop print_boolean) exec_pop () boolean_invert_second_then_and in3) exec_rot () (boolean_dup_items boolean_xor print_boolean exec_while (integer_dup_items boolean_dup_items print_integer exec_s () () ())) ()) ()))
Lexicase best errors: [0 1 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s})
Zero cases best program: (exec_swap (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger)) (boolean_rot boolean_invert_second_then_and exec_k (in2 boolean_swap integer_add in4 exec_shove () integer_shove integer_pop exec_do*while () integer_gt boolean_rot exec_do*times (in4 integer_dup_items exec_pop ()) integer_max exec_k_when_autoconstructing (exec_noop in2) (exec_do*while (exec_noop print_boolean) exec_pop () boolean_invert_second_then_and in3) exec_rot () (boolean_dup_items boolean_xor print_boolean exec_while (integer_dup_items boolean_dup_items print_integer exec_s () () ())) ()) ()))
Zero cases best errors: [0 1 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (463 90 463 90 276 463 465 277 466 277)
Population mean number of elite cases: 3.33
Count of perfect (error zero) individuals by case: (463 90 463 90 276 463 465 277 466 277)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_970} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_156} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (print_integer integer_dup_items exec_if (boolean_frominteger exec_rot (integer_dec boolean_eq exec_stackdepth tagged_970 exec_dup_items in3 integer_lte boolean_shove boolean_pop boolean_invert_first_then_and print_integer tagged_156 integer_stackdepth integer_min exec_k_when_autoconstructing () (boolean_yank integer_mult exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2)) () ()) ())
Errors: [0 1 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 46
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 6.67
Median total errors in population: 6
Error averages by case: (0.537 0.91 0.537 0.91 0.724 0.537 0.535 0.723 0.534 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.955
Average program size in population (points): 40.213
Average percent parens in population: 0.251
Minimum age in population: 17.8515625
Maximum age in population: 22.953369140625
Average age in population: 20.87759387207031
Median age in population: 20.9532470703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5383115
--- Timings ---
Current time: 1559584183152 milliseconds
Total Time:          40.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.5 seconds, 72.2%
Fitness Testing:      7.3 seconds, 17.9%
Report:               3.9 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: 61                 
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup})
Lexicase best program: (in3 exec_y_when_autoconstructing () print_integer boolean_frominteger boolean_rot boolean_not print_integer boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank boolean_swap integer_add in4 in4) (integer_shove integer_pop integer_flush) integer_gt) boolean_rot exec_do*times (in4 integer_dup_items exec_pop () integer_max exec_k_when_autoconstructing (exec_noop integer_gt integer_yankdup) ()))
Lexicase best errors: [0 0 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup})
Zero cases best program: (in3 exec_y_when_autoconstructing () print_integer boolean_frominteger boolean_rot boolean_not print_integer boolean_shove exec_shove (boolean_invert_second_then_and exec_k (exec_yank boolean_swap integer_add in4 in4) (integer_shove integer_pop integer_flush) integer_gt) boolean_rot exec_do*times (in4 integer_dup_items exec_pop () integer_max exec_k_when_autoconstructing (exec_noop integer_gt integer_yankdup) ()))
Zero cases best errors: [0 0 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (919 372 210 707 372 209 1000 330 372 372)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (919 372 210 707 372 209 0 330 372 372)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (in3 exec_y_when_autoconstructing (print_integer boolean_frominteger) integer_rot boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank integer_flush integer_gt) (in2)) ()) () ()) ())
Errors: [0 0 1 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 41
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 6.137
Median total errors in population: 7
Error averages by case: (0.081 0.628 0.79 0.293 0.628 0.791 1.0 0.67 0.628 0.628)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 29.617
Average program size in population (points): 40.262
Average percent parens in population: 0.260
Minimum age in population: 18.8515625
Maximum age in population: 24.35015869140625
Average age in population: 22.34410284423828
Median age in population: 22.405517578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5699432
--- Timings ---
Current time: 1559584185831 milliseconds
Total Time:          43.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.6 seconds, 72.5%
Fitness Testing:      7.7 seconds, 17.5%
Report:               4.3 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 39                 
Correct output: 31                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 93                 
Correct output: 0                   | Program output: 86                 
Correct output: 13                  | Program output: 37                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 87                 
Correct output: 17                  | Program output: 78                 
Correct output: 4                   | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 46                 
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -46                
Correct output: -76                 | Program output: 33                 
Correct output: -87                 | Program output: 13                 
Correct output: 0                   | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: 27                 
Correct output: -79                 | Program output: 21                 
Correct output: -39                 | Program output: 0                  
Correct output: -82                 | Program output: 35                 
Correct output: -85                 | Program output: 68                 
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 3                  
Correct output: -51                 | Program output: 81                 
Correct output: -91                 | Program output: 6                  
Correct output: -30                 | Program output: 84                 
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: 10                 
Correct output: -44                 | Program output: 34                 
Correct output: -97                 | Program output: 31                 
Correct output: -96                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 67                 
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: 72                 
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: 84                 
Correct output: -41                 | Program output: -34                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: 20                 
Correct output: -10                 | Program output: 93                 
Correct output: -38                 | Program output: 89                 
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 49                 
Correct output: -87                 | Program output: 99                 
Correct output: -65                 | Program output: -30                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 100                
Correct output: -88                 | Program output: -23                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 94                 
Correct output: -65                 | Program output: -24                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: 56                 
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (boolean_dup_items integer_dup_items exec_if (integer_eq exec_rot (integer_dec integer_lt boolean_yank boolean_yank in2) (exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times boolean_dup boolean_yank integer_div integer_fromboolean boolean_xor) (integer_lt boolean_dup_times) (exec_yank integer_flush integer_gt)) (in2))) ()) ())
Lexicase best errors: [1 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (boolean_dup_items integer_dup_items exec_if (integer_eq exec_rot (integer_dec integer_lt boolean_yank boolean_yank in2) (exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times boolean_dup boolean_yank integer_div integer_fromboolean boolean_xor) (integer_lt boolean_dup_times) (exec_yank integer_flush integer_gt)) (in2))) ()) ())
Zero cases best errors: [1 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (562 137 137 561 1000 1000 216 137 137 561)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (562 137 137 561 0 0 216 137 137 561)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times})
Best program: (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 print_integer integer_gt integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean boolean_xor integer_lt boolean_dup_times) () ()) ()) () ()) ()))
Errors: [1 0 0 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 7.552
Median total errors in population: 7
Error averages by case: (0.438 0.863 0.863 0.439 1.0 1.0 0.784 0.863 0.863 0.439)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 29.291
Average program size in population (points): 39.542
Average percent parens in population: 0.254
Minimum age in population: 19.8515625
Maximum age in population: 25.75778198242188
Average age in population: 23.82344454956055
Median age in population: 23.91226196289062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6010553
--- Timings ---
Current time: 1559584188548 milliseconds
Total Time:          46.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.8 seconds, 72.9%
Fitness Testing:      8.0 seconds, 17.2%
Report:               4.5 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: -63                
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 33                 
Correct output: 49                  | Program output: 75                 
Correct output: 14                  | Program output: 50                 
Correct output: 31                  | Program output: 88                 
Correct output: 46                  | Program output: 85                 
Correct output: 55                  | Program output: 69                 
Correct output: 0                   | Program output: 32                 
Correct output: 13                  | Program output: 60                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 92                 
Correct output: 11                  | Program output: 37                 
Correct output: 10                  | Program output: 79                 
Correct output: 71                  | Program output: 71                 
Correct output: 21                  | Program output: 85                 
Correct output: 13                  | Program output: 13                 
Correct output: 41                  | Program output: 56                 
Correct output: 18                  | Program output: 58                 
Correct output: 17                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 91                 
Correct output: 7                   | Program output: 79                 
Correct output: 18                  | Program output: 92                 
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 19                 
Correct output: 0                   | Program output: 69                 
Correct output: -49                 | Program output: -13                
Correct output: -77                 | Program output: -51                
Correct output: -79                 | Program output: -21                
Correct output: -39                 | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -21                
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -64                
Correct output: -56                 | Program output: -52                
Correct output: -95                 | Program output: -54                
Correct output: -96                 | Program output: -46                
Correct output: -51                 | Program output: 39                 
Correct output: -91                 | Program output: 50                 
Correct output: -30                 | Program output: -5                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: 93                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: 91                 
Correct output: -44                 | Program output: 77                 
Correct output: -97                 | Program output: -61                
Correct output: -96                 | Program output: -66                
Correct output: -46                 | Program output: -25                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: -74                
Correct output: -96                 | Program output: 7                  
Correct output: -75                 | Program output: 8                  
Correct output: -9                  | Program output: 37                 
Correct output: -95                 | Program output: 30                 
Correct output: -41                 | Program output: 25                 
Correct output: -56                 | Program output: 61                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -38                 | Program output: -30                
Correct output: -43                 | Program output: 44                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -72                
Correct output: 11                  | Program output: 99                 
Correct output: -87                 | Program output: 8                  
Correct output: -65                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -15                 | Program output: 53                 
Correct output: -76                 | Program output: -70                
Correct output: 20                  | Program output: 30                 
Correct output: -88                 | Program output: -58                
Correct output: -97                 | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: -65                 | Program output: -44                
Correct output: -7                  | Program output: 34                 
Correct output: -88                 | Program output: 52                 
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 14                 
Correct output: -32                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_970} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1})
Lexicase best program: (print_integer integer_dup_items exec_if (boolean_frominteger exec_rot (integer_dec boolean_eq exec_stackdepth tagged_970 exec_dup_items boolean_flush integer_lte boolean_shove boolean_empty boolean_invert_first_then_and print_integer) (integer_eq exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (boolean_yankdup boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean exec_noop integer_lt boolean_dup_times) (integer_rot) integer_flush boolean_flush print_boolean boolean_frominteger exec_dup_items integer_mult exec_do*range (in1))) ()) ())
Lexicase best errors: [1 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_970} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1})
Zero cases best program: (print_integer integer_dup_items exec_if (boolean_frominteger exec_rot (integer_dec boolean_eq exec_stackdepth tagged_970 exec_dup_items boolean_flush integer_lte boolean_shove boolean_empty boolean_invert_first_then_and print_integer) (integer_eq exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (boolean_yankdup boolean_dup_times integer_min integer_empty boolean_empty integer_fromboolean exec_noop integer_lt boolean_dup_times) (integer_rot) integer_flush boolean_flush print_boolean boolean_frominteger exec_dup_items integer_mult exec_do*range (in1))) ()) ())
Zero cases best errors: [1 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (364 367 2 444 114 2 446 365 2 114)
Population mean number of elite cases: 2.22
Count of perfect (error zero) individuals by case: (364 367 2 444 114 2 446 365 2 114)
Population mean number of perfect (error zero) cases: 2.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items boolean_swap integer_pop exec_do*count (integer_lt boolean_yank in2 in2 in4 integer_lt exec_swap () (in1 print_integer exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty boolean_eq integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()))) ())
Errors: [1 0 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 38
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 7.78
Median total errors in population: 8
Error averages by case: (0.636 0.633 0.998 0.556 0.886 0.998 0.554 0.635 0.998 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.331
Average program size in population (points): 39.813
Average percent parens in population: 0.258
Minimum age in population: 22.13916015625
Maximum age in population: 27.09373474121094
Average age in population: 25.30750105285645
Median age in population: 25.40011596679688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6336369
--- Timings ---
Current time: 1559584191053 milliseconds
Total Time:          48.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.7 seconds, 73.1%
Fitness Testing:      8.3 seconds, 17.0%
Report:               4.7 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 502
Test mean error for best: 0.50200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 78                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 33                 
Correct output: -87                 | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: 27                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 35                 
Correct output: -85                 | Program output: 68                 
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: 81                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 84                 
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: 34                 
Correct output: -97                 | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 67                 
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: 84                 
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 49                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 70                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: -23                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: 56                 
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank in2 in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) integer_flush integer_gt) (in2))) ()) ()))
Lexicase best errors: [1 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 60
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank in2 in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) integer_flush integer_gt) (in2))) ()) ()))
Zero cases best errors: [1 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 60
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (286 126 283 249 284 284 183 184 286 286)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (286 126 283 249 284 284 183 184 286 286)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank in2 in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) integer_flush integer_gt) (in2))) ()) ()))
Errors: [1 0 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 42
Size: 60
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.549
Median total errors in population: 7
Error averages by case: (0.714 0.874 0.717 0.751 0.716 0.716 0.817 0.816 0.714 0.714)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.434
Average program size in population (points): 42.561
Average percent parens in population: 0.262
Minimum age in population: 23.5189208984375
Maximum age in population: 28.69544982910156
Average age in population: 26.83487887573242
Median age in population: 26.85670852661133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6716109
--- Timings ---
Current time: 1559584193643 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.6 seconds, 73.3%
Fitness Testing:      8.7 seconds, 16.9%
Report:               4.9 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: 61                 
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1})
Lexicase best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank exec_yank in2 in4 boolean_invert_first_then_and exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) integer_flush integer_rot) (boolean_pop boolean_flush print_boolean boolean_frominteger exec_dup_items integer_mult exec_do*range (in1)))) ()) ()))
Lexicase best errors: [1 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1})
Zero cases best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank exec_yank in2 in4 boolean_invert_first_then_and exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) integer_flush integer_rot) (boolean_pop boolean_flush print_boolean boolean_frominteger exec_dup_items integer_mult exec_do*range (in1)))) ()) ()))
Zero cases best errors: [1 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (435 417 421 15 410 196 420 409 417 20)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (435 417 421 15 410 196 420 409 417 20)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove print_integer integer_dup_items exec_if (in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank in2 in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup boolean_xor integer_lt boolean_dup_times) exec_yank) (integer_flush integer_gt) in2) ())) ())
Errors: [1 0 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.84
Median total errors in population: 9
Error averages by case: (0.565 0.583 0.579 0.985 0.59 0.804 0.58 0.591 0.583 0.98)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.661
Average program size in population (points): 51.836
Average percent parens in population: 0.292
Minimum age in population: 25.41796875
Maximum age in population: 30.17980575561523
Average age in population: 28.16956828689575
Median age in population: 28.35617065429688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 260
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 260
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7126968
--- Timings ---
Current time: 1559584196981 milliseconds
Total Time:          54.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.3 seconds, 73.6%
Fitness Testing:      9.1 seconds, 16.7%
Report:               5.2 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 585
Test mean error for best: 0.58500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: 96                 
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 25                 
Correct output: 49                  | Program output: 100                
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 60                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 71                 
Correct output: 35                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 64                 
Correct output: 71                  | Program output: 95                 
Correct output: 21                  | Program output: 68                 
Correct output: 13                  | Program output: 69                 
Correct output: 41                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -4                 
Correct output: -75                 | Program output: 57                 
Correct output: -76                 | Program output: -27                
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: 16                 
Correct output: -82                 | Program output: -59                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: -7                 
Correct output: -56                 | Program output: 80                 
Correct output: -95                 | Program output: -35                
Correct output: -96                 | Program output: 31                 
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: 64                 
Correct output: -88                 | Program output: 99                 
Correct output: -81                 | Program output: -44                
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 59                 
Correct output: -46                 | Program output: 8                  
Correct output: -56                 | Program output: 80                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 83                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: 49                 
Correct output: -56                 | Program output: -6                 
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 79                 
Correct output: -81                 | Program output: 45                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: 58                 
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: 11                 
Correct output: -76                 | Program output: -43                
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: 87                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: 60                 
Correct output: -7                  | Program output: 57                 
Correct output: -88                 | Program output: -4                 
Correct output: -87                 | Program output: -51                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: -27                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank in2 in2 exec_y_when_autoconstructing (integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) integer_flush integer_gt) (in2))) ()) ())))
Lexicase best errors: [1 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 61
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank in2 in2 exec_y_when_autoconstructing (integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) integer_flush integer_gt) (in2))) ()) ())))
Zero cases best errors: [1 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 61
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (330 265 476 3 678 3 678 144 3 3)
Population mean number of elite cases: 2.58
Count of perfect (error zero) individuals by case: (330 265 476 3 678 3 678 144 3 3)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty})
Best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank in2 in2 exec_y_when_autoconstructing (integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (boolean_dup_times integer_min integer_empty) ()) ())) ()) ())))
Errors: [1 0 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 33
Size: 52
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 7.417
Median total errors in population: 7
Error averages by case: (0.67 0.735 0.524 0.997 0.322 0.997 0.322 0.856 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.646
Average program size in population (points): 58.442
Average percent parens in population: 0.285
Minimum age in population: 28.27643585205078
Maximum age in population: 31.32975387573242
Average age in population: 29.87738171768188
Median age in population: 29.89891815185547
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.005
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7581477
--- Timings ---
Current time: 1559584199720 milliseconds
Total Time:          57.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.2 seconds, 73.5%
Fitness Testing:      9.6 seconds, 16.7%
Report:               5.5 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 500
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 78                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 33                 
Correct output: -87                 | Program output: 13                 
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: 27                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 35                 
Correct output: -85                 | Program output: 68                 
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: 81                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 84                 
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: 34                 
Correct output: -97                 | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 67                 
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: 84                 
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 49                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: -23                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: 56                 
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1})
Lexicase best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) integer_flush integer_rot) (boolean_pop boolean_flush print_boolean boolean_frominteger exec_dup_items integer_mult exec_do*range (in1)))) ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 59
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1})
Zero cases best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) integer_flush integer_rot) (boolean_pop boolean_flush print_boolean boolean_frominteger exec_dup_items integer_mult exec_do*range (in1)))) ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 59
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 443 116 103 31 99 871 330 98 245)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (230 443 116 103 31 99 871 330 98 245)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank boolean_dup_items in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ())) ()) ()))
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 42
Size: 60
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.434
Median total errors in population: 8
Error averages by case: (0.77 0.557 0.884 0.897 0.969 0.901 0.129 0.67 0.902 0.755)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.569
Average program size in population (points): 58.577
Average percent parens in population: 0.268
Minimum age in population: 29.35617065429688
Maximum age in population: 33.22547054290771
Average age in population: 31.55032565402985
Median age in population: 31.60701417922974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.547
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.009
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8077700
--- Timings ---
Current time: 1559584202488 milliseconds
Total Time:          60.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.2 seconds, 73.4%
Fitness Testing:     10.1 seconds, 16.8%
Report:               5.8 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 304
Test mean error for best: 0.30400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: -27                
Correct output: -87                 | Program output: -66                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: -59                
Correct output: -85                 | Program output: -22                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -44                
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -18                
Correct output: -97                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ())) ()) ()))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 60
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ())) ()) ()))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 60
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (619 623 15 12 477 619 619 17 186 186)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (619 623 15 12 477 619 619 17 186 186)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ())) ()) ()))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 42
Size: 60
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.627
Median total errors in population: 5
Error averages by case: (0.381 0.377 0.985 0.988 0.523 0.381 0.381 0.983 0.814 0.814)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.754
Average program size in population (points): 63.291
Average percent parens in population: 0.308
Minimum age in population: 30.84956645965576
Maximum age in population: 35.22547054290771
Average age in population: 33.38460452795029
Median age in population: 33.34345674514771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8525845
--- Timings ---
Current time: 1559584205262 milliseconds
Total Time:          62.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.2 seconds, 73.4%
Fitness Testing:     10.6 seconds, 16.8%
Report:               6.1 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 304
Test mean error for best: 0.30400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: -27                
Correct output: -87                 | Program output: -66                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: -59                
Correct output: -85                 | Program output: -22                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -44                
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -18                
Correct output: -97                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ())) ()) ()))
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 60
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ())) ()) ()))
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 60
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (751 873 1 802 1 751 590 575 519 671)
Population mean number of elite cases: 5.53
Count of perfect (error zero) individuals by case: (751 873 1 802 1 751 590 575 519 671)
Population mean number of perfect (error zero) cases: 5.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 in2 in4 boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ())) ()) ()))
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 42
Size: 60
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 4.466
Median total errors in population: 4
Error averages by case: (0.249 0.127 0.999 0.198 0.999 0.249 0.41 0.425 0.481 0.329)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.866
Average program size in population (points): 62.968
Average percent parens in population: 0.303
Minimum age in population: 33.77059841156006
Maximum age in population: 36.22547054290771
Average age in population: 35.11301100373268
Median age in population: 35.26564526557922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 340
Genome diversity (% unique genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 345
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.009
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8973030
--- Timings ---
Current time: 1559584208071 milliseconds
Total Time:          65.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.2 seconds, 73.3%
Fitness Testing:     11.0 seconds, 16.8%
Report:               6.4 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 207
Test mean error for best: 0.20700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 14                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: -27                
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: -59                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -44                
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 6                  
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank integer_min in4 boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2)) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 59
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank integer_min in4 boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2)) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 59
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (652 882 633 642 11 22 639 893 21 206)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (652 882 633 642 11 22 639 893 21 206)
Population mean number of perfect (error zero) cases: 4.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank integer_min in4 boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2)) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 43
Size: 59
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 5.399
Median total errors in population: 4
Error averages by case: (0.348 0.118 0.367 0.358 0.989 0.978 0.361 0.107 0.979 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.284
Average program size in population (points): 60.418
Average percent parens in population: 0.300
Minimum age in population: 35.26564526557922
Maximum age in population: 37.87688672542572
Average age in population: 36.55348770904541
Median age in population: 36.76069211959839
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 283
Genome diversity (% unique genomes):	 0.545
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 291
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9413661
--- Timings ---
Current time: 1559584210793 milliseconds
Total Time:          68.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.1 seconds, 73.2%
Fitness Testing:     11.5 seconds, 16.8%
Report:               6.8 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 207
Test mean error for best: 0.20700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 14                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: -27                
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: -59                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -44                
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 6                  
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank integer_min in4 boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2)) ()) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 59
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank integer_min in4 boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_fromboolean boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2)) ()) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 59
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (717 119 720 717 716 720 720 699 737 717)
Population mean number of elite cases: 6.58
Count of perfect (error zero) individuals by case: (717 119 720 717 716 720 720 699 737 717)
Population mean number of perfect (error zero) cases: 6.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank integer_min in4 boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_when () boolean_dup print_integer integer_sub integer_fromboolean boolean_pop exec_rot (boolean_dup_times in4 integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2) ()) ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 43
Size: 58
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 3.418
Median total errors in population: 1
Error averages by case: (0.283 0.881 0.28 0.283 0.284 0.28 0.28 0.301 0.263 0.283)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.771
Average program size in population (points): 59.022
Average percent parens in population: 0.275
Minimum age in population: 36.76069211959839
Maximum age in population: 39.01069211959839
Average age in population: 37.75018089610338
Median age in population: 37.76069211959839
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 452
Genome diversity (% unique genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 459
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.01
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9853920
--- Timings ---
Current time: 1559584213505 milliseconds
Total Time:          71.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.0 seconds, 73.1%
Fitness Testing:     12.0 seconds, 16.8%
Report:               7.1 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 166
Test mean error for best: 0.16600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 71                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -66                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -22                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -18                
Correct output: -97                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2)) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 61
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2)) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 61
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (681 683 126 894 684 126 773 645 835 817)
Population mean number of elite cases: 6.26
Count of perfect (error zero) individuals by case: (681 683 126 894 684 126 773 645 835 817)
Population mean number of perfect (error zero) cases: 6.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2)) ()) ()))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 45
Size: 61
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 3.736
Median total errors in population: 2
Error averages by case: (0.319 0.317 0.874 0.106 0.316 0.874 0.227 0.355 0.165 0.183)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.045
Average program size in population (points): 59.086
Average percent parens in population: 0.271
Minimum age in population: 38.01069211959839
Maximum age in population: 40.51503559947014
Average age in population: 39.32972561967373
Median age in population: 39.26069211959839
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 284
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 288
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.01
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 10300417
--- Timings ---
Current time: 1559584216247 milliseconds
Total Time:          73.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.0 seconds, 73.1%
Fitness Testing:     12.4 seconds, 16.8%
Report:               7.4 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 14                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 71                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 1                  
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Lexicase best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank integer_min in1 in4 boolean_yank integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2)) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 62
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Zero cases best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank integer_min in1 in4 boolean_yank integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_fromboolean boolean_xor integer_lt boolean_dup_times) (exec_yank) (integer_flush integer_gt) in2)) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 62
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (532 269 763 909 767 299 765 540 780 803)
Population mean number of elite cases: 6.43
Count of perfect (error zero) individuals by case: (532 269 763 909 767 299 765 540 780 803)
Population mean number of perfect (error zero) cases: 6.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction in2})
Best program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 43
Size: 59
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 3.573
Median total errors in population: 2
Error averages by case: (0.468 0.731 0.237 0.091 0.233 0.701 0.235 0.46 0.22 0.197)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.385
Average program size in population (points): 60.417
Average percent parens in population: 0.265
Minimum age in population: 39.26069211959839
Maximum age in population: 42.38786385953426
Average age in population: 41.41776837237179
Median age in population: 41.26069211959839
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 337
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 342
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.011
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10753148
--- Timings ---
Current time: 1559584219030 milliseconds
Total Time:          76.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.0 seconds, 73.0%
Fitness Testing:     12.9 seconds, 16.8%
Report:               7.7 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 27
Successful program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 59


Auto-simplifying with starting size: 59
step: 0
program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 500
program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 1000
program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 1500
program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 2000
program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 2500
program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 3000
program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 3500
program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 4000
program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 4500
program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 5000
program: (exec_swap (integer_shove exec_dup_items in3) (exec_y_when_autoconstructing (print_integer boolean_frominteger)) in2 boolean_yank in1 in4 boolean_yank integer_min boolean_yank integer_min in2 integer_min boolean_yank integer_min in2 in4 integer_yankdup exec_swap () (boolean_dup boolean_flush integer_sub integer_fromboolean exec_k_when_autoconstructing (exec_rot () (integer_yankdup exec_swap () (boolean_dup print_integer integer_sub integer_yankdup boolean_pop exec_rot (boolean_dup_times integer_min integer_empty integer_dup integer_gt) (in2) ())) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 14                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 71                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 1                  
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -32                
;;******************************
