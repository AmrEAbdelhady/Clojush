Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[21 21 20 21] 20] [[15 86 86 86] 15] [[98 97 97 97] 97] [[15 44 15 15] 15] [[-85 -85 -59 -85] -85] [[32 32 32 -38] -38] [[0 91 0 0] 0] [[-73 -73 -74 -73] -74] [[-12 23 23 23] -12] [[89 24 89 89] 24] [(30 30 30 30) 30] [(44 44 44 44) 44] [(33 33 33 33) 33] [(33 33 33 33) 33] [(-93 -93 -93 -93) -93] [(58 64 72 2) 2] [(80 51 60 51) 51] [(37 96 97 70) 37] [(17 53 31 92) 17] [(12 10 30 83) 10] [(62 50 19 49) 19] [(36 61 56 38) 36] [(48 72 49 66) 48] [(60 83 90 21) 21] [(85 8 17 97) 8] [(34 18 15 15) 15] [(0 96 97 49) 0] [(30 67 38 78) 30] [(61 70 5 88) 5] [(23 87 100 94) 23] [(94 34 86 78) 34] [(28 43 5 47) 5] [(39 35 80 63) 35] [(34 39 66 95) 34] [(80 88 62 98) 62] [(22 62 -4 47) -4] [(-83 -30 4 -21) -83] [(-47 20 -67 -67) -67] [(-20 -23 26 -31) -31] [(-46 63 81 73) -46] [(74 91 -57 -8) -57] [(90 52 -71 -80) -80] [(-95 -50 -60 50) -95] [(24 84 -17 93) -17] [(-38 -30 99 56) -38] [(-28 43 73 32) -28] [(-12 47 19 12) -12] [(-77 48 -59 -47) -77] [(82 -82 -75 11) -82] [(-53 43 -41 -63) -63] [(9 -7 -60 30) -60] [(9 -35 -67 -26) -67] [(63 32 3 21) 3] [(-70 25 46 5) -70] [(-27 44 -2 -32) -32] [(53 -18 63 -90) -90] [(39 71 59 10) 10] [(-34 -23 -83 -54) -83] [(-89 -96 90 0) -96] [(-63 58 -7 99) -63] [(77 -16 47 -39) -39] [(43 72 89 -39) -39] [(-39 3 -84 94) -84] [(13 -26 75 92) -26] [(-50 30 -64 83) -64] [(-89 -100 23 39) -100] [(63 -46 -46 -66) -66] [(66 -75 48 74) -75] [(-45 72 54 -45) -45] [(-57 46 35 72) -57] [(62 66 -11 9) -11] [(-65 -47 5 46) -65] [(12 70 81 10) 10] [(-60 55 31 -87) -87] [(40 -4 49 -77) -77] [(17 -36 -41 88) -41] [(-73 76 2 -31) -73] [(-38 -100 -81 -42) -100] [(47 44 93 -52) -52] [(45 -95 71 9) -95] [(-57 26 83 63) -57] [(66 -60 90 2) -60] [(52 -41 -20 -46) -46] [(-66 -22 70 28) -66] [(23 18 -88 -54) -88] [(-67 -94 -55 87) -94] [(91 -83 52 65) -83] [(-55 24 40 21) -55] [(13 -19 2 -49) -49] [(-76 36 27 11) -76] [(0 83 98 -72) -72] [(-93 42 -19 87) -93] [(-34 5 -54 -43) -54] [(33 89 91 -12) -12] [(-81 -21 -96 -13) -96])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[21 21 20 21] 20]
Train Case:   6 | Input/Output: [[15 86 86 86] 15]
Train Case:   7 | Input/Output: [[98 97 97 97] 97]
Train Case:   8 | Input/Output: [[15 44 15 15] 15]
Train Case:   9 | Input/Output: [[-85 -85 -59 -85] -85]
Train Case:  10 | Input/Output: [[32 32 32 -38] -38]
Train Case:  11 | Input/Output: [[0 91 0 0] 0]
Train Case:  12 | Input/Output: [[-73 -73 -74 -73] -74]
Train Case:  13 | Input/Output: [[-12 23 23 23] -12]
Train Case:  14 | Input/Output: [[89 24 89 89] 24]
Train Case:  15 | Input/Output: [(30 30 30 30) 30]
Train Case:  16 | Input/Output: [(44 44 44 44) 44]
Train Case:  17 | Input/Output: [(33 33 33 33) 33]
Train Case:  18 | Input/Output: [(33 33 33 33) 33]
Train Case:  19 | Input/Output: [(-93 -93 -93 -93) -93]
Train Case:  20 | Input/Output: [(58 64 72 2) 2]
Train Case:  21 | Input/Output: [(80 51 60 51) 51]
Train Case:  22 | Input/Output: [(37 96 97 70) 37]
Train Case:  23 | Input/Output: [(17 53 31 92) 17]
Train Case:  24 | Input/Output: [(12 10 30 83) 10]
Train Case:  25 | Input/Output: [(62 50 19 49) 19]
Train Case:  26 | Input/Output: [(36 61 56 38) 36]
Train Case:  27 | Input/Output: [(48 72 49 66) 48]
Train Case:  28 | Input/Output: [(60 83 90 21) 21]
Train Case:  29 | Input/Output: [(85 8 17 97) 8]
Train Case:  30 | Input/Output: [(34 18 15 15) 15]
Train Case:  31 | Input/Output: [(0 96 97 49) 0]
Train Case:  32 | Input/Output: [(30 67 38 78) 30]
Train Case:  33 | Input/Output: [(61 70 5 88) 5]
Train Case:  34 | Input/Output: [(23 87 100 94) 23]
Train Case:  35 | Input/Output: [(94 34 86 78) 34]
Train Case:  36 | Input/Output: [(28 43 5 47) 5]
Train Case:  37 | Input/Output: [(39 35 80 63) 35]
Train Case:  38 | Input/Output: [(34 39 66 95) 34]
Train Case:  39 | Input/Output: [(80 88 62 98) 62]
Train Case:  40 | Input/Output: [(22 62 -4 47) -4]
Train Case:  41 | Input/Output: [(-83 -30 4 -21) -83]
Train Case:  42 | Input/Output: [(-47 20 -67 -67) -67]
Train Case:  43 | Input/Output: [(-20 -23 26 -31) -31]
Train Case:  44 | Input/Output: [(-46 63 81 73) -46]
Train Case:  45 | Input/Output: [(74 91 -57 -8) -57]
Train Case:  46 | Input/Output: [(90 52 -71 -80) -80]
Train Case:  47 | Input/Output: [(-95 -50 -60 50) -95]
Train Case:  48 | Input/Output: [(24 84 -17 93) -17]
Train Case:  49 | Input/Output: [(-38 -30 99 56) -38]
Train Case:  50 | Input/Output: [(-28 43 73 32) -28]
Train Case:  51 | Input/Output: [(-12 47 19 12) -12]
Train Case:  52 | Input/Output: [(-77 48 -59 -47) -77]
Train Case:  53 | Input/Output: [(82 -82 -75 11) -82]
Train Case:  54 | Input/Output: [(-53 43 -41 -63) -63]
Train Case:  55 | Input/Output: [(9 -7 -60 30) -60]
Train Case:  56 | Input/Output: [(9 -35 -67 -26) -67]
Train Case:  57 | Input/Output: [(63 32 3 21) 3]
Train Case:  58 | Input/Output: [(-70 25 46 5) -70]
Train Case:  59 | Input/Output: [(-27 44 -2 -32) -32]
Train Case:  60 | Input/Output: [(53 -18 63 -90) -90]
Train Case:  61 | Input/Output: [(39 71 59 10) 10]
Train Case:  62 | Input/Output: [(-34 -23 -83 -54) -83]
Train Case:  63 | Input/Output: [(-89 -96 90 0) -96]
Train Case:  64 | Input/Output: [(-63 58 -7 99) -63]
Train Case:  65 | Input/Output: [(77 -16 47 -39) -39]
Train Case:  66 | Input/Output: [(43 72 89 -39) -39]
Train Case:  67 | Input/Output: [(-39 3 -84 94) -84]
Train Case:  68 | Input/Output: [(13 -26 75 92) -26]
Train Case:  69 | Input/Output: [(-50 30 -64 83) -64]
Train Case:  70 | Input/Output: [(-89 -100 23 39) -100]
Train Case:  71 | Input/Output: [(63 -46 -46 -66) -66]
Train Case:  72 | Input/Output: [(66 -75 48 74) -75]
Train Case:  73 | Input/Output: [(-45 72 54 -45) -45]
Train Case:  74 | Input/Output: [(-57 46 35 72) -57]
Train Case:  75 | Input/Output: [(62 66 -11 9) -11]
Train Case:  76 | Input/Output: [(-65 -47 5 46) -65]
Train Case:  77 | Input/Output: [(12 70 81 10) 10]
Train Case:  78 | Input/Output: [(-60 55 31 -87) -87]
Train Case:  79 | Input/Output: [(40 -4 49 -77) -77]
Train Case:  80 | Input/Output: [(17 -36 -41 88) -41]
Train Case:  81 | Input/Output: [(-73 76 2 -31) -73]
Train Case:  82 | Input/Output: [(-38 -100 -81 -42) -100]
Train Case:  83 | Input/Output: [(47 44 93 -52) -52]
Train Case:  84 | Input/Output: [(45 -95 71 9) -95]
Train Case:  85 | Input/Output: [(-57 26 83 63) -57]
Train Case:  86 | Input/Output: [(66 -60 90 2) -60]
Train Case:  87 | Input/Output: [(52 -41 -20 -46) -46]
Train Case:  88 | Input/Output: [(-66 -22 70 28) -66]
Train Case:  89 | Input/Output: [(23 18 -88 -54) -88]
Train Case:  90 | Input/Output: [(-67 -94 -55 87) -94]
Train Case:  91 | Input/Output: [(91 -83 52 65) -83]
Train Case:  92 | Input/Output: [(-55 24 40 21) -55]
Train Case:  93 | Input/Output: [(13 -19 2 -49) -49]
Train Case:  94 | Input/Output: [(-76 36 27 11) -76]
Train Case:  95 | Input/Output: [(0 83 98 -72) -72]
Train Case:  96 | Input/Output: [(-93 42 -19 87) -93]
Train Case:  97 | Input/Output: [(-34 5 -54 -43) -54]
Train Case:  98 | Input/Output: [(33 89 91 -12) -12]
Train Case:  99 | Input/Output: [(-81 -21 -96 -13) -96]
Test Case:   0 | Input/Output: [[-11 19 -11 -11] -11]
Test Case:   1 | Input/Output: [[72 93 93 93] 72]
Test Case:   2 | Input/Output: [[49 49 49 83] 49]
Test Case:   3 | Input/Output: [[56 79 56 56] 56]
Test Case:   4 | Input/Output: [[-91 -43 -43 -43] -91]
Test Case:   5 | Input/Output: [[59 92 92 92] 59]
Test Case:   6 | Input/Output: [[90 4 4 4] 4]
Test Case:   7 | Input/Output: [[88 -65 88 88] -65]
Test Case:   8 | Input/Output: [[74 86 86 86] 74]
Test Case:   9 | Input/Output: [[14 -13 14 14] -13]
Test Case:  10 | Input/Output: [[20 99 20 20] 20]
Test Case:  11 | Input/Output: [[63 63 45 63] 45]
Test Case:  12 | Input/Output: [[64 -72 -72 -72] -72]
Test Case:  13 | Input/Output: [[87 87 -22 87] -22]
Test Case:  14 | Input/Output: [[32 73 73 73] 32]
Test Case:  15 | Input/Output: [[45 74 74 74] 45]
Test Case:  16 | Input/Output: [[84 14 14 14] 14]
Test Case:  17 | Input/Output: [[66 66 -86 66] -86]
Test Case:  18 | Input/Output: [[41 41 -41 41] -41]
Test Case:  19 | Input/Output: [[-70 -70 -70 -10] -70]
Test Case:  20 | Input/Output: [[-58 9 9 9] -58]
Test Case:  21 | Input/Output: [[-85 76 76 76] -85]
Test Case:  22 | Input/Output: [[-89 -51 -51 -51] -89]
Test Case:  23 | Input/Output: [[-100 -100 -1 -100] -100]
Test Case:  24 | Input/Output: [[-39 -16 -39 -39] -39]
Test Case:  25 | Input/Output: [[-56 -56 8 -56] -56]
Test Case:  26 | Input/Output: [[-84 -84 47 -84] -84]
Test Case:  27 | Input/Output: [[24 46 46 46] 24]
Test Case:  28 | Input/Output: [[99 99 99 95] 95]
Test Case:  29 | Input/Output: [[31 31 -10 31] -10]
Test Case:  30 | Input/Output: [[-18 -18 -18 77] -18]
Test Case:  31 | Input/Output: [[-29 -29 -63 -29] -63]
Test Case:  32 | Input/Output: [[78 78 78 98] 78]
Test Case:  33 | Input/Output: [[1 1 -14 1] -14]
Test Case:  34 | Input/Output: [[67 67 -32 67] -32]
Test Case:  35 | Input/Output: [[-21 -37 -37 -37] -37]
Test Case:  36 | Input/Output: [[65 65 65 -7] -7]
Test Case:  37 | Input/Output: [[50 50 80 50] 50]
Test Case:  38 | Input/Output: [[-53 -53 38 -53] -53]
Test Case:  39 | Input/Output: [[81 61 81 81] 61]
Test Case:  40 | Input/Output: [[63 24 63 63] 24]
Test Case:  41 | Input/Output: [[46 46 -99 46] -99]
Test Case:  42 | Input/Output: [[-14 -14 -14 -91] -91]
Test Case:  43 | Input/Output: [[99 99 15 99] 15]
Test Case:  44 | Input/Output: [[46 46 -6 46] -6]
Test Case:  45 | Input/Output: [[10 50 10 10] 10]
Test Case:  46 | Input/Output: [[13 13 -20 13] -20]
Test Case:  47 | Input/Output: [[40 40 40 66] 40]
Test Case:  48 | Input/Output: [[-80 22 22 22] -80]
Test Case:  49 | Input/Output: [[90 90 90 16] 16]
Test Case:  50 | Input/Output: [[-62 -62 -62 17] -62]
Test Case:  51 | Input/Output: [[42 -12 42 42] -12]
Test Case:  52 | Input/Output: [[71 71 71 -24] -24]
Test Case:  53 | Input/Output: [[50 50 50 -27] -27]
Test Case:  54 | Input/Output: [[-63 -63 -63 33] -63]
Test Case:  55 | Input/Output: [[-63 -60 -63 -63] -63]
Test Case:  56 | Input/Output: [[-6 -33 -6 -6] -33]
Test Case:  57 | Input/Output: [[-69 -72 -69 -69] -72]
Test Case:  58 | Input/Output: [[89 89 89 31] 31]
Test Case:  59 | Input/Output: [[22 22 -30 22] -30]
Test Case:  60 | Input/Output: [[99 99 99 -32] -32]
Test Case:  61 | Input/Output: [[-95 -58 -58 -58] -95]
Test Case:  62 | Input/Output: [[-35 -35 -35 31] -35]
Test Case:  63 | Input/Output: [[11 11 11 23] 11]
Test Case:  64 | Input/Output: [[-14 -14 -1 -14] -14]
Test Case:  65 | Input/Output: [[-53 -35 -53 -53] -53]
Test Case:  66 | Input/Output: [[13 13 -59 13] -59]
Test Case:  67 | Input/Output: [[96 96 14 96] 14]
Test Case:  68 | Input/Output: [[-70 -70 -57 -70] -70]
Test Case:  69 | Input/Output: [[-6 13 13 13] -6]
Test Case:  70 | Input/Output: [[-52 -81 -81 -81] -81]
Test Case:  71 | Input/Output: [[-30 43 -30 -30] -30]
Test Case:  72 | Input/Output: [[49 49 45 49] 45]
Test Case:  73 | Input/Output: [[19 19 19 60] 19]
Test Case:  74 | Input/Output: [[-8 -8 49 -8] -8]
Test Case:  75 | Input/Output: [[-69 32 32 32] -69]
Test Case:  76 | Input/Output: [[-88 -88 -68 -88] -88]
Test Case:  77 | Input/Output: [[-43 -43 -43 -40] -43]
Test Case:  78 | Input/Output: [[-48 84 84 84] -48]
Test Case:  79 | Input/Output: [[-12 32 32 32] -12]
Test Case:  80 | Input/Output: [[-21 81 -21 -21] -21]
Test Case:  81 | Input/Output: [[-18 -21 -21 -21] -21]
Test Case:  82 | Input/Output: [[78 78 86 78] 78]
Test Case:  83 | Input/Output: [[-17 -17 -11 -17] -17]
Test Case:  84 | Input/Output: [[-96 41 -96 -96] -96]
Test Case:  85 | Input/Output: [[-92 35 35 35] -92]
Test Case:  86 | Input/Output: [[52 0 52 52] 0]
Test Case:  87 | Input/Output: [[-89 7 7 7] -89]
Test Case:  88 | Input/Output: [[29 -100 -100 -100] -100]
Test Case:  89 | Input/Output: [[70 70 70 -31] -31]
Test Case:  90 | Input/Output: [[-71 6 6 6] -71]
Test Case:  91 | Input/Output: [[66 66 66 -42] -42]
Test Case:  92 | Input/Output: [[79 79 87 79] 79]
Test Case:  93 | Input/Output: [[-50 -24 -24 -24] -50]
Test Case:  94 | Input/Output: [[-9 -9 77 -9] -9]
Test Case:  95 | Input/Output: [[-14 -90 -90 -90] -90]
Test Case:  96 | Input/Output: [[-64 -83 -83 -83] -83]
Test Case:  97 | Input/Output: [[70 -67 70 70] -67]
Test Case:  98 | Input/Output: [[10 10 10 -85] -85]
Test Case:  99 | Input/Output: [[-54 -54 65 -54] -54]
Test Case: 100 | Input/Output: [(71 71 71 71) 71]
Test Case: 101 | Input/Output: [(79 79 79 79) 79]
Test Case: 102 | Input/Output: [(16 16 16 16) 16]
Test Case: 103 | Input/Output: [(61 61 61 61) 61]
Test Case: 104 | Input/Output: [(7 7 7 7) 7]
Test Case: 105 | Input/Output: [(7 7 7 7) 7]
Test Case: 106 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 107 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 108 | Input/Output: [(1 1 1 1) 1]
Test Case: 109 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 110 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 111 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 112 | Input/Output: [(58 58 58 58) 58]
Test Case: 113 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 114 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 115 | Input/Output: [(20 20 20 20) 20]
Test Case: 116 | Input/Output: [(66 66 66 66) 66]
Test Case: 117 | Input/Output: [(36 36 36 36) 36]
Test Case: 118 | Input/Output: [(11 11 11 11) 11]
Test Case: 119 | Input/Output: [(3 3 3 3) 3]
Test Case: 120 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 121 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 122 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 123 | Input/Output: [(53 53 53 53) 53]
Test Case: 124 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 125 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 126 | Input/Output: [(1 1 1 1) 1]
Test Case: 127 | Input/Output: [(25 25 25 25) 25]
Test Case: 128 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 129 | Input/Output: [(82 82 82 82) 82]
Test Case: 130 | Input/Output: [(86 86 86 86) 86]
Test Case: 131 | Input/Output: [(62 62 62 62) 62]
Test Case: 132 | Input/Output: [(24 24 24 24) 24]
Test Case: 133 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 134 | Input/Output: [(3 3 3 3) 3]
Test Case: 135 | Input/Output: [(98 98 98 98) 98]
Test Case: 136 | Input/Output: [(70 70 70 70) 70]
Test Case: 137 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 138 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 139 | Input/Output: [(51 51 51 51) 51]
Test Case: 140 | Input/Output: [(49 49 49 49) 49]
Test Case: 141 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 142 | Input/Output: [(35 35 35 35) 35]
Test Case: 143 | Input/Output: [(27 27 27 27) 27]
Test Case: 144 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 145 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 146 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 147 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 148 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 149 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 150 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 151 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 152 | Input/Output: [(80 80 80 80) 80]
Test Case: 153 | Input/Output: [(62 62 62 62) 62]
Test Case: 154 | Input/Output: [(69 69 69 69) 69]
Test Case: 155 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 156 | Input/Output: [(3 3 3 3) 3]
Test Case: 157 | Input/Output: [(89 89 89 89) 89]
Test Case: 158 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 159 | Input/Output: [(71 71 71 71) 71]
Test Case: 160 | Input/Output: [(3 3 3 3) 3]
Test Case: 161 | Input/Output: [(40 40 40 40) 40]
Test Case: 162 | Input/Output: [(23 23 23 23) 23]
Test Case: 163 | Input/Output: [(33 33 33 33) 33]
Test Case: 164 | Input/Output: [(62 62 62 62) 62]
Test Case: 165 | Input/Output: [(55 55 55 55) 55]
Test Case: 166 | Input/Output: [(21 21 21 21) 21]
Test Case: 167 | Input/Output: [(11 11 11 11) 11]
Test Case: 168 | Input/Output: [(35 35 35 35) 35]
Test Case: 169 | Input/Output: [(50 50 50 50) 50]
Test Case: 170 | Input/Output: [(85 85 85 85) 85]
Test Case: 171 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 172 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 173 | Input/Output: [(61 61 61 61) 61]
Test Case: 174 | Input/Output: [(0 0 0 0) 0]
Test Case: 175 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 176 | Input/Output: [(28 28 28 28) 28]
Test Case: 177 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 178 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 179 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 180 | Input/Output: [(21 21 21 21) 21]
Test Case: 181 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 182 | Input/Output: [(19 19 19 19) 19]
Test Case: 183 | Input/Output: [(15 15 15 15) 15]
Test Case: 184 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 185 | Input/Output: [(91 91 91 91) 91]
Test Case: 186 | Input/Output: [(22 22 22 22) 22]
Test Case: 187 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 188 | Input/Output: [(5 5 5 5) 5]
Test Case: 189 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 190 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 191 | Input/Output: [(71 71 71 71) 71]
Test Case: 192 | Input/Output: [(95 95 95 95) 95]
Test Case: 193 | Input/Output: [(9 9 9 9) 9]
Test Case: 194 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 195 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 196 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 197 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 198 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 199 | Input/Output: [(87 87 87 87) 87]
Test Case: 200 | Input/Output: [(4 56 74 0) 0]
Test Case: 201 | Input/Output: [(86 10 53 87) 10]
Test Case: 202 | Input/Output: [(17 10 59 66) 10]
Test Case: 203 | Input/Output: [(38 9 1 21) 1]
Test Case: 204 | Input/Output: [(20 41 47 66) 20]
Test Case: 205 | Input/Output: [(22 7 59 80) 7]
Test Case: 206 | Input/Output: [(78 88 64 83) 64]
Test Case: 207 | Input/Output: [(15 46 57 20) 15]
Test Case: 208 | Input/Output: [(9 49 77 57) 9]
Test Case: 209 | Input/Output: [(60 8 62 28) 8]
Test Case: 210 | Input/Output: [(10 84 38 79) 10]
Test Case: 211 | Input/Output: [(3 35 30 17) 3]
Test Case: 212 | Input/Output: [(98 5 39 91) 5]
Test Case: 213 | Input/Output: [(78 96 29 35) 29]
Test Case: 214 | Input/Output: [(70 87 18 51) 18]
Test Case: 215 | Input/Output: [(42 17 16 40) 16]
Test Case: 216 | Input/Output: [(76 61 27 69) 27]
Test Case: 217 | Input/Output: [(23 39 28 61) 23]
Test Case: 218 | Input/Output: [(94 48 81 21) 21]
Test Case: 219 | Input/Output: [(12 30 65 59) 12]
Test Case: 220 | Input/Output: [(82 48 93 47) 47]
Test Case: 221 | Input/Output: [(25 84 74 31) 25]
Test Case: 222 | Input/Output: [(30 35 15 99) 15]
Test Case: 223 | Input/Output: [(52 20 3 59) 3]
Test Case: 224 | Input/Output: [(80 34 43 23) 23]
Test Case: 225 | Input/Output: [(66 78 9 51) 9]
Test Case: 226 | Input/Output: [(27 67 67 19) 19]
Test Case: 227 | Input/Output: [(8 99 28 3) 3]
Test Case: 228 | Input/Output: [(32 29 65 77) 29]
Test Case: 229 | Input/Output: [(77 38 27 100) 27]
Test Case: 230 | Input/Output: [(43 16 24 73) 16]
Test Case: 231 | Input/Output: [(27 95 29 54) 27]
Test Case: 232 | Input/Output: [(43 49 49 95) 43]
Test Case: 233 | Input/Output: [(25 47 98 62) 25]
Test Case: 234 | Input/Output: [(98 3 73 74) 3]
Test Case: 235 | Input/Output: [(92 30 98 45) 30]
Test Case: 236 | Input/Output: [(57 2 55 85) 2]
Test Case: 237 | Input/Output: [(51 7 83 64) 7]
Test Case: 238 | Input/Output: [(34 30 82 62) 30]
Test Case: 239 | Input/Output: [(30 75 95 59) 30]
Test Case: 240 | Input/Output: [(61 10 90 38) 10]
Test Case: 241 | Input/Output: [(30 76 76 9) 9]
Test Case: 242 | Input/Output: [(92 57 80 28) 28]
Test Case: 243 | Input/Output: [(14 30 67 51) 14]
Test Case: 244 | Input/Output: [(35 71 73 4) 4]
Test Case: 245 | Input/Output: [(30 98 25 37) 25]
Test Case: 246 | Input/Output: [(4 4 81 35) 4]
Test Case: 247 | Input/Output: [(92 51 72 6) 6]
Test Case: 248 | Input/Output: [(60 97 61 99) 60]
Test Case: 249 | Input/Output: [(95 17 47 90) 17]
Test Case: 250 | Input/Output: [(76 31 89 46) 31]
Test Case: 251 | Input/Output: [(74 99 84 82) 74]
Test Case: 252 | Input/Output: [(79 15 38 22) 15]
Test Case: 253 | Input/Output: [(9 5 92 66) 5]
Test Case: 254 | Input/Output: [(62 77 90 55) 55]
Test Case: 255 | Input/Output: [(46 37 56 6) 6]
Test Case: 256 | Input/Output: [(42 23 18 54) 18]
Test Case: 257 | Input/Output: [(5 2 13 50) 2]
Test Case: 258 | Input/Output: [(11 34 83 10) 10]
Test Case: 259 | Input/Output: [(32 54 90 20) 20]
Test Case: 260 | Input/Output: [(2 88 72 31) 2]
Test Case: 261 | Input/Output: [(64 9 83 58) 9]
Test Case: 262 | Input/Output: [(9 98 81 85) 9]
Test Case: 263 | Input/Output: [(82 44 39 49) 39]
Test Case: 264 | Input/Output: [(35 68 75 84) 35]
Test Case: 265 | Input/Output: [(41 92 88 46) 41]
Test Case: 266 | Input/Output: [(56 62 99 25) 25]
Test Case: 267 | Input/Output: [(3 68 76 11) 3]
Test Case: 268 | Input/Output: [(16 2 59 84) 2]
Test Case: 269 | Input/Output: [(61 62 41 62) 41]
Test Case: 270 | Input/Output: [(83 85 94 83) 83]
Test Case: 271 | Input/Output: [(0 69 24 50) 0]
Test Case: 272 | Input/Output: [(90 88 76 81) 76]
Test Case: 273 | Input/Output: [(33 35 1 67) 1]
Test Case: 274 | Input/Output: [(26 97 70 82) 26]
Test Case: 275 | Input/Output: [(92 23 55 94) 23]
Test Case: 276 | Input/Output: [(25 89 34 60) 25]
Test Case: 277 | Input/Output: [(99 54 14 32) 14]
Test Case: 278 | Input/Output: [(48 40 78 23) 23]
Test Case: 279 | Input/Output: [(63 2 87 25) 2]
Test Case: 280 | Input/Output: [(6 18 7 89) 6]
Test Case: 281 | Input/Output: [(29 94 45 31) 29]
Test Case: 282 | Input/Output: [(95 43 72 19) 19]
Test Case: 283 | Input/Output: [(61 42 12 86) 12]
Test Case: 284 | Input/Output: [(27 14 78 25) 14]
Test Case: 285 | Input/Output: [(10 21 59 3) 3]
Test Case: 286 | Input/Output: [(10 36 98 25) 10]
Test Case: 287 | Input/Output: [(36 90 6 65) 6]
Test Case: 288 | Input/Output: [(76 80 31 96) 31]
Test Case: 289 | Input/Output: [(38 95 86 32) 32]
Test Case: 290 | Input/Output: [(41 99 26 75) 26]
Test Case: 291 | Input/Output: [(61 95 3 27) 3]
Test Case: 292 | Input/Output: [(2 8 62 88) 2]
Test Case: 293 | Input/Output: [(73 57 90 76) 57]
Test Case: 294 | Input/Output: [(20 55 16 43) 16]
Test Case: 295 | Input/Output: [(97 95 84 55) 55]
Test Case: 296 | Input/Output: [(23 58 43 36) 23]
Test Case: 297 | Input/Output: [(9 23 35 26) 9]
Test Case: 298 | Input/Output: [(73 61 23 4) 4]
Test Case: 299 | Input/Output: [(89 9 74 16) 9]
Test Case: 300 | Input/Output: [(42 87 8 59) 8]
Test Case: 301 | Input/Output: [(2 80 99 3) 2]
Test Case: 302 | Input/Output: [(5 24 52 95) 5]
Test Case: 303 | Input/Output: [(37 60 31 46) 31]
Test Case: 304 | Input/Output: [(28 5 38 90) 5]
Test Case: 305 | Input/Output: [(40 36 74 38) 36]
Test Case: 306 | Input/Output: [(52 33 39 85) 33]
Test Case: 307 | Input/Output: [(86 28 11 32) 11]
Test Case: 308 | Input/Output: [(7 87 17 47) 7]
Test Case: 309 | Input/Output: [(47 31 0 6) 0]
Test Case: 310 | Input/Output: [(15 67 98 10) 10]
Test Case: 311 | Input/Output: [(10 21 83 82) 10]
Test Case: 312 | Input/Output: [(84 2 95 11) 2]
Test Case: 313 | Input/Output: [(1 27 84 20) 1]
Test Case: 314 | Input/Output: [(87 98 49 80) 49]
Test Case: 315 | Input/Output: [(28 28 37 40) 28]
Test Case: 316 | Input/Output: [(11 23 2 38) 2]
Test Case: 317 | Input/Output: [(37 23 27 61) 23]
Test Case: 318 | Input/Output: [(25 28 75 33) 25]
Test Case: 319 | Input/Output: [(68 45 36 68) 36]
Test Case: 320 | Input/Output: [(56 35 46 24) 24]
Test Case: 321 | Input/Output: [(91 43 4 9) 4]
Test Case: 322 | Input/Output: [(18 36 73 11) 11]
Test Case: 323 | Input/Output: [(92 87 32 96) 32]
Test Case: 324 | Input/Output: [(34 85 66 27) 27]
Test Case: 325 | Input/Output: [(6 47 97 27) 6]
Test Case: 326 | Input/Output: [(56 69 15 96) 15]
Test Case: 327 | Input/Output: [(18 27 36 44) 18]
Test Case: 328 | Input/Output: [(64 12 16 1) 1]
Test Case: 329 | Input/Output: [(49 75 51 29) 29]
Test Case: 330 | Input/Output: [(64 49 18 99) 18]
Test Case: 331 | Input/Output: [(56 80 55 63) 55]
Test Case: 332 | Input/Output: [(19 4 2 70) 2]
Test Case: 333 | Input/Output: [(67 53 92 9) 9]
Test Case: 334 | Input/Output: [(66 30 0 25) 0]
Test Case: 335 | Input/Output: [(80 70 15 40) 15]
Test Case: 336 | Input/Output: [(64 89 91 53) 53]
Test Case: 337 | Input/Output: [(23 75 51 26) 23]
Test Case: 338 | Input/Output: [(21 53 30 93) 21]
Test Case: 339 | Input/Output: [(34 36 33 9) 9]
Test Case: 340 | Input/Output: [(10 9 81 61) 9]
Test Case: 341 | Input/Output: [(67 37 0 44) 0]
Test Case: 342 | Input/Output: [(99 26 18 10) 10]
Test Case: 343 | Input/Output: [(51 85 85 13) 13]
Test Case: 344 | Input/Output: [(17 70 13 15) 13]
Test Case: 345 | Input/Output: [(55 26 61 46) 26]
Test Case: 346 | Input/Output: [(90 100 24 34) 24]
Test Case: 347 | Input/Output: [(99 57 3 3) 3]
Test Case: 348 | Input/Output: [(20 15 50 40) 15]
Test Case: 349 | Input/Output: [(87 86 5 6) 5]
Test Case: 350 | Input/Output: [(39 44 10 71) 10]
Test Case: 351 | Input/Output: [(7 39 96 83) 7]
Test Case: 352 | Input/Output: [(75 88 56 68) 56]
Test Case: 353 | Input/Output: [(32 83 94 8) 8]
Test Case: 354 | Input/Output: [(97 55 70 42) 42]
Test Case: 355 | Input/Output: [(43 4 70 30) 4]
Test Case: 356 | Input/Output: [(82 43 20 18) 18]
Test Case: 357 | Input/Output: [(12 37 5 65) 5]
Test Case: 358 | Input/Output: [(44 54 66 48) 44]
Test Case: 359 | Input/Output: [(10 39 79 59) 10]
Test Case: 360 | Input/Output: [(86 11 11 54) 11]
Test Case: 361 | Input/Output: [(3 83 46 89) 3]
Test Case: 362 | Input/Output: [(83 59 36 33) 33]
Test Case: 363 | Input/Output: [(34 12 32 66) 12]
Test Case: 364 | Input/Output: [(31 62 86 32) 31]
Test Case: 365 | Input/Output: [(18 99 11 100) 11]
Test Case: 366 | Input/Output: [(9 49 9 20) 9]
Test Case: 367 | Input/Output: [(11 17 55 74) 11]
Test Case: 368 | Input/Output: [(24 6 32 19) 6]
Test Case: 369 | Input/Output: [(55 91 84 97) 55]
Test Case: 370 | Input/Output: [(95 21 2 94) 2]
Test Case: 371 | Input/Output: [(85 53 77 58) 53]
Test Case: 372 | Input/Output: [(2 89 33 97) 2]
Test Case: 373 | Input/Output: [(17 67 85 73) 17]
Test Case: 374 | Input/Output: [(13 100 71 55) 13]
Test Case: 375 | Input/Output: [(76 35 80 80) 35]
Test Case: 376 | Input/Output: [(32 38 58 49) 32]
Test Case: 377 | Input/Output: [(27 92 47 84) 27]
Test Case: 378 | Input/Output: [(29 51 74 79) 29]
Test Case: 379 | Input/Output: [(0 26 63 20) 0]
Test Case: 380 | Input/Output: [(67 78 89 48) 48]
Test Case: 381 | Input/Output: [(54 89 25 74) 25]
Test Case: 382 | Input/Output: [(95 20 44 85) 20]
Test Case: 383 | Input/Output: [(42 28 84 22) 22]
Test Case: 384 | Input/Output: [(34 48 19 48) 19]
Test Case: 385 | Input/Output: [(10 90 89 71) 10]
Test Case: 386 | Input/Output: [(97 94 44 88) 44]
Test Case: 387 | Input/Output: [(8 61 83 61) 8]
Test Case: 388 | Input/Output: [(36 33 27 32) 27]
Test Case: 389 | Input/Output: [(48 92 82 9) 9]
Test Case: 390 | Input/Output: [(48 24 87 67) 24]
Test Case: 391 | Input/Output: [(21 38 100 55) 21]
Test Case: 392 | Input/Output: [(13 44 64 0) 0]
Test Case: 393 | Input/Output: [(44 83 64 65) 44]
Test Case: 394 | Input/Output: [(42 61 70 49) 42]
Test Case: 395 | Input/Output: [(71 50 33 51) 33]
Test Case: 396 | Input/Output: [(85 89 28 43) 28]
Test Case: 397 | Input/Output: [(90 7 31 70) 7]
Test Case: 398 | Input/Output: [(8 24 33 79) 8]
Test Case: 399 | Input/Output: [(75 99 43 94) 43]
Test Case: 400 | Input/Output: [(88 -50 -3 68) -50]
Test Case: 401 | Input/Output: [(-31 54 -68 49) -68]
Test Case: 402 | Input/Output: [(51 83 80 -27) -27]
Test Case: 403 | Input/Output: [(72 55 51 -31) -31]
Test Case: 404 | Input/Output: [(-15 -5 -57 -45) -57]
Test Case: 405 | Input/Output: [(-26 -68 -95 45) -95]
Test Case: 406 | Input/Output: [(-79 48 7 0) -79]
Test Case: 407 | Input/Output: [(-11 30 31 -82) -82]
Test Case: 408 | Input/Output: [(-5 -6 25 41) -6]
Test Case: 409 | Input/Output: [(3 -61 -62 -19) -62]
Test Case: 410 | Input/Output: [(-12 5 -54 94) -54]
Test Case: 411 | Input/Output: [(14 100 -26 12) -26]
Test Case: 412 | Input/Output: [(-93 -55 65 -55) -93]
Test Case: 413 | Input/Output: [(32 42 -62 15) -62]
Test Case: 414 | Input/Output: [(-24 -59 68 3) -59]
Test Case: 415 | Input/Output: [(80 75 16 41) 16]
Test Case: 416 | Input/Output: [(-11 72 -13 37) -13]
Test Case: 417 | Input/Output: [(77 -47 82 90) -47]
Test Case: 418 | Input/Output: [(-49 83 90 -95) -95]
Test Case: 419 | Input/Output: [(-91 -32 -87 40) -91]
Test Case: 420 | Input/Output: [(69 -10 68 58) -10]
Test Case: 421 | Input/Output: [(-59 73 -30 29) -59]
Test Case: 422 | Input/Output: [(22 28 -60 9) -60]
Test Case: 423 | Input/Output: [(-88 8 -65 33) -88]
Test Case: 424 | Input/Output: [(57 -67 -77 -48) -77]
Test Case: 425 | Input/Output: [(92 -26 57 55) -26]
Test Case: 426 | Input/Output: [(-68 35 -59 -100) -100]
Test Case: 427 | Input/Output: [(51 8 53 -89) -89]
Test Case: 428 | Input/Output: [(24 30 36 2) 2]
Test Case: 429 | Input/Output: [(-55 87 66 56) -55]
Test Case: 430 | Input/Output: [(69 9 -23 -20) -23]
Test Case: 431 | Input/Output: [(73 -6 -77 -70) -77]
Test Case: 432 | Input/Output: [(89 60 15 67) 15]
Test Case: 433 | Input/Output: [(-33 -60 -76 -46) -76]
Test Case: 434 | Input/Output: [(55 9 67 1) 1]
Test Case: 435 | Input/Output: [(91 -83 -23 -85) -85]
Test Case: 436 | Input/Output: [(-17 -3 -23 -92) -92]
Test Case: 437 | Input/Output: [(-35 57 11 37) -35]
Test Case: 438 | Input/Output: [(73 -38 59 -53) -53]
Test Case: 439 | Input/Output: [(66 -59 -54 -4) -59]
Test Case: 440 | Input/Output: [(-77 -84 -70 -87) -87]
Test Case: 441 | Input/Output: [(-32 -12 -54 67) -54]
Test Case: 442 | Input/Output: [(10 -30 48 46) -30]
Test Case: 443 | Input/Output: [(16 100 91 -99) -99]
Test Case: 444 | Input/Output: [(-25 -91 34 -51) -91]
Test Case: 445 | Input/Output: [(-10 4 -55 96) -55]
Test Case: 446 | Input/Output: [(-9 56 22 22) -9]
Test Case: 447 | Input/Output: [(89 73 -28 4) -28]
Test Case: 448 | Input/Output: [(25 -69 6 -20) -69]
Test Case: 449 | Input/Output: [(-73 -42 69 -34) -73]
Test Case: 450 | Input/Output: [(48 -38 11 -51) -51]
Test Case: 451 | Input/Output: [(-82 81 -21 66) -82]
Test Case: 452 | Input/Output: [(-12 -3 -23 40) -23]
Test Case: 453 | Input/Output: [(-27 49 -64 61) -64]
Test Case: 454 | Input/Output: [(-32 -54 -99 81) -99]
Test Case: 455 | Input/Output: [(-20 -27 -70 82) -70]
Test Case: 456 | Input/Output: [(-31 -22 94 60) -31]
Test Case: 457 | Input/Output: [(40 -14 -26 -51) -51]
Test Case: 458 | Input/Output: [(20 -4 8 -17) -17]
Test Case: 459 | Input/Output: [(-40 -89 90 98) -89]
Test Case: 460 | Input/Output: [(-18 -99 44 2) -99]
Test Case: 461 | Input/Output: [(-76 14 -81 24) -81]
Test Case: 462 | Input/Output: [(6 96 6 12) 6]
Test Case: 463 | Input/Output: [(-68 -62 -79 6) -79]
Test Case: 464 | Input/Output: [(-63 -5 -70 99) -70]
Test Case: 465 | Input/Output: [(-21 -15 -69 84) -69]
Test Case: 466 | Input/Output: [(-32 -78 -69 58) -78]
Test Case: 467 | Input/Output: [(35 72 92 -38) -38]
Test Case: 468 | Input/Output: [(54 -2 67 71) -2]
Test Case: 469 | Input/Output: [(90 -54 -56 13) -56]
Test Case: 470 | Input/Output: [(-28 30 57 -23) -28]
Test Case: 471 | Input/Output: [(-68 69 -22 -26) -68]
Test Case: 472 | Input/Output: [(-52 -74 56 52) -74]
Test Case: 473 | Input/Output: [(71 13 36 57) 13]
Test Case: 474 | Input/Output: [(18 -41 -96 100) -96]
Test Case: 475 | Input/Output: [(61 -30 2 98) -30]
Test Case: 476 | Input/Output: [(-55 89 -64 45) -64]
Test Case: 477 | Input/Output: [(-20 47 -85 -73) -85]
Test Case: 478 | Input/Output: [(-37 7 25 -79) -79]
Test Case: 479 | Input/Output: [(18 -91 -92 25) -92]
Test Case: 480 | Input/Output: [(71 53 34 -34) -34]
Test Case: 481 | Input/Output: [(-27 26 -46 -38) -46]
Test Case: 482 | Input/Output: [(-68 93 -55 44) -68]
Test Case: 483 | Input/Output: [(63 -99 -64 42) -99]
Test Case: 484 | Input/Output: [(79 -38 -68 -64) -68]
Test Case: 485 | Input/Output: [(75 -96 -63 -100) -100]
Test Case: 486 | Input/Output: [(3 -22 -89 -58) -89]
Test Case: 487 | Input/Output: [(40 -8 -53 -19) -53]
Test Case: 488 | Input/Output: [(-54 -74 -68 16) -74]
Test Case: 489 | Input/Output: [(12 -5 -83 -98) -98]
Test Case: 490 | Input/Output: [(57 -57 48 15) -57]
Test Case: 491 | Input/Output: [(-11 50 64 81) -11]
Test Case: 492 | Input/Output: [(-43 -1 -91 57) -91]
Test Case: 493 | Input/Output: [(91 47 2 -84) -84]
Test Case: 494 | Input/Output: [(26 -69 -74 21) -74]
Test Case: 495 | Input/Output: [(60 -14 20 27) -14]
Test Case: 496 | Input/Output: [(9 -26 -99 81) -99]
Test Case: 497 | Input/Output: [(-10 -17 -34 -42) -42]
Test Case: 498 | Input/Output: [(25 35 37 -20) -20]
Test Case: 499 | Input/Output: [(-90 76 -54 56) -90]
Test Case: 500 | Input/Output: [(-15 25 60 58) -15]
Test Case: 501 | Input/Output: [(-13 -47 6 -11) -47]
Test Case: 502 | Input/Output: [(49 42 11 26) 11]
Test Case: 503 | Input/Output: [(-73 -72 93 -66) -73]
Test Case: 504 | Input/Output: [(-81 12 27 -60) -81]
Test Case: 505 | Input/Output: [(51 -11 96 -56) -56]
Test Case: 506 | Input/Output: [(-44 -81 -41 -85) -85]
Test Case: 507 | Input/Output: [(61 -77 -10 -58) -77]
Test Case: 508 | Input/Output: [(-36 -34 -88 60) -88]
Test Case: 509 | Input/Output: [(-39 4 19 -82) -82]
Test Case: 510 | Input/Output: [(-97 -10 -87 96) -97]
Test Case: 511 | Input/Output: [(77 -65 -3 -73) -73]
Test Case: 512 | Input/Output: [(41 -81 -23 17) -81]
Test Case: 513 | Input/Output: [(98 21 90 20) 20]
Test Case: 514 | Input/Output: [(83 -45 -56 37) -56]
Test Case: 515 | Input/Output: [(60 -11 -44 -67) -67]
Test Case: 516 | Input/Output: [(-75 90 58 57) -75]
Test Case: 517 | Input/Output: [(99 78 -70 5) -70]
Test Case: 518 | Input/Output: [(67 40 15 71) 15]
Test Case: 519 | Input/Output: [(20 79 44 66) 20]
Test Case: 520 | Input/Output: [(-91 13 -26 -68) -91]
Test Case: 521 | Input/Output: [(-14 -11 -6 -53) -53]
Test Case: 522 | Input/Output: [(-37 -85 58 45) -85]
Test Case: 523 | Input/Output: [(-95 83 -25 -68) -95]
Test Case: 524 | Input/Output: [(-82 -97 -17 -67) -97]
Test Case: 525 | Input/Output: [(95 -55 -64 -99) -99]
Test Case: 526 | Input/Output: [(64 3 95 35) 3]
Test Case: 527 | Input/Output: [(4 46 -87 -91) -91]
Test Case: 528 | Input/Output: [(-1 -41 -43 -96) -96]
Test Case: 529 | Input/Output: [(-46 52 51 18) -46]
Test Case: 530 | Input/Output: [(41 -20 -55 -78) -78]
Test Case: 531 | Input/Output: [(33 -37 70 17) -37]
Test Case: 532 | Input/Output: [(-40 -100 -61 -51) -100]
Test Case: 533 | Input/Output: [(-36 -37 -21 94) -37]
Test Case: 534 | Input/Output: [(86 -92 17 62) -92]
Test Case: 535 | Input/Output: [(100 -96 -93 -36) -96]
Test Case: 536 | Input/Output: [(28 51 -81 -46) -81]
Test Case: 537 | Input/Output: [(-87 -59 -75 -51) -87]
Test Case: 538 | Input/Output: [(77 4 -87 31) -87]
Test Case: 539 | Input/Output: [(98 -74 97 -4) -74]
Test Case: 540 | Input/Output: [(35 -5 67 -24) -24]
Test Case: 541 | Input/Output: [(-76 -10 88 80) -76]
Test Case: 542 | Input/Output: [(74 -60 -90 37) -90]
Test Case: 543 | Input/Output: [(-77 -38 90 68) -77]
Test Case: 544 | Input/Output: [(-61 -31 -80 48) -80]
Test Case: 545 | Input/Output: [(-45 81 -67 -60) -67]
Test Case: 546 | Input/Output: [(25 48 -42 12) -42]
Test Case: 547 | Input/Output: [(-2 2 -92 -17) -92]
Test Case: 548 | Input/Output: [(-76 -41 3 42) -76]
Test Case: 549 | Input/Output: [(-87 96 65 -57) -87]
Test Case: 550 | Input/Output: [(-31 79 -32 24) -32]
Test Case: 551 | Input/Output: [(-15 36 61 -10) -15]
Test Case: 552 | Input/Output: [(6 -22 -37 72) -37]
Test Case: 553 | Input/Output: [(50 70 -59 43) -59]
Test Case: 554 | Input/Output: [(53 -12 -7 29) -12]
Test Case: 555 | Input/Output: [(44 39 99 -69) -69]
Test Case: 556 | Input/Output: [(-52 41 -56 -14) -56]
Test Case: 557 | Input/Output: [(12 21 -42 17) -42]
Test Case: 558 | Input/Output: [(-100 2 -81 20) -100]
Test Case: 559 | Input/Output: [(-62 62 -20 33) -62]
Test Case: 560 | Input/Output: [(25 -24 -69 -8) -69]
Test Case: 561 | Input/Output: [(12 -86 -26 -83) -86]
Test Case: 562 | Input/Output: [(-96 -100 -97 89) -100]
Test Case: 563 | Input/Output: [(14 -53 -99 -42) -99]
Test Case: 564 | Input/Output: [(100 68 32 39) 32]
Test Case: 565 | Input/Output: [(-91 -5 -92 -81) -92]
Test Case: 566 | Input/Output: [(95 31 82 -11) -11]
Test Case: 567 | Input/Output: [(-60 9 -2 10) -60]
Test Case: 568 | Input/Output: [(17 -45 -20 43) -45]
Test Case: 569 | Input/Output: [(20 37 -24 70) -24]
Test Case: 570 | Input/Output: [(12 94 33 -38) -38]
Test Case: 571 | Input/Output: [(6 -10 13 -87) -87]
Test Case: 572 | Input/Output: [(69 7 -100 -19) -100]
Test Case: 573 | Input/Output: [(98 82 85 -21) -21]
Test Case: 574 | Input/Output: [(-69 -38 30 -88) -88]
Test Case: 575 | Input/Output: [(79 -14 70 -68) -68]
Test Case: 576 | Input/Output: [(47 -96 12 -71) -96]
Test Case: 577 | Input/Output: [(22 71 14 -74) -74]
Test Case: 578 | Input/Output: [(-44 84 -41 41) -44]
Test Case: 579 | Input/Output: [(-61 -73 42 -78) -78]
Test Case: 580 | Input/Output: [(92 95 -30 -95) -95]
Test Case: 581 | Input/Output: [(-30 -20 38 44) -30]
Test Case: 582 | Input/Output: [(30 -24 64 -74) -74]
Test Case: 583 | Input/Output: [(66 -85 -20 60) -85]
Test Case: 584 | Input/Output: [(-99 -25 21 -95) -99]
Test Case: 585 | Input/Output: [(-77 21 44 15) -77]
Test Case: 586 | Input/Output: [(86 55 -97 -91) -97]
Test Case: 587 | Input/Output: [(50 -16 -76 67) -76]
Test Case: 588 | Input/Output: [(72 28 -37 -42) -42]
Test Case: 589 | Input/Output: [(-47 56 44 7) -47]
Test Case: 590 | Input/Output: [(97 -44 -88 94) -88]
Test Case: 591 | Input/Output: [(-28 37 -55 66) -55]
Test Case: 592 | Input/Output: [(24 1 -100 -33) -100]
Test Case: 593 | Input/Output: [(-55 38 31 -65) -65]
Test Case: 594 | Input/Output: [(94 48 75 89) 48]
Test Case: 595 | Input/Output: [(30 0 21 -22) -22]
Test Case: 596 | Input/Output: [(-89 -22 -40 41) -89]
Test Case: 597 | Input/Output: [(-46 -28 25 -42) -46]
Test Case: 598 | Input/Output: [(-43 -46 -82 -18) -82]
Test Case: 599 | Input/Output: [(-97 -84 28 39) -97]
Test Case: 600 | Input/Output: [(-89 -73 78 95) -89]
Test Case: 601 | Input/Output: [(-56 92 96 62) -56]
Test Case: 602 | Input/Output: [(-56 95 -10 34) -56]
Test Case: 603 | Input/Output: [(-53 -30 -79 -19) -79]
Test Case: 604 | Input/Output: [(1 49 47 49) 1]
Test Case: 605 | Input/Output: [(-69 33 -39 21) -69]
Test Case: 606 | Input/Output: [(-61 99 4 -74) -74]
Test Case: 607 | Input/Output: [(-51 -11 31 -24) -51]
Test Case: 608 | Input/Output: [(21 -28 -77 -88) -88]
Test Case: 609 | Input/Output: [(21 11 -93 -37) -93]
Test Case: 610 | Input/Output: [(-84 -31 34 10) -84]
Test Case: 611 | Input/Output: [(12 -80 97 -100) -100]
Test Case: 612 | Input/Output: [(37 -62 96 -4) -62]
Test Case: 613 | Input/Output: [(92 23 -89 -59) -89]
Test Case: 614 | Input/Output: [(-27 -15 -96 -2) -96]
Test Case: 615 | Input/Output: [(-62 50 12 75) -62]
Test Case: 616 | Input/Output: [(63 48 97 87) 48]
Test Case: 617 | Input/Output: [(12 24 71 -59) -59]
Test Case: 618 | Input/Output: [(74 50 69 98) 50]
Test Case: 619 | Input/Output: [(94 44 -91 -77) -91]
Test Case: 620 | Input/Output: [(-27 11 -25 -63) -63]
Test Case: 621 | Input/Output: [(88 -42 -32 37) -42]
Test Case: 622 | Input/Output: [(-83 51 21 63) -83]
Test Case: 623 | Input/Output: [(-49 -60 -20 94) -60]
Test Case: 624 | Input/Output: [(-59 42 -42 52) -59]
Test Case: 625 | Input/Output: [(91 11 -10 19) -10]
Test Case: 626 | Input/Output: [(-98 22 -53 -83) -98]
Test Case: 627 | Input/Output: [(100 73 -99 63) -99]
Test Case: 628 | Input/Output: [(85 90 -55 -89) -89]
Test Case: 629 | Input/Output: [(17 -30 71 -9) -30]
Test Case: 630 | Input/Output: [(71 -78 32 -33) -78]
Test Case: 631 | Input/Output: [(48 -82 -41 -16) -82]
Test Case: 632 | Input/Output: [(-23 98 -100 -75) -100]
Test Case: 633 | Input/Output: [(-18 72 -16 -96) -96]
Test Case: 634 | Input/Output: [(-11 -48 -85 18) -85]
Test Case: 635 | Input/Output: [(-15 81 -64 80) -64]
Test Case: 636 | Input/Output: [(-3 11 -26 -45) -45]
Test Case: 637 | Input/Output: [(-76 -85 -90 -91) -91]
Test Case: 638 | Input/Output: [(40 -72 48 100) -72]
Test Case: 639 | Input/Output: [(74 -56 75 -43) -56]
Test Case: 640 | Input/Output: [(-47 52 33 87) -47]
Test Case: 641 | Input/Output: [(9 -42 50 -19) -42]
Test Case: 642 | Input/Output: [(-93 -62 6 70) -93]
Test Case: 643 | Input/Output: [(0 -80 -55 -29) -80]
Test Case: 644 | Input/Output: [(95 8 90 -52) -52]
Test Case: 645 | Input/Output: [(70 -48 -68 -13) -68]
Test Case: 646 | Input/Output: [(88 97 23 -63) -63]
Test Case: 647 | Input/Output: [(64 -40 6 36) -40]
Test Case: 648 | Input/Output: [(-93 5 64 -23) -93]
Test Case: 649 | Input/Output: [(-50 -78 97 -24) -78]
Test Case: 650 | Input/Output: [(-41 -15 25 -93) -93]
Test Case: 651 | Input/Output: [(-51 -50 32 51) -51]
Test Case: 652 | Input/Output: [(53 -4 32 6) -4]
Test Case: 653 | Input/Output: [(-96 39 90 -91) -96]
Test Case: 654 | Input/Output: [(-16 -1 46 -82) -82]
Test Case: 655 | Input/Output: [(-61 91 27 58) -61]
Test Case: 656 | Input/Output: [(-35 78 36 -63) -63]
Test Case: 657 | Input/Output: [(-15 -4 87 63) -15]
Test Case: 658 | Input/Output: [(49 -66 91 -56) -66]
Test Case: 659 | Input/Output: [(-18 -57 -6 40) -57]
Test Case: 660 | Input/Output: [(72 -46 -41 -43) -46]
Test Case: 661 | Input/Output: [(-58 80 51 -32) -58]
Test Case: 662 | Input/Output: [(-60 -92 -76 85) -92]
Test Case: 663 | Input/Output: [(71 7 -19 53) -19]
Test Case: 664 | Input/Output: [(-87 -4 51 -100) -100]
Test Case: 665 | Input/Output: [(0 79 -31 -93) -93]
Test Case: 666 | Input/Output: [(-83 84 75 34) -83]
Test Case: 667 | Input/Output: [(86 51 77 -21) -21]
Test Case: 668 | Input/Output: [(-88 9 -45 -21) -88]
Test Case: 669 | Input/Output: [(91 -30 -98 -36) -98]
Test Case: 670 | Input/Output: [(2 -80 84 -28) -80]
Test Case: 671 | Input/Output: [(-18 -40 -77 -16) -77]
Test Case: 672 | Input/Output: [(16 -40 23 -57) -57]
Test Case: 673 | Input/Output: [(7 22 50 55) 7]
Test Case: 674 | Input/Output: [(-54 -6 -46 -74) -74]
Test Case: 675 | Input/Output: [(-24 -33 40 92) -33]
Test Case: 676 | Input/Output: [(57 15 -76 9) -76]
Test Case: 677 | Input/Output: [(-88 58 50 17) -88]
Test Case: 678 | Input/Output: [(-83 -95 -40 -31) -95]
Test Case: 679 | Input/Output: [(-8 63 -36 -40) -40]
Test Case: 680 | Input/Output: [(30 22 -55 -65) -65]
Test Case: 681 | Input/Output: [(22 -34 -42 -31) -42]
Test Case: 682 | Input/Output: [(-6 -66 -24 -88) -88]
Test Case: 683 | Input/Output: [(-82 81 9 -50) -82]
Test Case: 684 | Input/Output: [(98 76 42 51) 42]
Test Case: 685 | Input/Output: [(-1 -69 91 -93) -93]
Test Case: 686 | Input/Output: [(73 -4 87 1) -4]
Test Case: 687 | Input/Output: [(-62 -48 -26 -92) -92]
Test Case: 688 | Input/Output: [(-92 -95 41 -92) -95]
Test Case: 689 | Input/Output: [(-3 -37 45 -45) -45]
Test Case: 690 | Input/Output: [(-62 -28 10 52) -62]
Test Case: 691 | Input/Output: [(-95 -20 50 -78) -95]
Test Case: 692 | Input/Output: [(-73 -80 -76 65) -80]
Test Case: 693 | Input/Output: [(-33 -11 -28 -85) -85]
Test Case: 694 | Input/Output: [(77 -65 -46 -90) -90]
Test Case: 695 | Input/Output: [(-3 91 -65 75) -65]
Test Case: 696 | Input/Output: [(-3 75 39 25) -3]
Test Case: 697 | Input/Output: [(8 56 -81 -2) -81]
Test Case: 698 | Input/Output: [(57 -80 90 -11) -80]
Test Case: 699 | Input/Output: [(15 80 -75 -62) -75]
Test Case: 700 | Input/Output: [(27 96 -18 -98) -98]
Test Case: 701 | Input/Output: [(-92 68 -66 -49) -92]
Test Case: 702 | Input/Output: [(-97 -25 76 -98) -98]
Test Case: 703 | Input/Output: [(30 52 -86 -72) -86]
Test Case: 704 | Input/Output: [(-34 82 80 84) -34]
Test Case: 705 | Input/Output: [(56 47 53 -83) -83]
Test Case: 706 | Input/Output: [(42 78 26 7) 7]
Test Case: 707 | Input/Output: [(49 82 -79 -81) -81]
Test Case: 708 | Input/Output: [(99 2 45 82) 2]
Test Case: 709 | Input/Output: [(-59 61 98 -58) -59]
Test Case: 710 | Input/Output: [(-27 72 36 46) -27]
Test Case: 711 | Input/Output: [(22 -67 -55 41) -67]
Test Case: 712 | Input/Output: [(-90 -10 96 -45) -90]
Test Case: 713 | Input/Output: [(-42 20 70 -85) -85]
Test Case: 714 | Input/Output: [(-12 8 17 -63) -63]
Test Case: 715 | Input/Output: [(81 86 54 -20) -20]
Test Case: 716 | Input/Output: [(68 100 -31 78) -31]
Test Case: 717 | Input/Output: [(32 42 -79 -87) -87]
Test Case: 718 | Input/Output: [(93 -93 72 96) -93]
Test Case: 719 | Input/Output: [(41 51 -85 86) -85]
Test Case: 720 | Input/Output: [(-42 43 -11 41) -42]
Test Case: 721 | Input/Output: [(-64 65 -78 -78) -78]
Test Case: 722 | Input/Output: [(58 70 -39 38) -39]
Test Case: 723 | Input/Output: [(-47 70 -100 70) -100]
Test Case: 724 | Input/Output: [(-48 -27 -37 72) -48]
Test Case: 725 | Input/Output: [(67 64 -42 -49) -49]
Test Case: 726 | Input/Output: [(-66 4 9 -86) -86]
Test Case: 727 | Input/Output: [(67 16 26 75) 16]
Test Case: 728 | Input/Output: [(65 23 85 28) 23]
Test Case: 729 | Input/Output: [(83 57 38 -31) -31]
Test Case: 730 | Input/Output: [(-51 22 -84 -11) -84]
Test Case: 731 | Input/Output: [(34 8 -31 -25) -31]
Test Case: 732 | Input/Output: [(-76 -48 82 -23) -76]
Test Case: 733 | Input/Output: [(-14 -8 -57 79) -57]
Test Case: 734 | Input/Output: [(-18 34 30 27) -18]
Test Case: 735 | Input/Output: [(-93 75 -11 -36) -93]
Test Case: 736 | Input/Output: [(75 15 77 -44) -44]
Test Case: 737 | Input/Output: [(44 -43 10 36) -43]
Test Case: 738 | Input/Output: [(-74 -65 21 -7) -74]
Test Case: 739 | Input/Output: [(16 -57 67 -28) -57]
Test Case: 740 | Input/Output: [(-55 -81 69 35) -81]
Test Case: 741 | Input/Output: [(-7 -93 -88 31) -93]
Test Case: 742 | Input/Output: [(-43 55 -1 -90) -90]
Test Case: 743 | Input/Output: [(-1 -89 38 -22) -89]
Test Case: 744 | Input/Output: [(-83 -48 42 79) -83]
Test Case: 745 | Input/Output: [(-97 6 37 -94) -97]
Test Case: 746 | Input/Output: [(31 61 -77 -31) -77]
Test Case: 747 | Input/Output: [(-5 57 11 -80) -80]
Test Case: 748 | Input/Output: [(76 -10 9 9) -10]
Test Case: 749 | Input/Output: [(16 52 -86 -31) -86]
Test Case: 750 | Input/Output: [(-71 8 85 4) -71]
Test Case: 751 | Input/Output: [(-79 17 -12 -47) -79]
Test Case: 752 | Input/Output: [(87 59 99 98) 59]
Test Case: 753 | Input/Output: [(-4 -37 80 -59) -59]
Test Case: 754 | Input/Output: [(39 17 64 86) 17]
Test Case: 755 | Input/Output: [(-25 89 -20 36) -25]
Test Case: 756 | Input/Output: [(60 -58 -81 91) -81]
Test Case: 757 | Input/Output: [(100 -82 9 76) -82]
Test Case: 758 | Input/Output: [(-48 -95 -11 35) -95]
Test Case: 759 | Input/Output: [(-24 -73 76 -99) -99]
Test Case: 760 | Input/Output: [(28 66 30 75) 28]
Test Case: 761 | Input/Output: [(55 -35 65 35) -35]
Test Case: 762 | Input/Output: [(-10 -23 34 -36) -36]
Test Case: 763 | Input/Output: [(-13 50 -24 73) -24]
Test Case: 764 | Input/Output: [(32 -48 -18 17) -48]
Test Case: 765 | Input/Output: [(98 -23 -69 -99) -99]
Test Case: 766 | Input/Output: [(-58 37 -34 -69) -69]
Test Case: 767 | Input/Output: [(18 61 4 7) 4]
Test Case: 768 | Input/Output: [(-57 -82 92 17) -82]
Test Case: 769 | Input/Output: [(99 27 92 28) 27]
Test Case: 770 | Input/Output: [(86 -41 27 -91) -91]
Test Case: 771 | Input/Output: [(-76 69 -36 24) -76]
Test Case: 772 | Input/Output: [(79 -2 -28 24) -28]
Test Case: 773 | Input/Output: [(-39 98 -48 -96) -96]
Test Case: 774 | Input/Output: [(-89 34 -79 77) -89]
Test Case: 775 | Input/Output: [(-8 14 -13 -63) -63]
Test Case: 776 | Input/Output: [(-59 96 -85 73) -85]
Test Case: 777 | Input/Output: [(61 -86 29 -49) -86]
Test Case: 778 | Input/Output: [(77 0 4 -61) -61]
Test Case: 779 | Input/Output: [(3 -90 -63 -92) -92]
Test Case: 780 | Input/Output: [(-80 74 1 -72) -80]
Test Case: 781 | Input/Output: [(76 61 -4 31) -4]
Test Case: 782 | Input/Output: [(57 -54 -66 15) -66]
Test Case: 783 | Input/Output: [(59 18 -32 -34) -34]
Test Case: 784 | Input/Output: [(51 -43 45 0) -43]
Test Case: 785 | Input/Output: [(4 -52 -42 -47) -52]
Test Case: 786 | Input/Output: [(17 -74 84 -34) -74]
Test Case: 787 | Input/Output: [(-7 -9 -78 42) -78]
Test Case: 788 | Input/Output: [(44 94 -83 5) -83]
Test Case: 789 | Input/Output: [(-25 100 -50 -37) -50]
Test Case: 790 | Input/Output: [(-49 83 -35 -8) -49]
Test Case: 791 | Input/Output: [(6 99 -21 -100) -100]
Test Case: 792 | Input/Output: [(-57 0 57 11) -57]
Test Case: 793 | Input/Output: [(-83 19 -90 -73) -90]
Test Case: 794 | Input/Output: [(99 27 -78 -26) -78]
Test Case: 795 | Input/Output: [(27 36 71 60) 27]
Test Case: 796 | Input/Output: [(-12 34 77 64) -12]
Test Case: 797 | Input/Output: [(-5 -73 -1 -84) -84]
Test Case: 798 | Input/Output: [(46 74 100 31) 31]
Test Case: 799 | Input/Output: [(64 -42 -65 -65) -65]
Test Case: 800 | Input/Output: [(38 53 19 -100) -100]
Test Case: 801 | Input/Output: [(-64 24 -38 -92) -92]
Test Case: 802 | Input/Output: [(-21 -96 -80 53) -96]
Test Case: 803 | Input/Output: [(-19 70 2 -79) -79]
Test Case: 804 | Input/Output: [(44 -1 25 -43) -43]
Test Case: 805 | Input/Output: [(59 -50 -54 52) -54]
Test Case: 806 | Input/Output: [(64 40 15 -94) -94]
Test Case: 807 | Input/Output: [(26 -45 11 24) -45]
Test Case: 808 | Input/Output: [(-77 -52 6 17) -77]
Test Case: 809 | Input/Output: [(71 -55 98 2) -55]
Test Case: 810 | Input/Output: [(-43 29 -51 -62) -62]
Test Case: 811 | Input/Output: [(46 97 -56 70) -56]
Test Case: 812 | Input/Output: [(-13 -91 -67 67) -91]
Test Case: 813 | Input/Output: [(38 -46 -42 -5) -46]
Test Case: 814 | Input/Output: [(22 -92 65 26) -92]
Test Case: 815 | Input/Output: [(94 10 86 46) 10]
Test Case: 816 | Input/Output: [(5 100 -14 -66) -66]
Test Case: 817 | Input/Output: [(-89 -89 17 -44) -89]
Test Case: 818 | Input/Output: [(-52 -82 -20 17) -82]
Test Case: 819 | Input/Output: [(30 35 11 -87) -87]
Test Case: 820 | Input/Output: [(-85 43 38 12) -85]
Test Case: 821 | Input/Output: [(77 91 -2 8) -2]
Test Case: 822 | Input/Output: [(-56 -88 -50 60) -88]
Test Case: 823 | Input/Output: [(35 -99 91 86) -99]
Test Case: 824 | Input/Output: [(12 -6 -9 -66) -66]
Test Case: 825 | Input/Output: [(-49 -30 -40 46) -49]
Test Case: 826 | Input/Output: [(-43 20 -4 -77) -77]
Test Case: 827 | Input/Output: [(-67 96 -20 -31) -67]
Test Case: 828 | Input/Output: [(-54 37 -30 -65) -65]
Test Case: 829 | Input/Output: [(60 86 -12 -55) -55]
Test Case: 830 | Input/Output: [(72 -75 -22 -18) -75]
Test Case: 831 | Input/Output: [(-45 10 96 72) -45]
Test Case: 832 | Input/Output: [(47 -86 78 8) -86]
Test Case: 833 | Input/Output: [(-73 -92 68 -27) -92]
Test Case: 834 | Input/Output: [(-7 30 -73 -80) -80]
Test Case: 835 | Input/Output: [(99 26 77 71) 26]
Test Case: 836 | Input/Output: [(58 53 -68 -8) -68]
Test Case: 837 | Input/Output: [(-19 -91 81 46) -91]
Test Case: 838 | Input/Output: [(-36 97 -99 29) -99]
Test Case: 839 | Input/Output: [(14 -36 -22 33) -36]
Test Case: 840 | Input/Output: [(-25 73 -93 -52) -93]
Test Case: 841 | Input/Output: [(-8 88 -46 -93) -93]
Test Case: 842 | Input/Output: [(54 -57 -2 -3) -57]
Test Case: 843 | Input/Output: [(-42 51 -37 45) -42]
Test Case: 844 | Input/Output: [(-8 -78 73 51) -78]
Test Case: 845 | Input/Output: [(69 -57 52 14) -57]
Test Case: 846 | Input/Output: [(-6 -37 38 50) -37]
Test Case: 847 | Input/Output: [(-71 8 -22 64) -71]
Test Case: 848 | Input/Output: [(-1 -77 36 -86) -86]
Test Case: 849 | Input/Output: [(32 -83 60 34) -83]
Test Case: 850 | Input/Output: [(14 63 39 64) 14]
Test Case: 851 | Input/Output: [(-2 -7 -51 93) -51]
Test Case: 852 | Input/Output: [(-89 27 52 64) -89]
Test Case: 853 | Input/Output: [(59 -45 86 90) -45]
Test Case: 854 | Input/Output: [(28 91 -6 58) -6]
Test Case: 855 | Input/Output: [(-74 52 -78 -3) -78]
Test Case: 856 | Input/Output: [(-79 -23 94 89) -79]
Test Case: 857 | Input/Output: [(49 -26 -1 -21) -26]
Test Case: 858 | Input/Output: [(-69 44 -91 71) -91]
Test Case: 859 | Input/Output: [(38 -73 76 1) -73]
Test Case: 860 | Input/Output: [(28 24 -32 -100) -100]
Test Case: 861 | Input/Output: [(78 99 -61 -98) -98]
Test Case: 862 | Input/Output: [(-76 -86 -21 -44) -86]
Test Case: 863 | Input/Output: [(95 100 -90 65) -90]
Test Case: 864 | Input/Output: [(31 54 37 -14) -14]
Test Case: 865 | Input/Output: [(63 -90 -78 -65) -90]
Test Case: 866 | Input/Output: [(-14 -51 62 -16) -51]
Test Case: 867 | Input/Output: [(-98 87 -27 -34) -98]
Test Case: 868 | Input/Output: [(-24 -88 -50 -95) -95]
Test Case: 869 | Input/Output: [(85 -99 21 15) -99]
Test Case: 870 | Input/Output: [(98 39 1 39) 1]
Test Case: 871 | Input/Output: [(-16 4 -50 -74) -74]
Test Case: 872 | Input/Output: [(-44 96 -95 -89) -95]
Test Case: 873 | Input/Output: [(-35 -77 98 -74) -77]
Test Case: 874 | Input/Output: [(-86 -84 -52 -54) -86]
Test Case: 875 | Input/Output: [(-47 -59 55 -65) -65]
Test Case: 876 | Input/Output: [(-31 -32 82 18) -32]
Test Case: 877 | Input/Output: [(-1 6 11 -85) -85]
Test Case: 878 | Input/Output: [(56 14 48 -47) -47]
Test Case: 879 | Input/Output: [(-91 63 -94 -29) -94]
Test Case: 880 | Input/Output: [(19 -91 94 93) -91]
Test Case: 881 | Input/Output: [(-73 -15 97 79) -73]
Test Case: 882 | Input/Output: [(34 32 -19 79) -19]
Test Case: 883 | Input/Output: [(38 -20 30 -85) -85]
Test Case: 884 | Input/Output: [(10 62 19 35) 10]
Test Case: 885 | Input/Output: [(71 36 -50 -31) -50]
Test Case: 886 | Input/Output: [(56 76 -72 -22) -72]
Test Case: 887 | Input/Output: [(-63 56 52 -20) -63]
Test Case: 888 | Input/Output: [(-88 -39 76 64) -88]
Test Case: 889 | Input/Output: [(62 46 68 -58) -58]
Test Case: 890 | Input/Output: [(72 75 28 7) 7]
Test Case: 891 | Input/Output: [(-68 74 -76 -5) -76]
Test Case: 892 | Input/Output: [(22 36 -64 35) -64]
Test Case: 893 | Input/Output: [(56 -37 13 -93) -93]
Test Case: 894 | Input/Output: [(-59 -16 -5 -78) -78]
Test Case: 895 | Input/Output: [(-9 -86 10 19) -86]
Test Case: 896 | Input/Output: [(72 -39 -59 64) -59]
Test Case: 897 | Input/Output: [(63 11 -46 -95) -95]
Test Case: 898 | Input/Output: [(-22 -27 27 44) -27]
Test Case: 899 | Input/Output: [(77 -54 12 52) -54]
Test Case: 900 | Input/Output: [(39 -22 6 91) -22]
Test Case: 901 | Input/Output: [(-29 18 30 -42) -42]
Test Case: 902 | Input/Output: [(83 -66 77 -98) -98]
Test Case: 903 | Input/Output: [(45 -77 59 -41) -77]
Test Case: 904 | Input/Output: [(96 96 -36 -81) -81]
Test Case: 905 | Input/Output: [(-70 48 92 73) -70]
Test Case: 906 | Input/Output: [(13 -96 -51 72) -96]
Test Case: 907 | Input/Output: [(53 -75 76 -87) -87]
Test Case: 908 | Input/Output: [(-53 -11 -16 -52) -53]
Test Case: 909 | Input/Output: [(-42 -100 18 -83) -100]
Test Case: 910 | Input/Output: [(-48 45 -12 97) -48]
Test Case: 911 | Input/Output: [(-39 -17 -95 -91) -95]
Test Case: 912 | Input/Output: [(15 -49 -30 -90) -90]
Test Case: 913 | Input/Output: [(19 54 -87 -21) -87]
Test Case: 914 | Input/Output: [(90 -26 -99 9) -99]
Test Case: 915 | Input/Output: [(8 -97 -15 -23) -97]
Test Case: 916 | Input/Output: [(-95 20 18 0) -95]
Test Case: 917 | Input/Output: [(45 77 30 -12) -12]
Test Case: 918 | Input/Output: [(79 -44 -53 22) -53]
Test Case: 919 | Input/Output: [(-25 -27 -46 3) -46]
Test Case: 920 | Input/Output: [(15 -37 -17 25) -37]
Test Case: 921 | Input/Output: [(-38 58 -23 79) -38]
Test Case: 922 | Input/Output: [(39 62 31 -5) -5]
Test Case: 923 | Input/Output: [(-62 82 -81 -46) -81]
Test Case: 924 | Input/Output: [(27 18 -78 45) -78]
Test Case: 925 | Input/Output: [(-76 -6 -92 -87) -92]
Test Case: 926 | Input/Output: [(70 46 -51 -56) -56]
Test Case: 927 | Input/Output: [(62 -8 84 -80) -80]
Test Case: 928 | Input/Output: [(74 -47 -34 -21) -47]
Test Case: 929 | Input/Output: [(49 -31 -94 60) -94]
Test Case: 930 | Input/Output: [(-46 70 -14 -32) -46]
Test Case: 931 | Input/Output: [(57 97 -36 42) -36]
Test Case: 932 | Input/Output: [(-36 60 45 87) -36]
Test Case: 933 | Input/Output: [(-82 -16 -47 -11) -82]
Test Case: 934 | Input/Output: [(-25 -96 -65 -7) -96]
Test Case: 935 | Input/Output: [(-62 -65 29 -99) -99]
Test Case: 936 | Input/Output: [(-76 63 64 -23) -76]
Test Case: 937 | Input/Output: [(44 -4 -100 -75) -100]
Test Case: 938 | Input/Output: [(93 -70 7 -9) -70]
Test Case: 939 | Input/Output: [(-97 5 -40 43) -97]
Test Case: 940 | Input/Output: [(52 -73 -92 47) -92]
Test Case: 941 | Input/Output: [(79 -12 60 -79) -79]
Test Case: 942 | Input/Output: [(98 -77 -20 82) -77]
Test Case: 943 | Input/Output: [(-35 20 20 68) -35]
Test Case: 944 | Input/Output: [(-3 -14 64 24) -14]
Test Case: 945 | Input/Output: [(87 77 83 -52) -52]
Test Case: 946 | Input/Output: [(69 99 82 52) 52]
Test Case: 947 | Input/Output: [(-100 93 -53 20) -100]
Test Case: 948 | Input/Output: [(-25 57 -68 -21) -68]
Test Case: 949 | Input/Output: [(57 89 -86 -27) -86]
Test Case: 950 | Input/Output: [(68 -15 -11 -51) -51]
Test Case: 951 | Input/Output: [(-25 84 92 -91) -91]
Test Case: 952 | Input/Output: [(16 24 -54 -67) -67]
Test Case: 953 | Input/Output: [(99 45 59 21) 21]
Test Case: 954 | Input/Output: [(-84 -88 -20 65) -88]
Test Case: 955 | Input/Output: [(-58 35 12 -57) -58]
Test Case: 956 | Input/Output: [(23 -36 6 -18) -36]
Test Case: 957 | Input/Output: [(-47 41 -1 36) -47]
Test Case: 958 | Input/Output: [(40 -87 -58 22) -87]
Test Case: 959 | Input/Output: [(52 -96 -28 -90) -96]
Test Case: 960 | Input/Output: [(-3 46 8 38) -3]
Test Case: 961 | Input/Output: [(-17 -24 21 10) -24]
Test Case: 962 | Input/Output: [(-34 83 81 -10) -34]
Test Case: 963 | Input/Output: [(-13 97 39 71) -13]
Test Case: 964 | Input/Output: [(-7 95 44 -57) -57]
Test Case: 965 | Input/Output: [(90 -75 10 -72) -75]
Test Case: 966 | Input/Output: [(8 40 -36 -51) -51]
Test Case: 967 | Input/Output: [(87 -80 -46 15) -80]
Test Case: 968 | Input/Output: [(-21 11 -59 -97) -97]
Test Case: 969 | Input/Output: [(-43 28 -56 -89) -89]
Test Case: 970 | Input/Output: [(24 -44 -50 -8) -50]
Test Case: 971 | Input/Output: [(-15 5 31 10) -15]
Test Case: 972 | Input/Output: [(99 21 -85 88) -85]
Test Case: 973 | Input/Output: [(48 -87 -19 -86) -87]
Test Case: 974 | Input/Output: [(80 -97 53 -77) -97]
Test Case: 975 | Input/Output: [(73 28 12 90) 12]
Test Case: 976 | Input/Output: [(83 85 -9 -26) -26]
Test Case: 977 | Input/Output: [(-84 -17 -26 69) -84]
Test Case: 978 | Input/Output: [(-72 84 -41 86) -72]
Test Case: 979 | Input/Output: [(69 25 -22 64) -22]
Test Case: 980 | Input/Output: [(-41 56 54 73) -41]
Test Case: 981 | Input/Output: [(47 88 -71 24) -71]
Test Case: 982 | Input/Output: [(25 33 -48 96) -48]
Test Case: 983 | Input/Output: [(17 -50 7 63) -50]
Test Case: 984 | Input/Output: [(-85 -60 -50 66) -85]
Test Case: 985 | Input/Output: [(56 76 -39 -35) -39]
Test Case: 986 | Input/Output: [(-89 -23 62 -83) -89]
Test Case: 987 | Input/Output: [(100 -70 -46 -15) -70]
Test Case: 988 | Input/Output: [(51 100 -17 -64) -64]
Test Case: 989 | Input/Output: [(-34 -82 -2 78) -82]
Test Case: 990 | Input/Output: [(-67 -78 51 -6) -78]
Test Case: 991 | Input/Output: [(-15 43 -28 -23) -28]
Test Case: 992 | Input/Output: [(-66 83 -76 -31) -76]
Test Case: 993 | Input/Output: [(-49 -56 -36 -41) -56]
Test Case: 994 | Input/Output: [(-87 -47 -68 12) -87]
Test Case: 995 | Input/Output: [(-45 84 43 99) -45]
Test Case: 996 | Input/Output: [(-56 -47 75 -92) -92]
Test Case: 997 | Input/Output: [(-70 15 37 15) -70]
Test Case: 998 | Input/Output: [(7 58 -6 25) -6]
Test Case: 999 | Input/Output: [(99 4 59 100) 4]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -55 -12 56 87 20 -125 -20 40 -10 -44 104 30 -19 -69 -126 -31
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[21 21 20 21] 20] [[15 86 86 86] 15] [[98 97 97 97] 97] [[15 44 15 15] 15] [[-85 -85 -59 -85] -85] [[32 32 32 -38] -38] [[0 91 0 0] 0] [[-73 -73 -74 -73] -74] [[-12 23 23 23] -12] [[89 24 89 89] 24] [(30 30 30 30) 30] [(44 44 44 44) 44] [(33 33 33 33) 33] [(33 33 33 33) 33] [(-93 -93 -93 -93) -93] [(58 64 72 2) 2] [(80 51 60 51) 51] [(37 96 97 70) 37] [(17 53 31 92) 17] [(12 10 30 83) 10] [(62 50 19 49) 19] [(36 61 56 38) 36] [(48 72 49 66) 48] [(60 83 90 21) 21] [(85 8 17 97) 8] [(34 18 15 15) 15] [(0 96 97 49) 0] [(30 67 38 78) 30] [(61 70 5 88) 5] [(23 87 100 94) 23] [(94 34 86 78) 34] [(28 43 5 47) 5] [(39 35 80 63) 35] [(34 39 66 95) 34] [(80 88 62 98) 62] [(22 62 -4 47) -4] [(-83 -30 4 -21) -83] [(-47 20 -67 -67) -67] [(-20 -23 26 -31) -31] [(-46 63 81 73) -46] [(74 91 -57 -8) -57] [(90 52 -71 -80) -80] [(-95 -50 -60 50) -95] [(24 84 -17 93) -17] [(-38 -30 99 56) -38] [(-28 43 73 32) -28] [(-12 47 19 12) -12] [(-77 48 -59 -47) -77] [(82 -82 -75 11) -82] [(-53 43 -41 -63) -63] [(9 -7 -60 30) -60] [(9 -35 -67 -26) -67] [(63 32 3 21) 3] [(-70 25 46 5) -70] [(-27 44 -2 -32) -32] [(53 -18 63 -90) -90] [(39 71 59 10) 10] [(-34 -23 -83 -54) -83] [(-89 -96 90 0) -96] [(-63 58 -7 99) -63] [(77 -16 47 -39) -39] [(43 72 89 -39) -39] [(-39 3 -84 94) -84] [(13 -26 75 92) -26] [(-50 30 -64 83) -64] [(-89 -100 23 39) -100] [(63 -46 -46 -66) -66] [(66 -75 48 74) -75] [(-45 72 54 -45) -45] [(-57 46 35 72) -57] [(62 66 -11 9) -11] [(-65 -47 5 46) -65] [(12 70 81 10) 10] [(-60 55 31 -87) -87] [(40 -4 49 -77) -77] [(17 -36 -41 88) -41] [(-73 76 2 -31) -73] [(-38 -100 -81 -42) -100] [(47 44 93 -52) -52] [(45 -95 71 9) -95] [(-57 26 83 63) -57] [(66 -60 90 2) -60] [(52 -41 -20 -46) -46] [(-66 -22 70 28) -66] [(23 18 -88 -54) -88] [(-67 -94 -55 87) -94] [(91 -83 52 65) -83] [(-55 24 40 21) -55] [(13 -19 2 -49) -49] [(-76 36 27 11) -76] [(0 83 98 -72) -72] [(-93 42 -19 87) -93] [(-34 5 -54 -43) -54] [(33 89 91 -12) -12] [(-81 -21 -96 -13) -96])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 86                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -59                
Correct output: -38                 | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -12                 | Program output: 23                 
Correct output: 24                  | Program output: 89                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 72                 
Correct output: 51                  | Program output: 60                 
Correct output: 37                  | Program output: 97                 
Correct output: 17                  | Program output: 31                 
Correct output: 10                  | Program output: 30                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 56                 
Correct output: 48                  | Program output: 49                 
Correct output: 21                  | Program output: 90                 
Correct output: 8                   | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 97                 
Correct output: 30                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 100                
Correct output: 34                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 35                  | Program output: 80                 
Correct output: 34                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: -4                  | Program output: -4                 
Correct output: -83                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: 26                 
Correct output: -46                 | Program output: 81                 
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -71                
Correct output: -95                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -38                 | Program output: 99                 
Correct output: -28                 | Program output: 73                 
Correct output: -12                 | Program output: 19                 
Correct output: -77                 | Program output: -59                
Correct output: -82                 | Program output: -75                
Correct output: -63                 | Program output: -41                
Correct output: -60                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -70                 | Program output: 46                 
Correct output: -32                 | Program output: -2                 
Correct output: -90                 | Program output: 63                 
Correct output: 10                  | Program output: 59                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: 90                 
Correct output: -63                 | Program output: -7                 
Correct output: -39                 | Program output: 47                 
Correct output: -39                 | Program output: 89                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: 75                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: -46                
Correct output: -75                 | Program output: 48                 
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: 35                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: 5                  
Correct output: 10                  | Program output: 81                 
Correct output: -87                 | Program output: 31                 
Correct output: -77                 | Program output: 49                 
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: 2                  
Correct output: -100                | Program output: -81                
Correct output: -52                 | Program output: 93                 
Correct output: -95                 | Program output: 71                 
Correct output: -57                 | Program output: 83                 
Correct output: -60                 | Program output: 90                 
Correct output: -46                 | Program output: -20                
Correct output: -66                 | Program output: 70                 
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -55                
Correct output: -83                 | Program output: 52                 
Correct output: -55                 | Program output: 40                 
Correct output: -49                 | Program output: 2                  
Correct output: -76                 | Program output: 27                 
Correct output: -72                 | Program output: 98                 
Correct output: -93                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -12                 | Program output: 91                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Lexicase best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Lexicase best errors: [0 0 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Zero cases best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Zero cases best errors: [0 0 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 4 1 3 3 2 2 1 4)
Population mean number of elite cases: 0.02
Count of perfect (error zero) individuals by case: (1 1 4 1 3 3 2 2 1 4)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Errors: [0 0 1 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 9.978
Median total errors in population: 10
Error averages by case: (0.999 0.999 0.996 0.999 0.997 0.997 0.998 0.998 0.999 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.334
Average program size in population (points): 72.069
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 488235
--- Timings ---
Current time: 1559584051793 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.8 seconds, 29.8%
Fitness Testing:      1.7 seconds, 66.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 86                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -59                
Correct output: -38                 | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -12                 | Program output: 23                 
Correct output: 24                  | Program output: 89                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 72                 
Correct output: 51                  | Program output: 60                 
Correct output: 37                  | Program output: 97                 
Correct output: 17                  | Program output: 31                 
Correct output: 10                  | Program output: 30                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 56                 
Correct output: 48                  | Program output: 49                 
Correct output: 21                  | Program output: 90                 
Correct output: 8                   | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 97                 
Correct output: 30                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 100                
Correct output: 34                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 35                  | Program output: 80                 
Correct output: 34                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: -4                  | Program output: -4                 
Correct output: -83                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: 26                 
Correct output: -46                 | Program output: 81                 
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -71                
Correct output: -95                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -38                 | Program output: 99                 
Correct output: -28                 | Program output: 73                 
Correct output: -12                 | Program output: 19                 
Correct output: -77                 | Program output: -59                
Correct output: -82                 | Program output: -75                
Correct output: -63                 | Program output: -41                
Correct output: -60                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -70                 | Program output: 46                 
Correct output: -32                 | Program output: -2                 
Correct output: -90                 | Program output: 63                 
Correct output: 10                  | Program output: 59                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: 90                 
Correct output: -63                 | Program output: -7                 
Correct output: -39                 | Program output: 47                 
Correct output: -39                 | Program output: 89                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: 75                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: -46                
Correct output: -75                 | Program output: 48                 
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: 35                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: 5                  
Correct output: 10                  | Program output: 81                 
Correct output: -87                 | Program output: 31                 
Correct output: -77                 | Program output: 49                 
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: 2                  
Correct output: -100                | Program output: -81                
Correct output: -52                 | Program output: 93                 
Correct output: -95                 | Program output: 71                 
Correct output: -57                 | Program output: 83                 
Correct output: -60                 | Program output: 90                 
Correct output: -46                 | Program output: -20                
Correct output: -66                 | Program output: 70                 
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -55                
Correct output: -83                 | Program output: 52                 
Correct output: -55                 | Program output: 40                 
Correct output: -49                 | Program output: 2                  
Correct output: -76                 | Program output: 27                 
Correct output: -72                 | Program output: 98                 
Correct output: -93                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -12                 | Program output: 91                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Lexicase best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Lexicase best errors: [1 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Zero cases best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Zero cases best errors: [1 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (78 181 527 91 181 527 181 91 527 605)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (78 181 527 91 181 527 181 91 527 605)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_eq exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Errors: [1 1 0 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.011
Median total errors in population: 6
Error averages by case: (0.922 0.819 0.473 0.909 0.819 0.473 0.819 0.909 0.473 0.395)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.759
Average program size in population (points): 47.148
Average percent parens in population: 0.266
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.483
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 427
Genome diversity (% unique genomes):	 0.384
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 438
Syntactic diversity (% unique Push programs):	 0.374
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 769014
--- Timings ---
Current time: 1559584054045 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.3 seconds, 46.7%
Fitness Testing:      2.2 seconds, 45.0%
Report:               0.3 seconds,  6.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 86                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -59                
Correct output: -38                 | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -12                 | Program output: 23                 
Correct output: 24                  | Program output: 89                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 72                 
Correct output: 51                  | Program output: 60                 
Correct output: 37                  | Program output: 97                 
Correct output: 17                  | Program output: 31                 
Correct output: 10                  | Program output: 30                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 56                 
Correct output: 48                  | Program output: 49                 
Correct output: 21                  | Program output: 90                 
Correct output: 8                   | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 97                 
Correct output: 30                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 100                
Correct output: 34                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 35                  | Program output: 80                 
Correct output: 34                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: -4                  | Program output: -4                 
Correct output: -83                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: 26                 
Correct output: -46                 | Program output: 81                 
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -71                
Correct output: -95                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -38                 | Program output: 99                 
Correct output: -28                 | Program output: 73                 
Correct output: -12                 | Program output: 19                 
Correct output: -77                 | Program output: -59                
Correct output: -82                 | Program output: -75                
Correct output: -63                 | Program output: -41                
Correct output: -60                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -70                 | Program output: 46                 
Correct output: -32                 | Program output: -2                 
Correct output: -90                 | Program output: 63                 
Correct output: 10                  | Program output: 59                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: 90                 
Correct output: -63                 | Program output: -7                 
Correct output: -39                 | Program output: 47                 
Correct output: -39                 | Program output: 89                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: 75                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: -46                
Correct output: -75                 | Program output: 48                 
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: 35                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: 5                  
Correct output: 10                  | Program output: 81                 
Correct output: -87                 | Program output: 31                 
Correct output: -77                 | Program output: 49                 
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: 2                  
Correct output: -100                | Program output: -81                
Correct output: -52                 | Program output: 93                 
Correct output: -95                 | Program output: 71                 
Correct output: -57                 | Program output: 83                 
Correct output: -60                 | Program output: 90                 
Correct output: -46                 | Program output: -20                
Correct output: -66                 | Program output: 70                 
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -55                
Correct output: -83                 | Program output: 52                 
Correct output: -55                 | Program output: 40                 
Correct output: -49                 | Program output: 2                  
Correct output: -76                 | Program output: 27                 
Correct output: -72                 | Program output: 98                 
Correct output: -93                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -12                 | Program output: 91                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Lexicase best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () exec_eq boolean_frominteger integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Zero cases best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () exec_eq boolean_frominteger integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (887 373 373 158 373 373 252 887 410 888)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (887 373 373 158 373 373 252 887 410 888)
Population mean number of perfect (error zero) cases: 4.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 5.026
Median total errors in population: 5
Error averages by case: (0.113 0.627 0.627 0.842 0.627 0.627 0.748 0.113 0.59 0.112)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.022
Average program size in population (points): 53.828
Average percent parens in population: 0.280
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9465
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 228
Genome diversity (% unique genomes):	 0.533
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 245
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1120323
--- Timings ---
Current time: 1559584057355 milliseconds
Total Time:           8.2 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.9 seconds, 60.0%
Fitness Testing:      2.7 seconds, 32.7%
Report:               0.5 seconds,  6.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 86                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -59                
Correct output: -38                 | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -12                 | Program output: 23                 
Correct output: 24                  | Program output: 89                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 72                 
Correct output: 51                  | Program output: 60                 
Correct output: 37                  | Program output: 97                 
Correct output: 17                  | Program output: 31                 
Correct output: 10                  | Program output: 30                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 56                 
Correct output: 48                  | Program output: 49                 
Correct output: 21                  | Program output: 90                 
Correct output: 8                   | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 97                 
Correct output: 30                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 100                
Correct output: 34                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 35                  | Program output: 80                 
Correct output: 34                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: -4                  | Program output: -4                 
Correct output: -83                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: 26                 
Correct output: -46                 | Program output: 81                 
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -71                
Correct output: -95                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -38                 | Program output: 99                 
Correct output: -28                 | Program output: 73                 
Correct output: -12                 | Program output: 19                 
Correct output: -77                 | Program output: -59                
Correct output: -82                 | Program output: -75                
Correct output: -63                 | Program output: -41                
Correct output: -60                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -70                 | Program output: 46                 
Correct output: -32                 | Program output: -2                 
Correct output: -90                 | Program output: 63                 
Correct output: 10                  | Program output: 59                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: 90                 
Correct output: -63                 | Program output: -7                 
Correct output: -39                 | Program output: 47                 
Correct output: -39                 | Program output: 89                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: 75                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: -46                
Correct output: -75                 | Program output: 48                 
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: 35                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: 5                  
Correct output: 10                  | Program output: 81                 
Correct output: -87                 | Program output: 31                 
Correct output: -77                 | Program output: 49                 
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: 2                  
Correct output: -100                | Program output: -81                
Correct output: -52                 | Program output: 93                 
Correct output: -95                 | Program output: 71                 
Correct output: -57                 | Program output: 83                 
Correct output: -60                 | Program output: 90                 
Correct output: -46                 | Program output: -20                
Correct output: -66                 | Program output: 70                 
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -55                
Correct output: -83                 | Program output: 52                 
Correct output: -55                 | Program output: 40                 
Correct output: -49                 | Program output: 2                  
Correct output: -76                 | Program output: 27                 
Correct output: -72                 | Program output: 98                 
Correct output: -93                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -12                 | Program output: 91                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Lexicase best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Lexicase best errors: [0 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Zero cases best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Zero cases best errors: [0 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (548 548 915 176 548 190 1000 191 1000 725)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (548 548 915 176 548 190 0 191 0 725)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Errors: [0 0 0 1 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.159
Median total errors in population: 5
Error averages by case: (0.452 0.452 0.085 0.824 0.452 0.81 1.0 0.809 1.0 0.275)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 31.394
Average program size in population (points): 44.338
Average percent parens in population: 0.274
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.436
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 255
Genome diversity (% unique genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 287
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1394179
--- Timings ---
Current time: 1559584060349 milliseconds
Total Time:          11.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.4 seconds, 65.9%
Fitness Testing:      3.0 seconds, 27.1%
Report:               0.7 seconds,  6.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 21                 
Correct output: 15                  | Program output: 86                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -73                
Correct output: -12                 | Program output: 23                 
Correct output: 24                  | Program output: 89                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 70                 
Correct output: 17                  | Program output: 92                 
Correct output: 10                  | Program output: 83                 
Correct output: 19                  | Program output: 49                 
Correct output: 36                  | Program output: 38                 
Correct output: 48                  | Program output: 66                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 49                 
Correct output: 30                  | Program output: 78                 
Correct output: 5                   | Program output: 88                 
Correct output: 23                  | Program output: 94                 
Correct output: 34                  | Program output: 78                 
Correct output: 5                   | Program output: 47                 
Correct output: 35                  | Program output: 63                 
Correct output: 34                  | Program output: 95                 
Correct output: 62                  | Program output: 98                 
Correct output: -4                  | Program output: 47                 
Correct output: -83                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: -31                
Correct output: -46                 | Program output: 73                 
Correct output: -57                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: 50                 
Correct output: -17                 | Program output: 93                 
Correct output: -38                 | Program output: 56                 
Correct output: -28                 | Program output: 32                 
Correct output: -12                 | Program output: 12                 
Correct output: -77                 | Program output: -47                
Correct output: -82                 | Program output: 11                 
Correct output: -63                 | Program output: -63                
Correct output: -60                 | Program output: 30                 
Correct output: -67                 | Program output: -26                
Correct output: 3                   | Program output: 21                 
Correct output: -70                 | Program output: 5                  
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -54                
Correct output: -96                 | Program output: 0                  
Correct output: -63                 | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: 94                 
Correct output: -26                 | Program output: 92                 
Correct output: -64                 | Program output: 83                 
Correct output: -100                | Program output: 39                 
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: 72                 
Correct output: -11                 | Program output: 9                  
Correct output: -65                 | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 88                 
Correct output: -73                 | Program output: -31                
Correct output: -100                | Program output: -42                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: 9                  
Correct output: -57                 | Program output: 63                 
Correct output: -60                 | Program output: 2                  
Correct output: -46                 | Program output: -46                
Correct output: -66                 | Program output: 28                 
Correct output: -88                 | Program output: -54                
Correct output: -94                 | Program output: 87                 
Correct output: -83                 | Program output: 65                 
Correct output: -55                 | Program output: 21                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: 11                 
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: 87                 
Correct output: -54                 | Program output: -43                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: -13                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_eq boolean_dup_items integer_min exec_noop boolean_and integer_add integer_stackdepth exec_while () integer_stackdepth integer_pop exec_eq exec_pop () exec_s_when_autoconstructing (integer_min in4 print_integer exec_when (boolean_swap exec_rot (integer_lt) () ())) () ())
Lexicase best errors: [1 0 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_eq boolean_dup_items integer_min exec_noop boolean_and integer_add integer_stackdepth exec_while () integer_stackdepth integer_pop exec_eq exec_pop () exec_s_when_autoconstructing (integer_min in4 print_integer exec_when (boolean_swap exec_rot (integer_lt) () ())) () ())
Zero cases best errors: [1 0 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (497 155 277 154 155 1000 497 152 278 154)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (497 155 277 154 155 0 497 152 278 154)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Best program: (boolean_eq boolean_dup_items integer_min exec_noop boolean_and integer_add integer_stackdepth exec_while () integer_stackdepth integer_pop exec_eq exec_pop () exec_s_when_autoconstructing (integer_min in4 print_integer exec_when (exec_rot (exec_rot (exec_eq exec_dup () integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ()) () ()) () ())) () ())
Errors: [1 0 1 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 42
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 7.681
Median total errors in population: 8
Error averages by case: (0.503 0.845 0.723 0.846 0.845 1.0 0.503 0.848 0.722 0.846)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 32.214
Average program size in population (points): 45.789
Average percent parens in population: 0.280
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.94025
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 185
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 218
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1676087
--- Timings ---
Current time: 1559584063006 milliseconds
Total Time:          13.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.5 seconds, 68.2%
Fitness Testing:      3.5 seconds, 24.9%
Report:               0.9 seconds,  6.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 21                 
Correct output: 15                  | Program output: 86                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -73                
Correct output: -12                 | Program output: 23                 
Correct output: 24                  | Program output: 89                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 70                 
Correct output: 17                  | Program output: 92                 
Correct output: 10                  | Program output: 83                 
Correct output: 19                  | Program output: 49                 
Correct output: 36                  | Program output: 38                 
Correct output: 48                  | Program output: 66                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 49                 
Correct output: 30                  | Program output: 78                 
Correct output: 5                   | Program output: 88                 
Correct output: 23                  | Program output: 94                 
Correct output: 34                  | Program output: 78                 
Correct output: 5                   | Program output: 47                 
Correct output: 35                  | Program output: 63                 
Correct output: 34                  | Program output: 95                 
Correct output: 62                  | Program output: 98                 
Correct output: -4                  | Program output: 47                 
Correct output: -83                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: -31                
Correct output: -46                 | Program output: 73                 
Correct output: -57                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: 50                 
Correct output: -17                 | Program output: 93                 
Correct output: -38                 | Program output: 56                 
Correct output: -28                 | Program output: 32                 
Correct output: -12                 | Program output: 12                 
Correct output: -77                 | Program output: -47                
Correct output: -82                 | Program output: 11                 
Correct output: -63                 | Program output: -63                
Correct output: -60                 | Program output: 30                 
Correct output: -67                 | Program output: -26                
Correct output: 3                   | Program output: 21                 
Correct output: -70                 | Program output: 5                  
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -54                
Correct output: -96                 | Program output: 0                  
Correct output: -63                 | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: 94                 
Correct output: -26                 | Program output: 92                 
Correct output: -64                 | Program output: 83                 
Correct output: -100                | Program output: 39                 
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: 72                 
Correct output: -11                 | Program output: 9                  
Correct output: -65                 | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 88                 
Correct output: -73                 | Program output: -31                
Correct output: -100                | Program output: -42                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: 9                  
Correct output: -57                 | Program output: 63                 
Correct output: -60                 | Program output: 2                  
Correct output: -46                 | Program output: -46                
Correct output: -66                 | Program output: 28                 
Correct output: -88                 | Program output: -54                
Correct output: -94                 | Program output: 87                 
Correct output: -83                 | Program output: 65                 
Correct output: -55                 | Program output: 21                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: 11                 
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: 87                 
Correct output: -54                 | Program output: -43                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: -13                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Lexicase best program: (boolean_eq boolean_dup_items integer_min exec_noop boolean_and integer_add integer_stackdepth exec_while () integer_stackdepth integer_pop exec_eq exec_pop () exec_s_when_autoconstructing (integer_min in4 print_integer exec_when (exec_rot (exec_rot (exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())) () ()) () ())) () ())
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Zero cases best program: (boolean_eq boolean_dup_items integer_min exec_noop boolean_and integer_add integer_stackdepth exec_while () integer_stackdepth integer_pop exec_eq exec_pop () exec_s_when_autoconstructing (integer_min in4 print_integer exec_when (exec_rot (exec_rot (exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())) () ()) () ())) () ())
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (211 210 667 461 878 209 668 1 461 878)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (211 210 667 461 878 209 668 1 461 878)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k})
Best program: (boolean_eq boolean_dup_items integer_min exec_noop boolean_and integer_add integer_stackdepth exec_while () integer_stackdepth integer_pop exec_eq exec_pop () exec_s_when_autoconstructing (integer_min in4 print_integer exec_when (exec_rot (exec_rot (integer_lt exec_k () ()) () ()) () ())) () ())
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 21
Size: 36
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 5.356
Median total errors in population: 5
Error averages by case: (0.789 0.79 0.333 0.539 0.122 0.791 0.332 0.999 0.539 0.122)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.954
Average program size in population (points): 51.224
Average percent parens in population: 0.316
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.508625
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2005729
--- Timings ---
Current time: 1559584065530 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.4 seconds, 69.7%
Fitness Testing:      3.8 seconds, 23.5%
Report:               1.0 seconds,  6.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 86                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -59                
Correct output: -38                 | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -12                 | Program output: 23                 
Correct output: 24                  | Program output: 89                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 72                 
Correct output: 51                  | Program output: 60                 
Correct output: 37                  | Program output: 97                 
Correct output: 17                  | Program output: 31                 
Correct output: 10                  | Program output: 30                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 56                 
Correct output: 48                  | Program output: 49                 
Correct output: 21                  | Program output: 90                 
Correct output: 8                   | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 97                 
Correct output: 30                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 100                
Correct output: 34                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 35                  | Program output: 80                 
Correct output: 34                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: -4                  | Program output: -4                 
Correct output: -83                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: 26                 
Correct output: -46                 | Program output: 81                 
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -71                
Correct output: -95                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -38                 | Program output: 99                 
Correct output: -28                 | Program output: 73                 
Correct output: -12                 | Program output: 19                 
Correct output: -77                 | Program output: -59                
Correct output: -82                 | Program output: -75                
Correct output: -63                 | Program output: -41                
Correct output: -60                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -70                 | Program output: 46                 
Correct output: -32                 | Program output: -2                 
Correct output: -90                 | Program output: 63                 
Correct output: 10                  | Program output: 59                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: 90                 
Correct output: -63                 | Program output: -7                 
Correct output: -39                 | Program output: 47                 
Correct output: -39                 | Program output: 89                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: 75                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: -46                
Correct output: -75                 | Program output: 48                 
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: 35                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: 5                  
Correct output: 10                  | Program output: 81                 
Correct output: -87                 | Program output: 31                 
Correct output: -77                 | Program output: 49                 
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: 2                  
Correct output: -100                | Program output: -81                
Correct output: -52                 | Program output: 93                 
Correct output: -95                 | Program output: 71                 
Correct output: -57                 | Program output: 83                 
Correct output: -60                 | Program output: 90                 
Correct output: -46                 | Program output: -20                
Correct output: -66                 | Program output: 70                 
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -55                
Correct output: -83                 | Program output: 52                 
Correct output: -55                 | Program output: 40                 
Correct output: -49                 | Program output: 2                  
Correct output: -76                 | Program output: 27                 
Correct output: -72                 | Program output: 98                 
Correct output: -93                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -12                 | Program output: 91                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Lexicase best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () in4 exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Lexicase best errors: [1 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Zero cases best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer integer_mult exec_do*range (-50 exec_shove () in4 exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Zero cases best errors: [1 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (141 666 278 389 73 278 1000 139 277 1000)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (141 666 278 389 73 278 0 139 277 0)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction -50} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times})
Best program: (integer_dup_items boolean_invert_second_then_and in3 exec_pop (boolean_shove exec_yankdup integer_shove) print_integer print_integer exec_do*range (-50 exec_shove () exec_eq exec_dup (integer_flush integer_div boolean_not in2 integer_fromboolean exec_dup_times ())))
Errors: [1 0 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.759
Median total errors in population: 8
Error averages by case: (0.859 0.334 0.722 0.611 0.927 0.722 1.0 0.861 0.723 1.0)
Error minima by case: (0 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 30.495
Average program size in population (points): 44.175
Average percent parens in population: 0.304
Minimum age in population: 6.0
Maximum age in population: 10.75
Average age in population: 8.99425
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2287407
--- Timings ---
Current time: 1559584067944 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.3 seconds, 70.7%
Fitness Testing:      4.2 seconds, 22.3%
Report:               1.2 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 21                 
Correct output: 15                  | Program output: 15                 
Correct output: 97                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 89                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 58                 
Correct output: 51                  | Program output: 80                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 17                 
Correct output: 10                  | Program output: 12                 
Correct output: 19                  | Program output: 62                 
Correct output: 36                  | Program output: 36                 
Correct output: 48                  | Program output: 48                 
Correct output: 21                  | Program output: 60                 
Correct output: 8                   | Program output: 85                 
Correct output: 15                  | Program output: 34                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 5                   | Program output: 61                 
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 94                 
Correct output: 5                   | Program output: 28                 
Correct output: 35                  | Program output: 39                 
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 80                 
Correct output: -4                  | Program output: 22                 
Correct output: -83                 | Program output: -83                
Correct output: -67                 | Program output: -47                
Correct output: -31                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -57                 | Program output: 74                 
Correct output: -80                 | Program output: 90                 
Correct output: -95                 | Program output: -95                
Correct output: -17                 | Program output: 24                 
Correct output: -38                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 82                 
Correct output: -63                 | Program output: -53                
Correct output: -60                 | Program output: 9                  
Correct output: -67                 | Program output: 9                  
Correct output: 3                   | Program output: 63                 
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: -27                
Correct output: -90                 | Program output: 53                 
Correct output: 10                  | Program output: 39                 
Correct output: -83                 | Program output: -34                
Correct output: -96                 | Program output: -89                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 77                 
Correct output: -39                 | Program output: 43                 
Correct output: -84                 | Program output: -39                
Correct output: -26                 | Program output: 13                 
Correct output: -64                 | Program output: -50                
Correct output: -100                | Program output: -89                
Correct output: -66                 | Program output: 63                 
Correct output: -75                 | Program output: 66                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: -11                 | Program output: 62                 
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 12                 
Correct output: -87                 | Program output: -60                
Correct output: -77                 | Program output: 40                 
Correct output: -41                 | Program output: 17                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -38                
Correct output: -52                 | Program output: 47                 
Correct output: -95                 | Program output: 45                 
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: 66                 
Correct output: -46                 | Program output: 52                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: 23                 
Correct output: -94                 | Program output: -67                
Correct output: -83                 | Program output: 91                 
Correct output: -55                 | Program output: -55                
Correct output: -49                 | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 0                  
Correct output: -93                 | Program output: -93                
Correct output: -54                 | Program output: -34                
Correct output: -12                 | Program output: 33                 
Correct output: -96                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Lexicase best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_stackdepth boolean_dup_items exec_eq exec_pop () exec_s_when_autoconstructing (integer_dup_times integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Lexicase best errors: [1 0 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Zero cases best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_stackdepth boolean_dup_items exec_eq exec_pop () exec_s_when_autoconstructing (integer_dup_times integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Zero cases best errors: [1 0 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (440 100 440 460 4 133 100 900 133 802)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (440 100 440 460 4 133 100 900 133 802)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop exec_eq exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Errors: [1 0 1 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 32
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 6.488
Median total errors in population: 6
Error averages by case: (0.56 0.9 0.56 0.54 0.996 0.867 0.9 0.1 0.867 0.198)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.745
Average program size in population (points): 37.95
Average percent parens in population: 0.283
Minimum age in population: 7.25
Maximum age in population: 12.25
Average age in population: 10.510703125
Median age in population: 10.578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2547027
--- Timings ---
Current time: 1559584070601 milliseconds
Total Time:          21.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.5 seconds, 72.0%
Fitness Testing:      4.5 seconds, 21.1%
Report:               1.4 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 89                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 58                 
Correct output: 51                  | Program output: 60                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 17                 
Correct output: 10                  | Program output: 12                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 48                  | Program output: 48                 
Correct output: 21                  | Program output: 60                 
Correct output: 8                   | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 35                  | Program output: 39                 
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -4                  | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -71                
Correct output: -95                 | Program output: -95                
Correct output: -17                 | Program output: -17                
Correct output: -38                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -75                
Correct output: -63                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: -27                
Correct output: -90                 | Program output: 53                 
Correct output: 10                  | Program output: 39                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -89                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 47                 
Correct output: -39                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: 13                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -89                
Correct output: -66                 | Program output: -46                
Correct output: -75                 | Program output: 48                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 12                 
Correct output: -87                 | Program output: -60                
Correct output: -77                 | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -81                
Correct output: -52                 | Program output: 47                 
Correct output: -95                 | Program output: 45                 
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: 66                 
Correct output: -46                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -67                
Correct output: -83                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: -49                 | Program output: 2                  
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 0                  
Correct output: -93                 | Program output: -93                
Correct output: -54                 | Program output: -54                
Correct output: -12                 | Program output: 33                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Lexicase best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Lexicase best errors: [1 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Zero cases best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Zero cases best errors: [1 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (305 414 305 414 199 504 917 305 610 414)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (305 414 305 414 199 504 917 305 610 414)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Errors: [1 0 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 23
Size: 32
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 5.613
Median total errors in population: 5
Error averages by case: (0.695 0.586 0.695 0.586 0.801 0.496 0.083 0.695 0.39 0.586)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.928
Average program size in population (points): 34.302
Average percent parens in population: 0.296
Minimum age in population: 8.5
Maximum age in population: 13.7265625
Average age in population: 12.24228125
Median age in population: 12.234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.449
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2723337
--- Timings ---
Current time: 1559584072835 milliseconds
Total Time:          23.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.3 seconds, 73.1%
Fitness Testing:      4.7 seconds, 20.0%
Report:               1.5 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 86                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -12                 | Program output: 23                 
Correct output: 24                  | Program output: 89                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 70                 
Correct output: 17                  | Program output: 31                 
Correct output: 10                  | Program output: 30                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 38                 
Correct output: 48                  | Program output: 49                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 49                 
Correct output: 30                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 94                 
Correct output: 34                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: 35                  | Program output: 63                 
Correct output: 34                  | Program output: 66                 
Correct output: 62                  | Program output: 62                 
Correct output: -4                  | Program output: -4                 
Correct output: -83                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: -31                
Correct output: -46                 | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -60                
Correct output: -17                 | Program output: -17                
Correct output: -38                 | Program output: 56                 
Correct output: -28                 | Program output: 32                 
Correct output: -12                 | Program output: 12                 
Correct output: -77                 | Program output: -59                
Correct output: -82                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -60                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -70                 | Program output: 5                  
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: 0                  
Correct output: -63                 | Program output: -7                 
Correct output: -39                 | Program output: -39                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: 75                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: 48                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: 35                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -31                
Correct output: -100                | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: 9                  
Correct output: -57                 | Program output: 63                 
Correct output: -60                 | Program output: 2                  
Correct output: -46                 | Program output: -46                
Correct output: -66                 | Program output: 28                 
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -55                
Correct output: -83                 | Program output: 52                 
Correct output: -55                 | Program output: 21                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: 11                 
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -19                
Correct output: -54                 | Program output: -54                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Lexicase best program: (integer_empty exec_do*while (in4) integer_dup integer_sub boolean_flush integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Lexicase best errors: [0 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Zero cases best program: (integer_empty exec_do*while (in4) integer_dup integer_sub boolean_flush integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Zero cases best errors: [0 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 348 346 1000 557 565 348 348 907 1000)
Population mean number of elite cases: 5.77
Count of perfect (error zero) individuals by case: (348 348 346 0 557 565 348 348 907 0)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Best program: (integer_empty exec_do*while (in4) integer_dup integer_sub boolean_flush integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Errors: [0 0 0 1 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 6.233
Median total errors in population: 7
Error averages by case: (0.652 0.652 0.654 1.0 0.443 0.435 0.652 0.652 0.093 1.0)
Error minima by case: (0 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 24.403
Average program size in population (points): 35.56
Average percent parens in population: 0.311
Minimum age in population: 11.328125
Maximum age in population: 15.375
Average age in population: 14.1886875
Median age in population: 14.1015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 415
Genome diversity (% unique genomes):	 0.416
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 435
Syntactic diversity (% unique Push programs):	 0.383
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2912811
--- Timings ---
Current time: 1559584075167 milliseconds
Total Time:          26.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.3 seconds, 74.0%
Fitness Testing:      5.0 seconds, 19.0%
Report:               1.7 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 89                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 58                 
Correct output: 51                  | Program output: 60                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 17                 
Correct output: 10                  | Program output: 12                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 48                  | Program output: 48                 
Correct output: 21                  | Program output: 60                 
Correct output: 8                   | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 35                  | Program output: 39                 
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -4                  | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -71                
Correct output: -95                 | Program output: -95                
Correct output: -17                 | Program output: -17                
Correct output: -38                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -75                
Correct output: -63                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: -27                
Correct output: -90                 | Program output: 53                 
Correct output: 10                  | Program output: 39                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -89                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 47                 
Correct output: -39                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: 13                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -89                
Correct output: -66                 | Program output: -46                
Correct output: -75                 | Program output: 48                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 12                 
Correct output: -87                 | Program output: -60                
Correct output: -77                 | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -81                
Correct output: -52                 | Program output: 47                 
Correct output: -95                 | Program output: 45                 
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: 66                 
Correct output: -46                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -67                
Correct output: -83                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: -49                 | Program output: 2                  
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 0                  
Correct output: -93                 | Program output: -93                
Correct output: -54                 | Program output: -54                
Correct output: -12                 | Program output: 33                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Lexicase best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_empty integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 32
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Zero cases best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_empty integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 32
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (152 152 150 152 723 929 878 877 152 1000)
Population mean number of elite cases: 5.16
Count of perfect (error zero) individuals by case: (152 152 150 152 723 929 878 877 152 0)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 23
Size: 32
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 5.835
Median total errors in population: 6
Error averages by case: (0.848 0.848 0.85 0.848 0.277 0.071 0.122 0.123 0.848 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 23.852
Average program size in population (points): 33.671
Average percent parens in population: 0.291
Minimum age in population: 14.06640625
Maximum age in population: 17.107421875
Average age in population: 16.10469921875
Median age in population: 15.884765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 548
Genome diversity (% unique genomes):	 0.33
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 558
Syntactic diversity (% unique Push programs):	 0.308
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3120587
--- Timings ---
Current time: 1559584077868 milliseconds
Total Time:          28.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.6 seconds, 75.0%
Fitness Testing:      5.2 seconds, 18.1%
Report:               1.9 seconds,  6.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 89                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 58                 
Correct output: 51                  | Program output: 60                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 17                 
Correct output: 10                  | Program output: 12                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 48                  | Program output: 48                 
Correct output: 21                  | Program output: 60                 
Correct output: 8                   | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: 35                  | Program output: 39                 
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -4                  | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -71                
Correct output: -95                 | Program output: -95                
Correct output: -17                 | Program output: -17                
Correct output: -38                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -75                
Correct output: -63                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: -27                
Correct output: -90                 | Program output: 53                 
Correct output: 10                  | Program output: 39                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -89                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 47                 
Correct output: -39                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: 13                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -89                
Correct output: -66                 | Program output: -46                
Correct output: -75                 | Program output: 48                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 12                 
Correct output: -87                 | Program output: -60                
Correct output: -77                 | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -81                
Correct output: -52                 | Program output: 47                 
Correct output: -95                 | Program output: 45                 
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: 66                 
Correct output: -46                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -67                
Correct output: -83                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: -49                 | Program output: 2                  
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 0                  
Correct output: -93                 | Program output: -93                
Correct output: -54                 | Program output: -54                
Correct output: -12                 | Program output: 33                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Lexicase best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 32
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Zero cases best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 32
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (935 893 888 884 924 923 742 1 741 738)
Population mean number of elite cases: 7.67
Count of perfect (error zero) individuals by case: (935 893 888 884 924 923 742 1 741 738)
Population mean number of perfect (error zero) cases: 7.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (boolean_pop boolean_stackdepth boolean_shove) boolean_eq boolean_dup_times boolean_swap) () ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 2.331
Median total errors in population: 1
Error averages by case: (0.065 0.107 0.112 0.116 0.076 0.077 0.258 0.999 0.259 0.262)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.245
Average program size in population (points): 32.493
Average percent parens in population: 0.284
Minimum age in population: 15.06640625
Maximum age in population: 18.99609375
Average age in population: 17.4456474609375
Median age in population: 17.4931640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 365
Genome diversity (% unique genomes):	 0.357
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 405
Syntactic diversity (% unique Push programs):	 0.328
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3306593
--- Timings ---
Current time: 1559584080039 milliseconds
Total Time:          30.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.4 seconds, 75.5%
Fitness Testing:      5.4 seconds, 17.5%
Report:               2.0 seconds,  6.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 17                 
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 48                  | Program output: 48                 
Correct output: 21                  | Program output: 60                 
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 35                  | Program output: 35                 
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -4                  | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -71                
Correct output: -95                 | Program output: -95                
Correct output: -17                 | Program output: -17                
Correct output: -38                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: -27                
Correct output: -90                 | Program output: -18                
Correct output: 10                  | Program output: 39                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -16                
Correct output: -39                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -46                
Correct output: -75                 | Program output: -75                
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 12                 
Correct output: -87                 | Program output: -60                
Correct output: -77                 | Program output: -4                 
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -52                 | Program output: 44                 
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -46                 | Program output: -41                
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -49                 | Program output: -19                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 0                  
Correct output: -93                 | Program output: -93                
Correct output: -54                 | Program output: -54                
Correct output: -12                 | Program output: 33                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Lexicase best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 40
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Zero cases best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 40
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (113 801 793 801 803 113 793 823 1 1)
Population mean number of elite cases: 5.04
Count of perfect (error zero) individuals by case: (113 801 793 801 803 113 793 823 1 1)
Population mean number of perfect (error zero) cases: 5.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ())
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 27
Size: 40
Percent parens: 0.325
--- Population Statistics ---
Average total errors in population: 4.958
Median total errors in population: 4
Error averages by case: (0.887 0.199 0.207 0.199 0.197 0.887 0.207 0.177 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.105
Average program size in population (points): 32.235
Average percent parens in population: 0.282
Minimum age in population: 16.583984375
Maximum age in population: 20.82861328125
Average age in population: 18.92960595703125
Median age in population: 18.92236328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 304
Genome diversity (% unique genomes):	 0.41
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 353
Syntactic diversity (% unique Push programs):	 0.371
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3488071
--- Timings ---
Current time: 1559584082171 milliseconds
Total Time:          33.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.1 seconds, 76.0%
Fitness Testing:      5.6 seconds, 17.0%
Report:               2.2 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 17                 
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 48                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 35                  | Program output: 35                 
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -4                  | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: -31                
Correct output: -46                 | Program output: -46                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -17                 | Program output: -17                
Correct output: -38                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -63                
Correct output: -60                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -46                 | Program output: -46                
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -54                 | Program output: -54                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Lexicase best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Zero cases best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (701 194 699 921 699 194 699 700 194 194)
Population mean number of elite cases: 5.20
Count of perfect (error zero) individuals by case: (701 194 699 921 699 194 699 700 194 194)
Population mean number of perfect (error zero) cases: 5.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap})
Best program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 30
Size: 46
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 4.805
Median total errors in population: 4
Error averages by case: (0.299 0.806 0.301 0.079 0.301 0.806 0.301 0.3 0.806 0.806)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.167
Average program size in population (points): 38.3
Average percent parens in population: 0.315
Minimum age in population: 20.4794921875
Maximum age in population: 21.56396484375
Average age in population: 21.08092993164062
Median age in population: 21.521728515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 500
Genome diversity (% unique genomes):	 0.327
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 512
Syntactic diversity (% unique Push programs):	 0.305
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 3693991
--- Timings ---
Current time: 1559584084736 milliseconds
Total Time:          35.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.2 seconds, 76.5%
Fitness Testing:      5.8 seconds, 16.4%
Report:               2.4 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 13
Successful program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 46


Auto-simplifying with starting size: 46
step: 0
program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 500
program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 1000
program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 1500
program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 2000
program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 2500
program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 3000
program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 3500
program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 4000
program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 4500
program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 5000
program: (boolean_eq boolean_dup_items integer_min exec_noop in1 integer_add integer_stackdepth exec_while () integer_empty integer_pop in3 exec_pop () exec_s_when_autoconstructing (integer_min in4 exec_s_when_autoconstructing (integer_min in2 exec_pop () exec_s_when_autoconstructing (integer_min integer_shove print_integer exec_when (exec_k_when_autoconstructing (boolean_stackdepth boolean_shove) (boolean_eq boolean_dup_times boolean_swap))) () ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 97                  | Program output: 97                 
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: 30                  | Program output: 30                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 17                 
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 48                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 34                  | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 35                  | Program output: 35                 
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -4                  | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -67                 | Program output: -67                
Correct output: -31                 | Program output: -31                
Correct output: -46                 | Program output: -46                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -17                 | Program output: -17                
Correct output: -38                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -63                
Correct output: -60                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -46                 | Program output: -46                
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -55                 | Program output: -55                
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -54                 | Program output: -54                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: -96                
;;******************************
