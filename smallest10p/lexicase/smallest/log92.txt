Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-5 -5 54 -5] -5] [[66 66 42 66] 42] [[-71 -71 -64 -71] -71] [[-18 -18 -11 -18] -18] [[14 -12 -12 -12] -12] [[-30 -30 -30 -3] -30] [[87 87 60 87] 60] [[11 11 11 -65] -65] [[12 12 12 48] 12] [[67 67 67 -71] -71] [(-92 -92 -92 -92) -92] [(75 75 75 75) 75] [(-11 -11 -11 -11) -11] [(-65 -65 -65 -65) -65] [(-6 -6 -6 -6) -6] [(23 38 45 36) 23] [(27 95 79 31) 27] [(74 14 35 19) 14] [(34 94 55 48) 34] [(48 61 94 82) 48] [(86 70 60 48) 48] [(2 36 3 67) 2] [(10 38 88 77) 10] [(42 0 93 53) 0] [(71 3 80 66) 3] [(21 18 91 95) 18] [(34 25 21 1) 1] [(78 93 81 17) 17] [(30 58 33 90) 30] [(58 54 99 20) 20] [(44 25 91 58) 25] [(88 96 38 34) 34] [(96 46 89 49) 46] [(81 21 31 87) 21] [(6 90 37 0) 0] [(-95 -40 11 40) -95] [(28 10 17 97) 10] [(-64 -52 10 -62) -64] [(69 -24 1 57) -24] [(-79 -54 50 37) -79] [(-45 -71 5 2) -71] [(-94 41 -85 -94) -94] [(4 5 -35 -81) -81] [(-32 70 -49 22) -49] [(-30 52 94 -37) -37] [(-45 13 4 -86) -86] [(-84 69 -76 -34) -84] [(3 56 96 -67) -67] [(38 40 -57 -33) -57] [(42 6 98 -33) -33] [(51 -29 70 -67) -67] [(-4 -98 7 11) -98] [(-55 26 48 -96) -96] [(-58 58 -69 -91) -91] [(-25 -3 53 20) -25] [(-82 -45 2 -81) -82] [(-75 -53 -3 -64) -75] [(27 81 73 -4) -4] [(45 -74 -65 67) -74] [(54 2 74 -78) -78] [(87 50 79 -24) -24] [(68 91 -48 -6) -48] [(65 56 -26 -95) -95] [(-55 2 -70 -11) -70] [(17 -24 -88 47) -88] [(-61 -50 21 71) -61] [(-85 -59 83 -43) -85] [(-53 -9 -29 -99) -99] [(-66 -91 -74 -69) -91] [(-1 -89 -72 68) -89] [(90 -62 13 -15) -62] [(-81 14 -58 -100) -100] [(-87 -3 5 59) -87] [(70 8 -29 90) -29] [(-84 23 -48 59) -84] [(65 -14 -67 -64) -67] [(65 -67 25 42) -67] [(5 30 27 -16) -16] [(2 35 59 -91) -91] [(-78 91 -75 -79) -79] [(46 -13 -46 -46) -46] [(93 97 90 -36) -36] [(84 14 -1 -42) -42] [(82 -100 -72 72) -100] [(26 -95 -56 41) -95] [(-33 -45 -93 88) -93] [(55 52 55 -29) -29] [(13 -53 -100 -67) -100] [(39 -56 -41 -99) -99] [(-4 -7 64 -5) -7] [(83 76 -73 0) -73] [(10 -54 8 81) -54] [(-64 11 10 98) -64] [(65 3 59 -33) -33] [(50 96 -39 -68) -68])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-5 -5 54 -5] -5]
Train Case:   6 | Input/Output: [[66 66 42 66] 42]
Train Case:   7 | Input/Output: [[-71 -71 -64 -71] -71]
Train Case:   8 | Input/Output: [[-18 -18 -11 -18] -18]
Train Case:   9 | Input/Output: [[14 -12 -12 -12] -12]
Train Case:  10 | Input/Output: [[-30 -30 -30 -3] -30]
Train Case:  11 | Input/Output: [[87 87 60 87] 60]
Train Case:  12 | Input/Output: [[11 11 11 -65] -65]
Train Case:  13 | Input/Output: [[12 12 12 48] 12]
Train Case:  14 | Input/Output: [[67 67 67 -71] -71]
Train Case:  15 | Input/Output: [(-92 -92 -92 -92) -92]
Train Case:  16 | Input/Output: [(75 75 75 75) 75]
Train Case:  17 | Input/Output: [(-11 -11 -11 -11) -11]
Train Case:  18 | Input/Output: [(-65 -65 -65 -65) -65]
Train Case:  19 | Input/Output: [(-6 -6 -6 -6) -6]
Train Case:  20 | Input/Output: [(23 38 45 36) 23]
Train Case:  21 | Input/Output: [(27 95 79 31) 27]
Train Case:  22 | Input/Output: [(74 14 35 19) 14]
Train Case:  23 | Input/Output: [(34 94 55 48) 34]
Train Case:  24 | Input/Output: [(48 61 94 82) 48]
Train Case:  25 | Input/Output: [(86 70 60 48) 48]
Train Case:  26 | Input/Output: [(2 36 3 67) 2]
Train Case:  27 | Input/Output: [(10 38 88 77) 10]
Train Case:  28 | Input/Output: [(42 0 93 53) 0]
Train Case:  29 | Input/Output: [(71 3 80 66) 3]
Train Case:  30 | Input/Output: [(21 18 91 95) 18]
Train Case:  31 | Input/Output: [(34 25 21 1) 1]
Train Case:  32 | Input/Output: [(78 93 81 17) 17]
Train Case:  33 | Input/Output: [(30 58 33 90) 30]
Train Case:  34 | Input/Output: [(58 54 99 20) 20]
Train Case:  35 | Input/Output: [(44 25 91 58) 25]
Train Case:  36 | Input/Output: [(88 96 38 34) 34]
Train Case:  37 | Input/Output: [(96 46 89 49) 46]
Train Case:  38 | Input/Output: [(81 21 31 87) 21]
Train Case:  39 | Input/Output: [(6 90 37 0) 0]
Train Case:  40 | Input/Output: [(-95 -40 11 40) -95]
Train Case:  41 | Input/Output: [(28 10 17 97) 10]
Train Case:  42 | Input/Output: [(-64 -52 10 -62) -64]
Train Case:  43 | Input/Output: [(69 -24 1 57) -24]
Train Case:  44 | Input/Output: [(-79 -54 50 37) -79]
Train Case:  45 | Input/Output: [(-45 -71 5 2) -71]
Train Case:  46 | Input/Output: [(-94 41 -85 -94) -94]
Train Case:  47 | Input/Output: [(4 5 -35 -81) -81]
Train Case:  48 | Input/Output: [(-32 70 -49 22) -49]
Train Case:  49 | Input/Output: [(-30 52 94 -37) -37]
Train Case:  50 | Input/Output: [(-45 13 4 -86) -86]
Train Case:  51 | Input/Output: [(-84 69 -76 -34) -84]
Train Case:  52 | Input/Output: [(3 56 96 -67) -67]
Train Case:  53 | Input/Output: [(38 40 -57 -33) -57]
Train Case:  54 | Input/Output: [(42 6 98 -33) -33]
Train Case:  55 | Input/Output: [(51 -29 70 -67) -67]
Train Case:  56 | Input/Output: [(-4 -98 7 11) -98]
Train Case:  57 | Input/Output: [(-55 26 48 -96) -96]
Train Case:  58 | Input/Output: [(-58 58 -69 -91) -91]
Train Case:  59 | Input/Output: [(-25 -3 53 20) -25]
Train Case:  60 | Input/Output: [(-82 -45 2 -81) -82]
Train Case:  61 | Input/Output: [(-75 -53 -3 -64) -75]
Train Case:  62 | Input/Output: [(27 81 73 -4) -4]
Train Case:  63 | Input/Output: [(45 -74 -65 67) -74]
Train Case:  64 | Input/Output: [(54 2 74 -78) -78]
Train Case:  65 | Input/Output: [(87 50 79 -24) -24]
Train Case:  66 | Input/Output: [(68 91 -48 -6) -48]
Train Case:  67 | Input/Output: [(65 56 -26 -95) -95]
Train Case:  68 | Input/Output: [(-55 2 -70 -11) -70]
Train Case:  69 | Input/Output: [(17 -24 -88 47) -88]
Train Case:  70 | Input/Output: [(-61 -50 21 71) -61]
Train Case:  71 | Input/Output: [(-85 -59 83 -43) -85]
Train Case:  72 | Input/Output: [(-53 -9 -29 -99) -99]
Train Case:  73 | Input/Output: [(-66 -91 -74 -69) -91]
Train Case:  74 | Input/Output: [(-1 -89 -72 68) -89]
Train Case:  75 | Input/Output: [(90 -62 13 -15) -62]
Train Case:  76 | Input/Output: [(-81 14 -58 -100) -100]
Train Case:  77 | Input/Output: [(-87 -3 5 59) -87]
Train Case:  78 | Input/Output: [(70 8 -29 90) -29]
Train Case:  79 | Input/Output: [(-84 23 -48 59) -84]
Train Case:  80 | Input/Output: [(65 -14 -67 -64) -67]
Train Case:  81 | Input/Output: [(65 -67 25 42) -67]
Train Case:  82 | Input/Output: [(5 30 27 -16) -16]
Train Case:  83 | Input/Output: [(2 35 59 -91) -91]
Train Case:  84 | Input/Output: [(-78 91 -75 -79) -79]
Train Case:  85 | Input/Output: [(46 -13 -46 -46) -46]
Train Case:  86 | Input/Output: [(93 97 90 -36) -36]
Train Case:  87 | Input/Output: [(84 14 -1 -42) -42]
Train Case:  88 | Input/Output: [(82 -100 -72 72) -100]
Train Case:  89 | Input/Output: [(26 -95 -56 41) -95]
Train Case:  90 | Input/Output: [(-33 -45 -93 88) -93]
Train Case:  91 | Input/Output: [(55 52 55 -29) -29]
Train Case:  92 | Input/Output: [(13 -53 -100 -67) -100]
Train Case:  93 | Input/Output: [(39 -56 -41 -99) -99]
Train Case:  94 | Input/Output: [(-4 -7 64 -5) -7]
Train Case:  95 | Input/Output: [(83 76 -73 0) -73]
Train Case:  96 | Input/Output: [(10 -54 8 81) -54]
Train Case:  97 | Input/Output: [(-64 11 10 98) -64]
Train Case:  98 | Input/Output: [(65 3 59 -33) -33]
Train Case:  99 | Input/Output: [(50 96 -39 -68) -68]
Test Case:   0 | Input/Output: [[63 63 63 95] 63]
Test Case:   1 | Input/Output: [[22 22 -88 22] -88]
Test Case:   2 | Input/Output: [[-59 -59 -21 -59] -59]
Test Case:   3 | Input/Output: [[-52 -11 -52 -52] -52]
Test Case:   4 | Input/Output: [[39 39 6 39] 6]
Test Case:   5 | Input/Output: [[0 0 -5 0] -5]
Test Case:   6 | Input/Output: [[26 26 -49 26] -49]
Test Case:   7 | Input/Output: [[-30 84 84 84] -30]
Test Case:   8 | Input/Output: [[14 14 -57 14] -57]
Test Case:   9 | Input/Output: [[70 -26 70 70] -26]
Test Case:  10 | Input/Output: [[-8 -8 -8 95] -8]
Test Case:  11 | Input/Output: [[-4 -27 -27 -27] -27]
Test Case:  12 | Input/Output: [[43 -85 -85 -85] -85]
Test Case:  13 | Input/Output: [[-17 -17 12 -17] -17]
Test Case:  14 | Input/Output: [[51 51 -3 51] -3]
Test Case:  15 | Input/Output: [[-29 -29 29 -29] -29]
Test Case:  16 | Input/Output: [[-62 30 30 30] -62]
Test Case:  17 | Input/Output: [[61 61 34 61] 34]
Test Case:  18 | Input/Output: [[-58 -74 -58 -58] -74]
Test Case:  19 | Input/Output: [[40 -60 40 40] -60]
Test Case:  20 | Input/Output: [[-25 100 -25 -25] -25]
Test Case:  21 | Input/Output: [[-95 -95 95 -95] -95]
Test Case:  22 | Input/Output: [[19 62 19 19] 19]
Test Case:  23 | Input/Output: [[-28 -28 76 -28] -28]
Test Case:  24 | Input/Output: [[55 96 96 96] 55]
Test Case:  25 | Input/Output: [[-57 -57 -57 -25] -57]
Test Case:  26 | Input/Output: [[73 90 73 73] 73]
Test Case:  27 | Input/Output: [[-65 -60 -60 -60] -65]
Test Case:  28 | Input/Output: [[-7 -7 86 -7] -7]
Test Case:  29 | Input/Output: [[18 22 22 22] 18]
Test Case:  30 | Input/Output: [[17 98 17 17] 17]
Test Case:  31 | Input/Output: [[-27 -27 -27 63] -27]
Test Case:  32 | Input/Output: [[-27 -7 -27 -27] -27]
Test Case:  33 | Input/Output: [[5 5 37 5] 5]
Test Case:  34 | Input/Output: [[16 53 53 53] 16]
Test Case:  35 | Input/Output: [[95 74 74 74] 74]
Test Case:  36 | Input/Output: [[-9 -26 -26 -26] -26]
Test Case:  37 | Input/Output: [[56 56 46 56] 46]
Test Case:  38 | Input/Output: [[1 15 15 15] 1]
Test Case:  39 | Input/Output: [[-91 83 -91 -91] -91]
Test Case:  40 | Input/Output: [[21 21 21 -63] -63]
Test Case:  41 | Input/Output: [[-29 -29 -29 -28] -29]
Test Case:  42 | Input/Output: [[86 44 86 86] 44]
Test Case:  43 | Input/Output: [[-12 -69 -69 -69] -69]
Test Case:  44 | Input/Output: [[-62 -62 -56 -62] -62]
Test Case:  45 | Input/Output: [[-86 95 95 95] -86]
Test Case:  46 | Input/Output: [[30 74 30 30] 30]
Test Case:  47 | Input/Output: [[97 77 97 97] 77]
Test Case:  48 | Input/Output: [[-67 -36 -36 -36] -67]
Test Case:  49 | Input/Output: [[-21 54 -21 -21] -21]
Test Case:  50 | Input/Output: [[73 94 94 94] 73]
Test Case:  51 | Input/Output: [[70 58 70 70] 58]
Test Case:  52 | Input/Output: [[-43 -43 -99 -43] -99]
Test Case:  53 | Input/Output: [[98 98 -44 98] -44]
Test Case:  54 | Input/Output: [[-45 4 -45 -45] -45]
Test Case:  55 | Input/Output: [[-71 -71 -63 -71] -71]
Test Case:  56 | Input/Output: [[95 -98 95 95] -98]
Test Case:  57 | Input/Output: [[-25 -25 19 -25] -25]
Test Case:  58 | Input/Output: [[27 27 27 32] 27]
Test Case:  59 | Input/Output: [[1 1 21 1] 1]
Test Case:  60 | Input/Output: [[69 90 69 69] 69]
Test Case:  61 | Input/Output: [[-83 40 -83 -83] -83]
Test Case:  62 | Input/Output: [[82 82 82 82] 82]
Test Case:  63 | Input/Output: [[77 77 43 77] 43]
Test Case:  64 | Input/Output: [[-54 -54 61 -54] -54]
Test Case:  65 | Input/Output: [[12 12 88 12] 12]
Test Case:  66 | Input/Output: [[38 17 17 17] 17]
Test Case:  67 | Input/Output: [[99 99 99 -98] -98]
Test Case:  68 | Input/Output: [[25 25 97 25] 25]
Test Case:  69 | Input/Output: [[20 -14 20 20] -14]
Test Case:  70 | Input/Output: [[-3 -3 -3 -88] -88]
Test Case:  71 | Input/Output: [[-94 -85 -85 -85] -94]
Test Case:  72 | Input/Output: [[13 13 13 54] 13]
Test Case:  73 | Input/Output: [[56 94 94 94] 56]
Test Case:  74 | Input/Output: [[38 38 38 64] 38]
Test Case:  75 | Input/Output: [[15 -94 15 15] -94]
Test Case:  76 | Input/Output: [[87 57 57 57] 57]
Test Case:  77 | Input/Output: [[100 100 89 100] 89]
Test Case:  78 | Input/Output: [[9 27 9 9] 9]
Test Case:  79 | Input/Output: [[-44 -44 47 -44] -44]
Test Case:  80 | Input/Output: [[-95 -95 -95 39] -95]
Test Case:  81 | Input/Output: [[26 26 26 76] 26]
Test Case:  82 | Input/Output: [[21 21 21 43] 21]
Test Case:  83 | Input/Output: [[34 34 34 12] 12]
Test Case:  84 | Input/Output: [[30 30 69 30] 30]
Test Case:  85 | Input/Output: [[39 78 39 39] 39]
Test Case:  86 | Input/Output: [[29 29 29 -76] -76]
Test Case:  87 | Input/Output: [[67 -64 67 67] -64]
Test Case:  88 | Input/Output: [[78 47 47 47] 47]
Test Case:  89 | Input/Output: [[-42 -42 -42 -49] -49]
Test Case:  90 | Input/Output: [[-23 72 -23 -23] -23]
Test Case:  91 | Input/Output: [[93 48 93 93] 48]
Test Case:  92 | Input/Output: [[61 61 61 58] 58]
Test Case:  93 | Input/Output: [[70 22 22 22] 22]
Test Case:  94 | Input/Output: [[-85 -59 -59 -59] -85]
Test Case:  95 | Input/Output: [[-64 -64 -64 12] -64]
Test Case:  96 | Input/Output: [[-76 86 86 86] -76]
Test Case:  97 | Input/Output: [[-2 -67 -67 -67] -67]
Test Case:  98 | Input/Output: [[-40 34 -40 -40] -40]
Test Case:  99 | Input/Output: [[26 -15 -15 -15] -15]
Test Case: 100 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 101 | Input/Output: [(88 88 88 88) 88]
Test Case: 102 | Input/Output: [(97 97 97 97) 97]
Test Case: 103 | Input/Output: [(54 54 54 54) 54]
Test Case: 104 | Input/Output: [(47 47 47 47) 47]
Test Case: 105 | Input/Output: [(90 90 90 90) 90]
Test Case: 106 | Input/Output: [(64 64 64 64) 64]
Test Case: 107 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 108 | Input/Output: [(68 68 68 68) 68]
Test Case: 109 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 110 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 111 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 112 | Input/Output: [(88 88 88 88) 88]
Test Case: 113 | Input/Output: [(6 6 6 6) 6]
Test Case: 114 | Input/Output: [(37 37 37 37) 37]
Test Case: 115 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 116 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 117 | Input/Output: [(76 76 76 76) 76]
Test Case: 118 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 119 | Input/Output: [(90 90 90 90) 90]
Test Case: 120 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 121 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 122 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 123 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 124 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 125 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 126 | Input/Output: [(14 14 14 14) 14]
Test Case: 127 | Input/Output: [(44 44 44 44) 44]
Test Case: 128 | Input/Output: [(98 98 98 98) 98]
Test Case: 129 | Input/Output: [(12 12 12 12) 12]
Test Case: 130 | Input/Output: [(31 31 31 31) 31]
Test Case: 131 | Input/Output: [(1 1 1 1) 1]
Test Case: 132 | Input/Output: [(49 49 49 49) 49]
Test Case: 133 | Input/Output: [(58 58 58 58) 58]
Test Case: 134 | Input/Output: [(79 79 79 79) 79]
Test Case: 135 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 136 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 137 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 138 | Input/Output: [(25 25 25 25) 25]
Test Case: 139 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 140 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 141 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 142 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 143 | Input/Output: [(65 65 65 65) 65]
Test Case: 144 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 145 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 146 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 147 | Input/Output: [(27 27 27 27) 27]
Test Case: 148 | Input/Output: [(52 52 52 52) 52]
Test Case: 149 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 150 | Input/Output: [(89 89 89 89) 89]
Test Case: 151 | Input/Output: [(7 7 7 7) 7]
Test Case: 152 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 153 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 154 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 155 | Input/Output: [(20 20 20 20) 20]
Test Case: 156 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 157 | Input/Output: [(21 21 21 21) 21]
Test Case: 158 | Input/Output: [(60 60 60 60) 60]
Test Case: 159 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 160 | Input/Output: [(44 44 44 44) 44]
Test Case: 161 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 162 | Input/Output: [(86 86 86 86) 86]
Test Case: 163 | Input/Output: [(36 36 36 36) 36]
Test Case: 164 | Input/Output: [(37 37 37 37) 37]
Test Case: 165 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 166 | Input/Output: [(84 84 84 84) 84]
Test Case: 167 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 168 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 169 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 170 | Input/Output: [(36 36 36 36) 36]
Test Case: 171 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 172 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 173 | Input/Output: [(75 75 75 75) 75]
Test Case: 174 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 175 | Input/Output: [(14 14 14 14) 14]
Test Case: 176 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 177 | Input/Output: [(23 23 23 23) 23]
Test Case: 178 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 179 | Input/Output: [(15 15 15 15) 15]
Test Case: 180 | Input/Output: [(60 60 60 60) 60]
Test Case: 181 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 182 | Input/Output: [(78 78 78 78) 78]
Test Case: 183 | Input/Output: [(82 82 82 82) 82]
Test Case: 184 | Input/Output: [(0 0 0 0) 0]
Test Case: 185 | Input/Output: [(46 46 46 46) 46]
Test Case: 186 | Input/Output: [(76 76 76 76) 76]
Test Case: 187 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 188 | Input/Output: [(31 31 31 31) 31]
Test Case: 189 | Input/Output: [(80 80 80 80) 80]
Test Case: 190 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 191 | Input/Output: [(90 90 90 90) 90]
Test Case: 192 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 193 | Input/Output: [(55 55 55 55) 55]
Test Case: 194 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 195 | Input/Output: [(69 69 69 69) 69]
Test Case: 196 | Input/Output: [(40 40 40 40) 40]
Test Case: 197 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 198 | Input/Output: [(31 31 31 31) 31]
Test Case: 199 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 200 | Input/Output: [(60 25 2 45) 2]
Test Case: 201 | Input/Output: [(45 71 66 91) 45]
Test Case: 202 | Input/Output: [(19 35 72 83) 19]
Test Case: 203 | Input/Output: [(76 36 60 62) 36]
Test Case: 204 | Input/Output: [(82 80 89 65) 65]
Test Case: 205 | Input/Output: [(81 6 86 15) 6]
Test Case: 206 | Input/Output: [(57 82 62 93) 57]
Test Case: 207 | Input/Output: [(82 39 57 24) 24]
Test Case: 208 | Input/Output: [(77 90 49 17) 17]
Test Case: 209 | Input/Output: [(83 89 99 80) 80]
Test Case: 210 | Input/Output: [(62 72 17 58) 17]
Test Case: 211 | Input/Output: [(72 71 65 37) 37]
Test Case: 212 | Input/Output: [(44 83 41 100) 41]
Test Case: 213 | Input/Output: [(98 26 37 26) 26]
Test Case: 214 | Input/Output: [(84 41 43 6) 6]
Test Case: 215 | Input/Output: [(24 87 68 13) 13]
Test Case: 216 | Input/Output: [(89 15 77 17) 15]
Test Case: 217 | Input/Output: [(49 57 65 89) 49]
Test Case: 218 | Input/Output: [(31 12 55 79) 12]
Test Case: 219 | Input/Output: [(57 83 74 76) 57]
Test Case: 220 | Input/Output: [(77 29 88 52) 29]
Test Case: 221 | Input/Output: [(41 98 74 5) 5]
Test Case: 222 | Input/Output: [(50 47 69 74) 47]
Test Case: 223 | Input/Output: [(62 64 94 13) 13]
Test Case: 224 | Input/Output: [(24 32 38 75) 24]
Test Case: 225 | Input/Output: [(78 68 83 83) 68]
Test Case: 226 | Input/Output: [(30 19 95 64) 19]
Test Case: 227 | Input/Output: [(87 62 31 45) 31]
Test Case: 228 | Input/Output: [(65 91 60 23) 23]
Test Case: 229 | Input/Output: [(14 57 7 75) 7]
Test Case: 230 | Input/Output: [(48 95 80 47) 47]
Test Case: 231 | Input/Output: [(45 55 87 23) 23]
Test Case: 232 | Input/Output: [(27 20 4 94) 4]
Test Case: 233 | Input/Output: [(25 86 2 88) 2]
Test Case: 234 | Input/Output: [(5 45 75 45) 5]
Test Case: 235 | Input/Output: [(59 64 43 36) 36]
Test Case: 236 | Input/Output: [(63 71 29 97) 29]
Test Case: 237 | Input/Output: [(86 64 62 30) 30]
Test Case: 238 | Input/Output: [(53 55 75 21) 21]
Test Case: 239 | Input/Output: [(35 60 33 99) 33]
Test Case: 240 | Input/Output: [(41 17 92 43) 17]
Test Case: 241 | Input/Output: [(45 91 68 10) 10]
Test Case: 242 | Input/Output: [(15 48 58 15) 15]
Test Case: 243 | Input/Output: [(78 100 48 24) 24]
Test Case: 244 | Input/Output: [(70 97 30 73) 30]
Test Case: 245 | Input/Output: [(32 81 58 75) 32]
Test Case: 246 | Input/Output: [(11 77 16 50) 11]
Test Case: 247 | Input/Output: [(21 56 94 94) 21]
Test Case: 248 | Input/Output: [(36 52 59 39) 36]
Test Case: 249 | Input/Output: [(68 45 66 87) 45]
Test Case: 250 | Input/Output: [(37 29 71 50) 29]
Test Case: 251 | Input/Output: [(79 95 98 29) 29]
Test Case: 252 | Input/Output: [(97 20 36 66) 20]
Test Case: 253 | Input/Output: [(46 41 60 100) 41]
Test Case: 254 | Input/Output: [(12 34 66 100) 12]
Test Case: 255 | Input/Output: [(94 80 45 17) 17]
Test Case: 256 | Input/Output: [(89 43 75 0) 0]
Test Case: 257 | Input/Output: [(9 63 91 66) 9]
Test Case: 258 | Input/Output: [(83 26 39 68) 26]
Test Case: 259 | Input/Output: [(46 60 45 81) 45]
Test Case: 260 | Input/Output: [(49 51 49 77) 49]
Test Case: 261 | Input/Output: [(100 16 48 58) 16]
Test Case: 262 | Input/Output: [(53 6 48 46) 6]
Test Case: 263 | Input/Output: [(41 69 58 81) 41]
Test Case: 264 | Input/Output: [(24 1 63 37) 1]
Test Case: 265 | Input/Output: [(2 10 63 11) 2]
Test Case: 266 | Input/Output: [(49 46 8 51) 8]
Test Case: 267 | Input/Output: [(20 2 5 55) 2]
Test Case: 268 | Input/Output: [(15 47 3 25) 3]
Test Case: 269 | Input/Output: [(78 5 4 94) 4]
Test Case: 270 | Input/Output: [(20 23 32 50) 20]
Test Case: 271 | Input/Output: [(23 18 43 65) 18]
Test Case: 272 | Input/Output: [(34 43 92 36) 34]
Test Case: 273 | Input/Output: [(84 62 16 98) 16]
Test Case: 274 | Input/Output: [(78 56 34 11) 11]
Test Case: 275 | Input/Output: [(23 66 3 85) 3]
Test Case: 276 | Input/Output: [(5 1 37 82) 1]
Test Case: 277 | Input/Output: [(88 96 56 7) 7]
Test Case: 278 | Input/Output: [(19 48 68 71) 19]
Test Case: 279 | Input/Output: [(43 13 81 81) 13]
Test Case: 280 | Input/Output: [(63 55 8 29) 8]
Test Case: 281 | Input/Output: [(37 81 1 98) 1]
Test Case: 282 | Input/Output: [(2 71 58 36) 2]
Test Case: 283 | Input/Output: [(65 36 67 31) 31]
Test Case: 284 | Input/Output: [(53 50 26 51) 26]
Test Case: 285 | Input/Output: [(65 92 8 62) 8]
Test Case: 286 | Input/Output: [(33 3 60 21) 3]
Test Case: 287 | Input/Output: [(0 16 84 66) 0]
Test Case: 288 | Input/Output: [(11 71 88 44) 11]
Test Case: 289 | Input/Output: [(98 34 0 6) 0]
Test Case: 290 | Input/Output: [(96 3 45 38) 3]
Test Case: 291 | Input/Output: [(53 38 29 66) 29]
Test Case: 292 | Input/Output: [(61 13 82 100) 13]
Test Case: 293 | Input/Output: [(61 89 11 34) 11]
Test Case: 294 | Input/Output: [(12 74 71 62) 12]
Test Case: 295 | Input/Output: [(6 12 21 87) 6]
Test Case: 296 | Input/Output: [(96 23 71 35) 23]
Test Case: 297 | Input/Output: [(100 50 64 71) 50]
Test Case: 298 | Input/Output: [(80 23 42 74) 23]
Test Case: 299 | Input/Output: [(80 94 54 86) 54]
Test Case: 300 | Input/Output: [(87 70 61 20) 20]
Test Case: 301 | Input/Output: [(32 83 83 80) 32]
Test Case: 302 | Input/Output: [(75 55 81 86) 55]
Test Case: 303 | Input/Output: [(81 99 17 3) 3]
Test Case: 304 | Input/Output: [(74 62 26 4) 4]
Test Case: 305 | Input/Output: [(42 42 73 40) 40]
Test Case: 306 | Input/Output: [(88 10 92 34) 10]
Test Case: 307 | Input/Output: [(3 54 32 45) 3]
Test Case: 308 | Input/Output: [(77 68 13 11) 11]
Test Case: 309 | Input/Output: [(2 42 64 56) 2]
Test Case: 310 | Input/Output: [(53 58 65 72) 53]
Test Case: 311 | Input/Output: [(9 68 90 98) 9]
Test Case: 312 | Input/Output: [(19 75 13 66) 13]
Test Case: 313 | Input/Output: [(8 26 66 6) 6]
Test Case: 314 | Input/Output: [(88 24 28 76) 24]
Test Case: 315 | Input/Output: [(91 39 60 100) 39]
Test Case: 316 | Input/Output: [(23 83 21 31) 21]
Test Case: 317 | Input/Output: [(45 41 84 72) 41]
Test Case: 318 | Input/Output: [(86 81 86 51) 51]
Test Case: 319 | Input/Output: [(49 78 56 80) 49]
Test Case: 320 | Input/Output: [(45 78 86 36) 36]
Test Case: 321 | Input/Output: [(79 64 36 21) 21]
Test Case: 322 | Input/Output: [(14 53 92 69) 14]
Test Case: 323 | Input/Output: [(73 56 52 99) 52]
Test Case: 324 | Input/Output: [(16 46 71 88) 16]
Test Case: 325 | Input/Output: [(1 50 38 52) 1]
Test Case: 326 | Input/Output: [(75 100 71 4) 4]
Test Case: 327 | Input/Output: [(32 92 31 92) 31]
Test Case: 328 | Input/Output: [(88 0 32 34) 0]
Test Case: 329 | Input/Output: [(25 83 25 37) 25]
Test Case: 330 | Input/Output: [(80 4 90 71) 4]
Test Case: 331 | Input/Output: [(16 48 34 66) 16]
Test Case: 332 | Input/Output: [(83 95 36 28) 28]
Test Case: 333 | Input/Output: [(88 3 58 93) 3]
Test Case: 334 | Input/Output: [(45 7 15 77) 7]
Test Case: 335 | Input/Output: [(93 22 73 75) 22]
Test Case: 336 | Input/Output: [(87 64 89 51) 51]
Test Case: 337 | Input/Output: [(55 32 60 67) 32]
Test Case: 338 | Input/Output: [(77 25 87 59) 25]
Test Case: 339 | Input/Output: [(47 45 3 62) 3]
Test Case: 340 | Input/Output: [(92 24 64 97) 24]
Test Case: 341 | Input/Output: [(58 42 28 91) 28]
Test Case: 342 | Input/Output: [(39 54 57 99) 39]
Test Case: 343 | Input/Output: [(30 86 43 39) 30]
Test Case: 344 | Input/Output: [(91 92 6 39) 6]
Test Case: 345 | Input/Output: [(53 23 35 73) 23]
Test Case: 346 | Input/Output: [(18 12 62 81) 12]
Test Case: 347 | Input/Output: [(89 33 58 3) 3]
Test Case: 348 | Input/Output: [(5 12 17 39) 5]
Test Case: 349 | Input/Output: [(64 17 32 29) 17]
Test Case: 350 | Input/Output: [(82 85 67 64) 64]
Test Case: 351 | Input/Output: [(80 23 82 98) 23]
Test Case: 352 | Input/Output: [(34 16 57 55) 16]
Test Case: 353 | Input/Output: [(46 84 77 32) 32]
Test Case: 354 | Input/Output: [(92 38 6 83) 6]
Test Case: 355 | Input/Output: [(46 90 3 79) 3]
Test Case: 356 | Input/Output: [(33 84 15 84) 15]
Test Case: 357 | Input/Output: [(45 2 55 4) 2]
Test Case: 358 | Input/Output: [(62 34 91 92) 34]
Test Case: 359 | Input/Output: [(31 33 0 47) 0]
Test Case: 360 | Input/Output: [(87 36 75 74) 36]
Test Case: 361 | Input/Output: [(33 55 4 49) 4]
Test Case: 362 | Input/Output: [(67 48 96 22) 22]
Test Case: 363 | Input/Output: [(46 78 61 87) 46]
Test Case: 364 | Input/Output: [(46 4 31 79) 4]
Test Case: 365 | Input/Output: [(10 52 27 67) 10]
Test Case: 366 | Input/Output: [(61 72 36 44) 36]
Test Case: 367 | Input/Output: [(43 86 46 28) 28]
Test Case: 368 | Input/Output: [(23 12 49 30) 12]
Test Case: 369 | Input/Output: [(100 79 1 70) 1]
Test Case: 370 | Input/Output: [(78 6 96 24) 6]
Test Case: 371 | Input/Output: [(10 5 20 50) 5]
Test Case: 372 | Input/Output: [(100 8 96 12) 8]
Test Case: 373 | Input/Output: [(28 21 73 48) 21]
Test Case: 374 | Input/Output: [(84 72 44 46) 44]
Test Case: 375 | Input/Output: [(35 2 43 1) 1]
Test Case: 376 | Input/Output: [(87 76 35 92) 35]
Test Case: 377 | Input/Output: [(47 15 44 72) 15]
Test Case: 378 | Input/Output: [(65 41 14 26) 14]
Test Case: 379 | Input/Output: [(56 99 83 74) 56]
Test Case: 380 | Input/Output: [(74 57 47 100) 47]
Test Case: 381 | Input/Output: [(49 47 74 22) 22]
Test Case: 382 | Input/Output: [(72 7 41 87) 7]
Test Case: 383 | Input/Output: [(55 90 24 98) 24]
Test Case: 384 | Input/Output: [(96 23 50 31) 23]
Test Case: 385 | Input/Output: [(1 8 75 41) 1]
Test Case: 386 | Input/Output: [(18 34 63 22) 18]
Test Case: 387 | Input/Output: [(58 86 55 48) 48]
Test Case: 388 | Input/Output: [(88 65 0 41) 0]
Test Case: 389 | Input/Output: [(22 11 57 1) 1]
Test Case: 390 | Input/Output: [(96 33 3 50) 3]
Test Case: 391 | Input/Output: [(44 56 1 65) 1]
Test Case: 392 | Input/Output: [(85 58 44 3) 3]
Test Case: 393 | Input/Output: [(94 20 55 68) 20]
Test Case: 394 | Input/Output: [(4 82 23 27) 4]
Test Case: 395 | Input/Output: [(6 93 97 12) 6]
Test Case: 396 | Input/Output: [(34 13 40 24) 13]
Test Case: 397 | Input/Output: [(3 48 73 30) 3]
Test Case: 398 | Input/Output: [(29 65 93 46) 29]
Test Case: 399 | Input/Output: [(72 94 0 5) 0]
Test Case: 400 | Input/Output: [(83 40 78 -21) -21]
Test Case: 401 | Input/Output: [(31 42 -61 -53) -61]
Test Case: 402 | Input/Output: [(81 29 -12 28) -12]
Test Case: 403 | Input/Output: [(-25 -64 11 -40) -64]
Test Case: 404 | Input/Output: [(-66 -89 90 81) -89]
Test Case: 405 | Input/Output: [(-13 29 -45 -60) -60]
Test Case: 406 | Input/Output: [(83 -78 -25 60) -78]
Test Case: 407 | Input/Output: [(15 -10 -38 -82) -82]
Test Case: 408 | Input/Output: [(12 -96 46 81) -96]
Test Case: 409 | Input/Output: [(-14 17 38 3) -14]
Test Case: 410 | Input/Output: [(-95 92 -11 92) -95]
Test Case: 411 | Input/Output: [(-5 18 -100 -12) -100]
Test Case: 412 | Input/Output: [(-45 20 96 -49) -49]
Test Case: 413 | Input/Output: [(24 50 69 -32) -32]
Test Case: 414 | Input/Output: [(77 62 87 -30) -30]
Test Case: 415 | Input/Output: [(15 -37 -81 0) -81]
Test Case: 416 | Input/Output: [(-44 -89 -28 -41) -89]
Test Case: 417 | Input/Output: [(75 -41 -26 -88) -88]
Test Case: 418 | Input/Output: [(20 -50 -61 -89) -89]
Test Case: 419 | Input/Output: [(-70 14 -65 2) -70]
Test Case: 420 | Input/Output: [(31 -76 -13 -100) -100]
Test Case: 421 | Input/Output: [(-35 -32 -81 -93) -93]
Test Case: 422 | Input/Output: [(-6 -14 11 -66) -66]
Test Case: 423 | Input/Output: [(-95 -9 -56 -89) -95]
Test Case: 424 | Input/Output: [(87 85 77 33) 33]
Test Case: 425 | Input/Output: [(-40 -4 80 94) -40]
Test Case: 426 | Input/Output: [(28 -64 55 75) -64]
Test Case: 427 | Input/Output: [(-51 89 75 -19) -51]
Test Case: 428 | Input/Output: [(96 67 -93 79) -93]
Test Case: 429 | Input/Output: [(-73 7 -49 -18) -73]
Test Case: 430 | Input/Output: [(27 38 -61 -75) -75]
Test Case: 431 | Input/Output: [(32 -82 22 45) -82]
Test Case: 432 | Input/Output: [(-56 32 71 28) -56]
Test Case: 433 | Input/Output: [(71 -54 -32 -19) -54]
Test Case: 434 | Input/Output: [(11 -79 94 -85) -85]
Test Case: 435 | Input/Output: [(63 -41 -71 46) -71]
Test Case: 436 | Input/Output: [(-27 34 -7 76) -27]
Test Case: 437 | Input/Output: [(13 35 -25 96) -25]
Test Case: 438 | Input/Output: [(82 25 -93 -68) -93]
Test Case: 439 | Input/Output: [(71 -24 37 -3) -24]
Test Case: 440 | Input/Output: [(33 -93 -69 65) -93]
Test Case: 441 | Input/Output: [(-76 -41 81 -81) -81]
Test Case: 442 | Input/Output: [(-65 -87 9 -86) -87]
Test Case: 443 | Input/Output: [(-30 -22 -12 20) -30]
Test Case: 444 | Input/Output: [(27 -75 90 41) -75]
Test Case: 445 | Input/Output: [(79 -59 44 -82) -82]
Test Case: 446 | Input/Output: [(68 -68 63 -89) -89]
Test Case: 447 | Input/Output: [(79 -24 37 -62) -62]
Test Case: 448 | Input/Output: [(27 39 43 -41) -41]
Test Case: 449 | Input/Output: [(72 74 52 -10) -10]
Test Case: 450 | Input/Output: [(-15 14 -33 -4) -33]
Test Case: 451 | Input/Output: [(-33 -69 -89 -88) -89]
Test Case: 452 | Input/Output: [(-65 7 -99 17) -99]
Test Case: 453 | Input/Output: [(-45 -68 74 55) -68]
Test Case: 454 | Input/Output: [(83 18 -40 -4) -40]
Test Case: 455 | Input/Output: [(31 87 74 -68) -68]
Test Case: 456 | Input/Output: [(91 -15 -46 -72) -72]
Test Case: 457 | Input/Output: [(-40 -82 24 -32) -82]
Test Case: 458 | Input/Output: [(75 3 -41 -60) -60]
Test Case: 459 | Input/Output: [(87 12 -11 77) -11]
Test Case: 460 | Input/Output: [(34 -66 -6 -6) -66]
Test Case: 461 | Input/Output: [(-26 56 -17 -22) -26]
Test Case: 462 | Input/Output: [(46 33 14 9) 9]
Test Case: 463 | Input/Output: [(19 100 12 -54) -54]
Test Case: 464 | Input/Output: [(11 33 -28 -59) -59]
Test Case: 465 | Input/Output: [(82 -65 91 -23) -65]
Test Case: 466 | Input/Output: [(-42 -59 -31 -92) -92]
Test Case: 467 | Input/Output: [(76 93 50 64) 50]
Test Case: 468 | Input/Output: [(-72 -60 -32 -40) -72]
Test Case: 469 | Input/Output: [(-90 90 -45 -47) -90]
Test Case: 470 | Input/Output: [(86 69 42 -64) -64]
Test Case: 471 | Input/Output: [(26 -50 -99 33) -99]
Test Case: 472 | Input/Output: [(85 47 6 19) 6]
Test Case: 473 | Input/Output: [(-76 4 -57 -39) -76]
Test Case: 474 | Input/Output: [(-98 88 -77 8) -98]
Test Case: 475 | Input/Output: [(63 100 -40 -2) -40]
Test Case: 476 | Input/Output: [(-13 41 -96 59) -96]
Test Case: 477 | Input/Output: [(95 35 -7 64) -7]
Test Case: 478 | Input/Output: [(-87 -30 -12 69) -87]
Test Case: 479 | Input/Output: [(76 -5 -81 -93) -93]
Test Case: 480 | Input/Output: [(-27 37 50 85) -27]
Test Case: 481 | Input/Output: [(16 -7 -32 28) -32]
Test Case: 482 | Input/Output: [(8 39 -91 100) -91]
Test Case: 483 | Input/Output: [(-72 -21 -31 70) -72]
Test Case: 484 | Input/Output: [(22 56 19 75) 19]
Test Case: 485 | Input/Output: [(-4 68 -32 53) -32]
Test Case: 486 | Input/Output: [(96 -66 -1 -87) -87]
Test Case: 487 | Input/Output: [(50 -40 92 -47) -47]
Test Case: 488 | Input/Output: [(67 -31 58 -18) -31]
Test Case: 489 | Input/Output: [(-89 36 86 65) -89]
Test Case: 490 | Input/Output: [(-69 -57 -47 98) -69]
Test Case: 491 | Input/Output: [(-16 42 -30 -90) -90]
Test Case: 492 | Input/Output: [(-67 22 4 81) -67]
Test Case: 493 | Input/Output: [(46 98 -60 -29) -60]
Test Case: 494 | Input/Output: [(13 55 -36 12) -36]
Test Case: 495 | Input/Output: [(41 -31 -52 49) -52]
Test Case: 496 | Input/Output: [(43 65 48 -5) -5]
Test Case: 497 | Input/Output: [(23 75 -33 39) -33]
Test Case: 498 | Input/Output: [(12 -49 -99 42) -99]
Test Case: 499 | Input/Output: [(-89 -36 8 -67) -89]
Test Case: 500 | Input/Output: [(-5 75 30 100) -5]
Test Case: 501 | Input/Output: [(-71 55 -55 26) -71]
Test Case: 502 | Input/Output: [(65 33 46 75) 33]
Test Case: 503 | Input/Output: [(17 -62 46 -6) -62]
Test Case: 504 | Input/Output: [(-30 6 66 -26) -30]
Test Case: 505 | Input/Output: [(-94 -97 15 94) -97]
Test Case: 506 | Input/Output: [(-78 -4 91 -26) -78]
Test Case: 507 | Input/Output: [(-20 8 -60 30) -60]
Test Case: 508 | Input/Output: [(2 78 16 -69) -69]
Test Case: 509 | Input/Output: [(-25 -23 -85 -19) -85]
Test Case: 510 | Input/Output: [(59 -45 91 3) -45]
Test Case: 511 | Input/Output: [(88 -95 -45 -40) -95]
Test Case: 512 | Input/Output: [(-62 20 -83 -92) -92]
Test Case: 513 | Input/Output: [(22 67 -10 -58) -58]
Test Case: 514 | Input/Output: [(93 -58 39 -83) -83]
Test Case: 515 | Input/Output: [(-84 -17 95 -52) -84]
Test Case: 516 | Input/Output: [(-32 83 45 0) -32]
Test Case: 517 | Input/Output: [(-51 23 -85 -44) -85]
Test Case: 518 | Input/Output: [(-41 -7 83 -91) -91]
Test Case: 519 | Input/Output: [(20 -53 -98 72) -98]
Test Case: 520 | Input/Output: [(52 39 -23 15) -23]
Test Case: 521 | Input/Output: [(-22 99 27 87) -22]
Test Case: 522 | Input/Output: [(-24 21 34 63) -24]
Test Case: 523 | Input/Output: [(99 50 -73 0) -73]
Test Case: 524 | Input/Output: [(90 45 8 77) 8]
Test Case: 525 | Input/Output: [(-13 38 12 81) -13]
Test Case: 526 | Input/Output: [(62 -85 83 -65) -85]
Test Case: 527 | Input/Output: [(-90 90 -72 -20) -90]
Test Case: 528 | Input/Output: [(40 -80 -95 6) -95]
Test Case: 529 | Input/Output: [(-4 62 62 -59) -59]
Test Case: 530 | Input/Output: [(-66 15 -37 97) -66]
Test Case: 531 | Input/Output: [(-95 22 100 -32) -95]
Test Case: 532 | Input/Output: [(-61 -82 59 -3) -82]
Test Case: 533 | Input/Output: [(-88 0 -50 -21) -88]
Test Case: 534 | Input/Output: [(77 -14 -90 -95) -95]
Test Case: 535 | Input/Output: [(-70 -56 12 -54) -70]
Test Case: 536 | Input/Output: [(75 42 89 -71) -71]
Test Case: 537 | Input/Output: [(-76 -37 63 -19) -76]
Test Case: 538 | Input/Output: [(-80 -82 62 60) -82]
Test Case: 539 | Input/Output: [(-76 44 -85 44) -85]
Test Case: 540 | Input/Output: [(83 99 -68 96) -68]
Test Case: 541 | Input/Output: [(-54 28 2 20) -54]
Test Case: 542 | Input/Output: [(-42 -14 -53 0) -53]
Test Case: 543 | Input/Output: [(-100 -61 -67 -21) -100]
Test Case: 544 | Input/Output: [(24 -60 13 35) -60]
Test Case: 545 | Input/Output: [(-72 -67 39 -29) -72]
Test Case: 546 | Input/Output: [(14 -17 -66 -82) -82]
Test Case: 547 | Input/Output: [(-69 -63 92 19) -69]
Test Case: 548 | Input/Output: [(-88 92 23 30) -88]
Test Case: 549 | Input/Output: [(-8 14 18 -92) -92]
Test Case: 550 | Input/Output: [(-16 -41 39 -52) -52]
Test Case: 551 | Input/Output: [(72 45 57 -98) -98]
Test Case: 552 | Input/Output: [(52 -44 88 -35) -44]
Test Case: 553 | Input/Output: [(76 52 95 20) 20]
Test Case: 554 | Input/Output: [(10 -54 90 89) -54]
Test Case: 555 | Input/Output: [(6 90 -74 74) -74]
Test Case: 556 | Input/Output: [(-52 -1 -69 -95) -95]
Test Case: 557 | Input/Output: [(92 52 38 -67) -67]
Test Case: 558 | Input/Output: [(-51 -10 21 47) -51]
Test Case: 559 | Input/Output: [(-90 20 -11 32) -90]
Test Case: 560 | Input/Output: [(-30 64 92 1) -30]
Test Case: 561 | Input/Output: [(95 -4 -78 -94) -94]
Test Case: 562 | Input/Output: [(4 -7 50 63) -7]
Test Case: 563 | Input/Output: [(-14 46 18 17) -14]
Test Case: 564 | Input/Output: [(-4 -24 -82 -89) -89]
Test Case: 565 | Input/Output: [(40 -100 79 -40) -100]
Test Case: 566 | Input/Output: [(93 91 -86 -88) -88]
Test Case: 567 | Input/Output: [(-6 -78 7 34) -78]
Test Case: 568 | Input/Output: [(-86 -65 17 66) -86]
Test Case: 569 | Input/Output: [(72 89 91 -88) -88]
Test Case: 570 | Input/Output: [(-11 -76 89 -79) -79]
Test Case: 571 | Input/Output: [(-61 30 87 92) -61]
Test Case: 572 | Input/Output: [(-52 20 -3 97) -52]
Test Case: 573 | Input/Output: [(-58 -30 -74 61) -74]
Test Case: 574 | Input/Output: [(78 15 79 88) 15]
Test Case: 575 | Input/Output: [(51 97 76 39) 39]
Test Case: 576 | Input/Output: [(-94 32 2 75) -94]
Test Case: 577 | Input/Output: [(-54 90 27 -86) -86]
Test Case: 578 | Input/Output: [(0 92 -66 49) -66]
Test Case: 579 | Input/Output: [(-48 52 97 87) -48]
Test Case: 580 | Input/Output: [(23 -12 -20 -86) -86]
Test Case: 581 | Input/Output: [(-67 59 -2 -80) -80]
Test Case: 582 | Input/Output: [(42 -80 16 -79) -80]
Test Case: 583 | Input/Output: [(8 -92 5 76) -92]
Test Case: 584 | Input/Output: [(67 -51 98 35) -51]
Test Case: 585 | Input/Output: [(53 49 -84 -13) -84]
Test Case: 586 | Input/Output: [(72 -99 14 70) -99]
Test Case: 587 | Input/Output: [(-68 66 -41 81) -68]
Test Case: 588 | Input/Output: [(39 29 20 90) 20]
Test Case: 589 | Input/Output: [(5 -26 49 -35) -35]
Test Case: 590 | Input/Output: [(24 -17 -75 -8) -75]
Test Case: 591 | Input/Output: [(81 80 16 -59) -59]
Test Case: 592 | Input/Output: [(75 43 7 47) 7]
Test Case: 593 | Input/Output: [(-15 74 68 -53) -53]
Test Case: 594 | Input/Output: [(95 76 -50 77) -50]
Test Case: 595 | Input/Output: [(-29 -49 -27 -74) -74]
Test Case: 596 | Input/Output: [(75 -51 -64 -44) -64]
Test Case: 597 | Input/Output: [(-90 26 -42 -25) -90]
Test Case: 598 | Input/Output: [(-48 99 -80 99) -80]
Test Case: 599 | Input/Output: [(44 79 79 -78) -78]
Test Case: 600 | Input/Output: [(31 -38 44 -87) -87]
Test Case: 601 | Input/Output: [(12 27 -31 -56) -56]
Test Case: 602 | Input/Output: [(-66 78 -51 -32) -66]
Test Case: 603 | Input/Output: [(71 -93 63 -21) -93]
Test Case: 604 | Input/Output: [(-32 -31 -55 15) -55]
Test Case: 605 | Input/Output: [(14 76 -63 -89) -89]
Test Case: 606 | Input/Output: [(100 -34 17 26) -34]
Test Case: 607 | Input/Output: [(29 58 -33 -47) -47]
Test Case: 608 | Input/Output: [(13 -35 -45 69) -45]
Test Case: 609 | Input/Output: [(-77 14 47 14) -77]
Test Case: 610 | Input/Output: [(-25 -77 -69 14) -77]
Test Case: 611 | Input/Output: [(33 -27 -10 -7) -27]
Test Case: 612 | Input/Output: [(-48 -4 -62 78) -62]
Test Case: 613 | Input/Output: [(-77 -44 68 -92) -92]
Test Case: 614 | Input/Output: [(-20 64 43 -72) -72]
Test Case: 615 | Input/Output: [(-27 81 10 49) -27]
Test Case: 616 | Input/Output: [(-6 32 51 93) -6]
Test Case: 617 | Input/Output: [(63 -74 -82 73) -82]
Test Case: 618 | Input/Output: [(63 41 -67 -8) -67]
Test Case: 619 | Input/Output: [(-87 38 -67 -63) -87]
Test Case: 620 | Input/Output: [(-29 29 -83 84) -83]
Test Case: 621 | Input/Output: [(-70 92 -39 -62) -70]
Test Case: 622 | Input/Output: [(76 99 -13 98) -13]
Test Case: 623 | Input/Output: [(91 -66 37 -71) -71]
Test Case: 624 | Input/Output: [(7 51 -85 17) -85]
Test Case: 625 | Input/Output: [(42 -98 -43 67) -98]
Test Case: 626 | Input/Output: [(-22 -4 -13 -46) -46]
Test Case: 627 | Input/Output: [(94 17 7 88) 7]
Test Case: 628 | Input/Output: [(84 -77 25 97) -77]
Test Case: 629 | Input/Output: [(91 37 -9 -88) -88]
Test Case: 630 | Input/Output: [(-21 21 -79 -62) -79]
Test Case: 631 | Input/Output: [(-44 82 -42 34) -44]
Test Case: 632 | Input/Output: [(-7 3 8 16) -7]
Test Case: 633 | Input/Output: [(-66 42 -48 75) -66]
Test Case: 634 | Input/Output: [(-20 71 29 -45) -45]
Test Case: 635 | Input/Output: [(-64 9 82 18) -64]
Test Case: 636 | Input/Output: [(19 23 57 -36) -36]
Test Case: 637 | Input/Output: [(-19 92 -76 -7) -76]
Test Case: 638 | Input/Output: [(-54 24 72 -40) -54]
Test Case: 639 | Input/Output: [(25 33 43 98) 25]
Test Case: 640 | Input/Output: [(25 59 -52 -10) -52]
Test Case: 641 | Input/Output: [(-25 47 -75 -18) -75]
Test Case: 642 | Input/Output: [(98 -99 -81 99) -99]
Test Case: 643 | Input/Output: [(21 15 -89 68) -89]
Test Case: 644 | Input/Output: [(82 10 -69 32) -69]
Test Case: 645 | Input/Output: [(-17 7 32 -61) -61]
Test Case: 646 | Input/Output: [(-95 -31 -65 -96) -96]
Test Case: 647 | Input/Output: [(77 -23 88 1) -23]
Test Case: 648 | Input/Output: [(31 24 17 -62) -62]
Test Case: 649 | Input/Output: [(19 -55 -91 -88) -91]
Test Case: 650 | Input/Output: [(12 -42 -61 6) -61]
Test Case: 651 | Input/Output: [(-9 -77 -47 57) -77]
Test Case: 652 | Input/Output: [(-42 -88 84 95) -88]
Test Case: 653 | Input/Output: [(-27 -72 -62 -36) -72]
Test Case: 654 | Input/Output: [(29 -24 5 52) -24]
Test Case: 655 | Input/Output: [(-35 28 64 34) -35]
Test Case: 656 | Input/Output: [(26 54 69 -82) -82]
Test Case: 657 | Input/Output: [(-75 -31 32 -39) -75]
Test Case: 658 | Input/Output: [(-73 35 -20 33) -73]
Test Case: 659 | Input/Output: [(17 14 80 62) 14]
Test Case: 660 | Input/Output: [(-81 -94 -50 30) -94]
Test Case: 661 | Input/Output: [(-41 54 -13 -69) -69]
Test Case: 662 | Input/Output: [(95 -84 -17 -35) -84]
Test Case: 663 | Input/Output: [(45 60 -17 -2) -17]
Test Case: 664 | Input/Output: [(-69 30 -30 -3) -69]
Test Case: 665 | Input/Output: [(10 -60 92 12) -60]
Test Case: 666 | Input/Output: [(81 -13 16 -59) -59]
Test Case: 667 | Input/Output: [(75 -24 -77 82) -77]
Test Case: 668 | Input/Output: [(-90 -10 -1 -49) -90]
Test Case: 669 | Input/Output: [(-97 65 -73 79) -97]
Test Case: 670 | Input/Output: [(65 -7 99 21) -7]
Test Case: 671 | Input/Output: [(-19 -38 -99 38) -99]
Test Case: 672 | Input/Output: [(-53 15 25 -94) -94]
Test Case: 673 | Input/Output: [(50 -35 -77 59) -77]
Test Case: 674 | Input/Output: [(-87 25 -44 56) -87]
Test Case: 675 | Input/Output: [(31 32 -15 99) -15]
Test Case: 676 | Input/Output: [(52 -64 -14 -91) -91]
Test Case: 677 | Input/Output: [(90 -10 28 83) -10]
Test Case: 678 | Input/Output: [(-65 -6 9 -43) -65]
Test Case: 679 | Input/Output: [(-76 86 -52 -14) -76]
Test Case: 680 | Input/Output: [(-100 16 51 85) -100]
Test Case: 681 | Input/Output: [(23 -81 14 -6) -81]
Test Case: 682 | Input/Output: [(-48 -10 0 -42) -48]
Test Case: 683 | Input/Output: [(93 75 86 65) 65]
Test Case: 684 | Input/Output: [(5 -23 37 -34) -34]
Test Case: 685 | Input/Output: [(12 -78 -48 82) -78]
Test Case: 686 | Input/Output: [(-14 50 71 -59) -59]
Test Case: 687 | Input/Output: [(-22 11 -54 16) -54]
Test Case: 688 | Input/Output: [(5 -76 34 -66) -76]
Test Case: 689 | Input/Output: [(-31 -95 -34 98) -95]
Test Case: 690 | Input/Output: [(-30 -74 31 76) -74]
Test Case: 691 | Input/Output: [(-89 -1 32 11) -89]
Test Case: 692 | Input/Output: [(37 -68 -38 31) -68]
Test Case: 693 | Input/Output: [(28 9 -84 90) -84]
Test Case: 694 | Input/Output: [(67 -76 64 -66) -76]
Test Case: 695 | Input/Output: [(85 -71 -86 -92) -92]
Test Case: 696 | Input/Output: [(-4 -92 -81 38) -92]
Test Case: 697 | Input/Output: [(48 61 -71 91) -71]
Test Case: 698 | Input/Output: [(23 88 80 -85) -85]
Test Case: 699 | Input/Output: [(22 93 18 47) 18]
Test Case: 700 | Input/Output: [(-76 -73 55 52) -76]
Test Case: 701 | Input/Output: [(51 10 18 42) 10]
Test Case: 702 | Input/Output: [(-8 -38 -6 -86) -86]
Test Case: 703 | Input/Output: [(24 -63 -99 24) -99]
Test Case: 704 | Input/Output: [(81 13 -96 -18) -96]
Test Case: 705 | Input/Output: [(-84 25 71 -75) -84]
Test Case: 706 | Input/Output: [(21 -96 95 69) -96]
Test Case: 707 | Input/Output: [(-40 -16 -53 -33) -53]
Test Case: 708 | Input/Output: [(76 -74 -83 58) -83]
Test Case: 709 | Input/Output: [(11 -65 -39 3) -65]
Test Case: 710 | Input/Output: [(97 -46 -13 -18) -46]
Test Case: 711 | Input/Output: [(-37 -88 47 95) -88]
Test Case: 712 | Input/Output: [(-52 61 28 -32) -52]
Test Case: 713 | Input/Output: [(-12 71 50 86) -12]
Test Case: 714 | Input/Output: [(51 -61 74 -32) -61]
Test Case: 715 | Input/Output: [(57 -5 93 -79) -79]
Test Case: 716 | Input/Output: [(37 61 -20 77) -20]
Test Case: 717 | Input/Output: [(63 95 47 -40) -40]
Test Case: 718 | Input/Output: [(55 56 80 35) 35]
Test Case: 719 | Input/Output: [(-56 -70 -87 85) -87]
Test Case: 720 | Input/Output: [(-70 39 4 -1) -70]
Test Case: 721 | Input/Output: [(-52 24 84 84) -52]
Test Case: 722 | Input/Output: [(-75 -50 47 -95) -95]
Test Case: 723 | Input/Output: [(-76 -60 97 -87) -87]
Test Case: 724 | Input/Output: [(49 -17 43 -89) -89]
Test Case: 725 | Input/Output: [(-43 1 -55 71) -55]
Test Case: 726 | Input/Output: [(-25 66 59 -23) -25]
Test Case: 727 | Input/Output: [(-39 -9 90 -41) -41]
Test Case: 728 | Input/Output: [(60 -24 65 -71) -71]
Test Case: 729 | Input/Output: [(77 52 61 -87) -87]
Test Case: 730 | Input/Output: [(0 12 -4 2) -4]
Test Case: 731 | Input/Output: [(-39 80 -41 -59) -59]
Test Case: 732 | Input/Output: [(27 34 -52 61) -52]
Test Case: 733 | Input/Output: [(17 8 96 -33) -33]
Test Case: 734 | Input/Output: [(95 48 76 -54) -54]
Test Case: 735 | Input/Output: [(68 17 99 -91) -91]
Test Case: 736 | Input/Output: [(38 67 99 -93) -93]
Test Case: 737 | Input/Output: [(7 -74 -7 -30) -74]
Test Case: 738 | Input/Output: [(-6 -15 49 77) -15]
Test Case: 739 | Input/Output: [(-4 -88 78 -45) -88]
Test Case: 740 | Input/Output: [(42 -87 78 -68) -87]
Test Case: 741 | Input/Output: [(-62 80 48 82) -62]
Test Case: 742 | Input/Output: [(73 92 -55 -24) -55]
Test Case: 743 | Input/Output: [(1 -27 99 -32) -32]
Test Case: 744 | Input/Output: [(63 -64 89 -100) -100]
Test Case: 745 | Input/Output: [(75 -18 49 86) -18]
Test Case: 746 | Input/Output: [(59 10 -89 45) -89]
Test Case: 747 | Input/Output: [(-56 -52 3 -53) -56]
Test Case: 748 | Input/Output: [(-47 80 -40 96) -47]
Test Case: 749 | Input/Output: [(89 22 35 -68) -68]
Test Case: 750 | Input/Output: [(68 -9 20 -97) -97]
Test Case: 751 | Input/Output: [(97 -99 66 -77) -99]
Test Case: 752 | Input/Output: [(3 -80 0 -69) -80]
Test Case: 753 | Input/Output: [(82 -74 46 -62) -74]
Test Case: 754 | Input/Output: [(56 -23 34 -93) -93]
Test Case: 755 | Input/Output: [(-86 -10 55 44) -86]
Test Case: 756 | Input/Output: [(66 -69 -60 -100) -100]
Test Case: 757 | Input/Output: [(26 -57 -99 48) -99]
Test Case: 758 | Input/Output: [(-69 28 -1 15) -69]
Test Case: 759 | Input/Output: [(69 0 -14 -51) -51]
Test Case: 760 | Input/Output: [(-14 -34 -78 -52) -78]
Test Case: 761 | Input/Output: [(97 62 94 22) 22]
Test Case: 762 | Input/Output: [(18 43 -6 -53) -53]
Test Case: 763 | Input/Output: [(-12 95 39 -12) -12]
Test Case: 764 | Input/Output: [(-21 -29 -94 -43) -94]
Test Case: 765 | Input/Output: [(-85 60 81 63) -85]
Test Case: 766 | Input/Output: [(-12 25 -74 -93) -93]
Test Case: 767 | Input/Output: [(15 -100 -58 42) -100]
Test Case: 768 | Input/Output: [(69 50 -44 11) -44]
Test Case: 769 | Input/Output: [(-27 -10 -85 2) -85]
Test Case: 770 | Input/Output: [(-51 61 55 85) -51]
Test Case: 771 | Input/Output: [(-83 46 100 -36) -83]
Test Case: 772 | Input/Output: [(75 -96 60 55) -96]
Test Case: 773 | Input/Output: [(37 -51 -31 -13) -51]
Test Case: 774 | Input/Output: [(49 -34 -17 -93) -93]
Test Case: 775 | Input/Output: [(-67 -5 75 91) -67]
Test Case: 776 | Input/Output: [(5 14 30 -32) -32]
Test Case: 777 | Input/Output: [(49 5 -8 -36) -36]
Test Case: 778 | Input/Output: [(-91 47 -36 56) -91]
Test Case: 779 | Input/Output: [(-99 18 27 -51) -99]
Test Case: 780 | Input/Output: [(46 -74 16 -3) -74]
Test Case: 781 | Input/Output: [(-31 87 -62 47) -62]
Test Case: 782 | Input/Output: [(-22 -22 -92 -9) -92]
Test Case: 783 | Input/Output: [(48 94 86 -100) -100]
Test Case: 784 | Input/Output: [(-37 41 -30 -11) -37]
Test Case: 785 | Input/Output: [(-81 66 -74 -91) -91]
Test Case: 786 | Input/Output: [(23 37 -82 9) -82]
Test Case: 787 | Input/Output: [(-62 -95 60 -68) -95]
Test Case: 788 | Input/Output: [(-55 67 -22 -35) -55]
Test Case: 789 | Input/Output: [(21 -25 38 47) -25]
Test Case: 790 | Input/Output: [(-100 20 16 -37) -100]
Test Case: 791 | Input/Output: [(71 25 62 -2) -2]
Test Case: 792 | Input/Output: [(13 49 -15 52) -15]
Test Case: 793 | Input/Output: [(26 77 92 -73) -73]
Test Case: 794 | Input/Output: [(59 9 64 -86) -86]
Test Case: 795 | Input/Output: [(-66 -17 32 85) -66]
Test Case: 796 | Input/Output: [(24 17 -21 -63) -63]
Test Case: 797 | Input/Output: [(-98 -45 34 -20) -98]
Test Case: 798 | Input/Output: [(95 -40 11 70) -40]
Test Case: 799 | Input/Output: [(58 -19 -9 -98) -98]
Test Case: 800 | Input/Output: [(-91 55 -32 -47) -91]
Test Case: 801 | Input/Output: [(-33 -16 -1 -30) -33]
Test Case: 802 | Input/Output: [(49 -81 -61 -100) -100]
Test Case: 803 | Input/Output: [(79 41 -9 -64) -64]
Test Case: 804 | Input/Output: [(-27 -32 -46 96) -46]
Test Case: 805 | Input/Output: [(69 54 22 -67) -67]
Test Case: 806 | Input/Output: [(15 88 70 79) 15]
Test Case: 807 | Input/Output: [(13 -28 -91 95) -91]
Test Case: 808 | Input/Output: [(15 44 -50 -47) -50]
Test Case: 809 | Input/Output: [(67 -92 -14 62) -92]
Test Case: 810 | Input/Output: [(52 -81 -90 -11) -90]
Test Case: 811 | Input/Output: [(-41 31 -18 -65) -65]
Test Case: 812 | Input/Output: [(45 24 51 -34) -34]
Test Case: 813 | Input/Output: [(-86 -83 -29 23) -86]
Test Case: 814 | Input/Output: [(-52 92 1 -9) -52]
Test Case: 815 | Input/Output: [(68 -22 51 94) -22]
Test Case: 816 | Input/Output: [(-50 72 12 97) -50]
Test Case: 817 | Input/Output: [(-44 -41 -1 -61) -61]
Test Case: 818 | Input/Output: [(-38 -29 88 95) -38]
Test Case: 819 | Input/Output: [(33 30 -6 92) -6]
Test Case: 820 | Input/Output: [(-88 2 -70 61) -88]
Test Case: 821 | Input/Output: [(29 -11 62 64) -11]
Test Case: 822 | Input/Output: [(-86 93 52 -22) -86]
Test Case: 823 | Input/Output: [(-74 -65 -19 3) -74]
Test Case: 824 | Input/Output: [(-12 -20 -11 45) -20]
Test Case: 825 | Input/Output: [(-92 -40 26 -11) -92]
Test Case: 826 | Input/Output: [(-62 96 -82 -6) -82]
Test Case: 827 | Input/Output: [(37 62 -100 -96) -100]
Test Case: 828 | Input/Output: [(-86 88 32 -37) -86]
Test Case: 829 | Input/Output: [(0 -38 99 -43) -43]
Test Case: 830 | Input/Output: [(91 -12 -72 -83) -83]
Test Case: 831 | Input/Output: [(18 -72 23 47) -72]
Test Case: 832 | Input/Output: [(27 33 38 47) 27]
Test Case: 833 | Input/Output: [(-19 -32 -79 96) -79]
Test Case: 834 | Input/Output: [(100 -38 -58 58) -58]
Test Case: 835 | Input/Output: [(26 56 91 70) 26]
Test Case: 836 | Input/Output: [(11 34 -92 -64) -92]
Test Case: 837 | Input/Output: [(-9 46 0 88) -9]
Test Case: 838 | Input/Output: [(-76 -35 -65 79) -76]
Test Case: 839 | Input/Output: [(-29 -52 92 -16) -52]
Test Case: 840 | Input/Output: [(-72 26 -63 56) -72]
Test Case: 841 | Input/Output: [(18 -66 -6 15) -66]
Test Case: 842 | Input/Output: [(-59 80 -86 -40) -86]
Test Case: 843 | Input/Output: [(-6 47 -87 69) -87]
Test Case: 844 | Input/Output: [(49 88 62 -43) -43]
Test Case: 845 | Input/Output: [(-41 63 -58 100) -58]
Test Case: 846 | Input/Output: [(8 74 83 -71) -71]
Test Case: 847 | Input/Output: [(-66 -65 -57 21) -66]
Test Case: 848 | Input/Output: [(5 28 -23 -6) -23]
Test Case: 849 | Input/Output: [(94 -77 39 31) -77]
Test Case: 850 | Input/Output: [(-35 75 71 -98) -98]
Test Case: 851 | Input/Output: [(-9 -63 -81 28) -81]
Test Case: 852 | Input/Output: [(57 97 -14 -21) -21]
Test Case: 853 | Input/Output: [(17 34 14 -81) -81]
Test Case: 854 | Input/Output: [(70 -66 11 72) -66]
Test Case: 855 | Input/Output: [(77 -82 40 -82) -82]
Test Case: 856 | Input/Output: [(-18 49 65 91) -18]
Test Case: 857 | Input/Output: [(77 -87 46 -97) -97]
Test Case: 858 | Input/Output: [(-34 24 49 96) -34]
Test Case: 859 | Input/Output: [(36 -6 -86 54) -86]
Test Case: 860 | Input/Output: [(41 -36 -6 93) -36]
Test Case: 861 | Input/Output: [(-39 88 62 -9) -39]
Test Case: 862 | Input/Output: [(12 56 -14 77) -14]
Test Case: 863 | Input/Output: [(-38 43 -20 27) -38]
Test Case: 864 | Input/Output: [(73 -6 -71 -81) -81]
Test Case: 865 | Input/Output: [(44 -5 45 94) -5]
Test Case: 866 | Input/Output: [(4 -91 -79 29) -91]
Test Case: 867 | Input/Output: [(80 50 68 4) 4]
Test Case: 868 | Input/Output: [(88 58 63 64) 58]
Test Case: 869 | Input/Output: [(73 81 -34 -70) -70]
Test Case: 870 | Input/Output: [(-47 -11 30 41) -47]
Test Case: 871 | Input/Output: [(-70 -5 -57 -76) -76]
Test Case: 872 | Input/Output: [(-94 22 -98 40) -98]
Test Case: 873 | Input/Output: [(-45 36 -41 35) -45]
Test Case: 874 | Input/Output: [(47 50 -52 69) -52]
Test Case: 875 | Input/Output: [(-47 67 57 -73) -73]
Test Case: 876 | Input/Output: [(69 -73 -49 -2) -73]
Test Case: 877 | Input/Output: [(-98 60 58 40) -98]
Test Case: 878 | Input/Output: [(-42 72 40 -59) -59]
Test Case: 879 | Input/Output: [(24 -76 66 18) -76]
Test Case: 880 | Input/Output: [(-66 -58 -59 40) -66]
Test Case: 881 | Input/Output: [(34 8 29 76) 8]
Test Case: 882 | Input/Output: [(65 -51 -100 -67) -100]
Test Case: 883 | Input/Output: [(-39 92 73 -35) -39]
Test Case: 884 | Input/Output: [(10 98 38 -75) -75]
Test Case: 885 | Input/Output: [(-13 -4 -84 73) -84]
Test Case: 886 | Input/Output: [(48 -10 75 58) -10]
Test Case: 887 | Input/Output: [(38 -42 -67 41) -67]
Test Case: 888 | Input/Output: [(-35 -94 93 -29) -94]
Test Case: 889 | Input/Output: [(8 -90 -81 -87) -90]
Test Case: 890 | Input/Output: [(41 -85 0 -42) -85]
Test Case: 891 | Input/Output: [(-43 0 56 -3) -43]
Test Case: 892 | Input/Output: [(15 -66 -81 -49) -81]
Test Case: 893 | Input/Output: [(-73 -30 47 -34) -73]
Test Case: 894 | Input/Output: [(-51 -27 -19 6) -51]
Test Case: 895 | Input/Output: [(92 -60 -13 98) -60]
Test Case: 896 | Input/Output: [(-46 -87 -85 -76) -87]
Test Case: 897 | Input/Output: [(62 81 -49 -56) -56]
Test Case: 898 | Input/Output: [(12 82 66 77) 12]
Test Case: 899 | Input/Output: [(-10 59 10 -7) -10]
Test Case: 900 | Input/Output: [(6 87 -58 -35) -58]
Test Case: 901 | Input/Output: [(-83 92 -87 -87) -87]
Test Case: 902 | Input/Output: [(28 84 84 55) 28]
Test Case: 903 | Input/Output: [(53 -34 -100 -94) -100]
Test Case: 904 | Input/Output: [(-72 63 -62 13) -72]
Test Case: 905 | Input/Output: [(-64 64 64 59) -64]
Test Case: 906 | Input/Output: [(-90 -87 -98 -85) -98]
Test Case: 907 | Input/Output: [(-69 13 92 89) -69]
Test Case: 908 | Input/Output: [(97 -38 -37 23) -38]
Test Case: 909 | Input/Output: [(56 73 45 -77) -77]
Test Case: 910 | Input/Output: [(5 60 9 95) 5]
Test Case: 911 | Input/Output: [(-87 45 47 29) -87]
Test Case: 912 | Input/Output: [(-7 60 26 22) -7]
Test Case: 913 | Input/Output: [(-11 -45 -30 -90) -90]
Test Case: 914 | Input/Output: [(34 -20 -54 -91) -91]
Test Case: 915 | Input/Output: [(11 97 0 46) 0]
Test Case: 916 | Input/Output: [(80 -56 39 -19) -56]
Test Case: 917 | Input/Output: [(-20 -97 -53 -70) -97]
Test Case: 918 | Input/Output: [(95 -47 76 30) -47]
Test Case: 919 | Input/Output: [(-36 -66 66 -41) -66]
Test Case: 920 | Input/Output: [(89 70 -91 63) -91]
Test Case: 921 | Input/Output: [(-65 -2 -78 28) -78]
Test Case: 922 | Input/Output: [(-95 -4 33 57) -95]
Test Case: 923 | Input/Output: [(30 -100 49 71) -100]
Test Case: 924 | Input/Output: [(20 52 -48 -98) -98]
Test Case: 925 | Input/Output: [(40 5 37 13) 5]
Test Case: 926 | Input/Output: [(-7 65 -8 54) -8]
Test Case: 927 | Input/Output: [(79 -60 83 25) -60]
Test Case: 928 | Input/Output: [(-98 48 75 84) -98]
Test Case: 929 | Input/Output: [(32 -57 18 38) -57]
Test Case: 930 | Input/Output: [(-50 -59 59 30) -59]
Test Case: 931 | Input/Output: [(-20 46 -22 -45) -45]
Test Case: 932 | Input/Output: [(-84 -31 53 40) -84]
Test Case: 933 | Input/Output: [(9 9 75 -58) -58]
Test Case: 934 | Input/Output: [(-100 -93 -98 89) -100]
Test Case: 935 | Input/Output: [(78 21 41 -30) -30]
Test Case: 936 | Input/Output: [(75 -64 -25 -94) -94]
Test Case: 937 | Input/Output: [(5 36 17 27) 5]
Test Case: 938 | Input/Output: [(67 -86 -86 -12) -86]
Test Case: 939 | Input/Output: [(-26 -68 79 -62) -68]
Test Case: 940 | Input/Output: [(68 -76 5 14) -76]
Test Case: 941 | Input/Output: [(-44 35 38 33) -44]
Test Case: 942 | Input/Output: [(18 -30 -50 90) -50]
Test Case: 943 | Input/Output: [(43 1 -32 99) -32]
Test Case: 944 | Input/Output: [(-79 -94 -76 -37) -94]
Test Case: 945 | Input/Output: [(65 -15 -84 91) -84]
Test Case: 946 | Input/Output: [(39 -40 -31 -81) -81]
Test Case: 947 | Input/Output: [(-90 -56 -33 -12) -90]
Test Case: 948 | Input/Output: [(74 -86 28 -65) -86]
Test Case: 949 | Input/Output: [(46 -41 -89 17) -89]
Test Case: 950 | Input/Output: [(-77 -88 -11 9) -88]
Test Case: 951 | Input/Output: [(-15 -50 95 62) -50]
Test Case: 952 | Input/Output: [(-25 12 1 10) -25]
Test Case: 953 | Input/Output: [(-58 -94 -83 73) -94]
Test Case: 954 | Input/Output: [(-45 -89 -23 18) -89]
Test Case: 955 | Input/Output: [(-12 -52 -67 -95) -95]
Test Case: 956 | Input/Output: [(90 -100 -10 -21) -100]
Test Case: 957 | Input/Output: [(13 86 -16 -91) -91]
Test Case: 958 | Input/Output: [(34 99 6 8) 6]
Test Case: 959 | Input/Output: [(-21 87 2 44) -21]
Test Case: 960 | Input/Output: [(-100 -84 18 -37) -100]
Test Case: 961 | Input/Output: [(22 -24 -89 -34) -89]
Test Case: 962 | Input/Output: [(32 -36 -74 88) -74]
Test Case: 963 | Input/Output: [(64 46 55 57) 46]
Test Case: 964 | Input/Output: [(77 -34 -90 -10) -90]
Test Case: 965 | Input/Output: [(-64 62 -24 96) -64]
Test Case: 966 | Input/Output: [(12 -97 95 94) -97]
Test Case: 967 | Input/Output: [(40 -89 -46 -63) -89]
Test Case: 968 | Input/Output: [(-62 -86 -97 -66) -97]
Test Case: 969 | Input/Output: [(77 58 90 92) 58]
Test Case: 970 | Input/Output: [(-74 -19 71 73) -74]
Test Case: 971 | Input/Output: [(54 -73 78 52) -73]
Test Case: 972 | Input/Output: [(-9 -26 17 78) -26]
Test Case: 973 | Input/Output: [(-4 25 -15 10) -15]
Test Case: 974 | Input/Output: [(46 67 31 -90) -90]
Test Case: 975 | Input/Output: [(28 55 -80 23) -80]
Test Case: 976 | Input/Output: [(-35 59 -51 -92) -92]
Test Case: 977 | Input/Output: [(-34 38 80 -2) -34]
Test Case: 978 | Input/Output: [(2 22 -94 16) -94]
Test Case: 979 | Input/Output: [(63 53 -18 54) -18]
Test Case: 980 | Input/Output: [(-65 68 -23 -17) -65]
Test Case: 981 | Input/Output: [(0 6 25 -95) -95]
Test Case: 982 | Input/Output: [(46 -65 -55 -21) -65]
Test Case: 983 | Input/Output: [(92 -50 -74 77) -74]
Test Case: 984 | Input/Output: [(73 -2 6 54) -2]
Test Case: 985 | Input/Output: [(71 -32 59 -33) -33]
Test Case: 986 | Input/Output: [(-2 -50 95 -9) -50]
Test Case: 987 | Input/Output: [(-96 7 78 69) -96]
Test Case: 988 | Input/Output: [(-79 -38 -66 -66) -79]
Test Case: 989 | Input/Output: [(-58 75 -73 61) -73]
Test Case: 990 | Input/Output: [(85 -41 58 12) -41]
Test Case: 991 | Input/Output: [(-88 100 15 33) -88]
Test Case: 992 | Input/Output: [(-50 -46 -7 12) -50]
Test Case: 993 | Input/Output: [(41 20 47 -39) -39]
Test Case: 994 | Input/Output: [(52 23 47 9) 9]
Test Case: 995 | Input/Output: [(-49 -36 96 -40) -49]
Test Case: 996 | Input/Output: [(30 -38 -24 -8) -38]
Test Case: 997 | Input/Output: [(62 100 73 6) 6]
Test Case: 998 | Input/Output: [(-55 -96 -27 49) -96]
Test Case: 999 | Input/Output: [(46 55 -91 -49) -91]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 69 25 109 45 44 -118 -1 -123 -70 82 -40 -21 -126 -106 -33 6
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-5 -5 54 -5] -5] [[66 66 42 66] 42] [[-71 -71 -64 -71] -71] [[-18 -18 -11 -18] -18] [[14 -12 -12 -12] -12] [[-30 -30 -30 -3] -30] [[87 87 60 87] 60] [[11 11 11 -65] -65] [[12 12 12 48] 12] [[67 67 67 -71] -71] [(-92 -92 -92 -92) -92] [(75 75 75 75) 75] [(-11 -11 -11 -11) -11] [(-65 -65 -65 -65) -65] [(-6 -6 -6 -6) -6] [(23 38 45 36) 23] [(27 95 79 31) 27] [(74 14 35 19) 14] [(34 94 55 48) 34] [(48 61 94 82) 48] [(86 70 60 48) 48] [(2 36 3 67) 2] [(10 38 88 77) 10] [(42 0 93 53) 0] [(71 3 80 66) 3] [(21 18 91 95) 18] [(34 25 21 1) 1] [(78 93 81 17) 17] [(30 58 33 90) 30] [(58 54 99 20) 20] [(44 25 91 58) 25] [(88 96 38 34) 34] [(96 46 89 49) 46] [(81 21 31 87) 21] [(6 90 37 0) 0] [(-95 -40 11 40) -95] [(28 10 17 97) 10] [(-64 -52 10 -62) -64] [(69 -24 1 57) -24] [(-79 -54 50 37) -79] [(-45 -71 5 2) -71] [(-94 41 -85 -94) -94] [(4 5 -35 -81) -81] [(-32 70 -49 22) -49] [(-30 52 94 -37) -37] [(-45 13 4 -86) -86] [(-84 69 -76 -34) -84] [(3 56 96 -67) -67] [(38 40 -57 -33) -57] [(42 6 98 -33) -33] [(51 -29 70 -67) -67] [(-4 -98 7 11) -98] [(-55 26 48 -96) -96] [(-58 58 -69 -91) -91] [(-25 -3 53 20) -25] [(-82 -45 2 -81) -82] [(-75 -53 -3 -64) -75] [(27 81 73 -4) -4] [(45 -74 -65 67) -74] [(54 2 74 -78) -78] [(87 50 79 -24) -24] [(68 91 -48 -6) -48] [(65 56 -26 -95) -95] [(-55 2 -70 -11) -70] [(17 -24 -88 47) -88] [(-61 -50 21 71) -61] [(-85 -59 83 -43) -85] [(-53 -9 -29 -99) -99] [(-66 -91 -74 -69) -91] [(-1 -89 -72 68) -89] [(90 -62 13 -15) -62] [(-81 14 -58 -100) -100] [(-87 -3 5 59) -87] [(70 8 -29 90) -29] [(-84 23 -48 59) -84] [(65 -14 -67 -64) -67] [(65 -67 25 42) -67] [(5 30 27 -16) -16] [(2 35 59 -91) -91] [(-78 91 -75 -79) -79] [(46 -13 -46 -46) -46] [(93 97 90 -36) -36] [(84 14 -1 -42) -42] [(82 -100 -72 72) -100] [(26 -95 -56 41) -95] [(-33 -45 -93 88) -93] [(55 52 55 -29) -29] [(13 -53 -100 -67) -100] [(39 -56 -41 -99) -99] [(-4 -7 64 -5) -7] [(83 76 -73 0) -73] [(10 -54 8 81) -54] [(-64 11 10 98) -64] [(65 3 59 -33) -33] [(50 96 -39 -68) -68])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: 14                 
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 74                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 42                 
Correct output: 3                   | Program output: 71                 
Correct output: 18                  | Program output: 21                 
Correct output: 1                   | Program output: 34                 
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 58                 
Correct output: 25                  | Program output: 44                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 96                 
Correct output: 21                  | Program output: 81                 
Correct output: 0                   | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 28                 
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: 69                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -45                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 4                  
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: -30                
Correct output: -86                 | Program output: -45                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 3true              
Correct output: -57                 | Program output: 38                 
Correct output: -33                 | Program output: 42                 
Correct output: -67                 | Program output: 51                 
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -4                  | Program output: 27                 
Correct output: -74                 | Program output: 45                 
Correct output: -78                 | Program output: 54                 
Correct output: -24                 | Program output: 87                 
Correct output: -48                 | Program output: 68                 
Correct output: -95                 | Program output: 65                 
Correct output: -70                 | Program output: -55                
Correct output: -88                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -53                
Correct output: -91                 | Program output: -66                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: 90                 
Correct output: -100                | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 65                 
Correct output: -67                 | Program output: 65                 
Correct output: -16                 | Program output: 5                  
Correct output: -91                 | Program output: 2                  
Correct output: -79                 | Program output: -78                
Correct output: -46                 | Program output: 46                 
Correct output: -36                 | Program output: 93                 
Correct output: -42                 | Program output: 84                 
Correct output: -100                | Program output: 82                 
Correct output: -95                 | Program output: 26                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: 13                 
Correct output: -99                 | Program output: 39                 
Correct output: -7                  | Program output: -4                 
Correct output: -73                 | Program output: 83                 
Correct output: -54                 | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: 65                 
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_integer_814} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_593} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_975} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction -52} {:close 0, :instruction -79} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction -94} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 1, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_inc})
Lexicase best program: (integer_swap exec_pop (integer_yankdup print_boolean integer_pop exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) boolean_empty integer_shove boolean_swap integer_sub integer_stackdepth tag_integer_814 boolean_not integer_lte integer_empty boolean_yank boolean_swap integer_min integer_eq in3) boolean_empty integer_stackdepth boolean_stackdepth integer_swap boolean_flush boolean_shove exec_do*range (integer_gte exec_dup_times (integer_mult boolean_dup_times exec_s_when_autoconstructing () (integer_inc) (in3 boolean_dup in1 exec_dup (print_integer integer_yank exec_k_when_autoconstructing () (integer_dup_items) boolean_dup_times tagged_593 exec_eq tag_exec_975 (print_boolean) boolean_dup_items) exec_while (exec_when (-52 -79 exec_do*while (exec_k () () integer_yankdup) boolean_or exec_k (exec_yankdup exec_s (in3) (boolean_dup_items integer_div -94 integer_lte print_boolean integer_dec boolean_dup integer_div exec_flush exec_do*count () integer_pop integer_stackdepth exec_eq integer_dup_items exec_while () integer_sub integer_gt in4) (exec_when (integer_dup_times exec_do*times () integer_inc))) ()))))))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 112
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_integer_814} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_593} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_975} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction -52} {:close 0, :instruction -79} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction -94} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 1, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_inc})
Zero cases best program: (integer_swap exec_pop (integer_yankdup print_boolean integer_pop exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) boolean_empty integer_shove boolean_swap integer_sub integer_stackdepth tag_integer_814 boolean_not integer_lte integer_empty boolean_yank boolean_swap integer_min integer_eq in3) boolean_empty integer_stackdepth boolean_stackdepth integer_swap boolean_flush boolean_shove exec_do*range (integer_gte exec_dup_times (integer_mult boolean_dup_times exec_s_when_autoconstructing () (integer_inc) (in3 boolean_dup in1 exec_dup (print_integer integer_yank exec_k_when_autoconstructing () (integer_dup_items) boolean_dup_times tagged_593 exec_eq tag_exec_975 (print_boolean) boolean_dup_items) exec_while (exec_when (-52 -79 exec_do*while (exec_k () () integer_yankdup) boolean_or exec_k (exec_yankdup exec_s (in3) (boolean_dup_items integer_div -94 integer_lte print_boolean integer_dec boolean_dup integer_div exec_flush exec_do*count () integer_pop integer_stackdepth exec_eq integer_dup_items exec_while () integer_sub integer_gt in4) (exec_when (integer_dup_times exec_do*times () integer_inc))) ()))))))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 112
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 2 2 2 2 8 2 2 2 2)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (5 2 2 2 2 8 2 2 2 2)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_boolean_822} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 1, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add})
Best program: (exec_rot (integer_flush exec_do*times (in3 integer_swap exec_yank boolean_dup_times exec_dup_items exec_do*range (exec_do*count (exec_k (exec_rot (exec_stackdepth exec_do*while (exec_eq exec_rot () (boolean_not in4 boolean_yankdup boolean_invert_second_then_and integer_yankdup exec_s (boolean_flush integer_dup_times exec_do*count (boolean_pop exec_noop exec_dup_times (boolean_not boolean_rot in1) boolean_invert_second_then_and boolean_or) integer_dup) (tag_boolean_822 print_integer exec_do*while (exec_s_when_autoconstructing (integer_shove exec_do*while (exec_y_when_autoconstructing () exec_yank integer_inc boolean_swap boolean_frominteger boolean_flush print_boolean) integer_sub) (in4) (exec_dup_items boolean_rot integer_rot boolean_xor exec_flush integer_fromboolean in1 exec_flush integer_flush boolean_or in4 integer_add integer_shove exec_pop () exec_s_when_autoconstructing (boolean_dup print_integer boolean_yank integer_add) () ()))) ()) ())) () ()) ())))) () ())
Errors: [1 0 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 68
Size: 99
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 9.971
Median total errors in population: 10
Error averages by case: (0.995 0.998 0.998 0.998 0.998 0.992 0.998 0.998 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.053
Average program size in population (points): 69.987
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 476170
--- Timings ---
Current time: 1559584644370 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 29.4%
Fitness Testing:      1.8 seconds, 66.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: 14                 
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 74                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 42                 
Correct output: 3                   | Program output: 71                 
Correct output: 18                  | Program output: 21                 
Correct output: 1                   | Program output: 34                 
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 58                 
Correct output: 25                  | Program output: 44                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 96                 
Correct output: 21                  | Program output: 81                 
Correct output: 0                   | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 28                 
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: 69                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -45                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 4                  
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: -30                
Correct output: -86                 | Program output: -45                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 3true              
Correct output: -57                 | Program output: 38                 
Correct output: -33                 | Program output: 42                 
Correct output: -67                 | Program output: 51                 
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -4                  | Program output: 27                 
Correct output: -74                 | Program output: 45                 
Correct output: -78                 | Program output: 54                 
Correct output: -24                 | Program output: 87                 
Correct output: -48                 | Program output: 68                 
Correct output: -95                 | Program output: 65                 
Correct output: -70                 | Program output: -55                
Correct output: -88                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -53                
Correct output: -91                 | Program output: -66                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: 90                 
Correct output: -100                | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 65                 
Correct output: -67                 | Program output: 65                 
Correct output: -16                 | Program output: 5                  
Correct output: -91                 | Program output: 2                  
Correct output: -79                 | Program output: -78                
Correct output: -46                 | Program output: 46                 
Correct output: -36                 | Program output: 93                 
Correct output: -42                 | Program output: 84                 
Correct output: -100                | Program output: 82                 
Correct output: -95                 | Program output: 26                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: 13                 
Correct output: -99                 | Program output: 39                 
Correct output: -7                  | Program output: -4                 
Correct output: -73                 | Program output: 83                 
Correct output: -54                 | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: 65                 
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_integer_814} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_593} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_975} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction -52} {:close 0, :instruction -79} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction -94} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 1, :instruction in4} {:close 0, :instruction exec_when})
Lexicase best program: (exec_y_when_autoconstructing () exec_pop (integer_yankdup print_boolean integer_pop exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) boolean_empty integer_shove boolean_swap integer_sub integer_stackdepth tag_integer_814 boolean_not integer_lte integer_empty boolean_yank boolean_swap integer_min integer_eq in3) boolean_empty integer_stackdepth boolean_stackdepth integer_swap boolean_flush boolean_shove exec_do*range (integer_gte exec_dup_times (integer_mult boolean_dup_times exec_s_when_autoconstructing () (integer_inc) (in3 boolean_dup in1 exec_dup (print_integer integer_yank exec_k_when_autoconstructing () (integer_dup_items) boolean_dup_times tagged_593 exec_eq tag_exec_975 (print_boolean) boolean_dup_items) exec_while (exec_when (-52 -79 exec_do*while (exec_k () () integer_yankdup) boolean_or exec_k (exec_yankdup exec_s (in3) (boolean_dup_items integer_div -94 integer_lte print_boolean integer_dec boolean_dup integer_div exec_flush exec_do*count () integer_pop integer_stackdepth exec_eq integer_dup_items exec_while () integer_sub integer_gt in4) (exec_when ())) ()))))))
Lexicase best errors: [0 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 109
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_integer_814} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_593} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_975} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction -52} {:close 0, :instruction -79} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction -94} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 1, :instruction in4} {:close 0, :instruction exec_when})
Zero cases best program: (exec_y_when_autoconstructing () exec_pop (integer_yankdup print_boolean integer_pop exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) boolean_empty integer_shove boolean_swap integer_sub integer_stackdepth tag_integer_814 boolean_not integer_lte integer_empty boolean_yank boolean_swap integer_min integer_eq in3) boolean_empty integer_stackdepth boolean_stackdepth integer_swap boolean_flush boolean_shove exec_do*range (integer_gte exec_dup_times (integer_mult boolean_dup_times exec_s_when_autoconstructing () (integer_inc) (in3 boolean_dup in1 exec_dup (print_integer integer_yank exec_k_when_autoconstructing () (integer_dup_items) boolean_dup_times tagged_593 exec_eq tag_exec_975 (print_boolean) boolean_dup_items) exec_while (exec_when (-52 -79 exec_do*while (exec_k () () integer_yankdup) boolean_or exec_k (exec_yankdup exec_s (in3) (boolean_dup_items integer_div -94 integer_lte print_boolean integer_dec boolean_dup integer_div exec_flush exec_do*count () integer_pop integer_stackdepth exec_eq integer_dup_items exec_while () integer_sub integer_gt in4) (exec_when ())) ()))))))
Zero cases best errors: [0 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 109
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (256 256 241 255 256 231 256 230 242 109)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (256 256 241 255 256 231 256 230 242 109)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_boolean_822} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 1, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add})
Best program: (exec_rot (integer_flush exec_do*times (in3 integer_swap exec_yank boolean_dup_times exec_dup_items exec_do*range (exec_do*count (exec_k (exec_rot (exec_stackdepth exec_do*while (exec_eq exec_rot () (boolean_not in4 boolean_yankdup boolean_invert_second_then_and integer_yankdup exec_s (boolean_flush integer_dup_times exec_do*count (boolean_pop exec_noop exec_dup_times (boolean_not boolean_rot in1) boolean_invert_second_then_and boolean_or) integer_dup) (tag_boolean_822 print_integer exec_do*while (exec_s_when_autoconstructing (integer_shove exec_do*while (exec_y_when_autoconstructing () exec_yank integer_inc boolean_swap boolean_frominteger boolean_flush print_boolean) integer_sub) (in4) (boolean_or boolean_rot integer_rot boolean_xor exec_flush integer_fromboolean in1 exec_flush integer_flush boolean_or in4 integer_add integer_shove exec_pop () exec_s_when_autoconstructing (boolean_dup print_integer boolean_yank integer_add) () ()))) ()) ())) () ()) ())))) () ())
Errors: [0 0 1 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 68
Size: 99
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.668
Median total errors in population: 8
Error averages by case: (0.744 0.744 0.759 0.745 0.744 0.769 0.744 0.77 0.758 0.891)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.218
Average program size in population (points): 73.555
Average percent parens in population: 0.267
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.517
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1056640
--- Timings ---
Current time: 1559584647310 milliseconds
Total Time:           5.8 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 40.9%
Fitness Testing:      2.5 seconds, 43.3%
Report:               0.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction 63} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_854} {:close 1, :instruction integer_pop})
Lexicase best program: (boolean_xor exec_eq exec_dup_times () boolean_dup integer_dup exec_y_when_autoconstructing (integer_stackdepth boolean_yank) exec_y (integer_shove exec_shove (exec_yank) exec_eq boolean_invert_second_then_and) integer_div integer_mult boolean_dup boolean_dup_items exec_do*while (exec_do*count ()) boolean_shove exec_do*while (boolean_swap) integer_dec boolean_flush integer_dec in1 exec_dup_times (integer_max) exec_do*range () integer_shove exec_do*while (integer_rot integer_lte in4 boolean_swap integer_max exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup integer_div exec_eq boolean_or 63) (integer_eq integer_dup_times print_integer integer_shove) boolean_eq tagged_854) (integer_pop)))
Lexicase best errors: [1 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction 63} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_854} {:close 1, :instruction integer_pop})
Zero cases best program: (boolean_xor exec_eq exec_dup_times () boolean_dup integer_dup exec_y_when_autoconstructing (integer_stackdepth boolean_yank) exec_y (integer_shove exec_shove (exec_yank) exec_eq boolean_invert_second_then_and) integer_div integer_mult boolean_dup boolean_dup_items exec_do*while (exec_do*count ()) boolean_shove exec_do*while (boolean_swap) integer_dec boolean_flush integer_dec in1 exec_dup_times (integer_max) exec_do*range () integer_shove exec_do*while (integer_rot integer_lte in4 boolean_swap integer_max exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup integer_div exec_eq boolean_or 63) (integer_eq integer_dup_times print_integer integer_shove) boolean_eq tagged_854) (integer_pop)))
Zero cases best errors: [1 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 348 187 159 102 797 162 348 261 160)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (102 348 187 159 102 797 162 348 261 160)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Best program: (integer_eq boolean_xor in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Errors: [1 1 1 0 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.374
Median total errors in population: 7
Error averages by case: (0.898 0.652 0.813 0.841 0.898 0.203 0.838 0.652 0.739 0.84)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.107
Average program size in population (points): 78.775
Average percent parens in population: 0.264
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9765
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1648601
--- Timings ---
Current time: 1559584650247 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.5 seconds, 49.4%
Fitness Testing:      3.1 seconds, 33.9%
Report:               1.4 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 745
Test mean error for best: 0.74500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 38(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 27                  | Program output: 95(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 14                  | Program output: 14                 
Correct output: 34                  | Program output: 94(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 48                  | Program output: 61(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 48                  | Program output: 70(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 2                   | Program output: 36(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 10                  | Program output: 38(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 25(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 17                  | Program output: 93(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 30                  | Program output: 58(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 20                  | Program output: 54(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 25                  | Program output: 25(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 34                  | Program output: 96(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 46                  | Program output: 46(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 90(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -95                 | Program output: -40                
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -52                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: 41(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -81                 | Program output: 5                  
Correct output: -49                 | Program output: 70(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -37                 | Program output: 52(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -86                 | Program output: 13true             
Correct output: -84                 | Program output: 69(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -67                 | Program output: 56(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -57                 | Program output: 40(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -33                 | Program output: 6                  
Correct output: -67                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: 26(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -91                 | Program output: 58(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -25                 | Program output: -3                 
Correct output: -82                 | Program output: -45                
Correct output: -75                 | Program output: -53                
Correct output: -4                  | Program output: 81(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 2                  
Correct output: -24                 | Program output: 50(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -48                 | Program output: 91(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -95                 | Program output: 56(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -70                 | Program output: 2                  
Correct output: -88                 | Program output: -24                
Correct output: -61                 | Program output: -50                
Correct output: -85                 | Program output: -59                
Correct output: -99                 | Program output: -9                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 14                 
Correct output: -87                 | Program output: -3                 
Correct output: -29                 | Program output: 8                  
Correct output: -84                 | Program output: 23(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -67                 | Program output: -14                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: 30(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -91                 | Program output: 35(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -79                 | Program output: 91(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -46                 | Program output: -13                
Correct output: -36                 | Program output: 97(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -42                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -45                
Correct output: -29                 | Program output: 52(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -100                | Program output: -53                
Correct output: -99                 | Program output: -56                
Correct output: -7                  | Program output: -7                 
Correct output: -73                 | Program output: 76(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: 11                 
Correct output: -33                 | Program output: 3                  
Correct output: -68                 | Program output: 96(exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction 63} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_854} {:close 1, :instruction integer_pop})
Lexicase best program: (integer_rot integer_flush integer_gt integer_swap exec_when (integer_flush) boolean_or boolean_dup_items integer_rot tagged_610 integer_gt integer_lte integer_max exec_dup (print_integer in2) boolean_shove boolean_dup_times exec_noop integer_eq integer_yankdup exec_y_when_autoconstructing (exec_y (exec_y_when_autoconstructing (boolean_dup_times print_boolean) boolean_invert_first_then_and) integer_max) boolean_stackdepth boolean_stackdepth print_exec () boolean_rot boolean_dup_items boolean_invert_second_then_and boolean_yankdup integer_empty boolean_stackdepth exec_do*range (boolean_pop) exec_flush boolean_swap boolean_eq in3 exec_do*count (print_exec (exec_do*times (integer_fromboolean integer_empty exec_eq boolean_or 63) integer_eq integer_dup_times print_integer integer_shove)) boolean_eq tagged_854 integer_pop)
Lexicase best errors: [0 1 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 69
Percent parens: 0.159
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction 63} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_854} {:close 1, :instruction integer_pop})
Zero cases best program: (integer_rot integer_flush integer_gt integer_swap exec_when (integer_flush) boolean_or boolean_dup_items integer_rot tagged_610 integer_gt integer_lte integer_max exec_dup (print_integer in2) boolean_shove boolean_dup_times exec_noop integer_eq integer_yankdup exec_y_when_autoconstructing (exec_y (exec_y_when_autoconstructing (boolean_dup_times print_boolean) boolean_invert_first_then_and) integer_max) boolean_stackdepth boolean_stackdepth print_exec () boolean_rot boolean_dup_items boolean_invert_second_then_and boolean_yankdup integer_empty boolean_stackdepth exec_do*range (boolean_pop) exec_flush boolean_swap boolean_eq in3 exec_do*count (print_exec (exec_do*times (integer_fromboolean integer_empty exec_eq boolean_or 63) integer_eq integer_dup_times print_integer integer_shove)) boolean_eq tagged_854 integer_pop)
Zero cases best errors: [0 1 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 69
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 251 218 510 218 95 260 98 328 164)
Population mean number of elite cases: 2.24
Count of perfect (error zero) individuals by case: (96 251 218 510 218 95 260 98 328 164)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_when} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq})
Best program: (integer_rot integer_flush integer_gt integer_swap exec_when (integer_flush) boolean_or boolean_dup_items integer_rot tagged_610 exec_when () integer_lte integer_max exec_dup (print_integer in2) boolean_shove exec_yankdup exec_noop integer_eq integer_yankdup exec_y_when_autoconstructing (exec_y (exec_y_when_autoconstructing (boolean_dup_times print_boolean) boolean_invert_first_then_and) integer_max) boolean_stackdepth boolean_stackdepth print_exec () boolean_rot boolean_dup_items boolean_invert_second_then_and boolean_yankdup integer_empty boolean_stackdepth exec_do*range (boolean_pop) exec_flush boolean_swap boolean_eq in3 exec_do*count (print_exec (exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_when () integer_fromboolean) boolean_stackdepth exec_yank exec_rot (exec_y_when_autoconstructing (in3 boolean_rot exec_noop exec_k (boolean_stackdepth exec_rot (print_exec (boolean_dup_items exec_dup_times (boolean_stackdepth integer_dup_items boolean_pop exec_k_when_autoconstructing (in4 exec_k (integer_div exec_eq) ()) ()))) () ()) ())) () ())))
Errors: [0 1 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 72
Size: 100
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.762
Median total errors in population: 8
Error averages by case: (0.904 0.749 0.782 0.49 0.782 0.905 0.74 0.902 0.672 0.836)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.673
Average program size in population (points): 53.449
Average percent parens in population: 0.265
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.42675
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2112544
--- Timings ---
Current time: 1559584653284 milliseconds
Total Time:          11.7 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.4 seconds, 54.6%
Fitness Testing:      3.6 seconds, 30.5%
Report:               1.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 38                 
Correct output: 27                  | Program output: 95                 
Correct output: 14                  | Program output: 14                 
Correct output: 34                  | Program output: 94                 
Correct output: 48                  | Program output: 61                 
Correct output: 48                  | Program output: 70                 
Correct output: 2                   | Program output: 36                 
Correct output: 10                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 25                 
Correct output: 17                  | Program output: 93                 
Correct output: 30                  | Program output: 58                 
Correct output: 20                  | Program output: 54                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 96                 
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 90                 
Correct output: -95                 | Program output: -40                
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -52                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: 41                 
Correct output: -81                 | Program output: 5                  
Correct output: -49                 | Program output: 70                 
Correct output: -37                 | Program output: 52                 
Correct output: -86                 | Program output: 13                 
Correct output: -84                 | Program output: 69                 
Correct output: -67                 | Program output: 56                 
Correct output: -57                 | Program output: 40                 
Correct output: -33                 | Program output: 6                  
Correct output: -67                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: 26                 
Correct output: -91                 | Program output: 58                 
Correct output: -25                 | Program output: -3                 
Correct output: -82                 | Program output: -45                
Correct output: -75                 | Program output: -53                
Correct output: -4                  | Program output: 81                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 2                  
Correct output: -24                 | Program output: 50                 
Correct output: -48                 | Program output: 91                 
Correct output: -95                 | Program output: 56                 
Correct output: -70                 | Program output: 2                  
Correct output: -88                 | Program output: -24                
Correct output: -61                 | Program output: -50                
Correct output: -85                 | Program output: -59                
Correct output: -99                 | Program output: -9                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 14                 
Correct output: -87                 | Program output: -3                 
Correct output: -29                 | Program output: 8                  
Correct output: -84                 | Program output: 23                 
Correct output: -67                 | Program output: -14                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: 30                 
Correct output: -91                 | Program output: 35                 
Correct output: -79                 | Program output: 91                 
Correct output: -46                 | Program output: -13                
Correct output: -36                 | Program output: 97                 
Correct output: -42                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -45                
Correct output: -29                 | Program output: 52                 
Correct output: -100                | Program output: -53                
Correct output: -99                 | Program output: -56                
Correct output: -7                  | Program output: -7                 
Correct output: -73                 | Program output: 76                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: 11                 
Correct output: -33                 | Program output: 3                  
Correct output: -68                 | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_gt} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_975} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction -52} {:close 0, :instruction -79} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction -94} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 1, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_rot})
Lexicase best program: (integer_rot integer_flush integer_gt integer_swap exec_when (integer_flush) boolean_or boolean_dup_items integer_rot tagged_610 integer_gt integer_lte integer_max exec_dup (print_integer in2) boolean_shove boolean_dup_times exec_noop integer_eq integer_yankdup exec_y_when_autoconstructing (boolean_or exec_y_when_autoconstructing (boolean_dup_times print_boolean) boolean_invert_first_then_and) integer_max boolean_stackdepth boolean_stackdepth integer_gt boolean_rot boolean_dup_items boolean_invert_second_then_and boolean_yankdup integer_empty boolean_stackdepth exec_do*range (boolean_pop) exec_flush boolean_swap boolean_eq in3 exec_do*count (print_exec (exec_do*times (integer_fromboolean integer_empty boolean_dup_times integer_mod) integer_fromboolean) boolean_stackdepth exec_yank exec_rot (tag_exec_975 (print_boolean) boolean_dup_items) (exec_while (exec_when (-52 -79 exec_do*while (exec_k () () integer_yankdup) boolean_or exec_k (exec_yankdup exec_s (in3) (boolean_dup_items integer_div -94 integer_lte print_boolean integer_dec boolean_dup integer_div exec_flush exec_do*count () integer_pop exec_k (integer_div exec_eq exec_pop () integer_inc integer_yankdup integer_flush integer_mult exec_eq boolean_invert_second_then_and integer_pop integer_stackdepth exec_eq integer_dup_items exec_while () integer_sub integer_gt in4) (exec_when (integer_dup_times exec_do*times () integer_rot))) ()) ()))) ()))
Lexicase best errors: [1 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 132
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_gt} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_975} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction -52} {:close 0, :instruction -79} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction -94} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 1, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_rot})
Zero cases best program: (integer_rot integer_flush integer_gt integer_swap exec_when (integer_flush) boolean_or boolean_dup_items integer_rot tagged_610 integer_gt integer_lte integer_max exec_dup (print_integer in2) boolean_shove boolean_dup_times exec_noop integer_eq integer_yankdup exec_y_when_autoconstructing (boolean_or exec_y_when_autoconstructing (boolean_dup_times print_boolean) boolean_invert_first_then_and) integer_max boolean_stackdepth boolean_stackdepth integer_gt boolean_rot boolean_dup_items boolean_invert_second_then_and boolean_yankdup integer_empty boolean_stackdepth exec_do*range (boolean_pop) exec_flush boolean_swap boolean_eq in3 exec_do*count (print_exec (exec_do*times (integer_fromboolean integer_empty boolean_dup_times integer_mod) integer_fromboolean) boolean_stackdepth exec_yank exec_rot (tag_exec_975 (print_boolean) boolean_dup_items) (exec_while (exec_when (-52 -79 exec_do*while (exec_k () () integer_yankdup) boolean_or exec_k (exec_yankdup exec_s (in3) (boolean_dup_items integer_div -94 integer_lte print_boolean integer_dec boolean_dup integer_div exec_flush exec_do*count () integer_pop exec_k (integer_div exec_eq exec_pop () integer_inc integer_yankdup integer_flush integer_mult exec_eq boolean_invert_second_then_and integer_pop integer_stackdepth exec_eq integer_dup_items exec_while () integer_sub integer_gt in4) (exec_when (integer_dup_times exec_do*times () integer_rot))) ()) ()))) ()))
Zero cases best errors: [1 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 132
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (63 393 272 341 339 341 63 63 338 330)
Population mean number of elite cases: 2.54
Count of perfect (error zero) individuals by case: (63 393 272 341 339 341 63 63 338 330)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_rot integer_flush integer_gt integer_swap exec_when () integer_flush boolean_or boolean_dup_items integer_rot tagged_610 integer_gt integer_lte integer_max exec_dup (print_integer in2) boolean_shove boolean_dup_times exec_noop integer_eq integer_yankdup exec_y_when_autoconstructing (exec_y (exec_y_when_autoconstructing (boolean_dup_times print_boolean) boolean_invert_first_then_and) integer_max) boolean_stackdepth)
Errors: [1 0 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 35
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 7.457
Median total errors in population: 9
Error averages by case: (0.937 0.607 0.728 0.659 0.661 0.659 0.937 0.937 0.662 0.67)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.351
Average program size in population (points): 55.421
Average percent parens in population: 0.264
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 6.0045
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 197
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2608516
--- Timings ---
Current time: 1559584656488 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.5 seconds, 56.9%
Fitness Testing:      4.1 seconds, 27.2%
Report:               2.3 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 38                 
Correct output: 27                  | Program output: 95                 
Correct output: 14                  | Program output: 14                 
Correct output: 34                  | Program output: 94                 
Correct output: 48                  | Program output: 61                 
Correct output: 48                  | Program output: 70                 
Correct output: 2                   | Program output: 36                 
Correct output: 10                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 25                 
Correct output: 17                  | Program output: 93                 
Correct output: 30                  | Program output: 58                 
Correct output: 20                  | Program output: 54                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 96                 
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 90                 
Correct output: -95                 | Program output: -40                
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -52                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: 41                 
Correct output: -81                 | Program output: 5                  
Correct output: -49                 | Program output: 70                 
Correct output: -37                 | Program output: 52                 
Correct output: -86                 | Program output: 13                 
Correct output: -84                 | Program output: 69                 
Correct output: -67                 | Program output: 56                 
Correct output: -57                 | Program output: 40                 
Correct output: -33                 | Program output: 6                  
Correct output: -67                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: 26                 
Correct output: -91                 | Program output: 58                 
Correct output: -25                 | Program output: -3                 
Correct output: -82                 | Program output: -45                
Correct output: -75                 | Program output: -53                
Correct output: -4                  | Program output: 81                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 2                  
Correct output: -24                 | Program output: 50                 
Correct output: -48                 | Program output: 91                 
Correct output: -95                 | Program output: 56                 
Correct output: -70                 | Program output: 2                  
Correct output: -88                 | Program output: -24                
Correct output: -61                 | Program output: -50                
Correct output: -85                 | Program output: -59                
Correct output: -99                 | Program output: -9                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 14                 
Correct output: -87                 | Program output: -3                 
Correct output: -29                 | Program output: 8                  
Correct output: -84                 | Program output: 23                 
Correct output: -67                 | Program output: -14                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: 30                 
Correct output: -91                 | Program output: 35                 
Correct output: -79                 | Program output: 91                 
Correct output: -46                 | Program output: -13                
Correct output: -36                 | Program output: 97                 
Correct output: -42                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -45                
Correct output: -29                 | Program output: 52                 
Correct output: -100                | Program output: -53                
Correct output: -99                 | Program output: -56                
Correct output: -7                  | Program output: -7                 
Correct output: -73                 | Program output: 76                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: 11                 
Correct output: -33                 | Program output: 3                  
Correct output: -68                 | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_exec_516} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_rot integer_flush integer_gt integer_swap boolean_pop boolean_yank boolean_or boolean_dup_items integer_rot tagged_610 integer_gt integer_lte integer_max exec_dup (print_integer in2) boolean_shove boolean_dup_times exec_noop integer_eq exec_do*range (in1 integer_gt) integer_min integer_swap integer_swap boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_and exec_while (exec_do*range (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove boolean_flush integer_yank exec_dup_items exec_empty exec_y_when_autoconstructing (integer_pop 90 exec_when (boolean_empty integer_shove tag_exec_516 () exec_do*count (integer_inc) boolean_frominteger exec_yankdup exec_while () integer_dup boolean_rot boolean_stackdepth tag_boolean_195 exec_noop boolean_rot boolean_xor in1 exec_noop)))) ())))))
Lexicase best errors: [1 0 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 81
Percent parens: 0.210
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_exec_516} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_rot integer_flush integer_gt integer_swap boolean_pop boolean_yank boolean_or boolean_dup_items integer_rot tagged_610 integer_gt integer_lte integer_max exec_dup (print_integer in2) boolean_shove boolean_dup_times exec_noop integer_eq exec_do*range (in1 integer_gt) integer_min integer_swap integer_swap boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_and exec_while (exec_do*range (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove boolean_flush integer_yank exec_dup_items exec_empty exec_y_when_autoconstructing (integer_pop 90 exec_when (boolean_empty integer_shove tag_exec_516 () exec_do*count (integer_inc) boolean_frominteger exec_yankdup exec_while () integer_dup boolean_rot boolean_stackdepth tag_boolean_195 exec_noop boolean_rot boolean_xor in1 exec_noop)))) ())))))
Zero cases best errors: [1 0 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 81
Percent parens: 0.210
--- Lexicase Population Statistics ---
Count of elite individuals by case: (75 585 75 584 261 75 844 1000 261 584)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (75 585 75 584 261 75 844 0 261 584)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot})
Best program: (integer_rot integer_flush integer_gt integer_swap exec_when (integer_flush) integer_min boolean_dup_items integer_rot tagged_610 integer_gt integer_lte integer_max exec_dup (print_integer in2) boolean_shove boolean_dup_times exec_noop integer_eq integer_yankdup exec_y_when_autoconstructing (exec_y (exec_y_when_autoconstructing (boolean_dup_times print_boolean) boolean_invert_first_then_and) integer_max) boolean_stackdepth boolean_stackdepth print_exec () boolean_rot boolean_dup_items boolean_invert_second_then_and boolean_yankdup integer_empty boolean_stackdepth exec_do*range (boolean_pop) exec_flush boolean_swap boolean_eq in3 exec_pop (print_exec (exec_do*times (integer_fromboolean integer_empty boolean_dup_times exec_if () (integer_fromboolean) boolean_stackdepth exec_yank exec_rot () () ()))))
Errors: [1 0 1 0 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 54
Size: 70
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.656
Median total errors in population: 6
Error averages by case: (0.925 0.415 0.925 0.416 0.739 0.925 0.156 1.0 0.739 0.416)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 41.494
Average program size in population (points): 54.937
Average percent parens in population: 0.246
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.4305625
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3134027
--- Timings ---
Current time: 1559584659698 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.5 seconds, 58.2%
Fitness Testing:      4.5 seconds, 25.0%
Report:               2.9 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: 54                 
Correct output: 42                  | Program output: 42                 
Correct output: -71                 | Program output: -64                
Correct output: -18                 | Program output: -11                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 45                 
Correct output: 27                  | Program output: 79                 
Correct output: 14                  | Program output: 35                 
Correct output: 34                  | Program output: 55                 
Correct output: 48                  | Program output: 94                 
Correct output: 48                  | Program output: 60                 
Correct output: 2                   | Program output: 3                  
Correct output: 10                  | Program output: 88                 
Correct output: 0                   | Program output: 93                 
Correct output: 3                   | Program output: 80                 
Correct output: 18                  | Program output: 91                 
Correct output: 1                   | Program output: 21                 
Correct output: 17                  | Program output: 81                 
Correct output: 30                  | Program output: 33                 
Correct output: 20                  | Program output: 99                 
Correct output: 25                  | Program output: 91                 
Correct output: 34                  | Program output: 38                 
Correct output: 46                  | Program output: 89                 
Correct output: 21                  | Program output: 31                 
Correct output: 0                   | Program output: 37                 
Correct output: -95                 | Program output: 11                 
Correct output: 10                  | Program output: 17                 
Correct output: -64                 | Program output: 10                 
Correct output: -24                 | Program output: 1                  
Correct output: -79                 | Program output: 50                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -85                
Correct output: -81                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 94                 
Correct output: -86                 | Program output: 4                  
Correct output: -84                 | Program output: -76                
Correct output: -67                 | Program output: 96                 
Correct output: -57                 | Program output: -57                
Correct output: -33                 | Program output: 98                 
Correct output: -67                 | Program output: 70                 
Correct output: -98                 | Program output: 7                  
Correct output: -96                 | Program output: 48                 
Correct output: -91                 | Program output: -69                
Correct output: -25                 | Program output: 53                 
Correct output: -82                 | Program output: 2                  
Correct output: -75                 | Program output: -3                 
Correct output: -4                  | Program output: 73                 
Correct output: -74                 | Program output: -65                
Correct output: -78                 | Program output: 74                 
Correct output: -24                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: 21                 
Correct output: -85                 | Program output: 83                 
Correct output: -99                 | Program output: -29                
Correct output: -91                 | Program output: -74                
Correct output: -89                 | Program output: -72                
Correct output: -62                 | Program output: 13                 
Correct output: -100                | Program output: -58                
Correct output: -87                 | Program output: 5                  
Correct output: -29                 | Program output: -29                
Correct output: -84                 | Program output: -48                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: 25                 
Correct output: -16                 | Program output: 27                 
Correct output: -91                 | Program output: 59                 
Correct output: -79                 | Program output: -75                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: 90                 
Correct output: -42                 | Program output: -1                 
Correct output: -100                | Program output: -72                
Correct output: -95                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -41                
Correct output: -7                  | Program output: 64                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 8                  
Correct output: -64                 | Program output: 10                 
Correct output: -33                 | Program output: 59                 
Correct output: -68                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while})
Lexicase best program: (integer_inc in2 in3 exec_empty print_integer exec_noop exec_while ())
Lexicase best errors: [0 0 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 9
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while})
Zero cases best program: (integer_inc in2 in3 exec_empty print_integer exec_noop exec_while ())
Zero cases best errors: [0 0 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 9
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (243 244 244 279 244 676 1000 1000 243 398)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (243 244 244 279 244 676 0 0 243 398)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_483} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_integer_816} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (exec_yankdup integer_dup tagged_483 exec_dup_items in3 print_integer in2 exec_if (exec_k (boolean_swap integer_yankdup) (boolean_not boolean_yank tag_integer_816) exec_do*while (integer_max exec_k_when_autoconstructing () ())) ())
Errors: [0 0 0 1 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 25
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 7.429
Median total errors in population: 8
Error averages by case: (0.757 0.756 0.756 0.721 0.756 0.324 1.0 1.0 0.757 0.602)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 30.398
Average program size in population (points): 40.709
Average percent parens in population: 0.262
Minimum age in population: 6.0
Maximum age in population: 10.9375
Average age in population: 8.9475
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3523334
--- Timings ---
Current time: 1559584662005 milliseconds
Total Time:          20.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.3 seconds, 58.7%
Fitness Testing:      4.9 seconds, 23.5%
Report:               3.6 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Lexicase best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Lexicase best errors: [0 1 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Zero cases best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Zero cases best errors: [0 1 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 188 154 343 188 915 1 154 552 1)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (154 188 154 343 188 915 1 154 552 1)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Errors: [0 1 0 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.35
Median total errors in population: 8
Error averages by case: (0.846 0.812 0.846 0.657 0.812 0.085 0.999 0.846 0.448 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.95
Average program size in population (points): 33.378
Average percent parens in population: 0.256
Minimum age in population: 7.0
Maximum age in population: 12.53125
Average age in population: 10.46740625
Median age in population: 10.546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 178
Genome diversity (% unique genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3886435
--- Timings ---
Current time: 1559584664487 milliseconds
Total Time:          23.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.3 seconds, 60.8%
Fitness Testing:      5.3 seconds, 22.6%
Report:               3.8 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: 54                 
Correct output: 42                  | Program output: 42                 
Correct output: -71                 | Program output: -64                
Correct output: -18                 | Program output: -11                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 45                 
Correct output: 27                  | Program output: 79                 
Correct output: 14                  | Program output: 35                 
Correct output: 34                  | Program output: 55                 
Correct output: 48                  | Program output: 94                 
Correct output: 48                  | Program output: 60                 
Correct output: 2                   | Program output: 3                  
Correct output: 10                  | Program output: 88                 
Correct output: 0                   | Program output: 93                 
Correct output: 3                   | Program output: 80                 
Correct output: 18                  | Program output: 91                 
Correct output: 1                   | Program output: 21                 
Correct output: 17                  | Program output: 81                 
Correct output: 30                  | Program output: 33                 
Correct output: 20                  | Program output: 99                 
Correct output: 25                  | Program output: 91                 
Correct output: 34                  | Program output: 38                 
Correct output: 46                  | Program output: 89                 
Correct output: 21                  | Program output: 31                 
Correct output: 0                   | Program output: 37                 
Correct output: -95                 | Program output: 11                 
Correct output: 10                  | Program output: 17                 
Correct output: -64                 | Program output: 10                 
Correct output: -24                 | Program output: 1                  
Correct output: -79                 | Program output: 50                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -85                
Correct output: -81                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 94                 
Correct output: -86                 | Program output: 4                  
Correct output: -84                 | Program output: -76                
Correct output: -67                 | Program output: 96                 
Correct output: -57                 | Program output: -57                
Correct output: -33                 | Program output: 98                 
Correct output: -67                 | Program output: 70                 
Correct output: -98                 | Program output: 7                  
Correct output: -96                 | Program output: 48                 
Correct output: -91                 | Program output: -69                
Correct output: -25                 | Program output: 53                 
Correct output: -82                 | Program output: 2                  
Correct output: -75                 | Program output: -3                 
Correct output: -4                  | Program output: 73                 
Correct output: -74                 | Program output: -65                
Correct output: -78                 | Program output: 74                 
Correct output: -24                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: 21                 
Correct output: -85                 | Program output: 83                 
Correct output: -99                 | Program output: -29                
Correct output: -91                 | Program output: -74                
Correct output: -89                 | Program output: -72                
Correct output: -62                 | Program output: 13                 
Correct output: -100                | Program output: -58                
Correct output: -87                 | Program output: 5                  
Correct output: -29                 | Program output: -29                
Correct output: -84                 | Program output: -48                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: 25                 
Correct output: -16                 | Program output: 27                 
Correct output: -91                 | Program output: 59                 
Correct output: -79                 | Program output: -75                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: 90                 
Correct output: -42                 | Program output: -1                 
Correct output: -100                | Program output: -72                
Correct output: -95                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -41                
Correct output: -7                  | Program output: 64                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 8                  
Correct output: -64                 | Program output: 10                 
Correct output: -33                 | Program output: 59                 
Correct output: -68                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_483} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_integer_816} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_yankdup exec_do*times (tagged_483 exec_dup_items in3 print_integer in2 exec_if (exec_k (boolean_swap integer_yankdup) (boolean_not boolean_yank tag_integer_816) exec_do*while (integer_max exec_k_when_autoconstructing () ())) ()))
Lexicase best errors: [0 0 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.346
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_483} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_integer_816} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_yankdup exec_do*times (tagged_483 exec_dup_items in3 print_integer in2 exec_if (exec_k (boolean_swap integer_yankdup) (boolean_not boolean_yank tag_integer_816) exec_do*while (integer_max exec_k_when_autoconstructing () ())) ()))
Zero cases best errors: [0 0 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.346
--- Lexicase Population Statistics ---
Count of elite individuals by case: (117 567 548 213 336 117 336 238 240 117)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (117 567 548 213 336 117 336 238 240 117)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while})
Best program: (integer_inc in2 in3 exec_empty print_integer exec_noop exec_while ())
Errors: [0 0 1 1 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 7
Size: 9
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.171
Median total errors in population: 7
Error averages by case: (0.883 0.433 0.452 0.787 0.664 0.883 0.664 0.762 0.76 0.883)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.663
Average program size in population (points): 42.961
Average percent parens in population: 0.272
Minimum age in population: 9.0
Maximum age in population: 13.953125
Average age in population: 11.9388515625
Median age in population: 11.9765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.523
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4208366
--- Timings ---
Current time: 1559584666806 milliseconds
Total Time:          25.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.1 seconds, 62.6%
Fitness Testing:      5.6 seconds, 21.8%
Report:               3.9 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: 14                 
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 74                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 42                 
Correct output: 3                   | Program output: 71                 
Correct output: 18                  | Program output: 21                 
Correct output: 1                   | Program output: 34                 
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 58                 
Correct output: 25                  | Program output: 44                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 96                 
Correct output: 21                  | Program output: 81                 
Correct output: 0                   | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 28                 
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: 69                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -45                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 4                  
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: -30                
Correct output: -86                 | Program output: -45                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 3                  
Correct output: -57                 | Program output: 38                 
Correct output: -33                 | Program output: 42                 
Correct output: -67                 | Program output: 51                 
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -4                  | Program output: 27                 
Correct output: -74                 | Program output: 45                 
Correct output: -78                 | Program output: 54                 
Correct output: -24                 | Program output: 87                 
Correct output: -48                 | Program output: 68                 
Correct output: -95                 | Program output: 65                 
Correct output: -70                 | Program output: -55                
Correct output: -88                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -53                
Correct output: -91                 | Program output: -66                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: 90                 
Correct output: -100                | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 65                 
Correct output: -67                 | Program output: 65                 
Correct output: -16                 | Program output: 5                  
Correct output: -91                 | Program output: 2                  
Correct output: -79                 | Program output: -78                
Correct output: -46                 | Program output: 46                 
Correct output: -36                 | Program output: 93                 
Correct output: -42                 | Program output: 84                 
Correct output: -100                | Program output: 82                 
Correct output: -95                 | Program output: 26                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: 13                 
Correct output: -99                 | Program output: 39                 
Correct output: -7                  | Program output: -4                 
Correct output: -73                 | Program output: 83                 
Correct output: -54                 | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: 65                 
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_sub exec_shove (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) integer_rot integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range ()) integer_swap exec_when () boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_and exec_while (exec_y_when_autoconstructing (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove boolean_flush integer_yank exec_dup_items exec_empty exec_y (integer_pop 90 exec_when (boolean_empty integer_shove exec_shove () exec_do*count () integer_inc) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop boolean_rot boolean_xor exec_empty exec_noop))) ())))))))
Lexicase best errors: [0 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 85
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_sub exec_shove (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) integer_rot integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range ()) integer_swap exec_when () boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_and exec_while (exec_y_when_autoconstructing (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove boolean_flush integer_yank exec_dup_items exec_empty exec_y (integer_pop 90 exec_when (boolean_empty integer_shove exec_shove () exec_do*count () integer_inc) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop boolean_rot boolean_xor exec_empty exec_noop))) ())))))))
Zero cases best errors: [0 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 85
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (146 582 147 387 240 320 196 900 146 240)
Population mean number of elite cases: 3.30
Count of perfect (error zero) individuals by case: (146 582 147 387 240 320 196 900 146 240)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction exec_noop})
Best program: (integer_sub exec_shove (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) integer_rot integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range ()) integer_swap exec_when () boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_and exec_while (exec_do*range (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove boolean_flush integer_yank exec_dup_items exec_empty exec_y_when_autoconstructing (integer_pop 90 exec_when (boolean_empty integer_shove exec_shove () exec_do*count () integer_inc) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop boolean_rot boolean_xor exec_when (exec_noop)))) ())))))))
Errors: [0 0 0 0 1 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 63
Size: 86
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.696
Median total errors in population: 7
Error averages by case: (0.854 0.418 0.853 0.613 0.76 0.68 0.804 0.1 0.854 0.76)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.767
Average program size in population (points): 36.399
Average percent parens in population: 0.267
Minimum age in population: 10.890625
Maximum age in population: 15.3046875
Average age in population: 13.37895703125
Median age in population: 13.453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.513
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4497874
--- Timings ---
Current time: 1559584669724 milliseconds
Total Time:          28.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.5 seconds, 64.8%
Fitness Testing:      5.9 seconds, 20.7%
Report:               4.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: 14                 
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 74                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 42                 
Correct output: 3                   | Program output: 71                 
Correct output: 18                  | Program output: 21                 
Correct output: 1                   | Program output: 34                 
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 58                 
Correct output: 25                  | Program output: 44                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 96                 
Correct output: 21                  | Program output: 81                 
Correct output: 0                   | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 28                 
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: 69                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -45                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 4                  
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: -30                
Correct output: -86                 | Program output: -45                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 3                  
Correct output: -57                 | Program output: 38                 
Correct output: -33                 | Program output: 42                 
Correct output: -67                 | Program output: 51                 
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -4                  | Program output: 27                 
Correct output: -74                 | Program output: 45                 
Correct output: -78                 | Program output: 54                 
Correct output: -24                 | Program output: 87                 
Correct output: -48                 | Program output: 68                 
Correct output: -95                 | Program output: 65                 
Correct output: -70                 | Program output: -55                
Correct output: -88                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -53                
Correct output: -91                 | Program output: -66                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: 90                 
Correct output: -100                | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 65                 
Correct output: -67                 | Program output: 65                 
Correct output: -16                 | Program output: 5                  
Correct output: -91                 | Program output: 2                  
Correct output: -79                 | Program output: -78                
Correct output: -46                 | Program output: 46                 
Correct output: -36                 | Program output: 93                 
Correct output: -42                 | Program output: 84                 
Correct output: -100                | Program output: 82                 
Correct output: -95                 | Program output: 26                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: 13                 
Correct output: -99                 | Program output: 39                 
Correct output: -7                  | Program output: -4                 
Correct output: -73                 | Program output: 83                 
Correct output: -54                 | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: 65                 
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction tagged_630} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_sub exec_shove (tagged_663 tagged_630 exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) integer_rot integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range ()) integer_swap exec_when () boolean_or exec_k_when_autoconstructing () (integer_swap boolean_swap exec_while (exec_do*range (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove boolean_flush integer_yank exec_dup_items exec_empty exec_y_when_autoconstructing (integer_pop 90 exec_when (boolean_empty integer_shove exec_shove () exec_do*count () integer_inc) boolean_frominteger exec_do*count () integer_inc) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop boolean_rot boolean_xor exec_empty exec_noop)) ()))))))
Lexicase best errors: [0 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 88
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction tagged_630} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_sub exec_shove (tagged_663 tagged_630 exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) integer_rot integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range ()) integer_swap exec_when () boolean_or exec_k_when_autoconstructing () (integer_swap boolean_swap exec_while (exec_do*range (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove boolean_flush integer_yank exec_dup_items exec_empty exec_y_when_autoconstructing (integer_pop 90 exec_when (boolean_empty integer_shove exec_shove () exec_do*count () integer_inc) boolean_frominteger exec_do*count () integer_inc) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop boolean_rot boolean_xor exec_empty exec_noop)) ()))))))
Zero cases best errors: [0 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 88
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (374 271 371 271 373 862 106 106 371 373)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (374 271 371 271 373 862 106 106 371 373)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop})
Best program: (integer_sub exec_shove (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) integer_rot integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) boolean_invert_first_then_and)) integer_swap exec_when () boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_and exec_while (exec_do*range (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove boolean_flush boolean_yankdup exec_dup_items exec_empty exec_y_when_autoconstructing (integer_pop 90 exec_when (boolean_empty integer_shove exec_shove () exec_do*count () integer_inc) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop boolean_rot boolean_xor exec_empty exec_noop))) ()))))))
Errors: [0 1 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 63
Size: 84
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.522
Median total errors in population: 7
Error averages by case: (0.626 0.729 0.629 0.729 0.627 0.138 0.894 0.894 0.629 0.627)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.236
Average program size in population (points): 46.899
Average percent parens in population: 0.274
Minimum age in population: 11.890625
Maximum age in population: 16.6640625
Average age in population: 14.8640234375
Median age in population: 14.9140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4807051
--- Timings ---
Current time: 1559584672535 milliseconds
Total Time:          31.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.8 seconds, 66.2%
Fitness Testing:      6.2 seconds, 19.8%
Report:               4.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 38                 
Correct output: 27                  | Program output: 95                 
Correct output: 14                  | Program output: 14                 
Correct output: 34                  | Program output: 94                 
Correct output: 48                  | Program output: 61                 
Correct output: 48                  | Program output: 70                 
Correct output: 2                   | Program output: 36                 
Correct output: 10                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 25                 
Correct output: 17                  | Program output: 93                 
Correct output: 30                  | Program output: 58                 
Correct output: 20                  | Program output: 54                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 96                 
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 90                 
Correct output: -95                 | Program output: -40                
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -52                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: 41                 
Correct output: -81                 | Program output: 5                  
Correct output: -49                 | Program output: 70                 
Correct output: -37                 | Program output: 52                 
Correct output: -86                 | Program output: 13                 
Correct output: -84                 | Program output: 69                 
Correct output: -67                 | Program output: 56                 
Correct output: -57                 | Program output: 40                 
Correct output: -33                 | Program output: 6                  
Correct output: -67                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: 26                 
Correct output: -91                 | Program output: 58                 
Correct output: -25                 | Program output: -3                 
Correct output: -82                 | Program output: -45                
Correct output: -75                 | Program output: -53                
Correct output: -4                  | Program output: 81                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 2                  
Correct output: -24                 | Program output: 50                 
Correct output: -48                 | Program output: 91                 
Correct output: -95                 | Program output: 56                 
Correct output: -70                 | Program output: 2                  
Correct output: -88                 | Program output: -24                
Correct output: -61                 | Program output: -50                
Correct output: -85                 | Program output: -59                
Correct output: -99                 | Program output: -9                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 14                 
Correct output: -87                 | Program output: -3                 
Correct output: -29                 | Program output: 8                  
Correct output: -84                 | Program output: 23                 
Correct output: -67                 | Program output: -14                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: 30                 
Correct output: -91                 | Program output: 35                 
Correct output: -79                 | Program output: 91                 
Correct output: -46                 | Program output: -13                
Correct output: -36                 | Program output: 97                 
Correct output: -42                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -45                
Correct output: -29                 | Program output: 52                 
Correct output: -100                | Program output: -53                
Correct output: -99                 | Program output: -56                
Correct output: -7                  | Program output: -7                 
Correct output: -73                 | Program output: 76                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: 11                 
Correct output: -33                 | Program output: 3                  
Correct output: -68                 | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_rot integer_flush integer_gt integer_swap exec_when (integer_flush) boolean_or boolean_dup_items integer_rot tagged_610 integer_gt integer_lte integer_max exec_dup (print_integer in2) boolean_shove boolean_dup_times exec_noop integer_eq integer_yankdup exec_y_when_autoconstructing (exec_y (exec_y_when_autoconstructing (boolean_dup_times))))
Lexicase best errors: [0 0 1 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_rot integer_flush integer_gt integer_swap exec_when (integer_flush) boolean_or boolean_dup_items integer_rot tagged_610 integer_gt integer_lte integer_max exec_dup (print_integer in2) boolean_shove boolean_dup_times exec_noop integer_eq integer_yankdup exec_y_when_autoconstructing (exec_y (exec_y_when_autoconstructing (boolean_dup_times))))
Zero cases best errors: [0 0 1 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (689 879 1000 190 476 190 190 213 213 1000)
Population mean number of elite cases: 5.04
Count of perfect (error zero) individuals by case: (689 879 0 190 476 190 190 213 213 0)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop})
Best program: (integer_yankdup exec_shove (tagged_663 boolean_and in2 exec_do*while (print_integer exec_stackdepth integer_mult exec_yank) exec_pop () integer_fromboolean) integer_rot integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap integer_swap boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_and exec_while (exec_do*range (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove boolean_flush integer_yank exec_dup_items exec_empty exec_y_when_autoconstructing (integer_pop 90 exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_inc) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop boolean_rot boolean_xor exec_empty exec_noop)))) ())))))
Errors: [0 0 1 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 60
Size: 80
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.96
Median total errors in population: 7
Error averages by case: (0.311 0.121 1.0 0.81 0.524 0.81 0.81 0.787 0.787 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 39.518
Average program size in population (points): 54.08
Average percent parens in population: 0.270
Minimum age in population: 13.25
Maximum age in population: 18.32421875
Average age in population: 16.3711357421875
Median age in population: 16.4443359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5172225
--- Timings ---
Current time: 1559584675337 milliseconds
Total Time:          34.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 67.3%
Fitness Testing:      6.5 seconds, 19.1%
Report:               4.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 38                 
Correct output: 27                  | Program output: 95                 
Correct output: 14                  | Program output: 14                 
Correct output: 34                  | Program output: 94                 
Correct output: 48                  | Program output: 61                 
Correct output: 48                  | Program output: 70                 
Correct output: 2                   | Program output: 36                 
Correct output: 10                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 25                 
Correct output: 17                  | Program output: 93                 
Correct output: 30                  | Program output: 58                 
Correct output: 20                  | Program output: 54                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 96                 
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 90                 
Correct output: -95                 | Program output: -40                
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -52                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: 41                 
Correct output: -81                 | Program output: 5                  
Correct output: -49                 | Program output: 70                 
Correct output: -37                 | Program output: 52                 
Correct output: -86                 | Program output: 13                 
Correct output: -84                 | Program output: 69                 
Correct output: -67                 | Program output: 56                 
Correct output: -57                 | Program output: 40                 
Correct output: -33                 | Program output: 6                  
Correct output: -67                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: 26                 
Correct output: -91                 | Program output: 58                 
Correct output: -25                 | Program output: -3                 
Correct output: -82                 | Program output: -45                
Correct output: -75                 | Program output: -53                
Correct output: -4                  | Program output: 81                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 2                  
Correct output: -24                 | Program output: 50                 
Correct output: -48                 | Program output: 91                 
Correct output: -95                 | Program output: 56                 
Correct output: -70                 | Program output: 2                  
Correct output: -88                 | Program output: -24                
Correct output: -61                 | Program output: -50                
Correct output: -85                 | Program output: -59                
Correct output: -99                 | Program output: -9                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 14                 
Correct output: -87                 | Program output: -3                 
Correct output: -29                 | Program output: 8                  
Correct output: -84                 | Program output: 23                 
Correct output: -67                 | Program output: -14                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: 30                 
Correct output: -91                 | Program output: 35                 
Correct output: -79                 | Program output: 91                 
Correct output: -46                 | Program output: -13                
Correct output: -36                 | Program output: 97                 
Correct output: -42                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -45                
Correct output: -29                 | Program output: 52                 
Correct output: -100                | Program output: -53                
Correct output: -99                 | Program output: -56                
Correct output: -7                  | Program output: -7                 
Correct output: -73                 | Program output: 76                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: 11                 
Correct output: -33                 | Program output: 3                  
Correct output: -68                 | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Lexicase best program: (integer_rot integer_flush integer_gt boolean_and exec_when (integer_flush) boolean_or boolean_dup_items integer_rot tagged_610 integer_gt integer_lte integer_max exec_dup (print_integer in2) boolean_shove boolean_dup_times exec_noop integer_eq integer_yankdup exec_y_when_autoconstructing (exec_y (exec_y_when_autoconstructing (boolean_dup_times print_boolean) boolean_invert_first_then_and) integer_mult) print_integer)
Lexicase best errors: [1 1 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_610} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Zero cases best program: (integer_rot integer_flush integer_gt boolean_and exec_when (integer_flush) boolean_or boolean_dup_items integer_rot tagged_610 integer_gt integer_lte integer_max exec_dup (print_integer in2) boolean_shove boolean_dup_times exec_noop integer_eq integer_yankdup exec_y_when_autoconstructing (exec_y (exec_y_when_autoconstructing (boolean_dup_times print_boolean) boolean_invert_first_then_and) integer_mult) print_integer)
Zero cases best errors: [1 1 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (146 368 370 517 368 368 371 371 370 1000)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (146 368 370 517 368 368 371 371 370 0)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while})
Best program: (integer_yankdup exec_shove (tagged_663 boolean_and in2 exec_do*while (print_integer exec_while ())))
Errors: [1 1 0 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 8
Size: 12
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.751
Median total errors in population: 7
Error averages by case: (0.854 0.632 0.63 0.483 0.632 0.632 0.629 0.629 0.63 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 28.907
Average program size in population (points): 39.617
Average percent parens in population: 0.275
Minimum age in population: 14.25
Maximum age in population: 19.9091796875
Average age in population: 17.9040791015625
Median age in population: 17.964111328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5471309
--- Timings ---
Current time: 1559584677693 milliseconds
Total Time:          36.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.9 seconds, 68.0%
Fitness Testing:      6.8 seconds, 18.6%
Report:               4.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_sub exec_shove (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) boolean_rot integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range ()) integer_swap exec_when () boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_and exec_while (exec_do*range (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove boolean_flush integer_yank exec_dup_items exec_empty exec_y_when_autoconstructing ())) ())))))))
Lexicase best errors: [0 0 1 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 61
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_sub exec_shove (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) boolean_rot integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range ()) integer_swap exec_when () boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_and exec_while (exec_do*range (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove boolean_flush integer_yank exec_dup_items exec_empty exec_y_when_autoconstructing ())) ())))))))
Zero cases best errors: [0 0 1 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 61
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 108 295 484 296 110 484 298 108 295)
Population mean number of elite cases: 2.59
Count of perfect (error zero) individuals by case: (109 108 295 484 296 110 484 298 108 295)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer})
Best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Errors: [1 1 0 1 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.413
Median total errors in population: 8
Error averages by case: (0.891 0.892 0.705 0.516 0.704 0.89 0.516 0.702 0.892 0.705)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.746
Average program size in population (points): 39.223
Average percent parens in population: 0.268
Minimum age in population: 15.25
Maximum age in population: 21.447021484375
Average age in population: 19.37433447265625
Median age in population: 19.4158935546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5798515
--- Timings ---
Current time: 1559584680446 milliseconds
Total Time:          39.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.2 seconds, 69.1%
Fitness Testing:      7.1 seconds, 18.1%
Report:               4.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Lexicase best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Lexicase best errors: [1 0 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Zero cases best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Zero cases best errors: [1 0 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 325 206 325 362 1 325 326 897 1)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (206 325 206 325 362 1 325 326 897 1)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Best program: (integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Errors: [1 0 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 10
Size: 15
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.026
Median total errors in population: 7
Error averages by case: (0.794 0.675 0.794 0.675 0.638 0.999 0.675 0.674 0.103 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.325
Average program size in population (points): 44.782
Average percent parens in population: 0.279
Minimum age in population: 18.1328125
Maximum age in population: 22.829833984375
Average age in population: 20.79445202636719
Median age in population: 20.838623046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6143687
--- Timings ---
Current time: 1559584682760 milliseconds
Total Time:          41.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.1 seconds, 69.7%
Fitness Testing:      7.5 seconds, 17.9%
Report:               5.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Lexicase best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_do*range (boolean_invert_second_then_and) integer_mult) (print_integer))
Lexicase best errors: [1 0 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Zero cases best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_do*range (boolean_invert_second_then_and) integer_mult) (print_integer))
Zero cases best errors: [1 0 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (275 680 209 81 209 390 390 390 209 390)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (275 680 209 81 209 390 390 390 209 390)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer})
Best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_pop exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Errors: [1 0 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.777
Median total errors in population: 6
Error averages by case: (0.725 0.32 0.791 0.919 0.791 0.61 0.61 0.61 0.791 0.61)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.736
Average program size in population (points): 34.564
Average percent parens in population: 0.285
Minimum age in population: 19.8179931640625
Maximum age in population: 24.1368408203125
Average age in population: 22.00903259277344
Median age in population: 22.06671142578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.493
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6431989
--- Timings ---
Current time: 1559584685362 milliseconds
Total Time:          44.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.2 seconds, 70.6%
Fitness Testing:      7.7 seconds, 17.4%
Report:               5.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: 14                 
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 74                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 42                 
Correct output: 3                   | Program output: 71                 
Correct output: 18                  | Program output: 21                 
Correct output: 1                   | Program output: 34                 
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 58                 
Correct output: 25                  | Program output: 44                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 96                 
Correct output: 21                  | Program output: 81                 
Correct output: 0                   | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 28                 
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: 69                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -45                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 4                  
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: -30                
Correct output: -86                 | Program output: -45                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 3                  
Correct output: -57                 | Program output: 38                 
Correct output: -33                 | Program output: 42                 
Correct output: -67                 | Program output: 51                 
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -4                  | Program output: 27                 
Correct output: -74                 | Program output: 45                 
Correct output: -78                 | Program output: 54                 
Correct output: -24                 | Program output: 87                 
Correct output: -48                 | Program output: 68                 
Correct output: -95                 | Program output: 65                 
Correct output: -70                 | Program output: -55                
Correct output: -88                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -53                
Correct output: -91                 | Program output: -66                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: 90                 
Correct output: -100                | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 65                 
Correct output: -67                 | Program output: 65                 
Correct output: -16                 | Program output: 5                  
Correct output: -91                 | Program output: 2                  
Correct output: -79                 | Program output: -78                
Correct output: -46                 | Program output: 46                 
Correct output: -36                 | Program output: 93                 
Correct output: -42                 | Program output: 84                 
Correct output: -100                | Program output: 82                 
Correct output: -95                 | Program output: 26                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: 13                 
Correct output: -99                 | Program output: 39                 
Correct output: -7                  | Program output: -4                 
Correct output: -73                 | Program output: 83                 
Correct output: -54                 | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: 65                 
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_sub exec_shove (tagged_663 boolean_and in1 exec_do*while (print_integer integer_inc integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) integer_rot integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) in3)) integer_swap exec_when () boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_and exec_while (exec_do*range (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not)) ())))))
Lexicase best errors: [1 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_sub exec_shove (tagged_663 boolean_and in1 exec_do*while (print_integer integer_inc integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) integer_rot integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) in3)) integer_swap exec_when () boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_and exec_while (exec_do*range (exec_if (boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not)) ())))))
Zero cases best errors: [1 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 366 366 523 340 340 183 183 183 366)
Population mean number of elite cases: 3.85
Count of perfect (error zero) individuals by case: (0 366 366 523 340 340 183 183 183 366)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 1, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty})
Best program: (integer_sub integer_gt tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte -83 -34 integer_yankdup) integer_lt) integer_rot integer_pop exec_do*range (in1 integer_gt) exec_do*range ()) integer_swap exec_when () boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_and exec_while (exec_do*range (exec_if (exec_if (boolean_flush boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove boolean_flush exec_empty exec_y_when_autoconstructing (integer_pop 90 print_boolean boolean_empty integer_shove exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop boolean_rot boolean_xor exec_empty)))) ()) ())))))
Errors: [1 1 1 0 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 63
Size: 86
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 7.15
Median total errors in population: 7
Error averages by case: (1.0 0.634 0.634 0.477 0.66 0.66 0.817 0.817 0.817 0.634)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.147
Average program size in population (points): 33.183
Average percent parens in population: 0.274
Minimum age in population: 21.38427734375
Maximum age in population: 25.80020141601562
Average age in population: 23.68017706298828
Median age in population: 23.78195190429688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6723551
--- Timings ---
Current time: 1559584688030 milliseconds
Total Time:          46.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.4 seconds, 71.3%
Fitness Testing:      8.0 seconds, 17.1%
Report:               5.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Lexicase best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Lexicase best errors: [1 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Zero cases best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Zero cases best errors: [1 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (573 304 334 3 304 241 304 880 304 304)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (573 304 334 3 304 241 304 880 304 304)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_integer})
Best program: (integer_eq integer_dec in4 integer_eq exec_s () (exec_yank exec_yank exec_shove (boolean_invert_second_then_and) boolean_yankdup) (print_integer))
Errors: [1 0 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.449
Median total errors in population: 7
Error averages by case: (0.427 0.696 0.666 0.997 0.696 0.759 0.696 0.12 0.696 0.696)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.19
Average program size in population (points): 38.894
Average percent parens in population: 0.275
Minimum age in population: 22.38427734375
Maximum age in population: 26.94367980957031
Average age in population: 25.11120822143555
Median age in population: 25.18438720703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7042429
--- Timings ---
Current time: 1559584690453 milliseconds
Total Time:          49.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.4 seconds, 71.7%
Fitness Testing:      8.3 seconds, 16.8%
Report:               5.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 38                 
Correct output: 27                  | Program output: 95                 
Correct output: 14                  | Program output: 14                 
Correct output: 34                  | Program output: 94                 
Correct output: 48                  | Program output: 61                 
Correct output: 48                  | Program output: 70                 
Correct output: 2                   | Program output: 36                 
Correct output: 10                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 25                 
Correct output: 17                  | Program output: 93                 
Correct output: 30                  | Program output: 58                 
Correct output: 20                  | Program output: 54                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 96                 
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 90                 
Correct output: -95                 | Program output: -40                
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -52                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: 41                 
Correct output: -81                 | Program output: 5                  
Correct output: -49                 | Program output: 70                 
Correct output: -37                 | Program output: 52                 
Correct output: -86                 | Program output: 13                 
Correct output: -84                 | Program output: 69                 
Correct output: -67                 | Program output: 56                 
Correct output: -57                 | Program output: 40                 
Correct output: -33                 | Program output: 6                  
Correct output: -67                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: 26                 
Correct output: -91                 | Program output: 58                 
Correct output: -25                 | Program output: -3                 
Correct output: -82                 | Program output: -45                
Correct output: -75                 | Program output: -53                
Correct output: -4                  | Program output: 81                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 2                  
Correct output: -24                 | Program output: 50                 
Correct output: -48                 | Program output: 91                 
Correct output: -95                 | Program output: 56                 
Correct output: -70                 | Program output: 2                  
Correct output: -88                 | Program output: -24                
Correct output: -61                 | Program output: -50                
Correct output: -85                 | Program output: -59                
Correct output: -99                 | Program output: -9                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 14                 
Correct output: -87                 | Program output: -3                 
Correct output: -29                 | Program output: 8                  
Correct output: -84                 | Program output: 23                 
Correct output: -67                 | Program output: -14                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: 30                 
Correct output: -91                 | Program output: 35                 
Correct output: -79                 | Program output: 91                 
Correct output: -46                 | Program output: -13                
Correct output: -36                 | Program output: 97                 
Correct output: -42                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -45                
Correct output: -29                 | Program output: 52                 
Correct output: -100                | Program output: -53                
Correct output: -99                 | Program output: -56                
Correct output: -7                  | Program output: -7                 
Correct output: -73                 | Program output: 76                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: 11                 
Correct output: -33                 | Program output: 3                  
Correct output: -68                 | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Lexicase best program: (integer_yankdup exec_shove (boolean_yank boolean_and in2 exec_do*while (print_integer exec_stackdepth integer_mult exec_yank) exec_pop () integer_fromboolean integer_dec in4 integer_eq exec_s () (integer_mod exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer)))
Lexicase best errors: [0 1 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Zero cases best program: (integer_yankdup exec_shove (boolean_yank boolean_and in2 exec_do*while (print_integer exec_stackdepth integer_mult exec_yank) exec_pop () integer_fromboolean integer_dec in4 integer_eq exec_s () (integer_mod exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer)))
Zero cases best errors: [0 1 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (362 146 77 498 714 142 141 498 785 146)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (362 146 77 498 714 142 141 498 785 146)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Best program: (integer_eq integer_div boolean_and in2 exec_do*while (print_integer exec_stackdepth in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer)))
Errors: [0 1 1 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 16
Size: 22
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.491
Median total errors in population: 6
Error averages by case: (0.638 0.854 0.923 0.502 0.286 0.858 0.859 0.502 0.215 0.854)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.832
Average program size in population (points): 31.885
Average percent parens in population: 0.285
Minimum age in population: 23.38427734375
Maximum age in population: 28.68958282470703
Average age in population: 26.57643450164795
Median age in population: 26.62982177734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7298759
--- Timings ---
Current time: 1559584692978 milliseconds
Total Time:          51.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.5 seconds, 72.3%
Fitness Testing:      8.5 seconds, 16.4%
Report:               5.7 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer})
Lexicase best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Lexicase best errors: [0 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer})
Zero cases best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Zero cases best errors: [0 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 218 881 325 227 325 227 218 227 227)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (226 218 881 325 227 325 227 218 227 227)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Best program: (integer_swap integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Errors: [0 1 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.899
Median total errors in population: 7
Error averages by case: (0.774 0.782 0.119 0.675 0.773 0.675 0.773 0.782 0.773 0.773)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.311
Average program size in population (points): 37.677
Average percent parens in population: 0.269
Minimum age in population: 24.38427734375
Maximum age in population: 30.11270523071289
Average age in population: 28.02344839477539
Median age in population: 28.09162139892578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7618175
--- Timings ---
Current time: 1559584695550 milliseconds
Total Time:          54.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.6 seconds, 72.8%
Fitness Testing:      8.8 seconds, 16.2%
Report:               5.9 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mod} {:close 1, :instruction print_integer})
Lexicase best program: (integer_eq integer_dec in4 integer_eq exec_s () (exec_yank exec_yank exec_shove (boolean_invert_second_then_and) integer_mod) (print_integer))
Lexicase best errors: [1 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mod} {:close 1, :instruction print_integer})
Zero cases best program: (integer_eq integer_dec in4 integer_eq exec_s () (exec_yank exec_yank exec_shove (boolean_invert_second_then_and) integer_mod) (print_integer))
Zero cases best errors: [1 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 493 180 493 4 493 889 179 493 5)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (4 493 180 493 4 493 889 179 493 5)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Errors: [1 0 1 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.767
Median total errors in population: 7
Error averages by case: (0.996 0.507 0.82 0.507 0.996 0.507 0.111 0.821 0.507 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.836
Average program size in population (points): 28.747
Average percent parens in population: 0.277
Minimum age in population: 26.41427612304688
Maximum age in population: 31.34092712402344
Average age in population: 29.60851137733459
Median age in population: 29.67198276519775
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7858828
--- Timings ---
Current time: 1559584698079 milliseconds
Total Time:          57.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.8 seconds, 73.3%
Fitness Testing:      9.1 seconds, 15.9%
Report:               6.1 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Lexicase best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Lexicase best errors: [0 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Zero cases best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Zero cases best errors: [0 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (437 244 440 875 436 437 631 437 875 631)
Population mean number of elite cases: 5.44
Count of perfect (error zero) individuals by case: (437 244 440 875 436 437 631 437 875 631)
Population mean number of perfect (error zero) cases: 5.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if})
Best program: (integer_mod integer_dec in4 integer_eq exec_s () (integer_max exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) integer_rot integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range ()) integer_swap exec_when () boolean_or exec_k_when_autoconstructing () (exec_pop (boolean_frominteger exec_while (exec_do*range (exec_if () ()))))) ())
Errors: [0 1 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 49
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 4.557
Median total errors in population: 5
Error averages by case: (0.563 0.756 0.56 0.125 0.564 0.563 0.369 0.563 0.125 0.369)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.105
Average program size in population (points): 30.668
Average percent parens in population: 0.275
Minimum age in population: 27.51739501953125
Maximum age in population: 33.03915405273438
Average age in population: 31.18972250366211
Median age in population: 31.30062580108643
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8110344
--- Timings ---
Current time: 1559584700708 milliseconds
Total Time:          59.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.0 seconds, 73.8%
Fitness Testing:      9.3 seconds, 15.6%
Report:               6.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 2, :instruction print_integer})
Lexicase best program: (integer_eq integer_dec in4 integer_shove exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Lexicase best errors: [0 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 2, :instruction print_integer})
Zero cases best program: (integer_eq integer_dec in4 integer_shove exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Zero cases best errors: [0 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (756 640 640 115 115 640 132 757 115 757)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (756 640 640 115 115 640 132 757 115 757)
Population mean number of perfect (error zero) cases: 4.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mod} {:close 1, :instruction print_integer})
Best program: (integer_eq integer_dec in4 integer_eq exec_s () (exec_yank exec_yank exec_shove (integer_add) integer_mod) (print_integer))
Errors: [0 0 0 1 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 5.333
Median total errors in population: 4
Error averages by case: (0.244 0.36 0.36 0.885 0.885 0.36 0.868 0.243 0.885 0.243)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.468
Average program size in population (points): 25.842
Average percent parens in population: 0.286
Minimum age in population: 29.21118927001953
Maximum age in population: 34.53988790512085
Average age in population: 32.62825129270554
Median age in population: 32.68536591529846
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.421
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8318252
--- Timings ---
Current time: 1559584703110 milliseconds
Total Time:          62.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.0 seconds, 74.2%
Fitness Testing:      9.5 seconds, 15.3%
Report:               6.4 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer})
Lexicase best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max boolean_yankdup exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Lexicase best errors: [0 1 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer})
Zero cases best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max boolean_yankdup exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Zero cases best errors: [0 1 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (415 1 370 413 414 413 371 786 2 75)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (415 1 370 413 414 413 371 786 2 75)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer})
Best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Errors: [0 1 1 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.74
Median total errors in population: 7
Error averages by case: (0.585 0.999 0.63 0.587 0.586 0.587 0.629 0.214 0.998 0.925)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.264
Average program size in population (points): 33.691
Average percent parens in population: 0.279
Minimum age in population: 31.22201347351074
Maximum age in population: 36.4489221572876
Average age in population: 34.11562967681885
Median age in population: 34.19497096538544
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8602873
--- Timings ---
Current time: 1559584705280 milliseconds
Total Time:          64.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.8 seconds, 74.4%
Fitness Testing:      9.8 seconds, 15.2%
Report:               6.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Lexicase best program: (integer_mod integer_dec in4 integer_eq exec_s () (integer_max integer_mult) (print_integer))
Lexicase best errors: [1 1 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 12
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Zero cases best program: (integer_mod integer_dec in4 integer_eq exec_s () (integer_max integer_mult) (print_integer))
Zero cases best errors: [1 1 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 12
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (178 88 406 184 407 184 184 178 405 406)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (178 88 406 184 407 184 184 178 405 406)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Best program: (print_integer integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Errors: [1 1 0 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.38
Median total errors in population: 7
Error averages by case: (0.822 0.912 0.594 0.816 0.593 0.816 0.816 0.822 0.595 0.594)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.485
Average program size in population (points): 40.615
Average percent parens in population: 0.277
Minimum age in population: 32.52952194213867
Maximum age in population: 37.57542169094086
Average age in population: 35.22313780725002
Median age in population: 35.3256551027298
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8905754
--- Timings ---
Current time: 1559584707621 milliseconds
Total Time:          66.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.7 seconds, 74.7%
Fitness Testing:     10.0 seconds, 15.1%
Report:               6.7 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4})
Lexicase best program: (integer_sub exec_shove (tagged_663 integer_rot) exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) integer_shove integer_dec integer_min integer_sub exec_do*range (integer_swap boolean_dup_items integer_rot boolean_dup_items boolean_dup_items integer_gt) exec_do*range ()) integer_swap exec_when () in4 exec_k_when_autoconstructing () (in4)))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction -83} {:close 0, :instruction -34} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4})
Zero cases best program: (integer_sub exec_shove (tagged_663 integer_rot) exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte -83 -34 integer_yankdup integer_lt) integer_shove integer_dec integer_min integer_sub exec_do*range (integer_swap boolean_dup_items integer_rot boolean_dup_items boolean_dup_items integer_gt) exec_do*range ()) integer_swap exec_when () in4 exec_k_when_autoconstructing () (in4)))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (758 224 855 345 345 222 345 345 345 859)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (758 224 855 345 345 222 345 345 345 859)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer})
Best program: (integer_yankdup exec_shove (tagged_663 boolean_and integer_eq) integer_dec in4 integer_eq print_integer)
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 9
Size: 11
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 5.357
Median total errors in population: 5
Error averages by case: (0.242 0.776 0.145 0.655 0.655 0.778 0.655 0.655 0.655 0.141)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.418
Average program size in population (points): 43.235
Average percent parens in population: 0.276
Minimum age in population: 33.99066829681396
Maximum age in population: 39.42547571659088
Average age in population: 36.63200152307749
Median age in population: 36.67517626285553
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9229020
--- Timings ---
Current time: 1559584710770 milliseconds
Total Time:          69.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.4 seconds, 75.2%
Fitness Testing:     10.3 seconds, 14.8%
Report:               6.8 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Lexicase best program: (integer_eq boolean_shove in4 integer_eq exec_s () (print_boolean exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Lexicase best errors: [0 1 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Zero cases best program: (integer_eq boolean_shove in4 integer_eq exec_s () (print_boolean exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Zero cases best errors: [0 1 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (636 235 636 881 636 236 11 11 236 10)
Population mean number of elite cases: 3.53
Count of perfect (error zero) individuals by case: (636 235 636 881 636 236 11 11 236 10)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Best program: (integer_rot integer_flush integer_eq integer_dec in4 boolean_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Errors: [0 1 0 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 13
Size: 18
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.472
Median total errors in population: 6
Error averages by case: (0.364 0.765 0.364 0.119 0.364 0.764 0.989 0.989 0.764 0.99)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.402
Average program size in population (points): 35.226
Average percent parens in population: 0.288
Minimum age in population: 35.44252395629883
Maximum age in population: 40.12110832333565
Average age in population: 38.18296779045463
Median age in population: 38.27403707802296
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9481808
--- Timings ---
Current time: 1559584713528 milliseconds
Total Time:          72.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.8 seconds, 75.6%
Fitness Testing:     10.6 seconds, 14.6%
Report:               7.0 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: 54                 
Correct output: 42                  | Program output: 42                 
Correct output: -71                 | Program output: -64                
Correct output: -18                 | Program output: -11                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 45                 
Correct output: 27                  | Program output: 79                 
Correct output: 14                  | Program output: 35                 
Correct output: 34                  | Program output: 55                 
Correct output: 48                  | Program output: 94                 
Correct output: 48                  | Program output: 60                 
Correct output: 2                   | Program output: 3                  
Correct output: 10                  | Program output: 88                 
Correct output: 0                   | Program output: 93                 
Correct output: 3                   | Program output: 80                 
Correct output: 18                  | Program output: 91                 
Correct output: 1                   | Program output: 21                 
Correct output: 17                  | Program output: 81                 
Correct output: 30                  | Program output: 33                 
Correct output: 20                  | Program output: 99                 
Correct output: 25                  | Program output: 91                 
Correct output: 34                  | Program output: 38                 
Correct output: 46                  | Program output: 89                 
Correct output: 21                  | Program output: 31                 
Correct output: 0                   | Program output: 37                 
Correct output: -95                 | Program output: 11                 
Correct output: 10                  | Program output: 17                 
Correct output: -64                 | Program output: 10                 
Correct output: -24                 | Program output: 1                  
Correct output: -79                 | Program output: 50                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -85                
Correct output: -81                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 94                 
Correct output: -86                 | Program output: 4                  
Correct output: -84                 | Program output: -76                
Correct output: -67                 | Program output: 96                 
Correct output: -57                 | Program output: -57                
Correct output: -33                 | Program output: 98                 
Correct output: -67                 | Program output: 70                 
Correct output: -98                 | Program output: 7                  
Correct output: -96                 | Program output: 48                 
Correct output: -91                 | Program output: -69                
Correct output: -25                 | Program output: 53                 
Correct output: -82                 | Program output: 2                  
Correct output: -75                 | Program output: -3                 
Correct output: -4                  | Program output: 73                 
Correct output: -74                 | Program output: -65                
Correct output: -78                 | Program output: 74                 
Correct output: -24                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: 21                 
Correct output: -85                 | Program output: 83                 
Correct output: -99                 | Program output: -29                
Correct output: -91                 | Program output: -74                
Correct output: -89                 | Program output: -72                
Correct output: -62                 | Program output: 13                 
Correct output: -100                | Program output: -58                
Correct output: -87                 | Program output: 5                  
Correct output: -29                 | Program output: -29                
Correct output: -84                 | Program output: -48                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: 25                 
Correct output: -16                 | Program output: 272727             
Correct output: -91                 | Program output: 59                 
Correct output: -79                 | Program output: -75                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: 90                 
Correct output: -42                 | Program output: -1                 
Correct output: -100                | Program output: -72                
Correct output: -95                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -41                
Correct output: -7                  | Program output: 64                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 8                  
Correct output: -64                 | Program output: 10                 
Correct output: -33                 | Program output: 59                 
Correct output: -68                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte integer_lt) boolean_flush integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap boolean_or exec_k_when_autoconstructing () (exec_shove (boolean_and) integer_div in1 integer_gt) in3)) integer_swap exec_when (boolean_or exec_k_when_autoconstructing (exec_pop (boolean_and exec_while (exec_while (exec_do*range (exec_if (exec_if (boolean_flush boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop boolean_not boolean_shove boolean_flush exec_empty exec_y_when_autoconstructing (integer_pop 90 print_boolean) boolean_empty integer_shove exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop)) ()) ()) ()))))) ()))
Lexicase best errors: [0 0 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 94
Percent parens: 0.287
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte integer_lt) boolean_flush integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap boolean_or exec_k_when_autoconstructing () (exec_shove (boolean_and) integer_div in1 integer_gt) in3)) integer_swap exec_when (boolean_or exec_k_when_autoconstructing (exec_pop (boolean_and exec_while (exec_while (exec_do*range (exec_if (exec_if (boolean_flush boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop boolean_not boolean_shove boolean_flush exec_empty exec_y_when_autoconstructing (integer_pop 90 print_boolean) boolean_empty integer_shove exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop)) ()) ()) ()))))) ()))
Zero cases best errors: [0 0 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 94
Percent parens: 0.287
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 315 315 1 315 275 314 1 277 1)
Population mean number of elite cases: 1.82
Count of perfect (error zero) individuals by case: (1 315 315 1 315 275 314 1 277 1)
Population mean number of perfect (error zero) cases: 1.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte integer_lt) boolean_flush integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap boolean_or exec_k_when_autoconstructing () (exec_shove (boolean_and) integer_div in1 integer_gt) in3)) integer_swap exec_when (boolean_or exec_k_when_autoconstructing (exec_pop (boolean_and exec_while (exec_while (exec_do*range (exec_if (exec_if (boolean_flush boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop boolean_not boolean_shove boolean_flush exec_empty exec_y_when_autoconstructing (integer_pop 90 print_boolean) boolean_empty integer_shove exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop)) ()) ()) ()))))) ()))
Errors: [0 0 1 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 67
Size: 94
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 8.185
Median total errors in population: 9
Error averages by case: (0.999 0.685 0.685 0.999 0.685 0.725 0.686 0.999 0.723 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.838
Average program size in population (points): 46.249
Average percent parens in population: 0.268
Minimum age in population: 36.44252395629883
Maximum age in population: 41.61084142327309
Average age in population: 39.50425173957646
Median age in population: 39.58182479441166
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 9830461
--- Timings ---
Current time: 1559584715810 milliseconds
Total Time:          74.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.4 seconds, 75.7%
Fitness Testing:     10.9 seconds, 14.6%
Report:               7.1 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 1, :instruction print_integer})
Lexicase best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_yank exec_shove (boolean_invert_second_then_and) exec_yankdup) (print_integer))
Lexicase best errors: [1 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 17
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 1, :instruction print_integer})
Zero cases best program: (integer_eq integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_yank exec_shove (boolean_invert_second_then_and) exec_yankdup) (print_integer))
Zero cases best errors: [1 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 17
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 288 873 287 287 875 375 95 501 374)
Population mean number of elite cases: 4.07
Count of perfect (error zero) individuals by case: (119 288 873 287 287 875 375 95 501 374)
Population mean number of perfect (error zero) cases: 4.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer})
Best program: (integer_sub exec_shove (integer_eq) integer_dec in4 integer_eq exec_s () (integer_max exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Errors: [1 0 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 13
Size: 19
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.926
Median total errors in population: 6
Error averages by case: (0.881 0.712 0.127 0.713 0.713 0.125 0.625 0.905 0.499 0.626)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.03
Average program size in population (points): 61.497
Average percent parens in population: 0.283
Minimum age in population: 38.86990191042423
Maximum age in population: 43.04155998677015
Average age in population: 40.38996600294858
Median age in population: 40.38257529586554
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10244783
--- Timings ---
Current time: 1559584718485 milliseconds
Total Time:          77.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.6 seconds, 75.7%
Fitness Testing:     11.2 seconds, 14.5%
Report:               7.5 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer})
Lexicase best program: (integer_eq integer_dec integer_sub integer_eq integer_dec in4 integer_eq exec_s () (integer_max print_integer) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 14
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer})
Zero cases best program: (integer_eq integer_dec integer_sub integer_eq integer_dec in4 integer_eq exec_s () (integer_max print_integer) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 14
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (860 892 390 390 389 390 903 16 378 107)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (860 892 390 390 389 390 903 16 378 107)
Population mean number of perfect (error zero) cases: 4.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction print_integer})
Best program: (integer_yankdup exec_shove (tagged_663 boolean_and integer_eq) integer_dec in4 integer_eq exec_s () (integer_dup_times exec_yank exec_shove (boolean_invert_second_then_and) integer_dec) (print_integer))
Errors: [0 0 0 0 0 0 0 1 1 1]
Total: 3
Mean: 0.3
Genome size: 15
Size: 21
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.285
Median total errors in population: 6
Error averages by case: (0.14 0.108 0.61 0.61 0.611 0.61 0.097 0.984 0.622 0.893)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.303
Average program size in population (points): 55.547
Average percent parens in population: 0.293
Minimum age in population: 39.99012631177902
Maximum age in population: 44.32815900444984
Average age in population: 41.79112173387036
Median age in population: 41.83068910613656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 10614726
--- Timings ---
Current time: 1559584721015 milliseconds
Total Time:          79.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.6 seconds, 75.8%
Fitness Testing:     11.6 seconds, 14.5%
Report:               7.7 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 42                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 45                 
Correct output: 27                  | Program output: 79                 
Correct output: 14                  | Program output: 35                 
Correct output: 34                  | Program output: 55                 
Correct output: 48                  | Program output: 94                 
Correct output: 48                  | Program output: 60                 
Correct output: 2                   | Program output: 33                 
Correct output: 10                  | Program output: 88                 
Correct output: 0                   | Program output: 93                 
Correct output: 3                   | Program output: 80                 
Correct output: 18                  | Program output: 91                 
Correct output: 1                   | Program output: 21                 
Correct output: 17                  | Program output: 81                 
Correct output: 30                  | Program output: 33                 
Correct output: 20                  | Program output: 99                 
Correct output: 25                  | Program output: 91                 
Correct output: 34                  | Program output: 38                 
Correct output: 46                  | Program output: 89                 
Correct output: 21                  | Program output: 31                 
Correct output: 0                   | Program output:                    
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: 1                  
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -45                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output:                    
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: -30                
Correct output: -86                 | Program output: -45                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: -33                 | Program output: 98                 
Correct output: -67                 | Program output: 70                 
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -4                  | Program output: 73                 
Correct output: -74                 | Program output: -65                
Correct output: -78                 | Program output: 74                 
Correct output: -24                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -26                
Correct output: -70                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -53                
Correct output: -91                 | Program output: -66                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: 13                 
Correct output: -100                | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: 25                 
Correct output: -16                 | Program output:                    
Correct output: -91                 | Program output: 5959               
Correct output: -79                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: 90                 
Correct output: -42                 | Program output: -1                 
Correct output: -100                | Program output: -72                
Correct output: -95                 | Program output: -56                
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -41                
Correct output: -7                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 8                  
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: 59                 
Correct output: -68                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap boolean_or exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in3)) integer_swap exec_when (boolean_or exec_k_when_autoconstructing (exec_pop (boolean_and exec_while (exec_while (exec_do*range (exec_if (exec_if (boolean_flush boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop boolean_not boolean_shove boolean_flush exec_empty exec_y_when_autoconstructing (integer_pop 90 print_boolean) boolean_empty integer_shove exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop)) ()) ()) ()))))) ())))
Lexicase best errors: [1 0 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 85
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap boolean_or exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in3)) integer_swap exec_when (boolean_or exec_k_when_autoconstructing (exec_pop (boolean_and exec_while (exec_while (exec_do*range (exec_if (exec_if (boolean_flush boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop boolean_not boolean_shove boolean_flush exec_empty exec_y_when_autoconstructing (integer_pop 90 print_boolean) boolean_empty integer_shove exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop)) ()) ()) ()))))) ())))
Zero cases best errors: [1 0 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 85
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (527 109 226 109 108 13 110 527 109 226)
Population mean number of elite cases: 2.06
Count of perfect (error zero) individuals by case: (527 109 226 109 108 13 110 527 109 226)
Population mean number of perfect (error zero) cases: 2.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_195} {:close 0, :instruction exec_noop})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_stackdepth integer_mult exec_pop (integer_lte integer_lt) boolean_flush integer_dec boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap boolean_or exec_k_when_autoconstructing () (exec_shove (boolean_and integer_div in1 integer_gt) in3)) integer_swap exec_when (boolean_or exec_k_when_autoconstructing (exec_pop (boolean_and exec_while (exec_while (exec_do*range (exec_if (exec_if (boolean_flush boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop boolean_not boolean_shove boolean_flush exec_empty exec_y_when_autoconstructing (integer_pop 90 print_boolean) boolean_empty integer_shove exec_when (boolean_empty boolean_swap exec_shove () exec_do*count (integer_add boolean_frominteger integer_min exec_while () integer_stackdepth boolean_rot boolean_stackdepth tag_boolean_195 exec_noop))) ()) ()) ()))))) ())))
Errors: [1 0 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 67
Size: 94
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 7.936
Median total errors in population: 8
Error averages by case: (0.473 0.891 0.774 0.891 0.892 0.987 0.89 0.473 0.891 0.774)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.379
Average program size in population (points): 38.463
Average percent parens in population: 0.290
Minimum age in population: 41.04965278506279
Maximum age in population: 45.71297669410706
Average age in population: 43.47839363707975
Median age in population: 43.53156037814915
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.513
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 10893131
--- Timings ---
Current time: 1559584723467 milliseconds
Total Time:          82.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.4 seconds, 75.9%
Fitness Testing:     11.8 seconds, 14.4%
Report:               7.9 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 48                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 19                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 82                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 67                 
Correct output: 10                  | Program output: 77                 
Correct output: 0                   | Program output: 53                 
Correct output: 3                   | Program output: 66                 
Correct output: 18                  | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 90                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 58                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 40                 
Correct output: 10                  | Program output: 97                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 57                 
Correct output: -79                 | Program output: 37                 
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 20                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 47                 
Correct output: -61                 | Program output: 71                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: 68                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 59                 
Correct output: -29                 | Program output: 90                 
Correct output: -84                 | Program output: 59                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 42                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 72                 
Correct output: -95                 | Program output: 41                 
Correct output: -93                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 81                 
Correct output: -64                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer})
Lexicase best program: (integer_sub integer_eq integer_dup_times in4 integer_eq exec_s () (boolean_swap exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Lexicase best errors: [0 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer})
Zero cases best program: (integer_sub integer_eq integer_dup_times in4 integer_eq exec_s () (boolean_swap exec_yank exec_shove (boolean_invert_second_then_and) integer_mult) (print_integer))
Zero cases best errors: [0 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 193 192 27 530 178 193 438 903 29)
Population mean number of elite cases: 2.88
Count of perfect (error zero) individuals by case: (193 193 192 27 530 178 193 438 903 29)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction print_integer})
Best program: (integer_eq integer_dec integer_eq exec_empty in4 integer_eq exec_s () (integer_dup_times exec_yank exec_shove (boolean_invert_second_then_and) integer_dec) (print_integer))
Errors: [0 0 0 1 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 13
Size: 18
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 7.124
Median total errors in population: 7
Error averages by case: (0.807 0.807 0.808 0.973 0.47 0.822 0.807 0.562 0.097 0.971)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.185
Average program size in population (points): 63.743
Average percent parens in population: 0.291
Minimum age in population: 42.04965278506279
Maximum age in population: 46.90174653753638
Average age in population: 44.62349801184144
Median age in population: 44.70015223650262
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11346538
--- Timings ---
Current time: 1559584726056 milliseconds
Total Time:          84.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.4 seconds, 75.8%
Fitness Testing:     12.2 seconds, 14.4%
Report:               8.2 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: 54                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -64                
Correct output: -18                 | Program output: -11                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 74                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 42                 
Correct output: 3                   | Program output: 71                 
Correct output: 18                  | Program output: 21                 
Correct output: 1                   | Program output:                    
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 58                 
Correct output: 25                  | Program output: 44                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 96                 
Correct output: 21                  | Program output: 81                 
Correct output: 0                   | Program output: 37                 
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 28                 
Correct output: -64                 | Program output: 10                 
Correct output: -24                 | Program output: 69                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: 55                 
Correct output: -94                 | Program output: -85                
Correct output: -81                 | Program output: -35                
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: 94                 
Correct output: -86                 | Program output: 4                  
Correct output: -84                 | Program output: -76                
Correct output: -67                 | Program output: 96                 
Correct output: -57                 | Program output: -57                
Correct output: -33                 | Program output: 98                 
Correct output: -67                 | Program output: 70                 
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: 48                 
Correct output: -91                 | Program output: -69                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: 2                  
Correct output: -75                 | Program output: -3                 
Correct output: -4                  | Program output: 73                 
Correct output: -74                 | Program output: 45                 
Correct output: -78                 | Program output: 74                 
Correct output: -24                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: 83                 
Correct output: -99                 | Program output: -29                
Correct output: -91                 | Program output: -74                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: 13                 
Correct output: -100                | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: 65                 
Correct output: -16                 | Program output: 27                 
Correct output: -91                 | Program output: 59                 
Correct output: -79                 | Program output: -75                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: 90                 
Correct output: -42                 | Program output: -1                 
Correct output: -100                | Program output: 82                 
Correct output: -95                 | Program output: 26                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -41                
Correct output: -7                  | Program output: 64                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: 59                 
Correct output: -68                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in3)) integer_swap exec_when ()))
Lexicase best errors: [0 1 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in3)) integer_swap exec_when ()))
Zero cases best errors: [0 1 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (409 387 455 344 413 188 387 876 344 387)
Population mean number of elite cases: 4.19
Count of perfect (error zero) individuals by case: (409 387 455 344 413 188 387 876 344 387)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in3)) integer_swap exec_when ()))
Errors: [0 1 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 21
Size: 30
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.81
Median total errors in population: 6
Error averages by case: (0.591 0.613 0.545 0.656 0.587 0.812 0.613 0.124 0.656 0.613)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.007
Average program size in population (points): 35.354
Average percent parens in population: 0.292
Minimum age in population: 43.78772730380297
Maximum age in population: 48.14907468669116
Average age in population: 46.59979618642945
Median age in population: 46.57521177083254
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 239
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 240
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 11669621
--- Timings ---
Current time: 1559584728457 milliseconds
Total Time:          87.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.3 seconds, 75.9%
Fitness Testing:     12.5 seconds, 14.3%
Report:               8.4 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: 54                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -64                
Correct output: -18                 | Program output: -11                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 74                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 42                 
Correct output: 3                   | Program output: 71                 
Correct output: 18                  | Program output: 21                 
Correct output: 1                   | Program output:                    
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 58                 
Correct output: 25                  | Program output: 44                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 96                 
Correct output: 21                  | Program output: 81                 
Correct output: 0                   | Program output: 37                 
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 28                 
Correct output: -64                 | Program output: 10                 
Correct output: -24                 | Program output: 69                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output:                    
Correct output: -94                 | Program output: -85                
Correct output: -81                 | Program output: -35                
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: 94                 
Correct output: -86                 | Program output: 4                  
Correct output: -84                 | Program output: -76                
Correct output: -67                 | Program output: 96                 
Correct output: -57                 | Program output: -57                
Correct output: -33                 | Program output: 98                 
Correct output: -67                 | Program output: 70                 
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: 48                 
Correct output: -91                 | Program output: -69                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: 2                  
Correct output: -75                 | Program output: -3                 
Correct output: -4                  | Program output: 73                 
Correct output: -74                 | Program output: 45                 
Correct output: -78                 | Program output: 74                 
Correct output: -24                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: 83                 
Correct output: -99                 | Program output: -29                
Correct output: -91                 | Program output: -74                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: 13                 
Correct output: -100                | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: 65                 
Correct output: -16                 | Program output: 27                 
Correct output: -91                 | Program output: 59                 
Correct output: -79                 | Program output: -75                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: 90                 
Correct output: -42                 | Program output: -1                 
Correct output: -100                | Program output: 82                 
Correct output: -95                 | Program output: 26                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -41                
Correct output: -7                  | Program output: 64                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: 59                 
Correct output: -68                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in3)) integer_swap exec_when ()))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in3)) integer_swap exec_when ()))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 2 322 552 312 432 315 433 552 2)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (312 2 322 552 312 432 315 433 552 2)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in3) integer_swap exec_when ())))
Errors: [1 1 0 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 30
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.766
Median total errors in population: 7
Error averages by case: (0.688 0.998 0.678 0.448 0.688 0.568 0.685 0.567 0.448 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.019
Average program size in population (points): 38.245
Average percent parens in population: 0.292
Minimum age in population: 45.04965278506279
Maximum age in population: 49.71678681718186
Average age in population: 48.05689200358186
Median age in population: 48.11171211546753
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 232
Genome diversity (% unique genomes):	 0.505
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 233
Syntactic diversity (% unique Push programs):	 0.483
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 12030257
--- Timings ---
Current time: 1559584730872 milliseconds
Total Time:          89.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.1 seconds, 75.9%
Fitness Testing:     12.8 seconds, 14.3%
Report:               8.7 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 74                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 42                 
Correct output: 3                   | Program output: 71                 
Correct output: 18                  | Program output: 21                 
Correct output: 1                   | Program output:                    
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 58                 
Correct output: 25                  | Program output: 44                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 96                 
Correct output: 21                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 28                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 69                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: 2-45               
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 45                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 65                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 82                 
Correct output: -95                 | Program output: 26                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in4)) integer_swap exec_dup ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 30
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in4)) integer_swap exec_dup ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 30
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 420 255 255 255 287 185 255 887 415)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (255 420 255 255 255 287 185 255 887 415)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in4)) integer_swap exec_dup ()))
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 21
Size: 30
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.531
Median total errors in population: 7
Error averages by case: (0.745 0.58 0.745 0.745 0.745 0.713 0.815 0.745 0.113 0.585)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.267
Average program size in population (points): 36.033
Average percent parens in population: 0.296
Minimum age in population: 46.87366403266788
Maximum age in population: 51.34879567241296
Average age in population: 49.55822730229632
Median age in population: 49.60065298411064
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 280
Genome diversity (% unique genomes):	 0.421
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 282
Syntactic diversity (% unique Push programs):	 0.4
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 12381047
--- Timings ---
Current time: 1559584733825 milliseconds
Total Time:          92.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.4 seconds, 76.0%
Fitness Testing:     13.2 seconds, 14.2%
Report:               9.0 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: 54                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -64                
Correct output: -18                 | Program output: -11                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 74                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 42                 
Correct output: 3                   | Program output: 71                 
Correct output: 18                  | Program output: 21                 
Correct output: 1                   | Program output:                    
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 58                 
Correct output: 25                  | Program output: 44                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 96                 
Correct output: 21                  | Program output: 81                 
Correct output: 0                   | Program output: 37                 
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 28                 
Correct output: -64                 | Program output: 10                 
Correct output: -24                 | Program output: 69                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: 55                 
Correct output: -94                 | Program output: -85                
Correct output: -81                 | Program output: -35                
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: 94                 
Correct output: -86                 | Program output: 4                  
Correct output: -84                 | Program output: -76                
Correct output: -67                 | Program output: 96                 
Correct output: -57                 | Program output: -57                
Correct output: -33                 | Program output: 98                 
Correct output: -67                 | Program output: 70                 
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: 48                 
Correct output: -91                 | Program output: -69                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: 2                  
Correct output: -75                 | Program output: -3                 
Correct output: -4                  | Program output: 73                 
Correct output: -74                 | Program output: 45                 
Correct output: -78                 | Program output: 74                 
Correct output: -24                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: 83                 
Correct output: -99                 | Program output: -29                
Correct output: -91                 | Program output: -74                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: 13                 
Correct output: -100                | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: 65                 
Correct output: -16                 | Program output: 27                 
Correct output: -91                 | Program output: 59                 
Correct output: -79                 | Program output: -75                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: 90                 
Correct output: -42                 | Program output: -1                 
Correct output: -100                | Program output: 82                 
Correct output: -95                 | Program output: 26                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -41                
Correct output: -7                  | Program output: 64                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: 59                 
Correct output: -68                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) in3) () integer_swap integer_swap exec_when () integer_flush in1) exec_k_when_autoconstructing () (in2 boolean_and exec_while (exec_do*range (exec_if (exec_if (boolean_flush boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove exec_rot (exec_do*count (integer_pop integer_pop 90 print_boolean boolean_empty integer_shove exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_shove exec_flush) exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth))) () ())) ()) ())))))
Lexicase best errors: [0 1 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 87
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) in3) () integer_swap integer_swap exec_when () integer_flush in1) exec_k_when_autoconstructing () (in2 boolean_and exec_while (exec_do*range (exec_if (exec_if (boolean_flush boolean_dup boolean_flush exec_k_when_autoconstructing (boolean_pop) (boolean_not boolean_shove exec_rot (exec_do*count (integer_pop integer_pop 90 print_boolean boolean_empty integer_shove exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_shove exec_flush) exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth))) () ())) ()) ())))))
Zero cases best errors: [0 1 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 87
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (94 113 752 65 94 113 661 94 752 94)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (94 113 752 65 94 113 661 94 752 94)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_mod) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in3)) integer_swap exec_when ()))
Errors: [1 0 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 21
Size: 30
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.168
Median total errors in population: 7
Error averages by case: (0.906 0.887 0.248 0.935 0.906 0.887 0.339 0.906 0.248 0.906)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.736
Average program size in population (points): 33.978
Average percent parens in population: 0.301
Minimum age in population: 48.99296239390969
Maximum age in population: 52.86047618277371
Average age in population: 51.41781938416447
Median age in population: 51.17983683943748
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 545
Genome diversity (% unique genomes):	 0.333
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 545
Syntactic diversity (% unique Push programs):	 0.329
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 12814026
--- Timings ---
Current time: 1559584736453 milliseconds
Total Time:          95.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.3 seconds, 75.9%
Fitness Testing:     13.6 seconds, 14.2%
Report:               9.3 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 531
Test mean error for best: 0.53100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 74                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 42                 
Correct output: 3                   | Program output: 71                 
Correct output: 18                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 58                 
Correct output: 25                  | Program output: 44                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 96                 
Correct output: 21                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 28                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 69                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: 222222             
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 45                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 65                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 82                 
Correct output: -95                 | Program output: 26                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt in4)) integer_swap exec_dup ()))))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 30
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt in4)) integer_swap exec_dup ()))))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 30
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (68 229 519 319 883 233 408 364 408 283)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (68 229 519 319 883 233 408 364 408 283)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt in4)) integer_swap exec_dup ())))
Errors: [0 0 0 1 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 21
Size: 30
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.286
Median total errors in population: 6
Error averages by case: (0.932 0.771 0.481 0.681 0.117 0.767 0.592 0.636 0.592 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.893
Average program size in population (points): 44.504
Average percent parens in population: 0.304
Minimum age in population: 49.99296239390969
Maximum age in population: 54.43681392341387
Average age in population: 52.71275224619851
Median age in population: 52.78309528670798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 13269067
--- Timings ---
Current time: 1559584739009 milliseconds
Total Time:          97.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.2 seconds, 75.9%
Fitness Testing:     14.0 seconds, 14.3%
Report:               9.5 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 42                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 45                 
Correct output: 27                  | Program output: 79                 
Correct output: 14                  | Program output: 35                 
Correct output: 34                  | Program output: 55                 
Correct output: 48                  | Program output: 94                 
Correct output: 48                  | Program output: 60                 
Correct output: 2                   | Program output:                    
Correct output: 10                  | Program output: 88                 
Correct output: 0                   | Program output: 93                 
Correct output: 3                   | Program output: 80                 
Correct output: 18                  | Program output: 91                 
Correct output: 1                   | Program output: 21                 
Correct output: 17                  | Program output: 81                 
Correct output: 30                  | Program output: 33                 
Correct output: 20                  | Program output: 99                 
Correct output: 25                  | Program output: 91                 
Correct output: 34                  | Program output: 38                 
Correct output: 46                  | Program output: 89                 
Correct output: 21                  | Program output: 31                 
Correct output: 0                   | Program output:                    
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: 1                  
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -45                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output:                    
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: -30                
Correct output: -86                 | Program output: -45                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: -33                 | Program output: 98                 
Correct output: -67                 | Program output: 70                 
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -4                  | Program output: 73                 
Correct output: -74                 | Program output: -65                
Correct output: -78                 | Program output: 74                 
Correct output: -24                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -26                
Correct output: -70                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -53                
Correct output: -91                 | Program output: -66                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: 13                 
Correct output: -100                | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: 25                 
Correct output: -16                 | Program output: 272727             
Correct output: -91                 | Program output:                    
Correct output: -79                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: 90                 
Correct output: -42                 | Program output: -1                 
Correct output: -100                | Program output: -72                
Correct output: -95                 | Program output: -56                
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -41                
Correct output: -7                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 8                  
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: 59                 
Correct output: -68                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) in3) () integer_swap integer_swap exec_when () integer_flush in1) exec_k_when_autoconstructing () (in2 integer_min exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_pop integer_pop 90 print_boolean boolean_empty integer_shove exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_shove exec_flush) exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth))) ())) ()) ())))))
Lexicase best errors: [1 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 86
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) in3) () integer_swap integer_swap exec_when () integer_flush in1) exec_k_when_autoconstructing () (in2 integer_min exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_pop integer_pop 90 print_boolean boolean_empty integer_shove exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_shove exec_flush) exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth))) ())) ()) ())))))
Zero cases best errors: [1 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 86
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 828 436 198 96 212 212 831 920 758)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (14 828 436 198 96 212 212 831 920 758)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (exec_do*range (in1 integer_gt) exec_do*range () integer_swap boolean_eq exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt) in3)) integer_swap exec_when ())))
Errors: [1 0 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 22
Size: 32
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 5.495
Median total errors in population: 5
Error averages by case: (0.986 0.172 0.564 0.802 0.904 0.788 0.788 0.169 0.08 0.242)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.746
Average program size in population (points): 38.903
Average percent parens in population: 0.307
Minimum age in population: 51.63850714941509
Maximum age in population: 55.85467135810177
Average age in population: 54.16025531592313
Median age in population: 54.25206133119354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.348
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.343
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 13733179
--- Timings ---
Current time: 1559584741543 milliseconds
Total Time:         100.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.1 seconds, 75.8%
Fitness Testing:     14.4 seconds, 14.3%
Report:               9.8 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 531
Test mean error for best: 0.53100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 74                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 42                 
Correct output: 3                   | Program output: 71                 
Correct output: 18                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 58                 
Correct output: 25                  | Program output: 44                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 96                 
Correct output: 21                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 28                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 69                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: 222222             
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 45                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 65                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 82                 
Correct output: -95                 | Program output: 26                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_empty print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt in4)) integer_swap exec_when ()))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 29
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_empty print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt in4)) integer_swap exec_when ()))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 29
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (273 274 905 277 158 741 273 457 275 273)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (273 274 905 277 158 741 273 457 275 273)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range (in1 integer_gt exec_do*range () integer_swap in4 exec_k_when_autoconstructing () (exec_shove (integer_div in1 integer_gt in4)) integer_swap exec_dup ()))))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 30
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.094
Median total errors in population: 6
Error averages by case: (0.727 0.726 0.095 0.723 0.842 0.259 0.727 0.543 0.725 0.727)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.849
Average program size in population (points): 47.559
Average percent parens in population: 0.303
Minimum age in population: 53.40922473411774
Maximum age in population: 57.42891089155455
Average age in population: 55.82682044772173
Median age in population: 55.88876825421175
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 14205145
--- Timings ---
Current time: 1559584744036 milliseconds
Total Time:         102.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.8 seconds, 75.7%
Fitness Testing:     14.8 seconds, 14.4%
Report:              10.1 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 14                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 25                 
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 54                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 4                  
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: -30                
Correct output: -86                 | Program output: -45                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 3                  
Correct output: -57                 | Program output: 38                 
Correct output: -33                 | Program output: 6                  
Correct output: -67                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -4                  | Program output: 27                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 2                  
Correct output: -24                 | Program output: 50                 
Correct output: -48                 | Program output: 68                 
Correct output: -95                 | Program output: 56                 
Correct output: -70                 | Program output: -55                
Correct output: -88                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -53                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -14                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: 5                  
Correct output: -91                 | Program output: 2                  
Correct output: -79                 | Program output: -78                
Correct output: -46                 | Program output: -13                
Correct output: -36                 | Program output: 93                 
Correct output: -42                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -45                
Correct output: -29                 | Program output: 52                 
Correct output: -100                | Program output: -53                
Correct output: -99                 | Program output: -56                
Correct output: -7                  | Program output: -7                 
Correct output: -73                 | Program output: 76                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: 3                  
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) in3) () integer_swap integer_swap exec_when () integer_flush in1) exec_k_when_autoconstructing () (in2 integer_min exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () integer_max boolean_shove integer_eq exec_do*count (integer_pop integer_pop 90 print_boolean boolean_empty integer_shove exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_shove exec_flush) exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth))) ())) ()) ())))))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 86
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) in3) () integer_swap integer_swap exec_when () integer_flush in1) exec_k_when_autoconstructing () (in2 integer_min exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () integer_max boolean_shove integer_eq exec_do*count (integer_pop integer_pop 90 print_boolean boolean_empty integer_shove exec_when (boolean_empty integer_shove exec_shove () exec_do*count (integer_shove exec_flush) exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth))) ())) ()) ())))))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 86
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (907 634 268 115 168 925 917 638 911 917)
Population mean number of elite cases: 6.40
Count of perfect (error zero) individuals by case: (907 634 268 115 168 925 917 638 911 917)
Population mean number of perfect (error zero) cases: 6.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) in3) () integer_swap integer_swap exec_when () integer_flush in1) exec_k_when_autoconstructing (in2 integer_min exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_pop integer_pop 90 print_boolean boolean_empty exec_s (exec_when (boolean_empty integer_shove exec_shove ())) () ())) ())) ()) ()))) ()))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 50
Size: 77
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 3.6
Median total errors in population: 3
Error averages by case: (0.093 0.366 0.732 0.885 0.832 0.075 0.083 0.362 0.089 0.083)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.9
Average program size in population (points): 36.923
Average percent parens in population: 0.291
Minimum age in population: 55.07521177083254
Maximum age in population: 58.90411520703128
Average age in population: 57.21391902979828
Median age in population: 57.26728264152371
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.425
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 14617724
--- Timings ---
Current time: 1559584746631 milliseconds
Total Time:         105.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.7 seconds, 75.7%
Fitness Testing:     15.2 seconds, 14.4%
Report:              10.4 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 42                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 38                 
Correct output: 27                  | Program output: 79                 
Correct output: 14                  | Program output: 14                 
Correct output: 34                  | Program output: 55                 
Correct output: 48                  | Program output: 61                 
Correct output: 48                  | Program output: 60                 
Correct output: 2                   | Program output: 3                  
Correct output: 10                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 25                 
Correct output: 17                  | Program output: 81                 
Correct output: 30                  | Program output: 33                 
Correct output: 20                  | Program output: 54                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 37                 
Correct output: -95                 | Program output: -40                
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -52                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -85                
Correct output: -81                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 52                 
Correct output: -86                 | Program output: 4                  
Correct output: -84                 | Program output: -76                
Correct output: -67                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -33                 | Program output: 6                  
Correct output: -67                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: 26                 
Correct output: -91                 | Program output: -69                
Correct output: -25                 | Program output: -3                 
Correct output: -82                 | Program output: -45                
Correct output: -75                 | Program output: -53                
Correct output: -4                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 2                  
Correct output: -24                 | Program output: 50                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: -50                
Correct output: -85                 | Program output: -59                
Correct output: -99                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -58                
Correct output: -87                 | Program output: -3                 
Correct output: -29                 | Program output: -29                
Correct output: -84                 | Program output: -48                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: 27                 
Correct output: -91                 | Program output: 35                 
Correct output: -79                 | Program output: -75                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: 90                 
Correct output: -42                 | Program output: -1                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 52                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -56                
Correct output: -7                  | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: 10                 
Correct output: -33                 | Program output: 3                  
Correct output: -68                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_swap (exec_shove (integer_div in1 integer_gt) in3) (integer_swap integer_swap exec_when () integer_flush in1) exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove exec_when (boolean_empty) integer_shove exec_shove () exec_flush) exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth) ())) ()) ())))))
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_swap (exec_shove (integer_div in1 integer_gt) in3) (integer_swap integer_swap exec_when () integer_flush in1) exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove exec_when (boolean_empty) integer_shove exec_shove () exec_flush) exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth) ())) ()) ())))))
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (19 23 629 628 629 21 612 20 630 20)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (19 23 629 628 629 21 612 20 630 20)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) in3) () integer_swap integer_swap in2 integer_min exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup in4 exec_k_when_autoconstructing () (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_pop integer_pop 90 print_boolean boolean_empty integer_shove) exec_when (integer_shove exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth)))) ()) ())))))
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 72
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.769
Median total errors in population: 5
Error averages by case: (0.981 0.977 0.371 0.372 0.371 0.979 0.388 0.98 0.37 0.98)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.187
Average program size in population (points): 64.807
Average percent parens in population: 0.316
Minimum age in population: 56.07521177083254
Maximum age in population: 60.53071026561156
Average age in population: 58.79718031833951
Median age in population: 58.93061141747785
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 15150042
--- Timings ---
Current time: 1559584749312 milliseconds
Total Time:         108.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.6 seconds, 75.5%
Fitness Testing:     15.6 seconds, 14.5%
Report:              10.7 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 42                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 38                 
Correct output: 27                  | Program output: 79                 
Correct output: 14                  | Program output: 14                 
Correct output: 34                  | Program output: 55                 
Correct output: 48                  | Program output: 61                 
Correct output: 48                  | Program output: 60                 
Correct output: 2                   | Program output: 36                 
Correct output: 10                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 21                 
Correct output: 17                  | Program output: 81                 
Correct output: 30                  | Program output: 33                 
Correct output: 20                  | Program output: 54                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output:                    
Correct output: -95                 | Program output: -40                
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -52                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -85                
Correct output: -81                 | Program output:                    
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 52                 
Correct output: -86                 | Program output: 4                  
Correct output: -84                 | Program output: -76                
Correct output: -67                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -33                 | Program output: 6                  
Correct output: -67                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: 26                 
Correct output: -91                 | Program output: -69                
Correct output: -25                 | Program output: -3                 
Correct output: -82                 | Program output: -45                
Correct output: -75                 | Program output: -53                
Correct output: -4                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 2                  
Correct output: -24                 | Program output: 50                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: -50                
Correct output: -85                 | Program output: -59                
Correct output: -99                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -58                
Correct output: -87                 | Program output: -3                 
Correct output: -29                 | Program output: -29                
Correct output: -84                 | Program output: -48                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: 27                 
Correct output: -91                 | Program output: 35                 
Correct output: -79                 | Program output: -75                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: 90                 
Correct output: -42                 | Program output: -1                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 52                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -56                
Correct output: -7                  | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: 10                 
Correct output: -33                 | Program output: 3                  
Correct output: -68                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_while} {:close 0, :instruction integer_shove})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) in3) () integer_swap integer_swap in2 integer_min exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup in4 exec_k_when_autoconstructing () (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_pop integer_pop 90 print_boolean boolean_empty integer_shove) exec_when (integer_shove exec_do*count (integer_add) boolean_frominteger boolean_shove exec_while () integer_shove)))) ()) ())))))
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 72
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_while} {:close 0, :instruction integer_shove})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) in3) () integer_swap integer_swap in2 integer_min exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup in4 exec_k_when_autoconstructing () (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_pop integer_pop 90 print_boolean boolean_empty integer_shove) exec_when (integer_shove exec_do*count (integer_add) boolean_frominteger boolean_shove exec_while () integer_shove)))) ()) ())))))
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 72
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (504 511 339 891 923 614 341 510 549 510)
Population mean number of elite cases: 5.69
Count of perfect (error zero) individuals by case: (504 511 339 891 923 614 341 510 549 510)
Population mean number of perfect (error zero) cases: 5.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_swap (exec_shove (integer_div in1 integer_gt) in3) (integer_swap integer_swap exec_when () integer_flush in1) exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove exec_when (boolean_empty) integer_shove exec_shove () exec_flush) exec_do*count (integer_add) boolean_frominteger integer_min exec_while () integer_stackdepth) ())) ()) ())))))
Errors: [0 0 1 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 57
Size: 83
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 4.308
Median total errors in population: 3
Error averages by case: (0.496 0.489 0.661 0.109 0.077 0.386 0.659 0.49 0.451 0.49)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.664
Average program size in population (points): 58.624
Average percent parens in population: 0.302
Minimum age in population: 57.07521177083254
Maximum age in population: 61.94783440387619
Average age in population: 60.530990656439
Median age in population: 60.69809907702802
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 15643422
--- Timings ---
Current time: 1559584751877 milliseconds
Total Time:         110.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.4 seconds, 75.4%
Fitness Testing:     16.1 seconds, 14.6%
Report:              11.0 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -3                 
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 74                 
Correct output: 34                  | Program output: 34                 
Correct output: 48                  | Program output: 48                 
Correct output: 48                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 42                 
Correct output: 3                   | Program output: 71                 
Correct output: 18                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 20                  | Program output: 58                 
Correct output: 25                  | Program output: 44                 
Correct output: 34                  | Program output: 88                 
Correct output: 46                  | Program output: 96                 
Correct output: 21                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 28                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: 69                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -32                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: 45                 
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -69                
Correct output: -89                 | Program output: -1                 
Correct output: -62                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: 70                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: 65                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 82                 
Correct output: -95                 | Program output: 26                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -5                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_div) exec_do*range (integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) integer_div integer_gt integer_gt in4) () integer_swap exec_when ()))))
Lexicase best errors: [1 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 33
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_div) exec_do*range (integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) integer_div integer_gt integer_gt in4) () integer_swap exec_when ()))))
Zero cases best errors: [1 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 33
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (581 312 198 277 900 593 197 278 278 319)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (581 312 198 277 900 593 197 278 278 319)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_sub exec_do*range () integer_swap exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) integer_div in1 integer_gt in4) () integer_swap exec_when ())))
Errors: [1 0 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 23
Size: 32
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 6.067
Median total errors in population: 7
Error averages by case: (0.419 0.688 0.802 0.723 0.1 0.407 0.803 0.722 0.722 0.681)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.345
Average program size in population (points): 61.452
Average percent parens in population: 0.310
Minimum age in population: 59.84048611137405
Maximum age in population: 63.73841309851377
Average age in population: 62.08148166765082
Median age in population: 62.14724457199554
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 16142429
--- Timings ---
Current time: 1559584754467 milliseconds
Total Time:         113.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.2 seconds, 75.2%
Fitness Testing:     16.6 seconds, 14.6%
Report:              11.4 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 439
Test mean error for best: 0.43900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 14                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 61                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 36                 
Correct output: 10                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: -40                
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: -98-98-98          
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -3                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: -24                
Correct output: -61                 | Program output: -50                
Correct output: -85                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -3                 
Correct output: -29                 | Program output: 8                  
Correct output: -84                 | Program output: 23                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -7                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: 11                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 63
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 63
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (619 857 619 246 304 620 11 912 621 249)
Population mean number of elite cases: 5.06
Count of perfect (error zero) individuals by case: (619 857 619 246 304 620 11 912 621 249)
Population mean number of perfect (error zero) cases: 5.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 2, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) integer_div in1 integer_gt in4) () exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup)) ()) ())))))
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 42
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 4.942
Median total errors in population: 4
Error averages by case: (0.381 0.143 0.381 0.754 0.696 0.38 0.989 0.088 0.379 0.751)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.29
Average program size in population (points): 43.183
Average percent parens in population: 0.293
Minimum age in population: 61.3661075987402
Maximum age in population: 65.28228052813301
Average age in population: 63.69782919510203
Median age in population: 63.73638028116693
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.407
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.405
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 16609724
--- Timings ---
Current time: 1559584756974 milliseconds
Total Time:         115.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.0 seconds, 75.1%
Fitness Testing:     17.0 seconds, 14.7%
Report:              11.7 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 419
Test mean error for best: 0.41900
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 1
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 14                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 61                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 36                 
Correct output: 10                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: -40                
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -3                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: -24                
Correct output: -61                 | Program output: -50                
Correct output: -85                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -3                 
Correct output: -29                 | Program output: 8                  
Correct output: -84                 | Program output: 23                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -7                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: 11                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 2, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup})
Lexicase best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) integer_div in1 integer_gt in4) () exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup)) ()) ())))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 42
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 2, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup})
Zero cases best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer exec_do*range () integer_swap in4 exec_k_when_autoconstructing (exec_shove (integer_div in1 integer_gt) integer_div in1 integer_gt in4) () exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup)) ()) ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 42
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (618 622 620 680 679 922 678 678 669 669)
Population mean number of elite cases: 6.84
Count of perfect (error zero) individuals by case: (618 622 620 680 679 922 678 678 669 669)
Population mean number of perfect (error zero) cases: 6.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_663} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction 90} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth})
Best program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 42
Size: 63
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 3.165
Median total errors in population: 3
Error averages by case: (0.382 0.378 0.38 0.32 0.321 0.078 0.322 0.322 0.331 0.331)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.977
Average program size in population (points): 59.586
Average percent parens in population: 0.334
Minimum age in population: 62.92891089155455
Maximum age in population: 66.51789222653065
Average age in population: 64.7186241201181
Median age in population: 64.89172361050214
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.011
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 17025708
--- Timings ---
Current time: 1559584759459 milliseconds
Total Time:         118.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.8 seconds, 75.1%
Fitness Testing:     17.4 seconds, 14.7%
Report:              12.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 44
Successful program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 63


Auto-simplifying with starting size: 63
step: 0
program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 500
program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 1000
program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 1500
program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 2000
program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 2500
program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 3000
program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 3500
program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 4000
program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 4500
program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 5000
program: (tagged_663 boolean_and exec_dup (exec_do*while (print_integer boolean_dup_items integer_dup_items exec_do*range (in1 integer_gt) exec_do*range () integer_swap in4 exec_k_when_autoconstructing (in3 integer_swap exec_k_when_autoconstructing () (in2 integer_min) exec_while (exec_do*range (exec_if (exec_if (tag_exec_694 (boolean_dup boolean_flush exec_k_when_autoconstructing (exec_do*times () boolean_not boolean_shove integer_eq exec_do*count (integer_stackdepth integer_pop 90 print_boolean boolean_empty integer_shove boolean_frominteger integer_min exec_while () integer_stackdepth)) ())) ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 419
Test mean error for best: 0.41900
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 1
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: -5                 
Correct output: 42                  | Program output: 66                 
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: 60                  | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: 75                  | Program output: 75                 
Correct output: -11                 | Program output: -11                
Correct output: -65                 | Program output: -65                
Correct output: -6                  | Program output: -6                 
Correct output: 23                  | Program output: 36                 
Correct output: 27                  | Program output: 31                 
Correct output: 14                  | Program output: 14                 
Correct output: 34                  | Program output: 48                 
Correct output: 48                  | Program output: 61                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 36                 
Correct output: 10                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 25                 
Correct output: 34                  | Program output: 34                 
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: -40                
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -62                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -57                 | Program output: -33                
Correct output: -33                 | Program output: -33                
Correct output: -67                 | Program output: -67                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -3                 
Correct output: -82                 | Program output: -81                
Correct output: -75                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -24                 | Program output: -24                
Correct output: -48                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -11                
Correct output: -88                 | Program output: -24                
Correct output: -61                 | Program output: -50                
Correct output: -85                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -3                 
Correct output: -29                 | Program output: 8                  
Correct output: -84                 | Program output: 23                 
Correct output: -67                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -46                 | Program output: -46                
Correct output: -36                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -7                  | Program output: -7                 
Correct output: -73                 | Program output: 0                  
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: 11                 
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
;;******************************
