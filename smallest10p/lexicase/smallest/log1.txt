Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-12 -12 -12 -78] -78] [[-28 -28 -73 -28] -73] [[-98 -98 97 -98] -98] [[-95 -95 -95 69] -95] [[73 47 73 73] 47] [[50 57 50 50] 50] [[41 41 41 -57] -57] [[56 56 56 -34] -34] [[20 20 20 29] 20] [[35 63 35 35] 35] [(-19 -19 -19 -19) -19] [(75 75 75 75) 75] [(-99 -99 -99 -99) -99] [(-94 -94 -94 -94) -94] [(-50 -50 -50 -50) -50] [(4 57 96 84) 4] [(3 6 47 36) 3] [(80 45 84 84) 45] [(29 74 97 86) 29] [(88 5 63 22) 5] [(11 19 50 70) 11] [(91 14 3 92) 3] [(58 77 42 10) 10] [(97 11 41 61) 11] [(91 14 80 36) 14] [(32 5 64 47) 5] [(64 38 100 89) 38] [(76 55 32 2) 2] [(54 83 22 23) 22] [(32 78 99 55) 32] [(14 1 62 32) 1] [(7 8 56 17) 7] [(71 3 34 58) 3] [(33 37 5 7) 5] [(3 61 68 73) 3] [(26 27 -46 -57) -57] [(23 99 5 29) 5] [(4 24 -10 -80) -80] [(-49 -19 90 -58) -58] [(-39 -40 20 83) -40] [(-64 -15 -70 76) -70] [(-95 24 76 -3) -95] [(-43 5 28 -13) -43] [(-38 -94 76 -83) -94] [(49 59 -85 93) -85] [(57 -20 -24 -7) -24] [(-12 -52 -29 89) -52] [(51 -90 -54 -99) -99] [(-28 47 -51 -42) -51] [(-98 -9 -8 2) -98] [(-35 87 48 35) -35] [(39 -74 1 -3) -74] [(-93 -62 83 -73) -93] [(-99 41 -26 70) -99] [(54 -16 25 53) -16] [(52 29 96 -68) -68] [(-4 -9 2 -35) -35] [(51 41 16 -91) -91] [(-100 34 -4 -41) -100] [(-26 13 98 32) -26] [(13 98 -71 88) -71] [(-87 -72 -26 -70) -87] [(32 -34 70 -23) -34] [(7 60 -31 -67) -67] [(-31 -24 25 -56) -56] [(71 -52 94 -67) -67] [(66 5 5 97) 5] [(-66 27 44 -1) -66] [(-100 87 39 74) -100] [(70 69 -60 100) -60] [(52 -85 -41 -74) -85] [(-77 -48 -19 -30) -77] [(50 36 49 29) 29] [(39 -12 32 -74) -74] [(-59 100 -18 -63) -63] [(-77 -65 84 -63) -77] [(-28 63 56 72) -28] [(98 10 -3 -21) -21] [(-44 78 -91 57) -91] [(-95 45 -27 98) -95] [(7 46 -93 -73) -93] [(-96 15 -30 52) -96] [(80 -82 91 -55) -82] [(3 72 75 -43) -43] [(-25 -15 -4 -37) -37] [(13 -54 38 86) -54] [(92 -26 -2 -98) -98] [(-90 -54 -51 -34) -90] [(-36 -14 69 47) -36] [(-6 -19 18 -45) -45] [(12 42 23 -12) -12] [(11 -20 99 25) -20] [(82 -76 -80 -56) -80] [(-40 -37 -50 -55) -55] [(62 53 -78 -57) -78])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-12 -12 -12 -78] -78]
Train Case:   6 | Input/Output: [[-28 -28 -73 -28] -73]
Train Case:   7 | Input/Output: [[-98 -98 97 -98] -98]
Train Case:   8 | Input/Output: [[-95 -95 -95 69] -95]
Train Case:   9 | Input/Output: [[73 47 73 73] 47]
Train Case:  10 | Input/Output: [[50 57 50 50] 50]
Train Case:  11 | Input/Output: [[41 41 41 -57] -57]
Train Case:  12 | Input/Output: [[56 56 56 -34] -34]
Train Case:  13 | Input/Output: [[20 20 20 29] 20]
Train Case:  14 | Input/Output: [[35 63 35 35] 35]
Train Case:  15 | Input/Output: [(-19 -19 -19 -19) -19]
Train Case:  16 | Input/Output: [(75 75 75 75) 75]
Train Case:  17 | Input/Output: [(-99 -99 -99 -99) -99]
Train Case:  18 | Input/Output: [(-94 -94 -94 -94) -94]
Train Case:  19 | Input/Output: [(-50 -50 -50 -50) -50]
Train Case:  20 | Input/Output: [(4 57 96 84) 4]
Train Case:  21 | Input/Output: [(3 6 47 36) 3]
Train Case:  22 | Input/Output: [(80 45 84 84) 45]
Train Case:  23 | Input/Output: [(29 74 97 86) 29]
Train Case:  24 | Input/Output: [(88 5 63 22) 5]
Train Case:  25 | Input/Output: [(11 19 50 70) 11]
Train Case:  26 | Input/Output: [(91 14 3 92) 3]
Train Case:  27 | Input/Output: [(58 77 42 10) 10]
Train Case:  28 | Input/Output: [(97 11 41 61) 11]
Train Case:  29 | Input/Output: [(91 14 80 36) 14]
Train Case:  30 | Input/Output: [(32 5 64 47) 5]
Train Case:  31 | Input/Output: [(64 38 100 89) 38]
Train Case:  32 | Input/Output: [(76 55 32 2) 2]
Train Case:  33 | Input/Output: [(54 83 22 23) 22]
Train Case:  34 | Input/Output: [(32 78 99 55) 32]
Train Case:  35 | Input/Output: [(14 1 62 32) 1]
Train Case:  36 | Input/Output: [(7 8 56 17) 7]
Train Case:  37 | Input/Output: [(71 3 34 58) 3]
Train Case:  38 | Input/Output: [(33 37 5 7) 5]
Train Case:  39 | Input/Output: [(3 61 68 73) 3]
Train Case:  40 | Input/Output: [(26 27 -46 -57) -57]
Train Case:  41 | Input/Output: [(23 99 5 29) 5]
Train Case:  42 | Input/Output: [(4 24 -10 -80) -80]
Train Case:  43 | Input/Output: [(-49 -19 90 -58) -58]
Train Case:  44 | Input/Output: [(-39 -40 20 83) -40]
Train Case:  45 | Input/Output: [(-64 -15 -70 76) -70]
Train Case:  46 | Input/Output: [(-95 24 76 -3) -95]
Train Case:  47 | Input/Output: [(-43 5 28 -13) -43]
Train Case:  48 | Input/Output: [(-38 -94 76 -83) -94]
Train Case:  49 | Input/Output: [(49 59 -85 93) -85]
Train Case:  50 | Input/Output: [(57 -20 -24 -7) -24]
Train Case:  51 | Input/Output: [(-12 -52 -29 89) -52]
Train Case:  52 | Input/Output: [(51 -90 -54 -99) -99]
Train Case:  53 | Input/Output: [(-28 47 -51 -42) -51]
Train Case:  54 | Input/Output: [(-98 -9 -8 2) -98]
Train Case:  55 | Input/Output: [(-35 87 48 35) -35]
Train Case:  56 | Input/Output: [(39 -74 1 -3) -74]
Train Case:  57 | Input/Output: [(-93 -62 83 -73) -93]
Train Case:  58 | Input/Output: [(-99 41 -26 70) -99]
Train Case:  59 | Input/Output: [(54 -16 25 53) -16]
Train Case:  60 | Input/Output: [(52 29 96 -68) -68]
Train Case:  61 | Input/Output: [(-4 -9 2 -35) -35]
Train Case:  62 | Input/Output: [(51 41 16 -91) -91]
Train Case:  63 | Input/Output: [(-100 34 -4 -41) -100]
Train Case:  64 | Input/Output: [(-26 13 98 32) -26]
Train Case:  65 | Input/Output: [(13 98 -71 88) -71]
Train Case:  66 | Input/Output: [(-87 -72 -26 -70) -87]
Train Case:  67 | Input/Output: [(32 -34 70 -23) -34]
Train Case:  68 | Input/Output: [(7 60 -31 -67) -67]
Train Case:  69 | Input/Output: [(-31 -24 25 -56) -56]
Train Case:  70 | Input/Output: [(71 -52 94 -67) -67]
Train Case:  71 | Input/Output: [(66 5 5 97) 5]
Train Case:  72 | Input/Output: [(-66 27 44 -1) -66]
Train Case:  73 | Input/Output: [(-100 87 39 74) -100]
Train Case:  74 | Input/Output: [(70 69 -60 100) -60]
Train Case:  75 | Input/Output: [(52 -85 -41 -74) -85]
Train Case:  76 | Input/Output: [(-77 -48 -19 -30) -77]
Train Case:  77 | Input/Output: [(50 36 49 29) 29]
Train Case:  78 | Input/Output: [(39 -12 32 -74) -74]
Train Case:  79 | Input/Output: [(-59 100 -18 -63) -63]
Train Case:  80 | Input/Output: [(-77 -65 84 -63) -77]
Train Case:  81 | Input/Output: [(-28 63 56 72) -28]
Train Case:  82 | Input/Output: [(98 10 -3 -21) -21]
Train Case:  83 | Input/Output: [(-44 78 -91 57) -91]
Train Case:  84 | Input/Output: [(-95 45 -27 98) -95]
Train Case:  85 | Input/Output: [(7 46 -93 -73) -93]
Train Case:  86 | Input/Output: [(-96 15 -30 52) -96]
Train Case:  87 | Input/Output: [(80 -82 91 -55) -82]
Train Case:  88 | Input/Output: [(3 72 75 -43) -43]
Train Case:  89 | Input/Output: [(-25 -15 -4 -37) -37]
Train Case:  90 | Input/Output: [(13 -54 38 86) -54]
Train Case:  91 | Input/Output: [(92 -26 -2 -98) -98]
Train Case:  92 | Input/Output: [(-90 -54 -51 -34) -90]
Train Case:  93 | Input/Output: [(-36 -14 69 47) -36]
Train Case:  94 | Input/Output: [(-6 -19 18 -45) -45]
Train Case:  95 | Input/Output: [(12 42 23 -12) -12]
Train Case:  96 | Input/Output: [(11 -20 99 25) -20]
Train Case:  97 | Input/Output: [(82 -76 -80 -56) -80]
Train Case:  98 | Input/Output: [(-40 -37 -50 -55) -55]
Train Case:  99 | Input/Output: [(62 53 -78 -57) -78]
Test Case:   0 | Input/Output: [[-33 -33 -33 96] -33]
Test Case:   1 | Input/Output: [[82 86 82 82] 82]
Test Case:   2 | Input/Output: [[96 -81 96 96] -81]
Test Case:   3 | Input/Output: [[-17 -17 -17 19] -17]
Test Case:   4 | Input/Output: [[19 -61 -61 -61] -61]
Test Case:   5 | Input/Output: [[-33 88 -33 -33] -33]
Test Case:   6 | Input/Output: [[-25 0 0 0] -25]
Test Case:   7 | Input/Output: [[-37 59 -37 -37] -37]
Test Case:   8 | Input/Output: [[-16 -16 82 -16] -16]
Test Case:   9 | Input/Output: [[-53 -53 -53 -19] -53]
Test Case:  10 | Input/Output: [[-38 -38 -38 -7] -38]
Test Case:  11 | Input/Output: [[27 27 27 47] 27]
Test Case:  12 | Input/Output: [[-18 -82 -18 -18] -82]
Test Case:  13 | Input/Output: [[26 26 25 26] 25]
Test Case:  14 | Input/Output: [[24 92 92 92] 24]
Test Case:  15 | Input/Output: [[30 -33 -33 -33] -33]
Test Case:  16 | Input/Output: [[11 -51 -51 -51] -51]
Test Case:  17 | Input/Output: [[-24 73 73 73] -24]
Test Case:  18 | Input/Output: [[62 62 -86 62] -86]
Test Case:  19 | Input/Output: [[-46 -46 -46 87] -46]
Test Case:  20 | Input/Output: [[61 5 61 61] 5]
Test Case:  21 | Input/Output: [[90 90 91 90] 90]
Test Case:  22 | Input/Output: [[34 34 34 -13] -13]
Test Case:  23 | Input/Output: [[-74 17 -74 -74] -74]
Test Case:  24 | Input/Output: [[18 18 18 6] 6]
Test Case:  25 | Input/Output: [[-33 -33 -33 5] -33]
Test Case:  26 | Input/Output: [[68 68 94 68] 68]
Test Case:  27 | Input/Output: [[95 100 95 95] 95]
Test Case:  28 | Input/Output: [[58 -45 58 58] -45]
Test Case:  29 | Input/Output: [[-6 73 73 73] -6]
Test Case:  30 | Input/Output: [[54 54 54 36] 36]
Test Case:  31 | Input/Output: [[-14 -98 -14 -14] -98]
Test Case:  32 | Input/Output: [[17 43 17 17] 17]
Test Case:  33 | Input/Output: [[-80 76 -80 -80] -80]
Test Case:  34 | Input/Output: [[-27 -27 -41 -27] -41]
Test Case:  35 | Input/Output: [[93 93 -54 93] -54]
Test Case:  36 | Input/Output: [[14 14 14 54] 14]
Test Case:  37 | Input/Output: [[5 -58 -58 -58] -58]
Test Case:  38 | Input/Output: [[-46 -46 -46 92] -46]
Test Case:  39 | Input/Output: [[-29 -36 -36 -36] -36]
Test Case:  40 | Input/Output: [[-89 -89 -97 -89] -97]
Test Case:  41 | Input/Output: [[-95 -95 -95 -86] -95]
Test Case:  42 | Input/Output: [[4 4 85 4] 4]
Test Case:  43 | Input/Output: [[-38 -38 14 -38] -38]
Test Case:  44 | Input/Output: [[-20 -91 -20 -20] -91]
Test Case:  45 | Input/Output: [[-21 -25 -25 -25] -25]
Test Case:  46 | Input/Output: [[-8 -8 -8 55] -8]
Test Case:  47 | Input/Output: [[-95 -95 16 -95] -95]
Test Case:  48 | Input/Output: [[37 37 -99 37] -99]
Test Case:  49 | Input/Output: [[18 18 18 -72] -72]
Test Case:  50 | Input/Output: [[51 85 51 51] 51]
Test Case:  51 | Input/Output: [[-42 -42 -42 65] -42]
Test Case:  52 | Input/Output: [[-80 22 22 22] -80]
Test Case:  53 | Input/Output: [[89 89 89 -33] -33]
Test Case:  54 | Input/Output: [[36 36 36 -37] -37]
Test Case:  55 | Input/Output: [[-48 -3 -48 -48] -48]
Test Case:  56 | Input/Output: [[52 52 -48 52] -48]
Test Case:  57 | Input/Output: [[63 -88 63 63] -88]
Test Case:  58 | Input/Output: [[-92 -92 -92 15] -92]
Test Case:  59 | Input/Output: [[10 -30 10 10] -30]
Test Case:  60 | Input/Output: [[77 77 -47 77] -47]
Test Case:  61 | Input/Output: [[23 23 23 93] 23]
Test Case:  62 | Input/Output: [[44 -28 44 44] -28]
Test Case:  63 | Input/Output: [[-2 -2 28 -2] -2]
Test Case:  64 | Input/Output: [[-2 -2 -2 44] -2]
Test Case:  65 | Input/Output: [[-38 -38 -38 -29] -38]
Test Case:  66 | Input/Output: [[75 -86 -86 -86] -86]
Test Case:  67 | Input/Output: [[75 -23 -23 -23] -23]
Test Case:  68 | Input/Output: [[94 94 94 -49] -49]
Test Case:  69 | Input/Output: [[-94 75 75 75] -94]
Test Case:  70 | Input/Output: [[79 90 79 79] 79]
Test Case:  71 | Input/Output: [[-64 -64 -64 -1] -64]
Test Case:  72 | Input/Output: [[13 66 66 66] 13]
Test Case:  73 | Input/Output: [[43 43 43 -22] -22]
Test Case:  74 | Input/Output: [[-25 -25 -9 -25] -25]
Test Case:  75 | Input/Output: [[-18 -18 -18 50] -18]
Test Case:  76 | Input/Output: [[-79 -79 -96 -79] -96]
Test Case:  77 | Input/Output: [[81 23 23 23] 23]
Test Case:  78 | Input/Output: [[-14 88 88 88] -14]
Test Case:  79 | Input/Output: [[-54 -54 -54 17] -54]
Test Case:  80 | Input/Output: [[-41 -43 -43 -43] -43]
Test Case:  81 | Input/Output: [[12 19 12 12] 12]
Test Case:  82 | Input/Output: [[84 84 79 84] 79]
Test Case:  83 | Input/Output: [[-91 -91 97 -91] -91]
Test Case:  84 | Input/Output: [[54 -65 -65 -65] -65]
Test Case:  85 | Input/Output: [[22 97 22 22] 22]
Test Case:  86 | Input/Output: [[-90 -97 -90 -90] -97]
Test Case:  87 | Input/Output: [[93 -50 -50 -50] -50]
Test Case:  88 | Input/Output: [[100 100 86 100] 86]
Test Case:  89 | Input/Output: [[43 43 43 88] 43]
Test Case:  90 | Input/Output: [[-77 60 60 60] -77]
Test Case:  91 | Input/Output: [[-77 -3 -77 -77] -77]
Test Case:  92 | Input/Output: [[32 32 14 32] 14]
Test Case:  93 | Input/Output: [[-37 -37 -37 -36] -37]
Test Case:  94 | Input/Output: [[89 89 48 89] 48]
Test Case:  95 | Input/Output: [[14 13 14 14] 13]
Test Case:  96 | Input/Output: [[56 -80 56 56] -80]
Test Case:  97 | Input/Output: [[-40 -40 -40 -26] -40]
Test Case:  98 | Input/Output: [[-85 46 -85 -85] -85]
Test Case:  99 | Input/Output: [[15 15 15 51] 15]
Test Case: 100 | Input/Output: [(73 73 73 73) 73]
Test Case: 101 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 102 | Input/Output: [(37 37 37 37) 37]
Test Case: 103 | Input/Output: [(78 78 78 78) 78]
Test Case: 104 | Input/Output: [(21 21 21 21) 21]
Test Case: 105 | Input/Output: [(15 15 15 15) 15]
Test Case: 106 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 107 | Input/Output: [(5 5 5 5) 5]
Test Case: 108 | Input/Output: [(65 65 65 65) 65]
Test Case: 109 | Input/Output: [(65 65 65 65) 65]
Test Case: 110 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 111 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 112 | Input/Output: [(94 94 94 94) 94]
Test Case: 113 | Input/Output: [(70 70 70 70) 70]
Test Case: 114 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 115 | Input/Output: [(60 60 60 60) 60]
Test Case: 116 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 117 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 118 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 119 | Input/Output: [(58 58 58 58) 58]
Test Case: 120 | Input/Output: [(22 22 22 22) 22]
Test Case: 121 | Input/Output: [(92 92 92 92) 92]
Test Case: 122 | Input/Output: [(5 5 5 5) 5]
Test Case: 123 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 124 | Input/Output: [(31 31 31 31) 31]
Test Case: 125 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 126 | Input/Output: [(31 31 31 31) 31]
Test Case: 127 | Input/Output: [(21 21 21 21) 21]
Test Case: 128 | Input/Output: [(77 77 77 77) 77]
Test Case: 129 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 130 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 131 | Input/Output: [(89 89 89 89) 89]
Test Case: 132 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 133 | Input/Output: [(64 64 64 64) 64]
Test Case: 134 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 135 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 136 | Input/Output: [(21 21 21 21) 21]
Test Case: 137 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 138 | Input/Output: [(71 71 71 71) 71]
Test Case: 139 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 140 | Input/Output: [(64 64 64 64) 64]
Test Case: 141 | Input/Output: [(74 74 74 74) 74]
Test Case: 142 | Input/Output: [(77 77 77 77) 77]
Test Case: 143 | Input/Output: [(51 51 51 51) 51]
Test Case: 144 | Input/Output: [(32 32 32 32) 32]
Test Case: 145 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 146 | Input/Output: [(59 59 59 59) 59]
Test Case: 147 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 148 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 149 | Input/Output: [(100 100 100 100) 100]
Test Case: 150 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 151 | Input/Output: [(87 87 87 87) 87]
Test Case: 152 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 153 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 154 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 155 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 156 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 157 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 158 | Input/Output: [(25 25 25 25) 25]
Test Case: 159 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 160 | Input/Output: [(30 30 30 30) 30]
Test Case: 161 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 162 | Input/Output: [(100 100 100 100) 100]
Test Case: 163 | Input/Output: [(10 10 10 10) 10]
Test Case: 164 | Input/Output: [(82 82 82 82) 82]
Test Case: 165 | Input/Output: [(15 15 15 15) 15]
Test Case: 166 | Input/Output: [(66 66 66 66) 66]
Test Case: 167 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 168 | Input/Output: [(67 67 67 67) 67]
Test Case: 169 | Input/Output: [(82 82 82 82) 82]
Test Case: 170 | Input/Output: [(26 26 26 26) 26]
Test Case: 171 | Input/Output: [(34 34 34 34) 34]
Test Case: 172 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 173 | Input/Output: [(20 20 20 20) 20]
Test Case: 174 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 175 | Input/Output: [(95 95 95 95) 95]
Test Case: 176 | Input/Output: [(61 61 61 61) 61]
Test Case: 177 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 178 | Input/Output: [(52 52 52 52) 52]
Test Case: 179 | Input/Output: [(67 67 67 67) 67]
Test Case: 180 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 181 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 182 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 183 | Input/Output: [(17 17 17 17) 17]
Test Case: 184 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 185 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 186 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 187 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 188 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 189 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 190 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 191 | Input/Output: [(30 30 30 30) 30]
Test Case: 192 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 193 | Input/Output: [(22 22 22 22) 22]
Test Case: 194 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 195 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 196 | Input/Output: [(74 74 74 74) 74]
Test Case: 197 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 198 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 199 | Input/Output: [(6 6 6 6) 6]
Test Case: 200 | Input/Output: [(97 91 74 51) 51]
Test Case: 201 | Input/Output: [(52 26 1 36) 1]
Test Case: 202 | Input/Output: [(40 90 93 25) 25]
Test Case: 203 | Input/Output: [(90 71 83 77) 71]
Test Case: 204 | Input/Output: [(3 33 58 88) 3]
Test Case: 205 | Input/Output: [(45 12 5 14) 5]
Test Case: 206 | Input/Output: [(8 60 34 68) 8]
Test Case: 207 | Input/Output: [(73 22 92 40) 22]
Test Case: 208 | Input/Output: [(33 53 10 46) 10]
Test Case: 209 | Input/Output: [(63 86 57 63) 57]
Test Case: 210 | Input/Output: [(95 46 1 14) 1]
Test Case: 211 | Input/Output: [(42 70 98 91) 42]
Test Case: 212 | Input/Output: [(35 1 46 50) 1]
Test Case: 213 | Input/Output: [(67 30 17 61) 17]
Test Case: 214 | Input/Output: [(82 44 18 94) 18]
Test Case: 215 | Input/Output: [(16 97 32 5) 5]
Test Case: 216 | Input/Output: [(96 84 7 8) 7]
Test Case: 217 | Input/Output: [(80 76 15 60) 15]
Test Case: 218 | Input/Output: [(33 36 94 32) 32]
Test Case: 219 | Input/Output: [(14 68 39 100) 14]
Test Case: 220 | Input/Output: [(53 39 10 7) 7]
Test Case: 221 | Input/Output: [(23 48 97 46) 23]
Test Case: 222 | Input/Output: [(55 34 79 22) 22]
Test Case: 223 | Input/Output: [(10 72 54 17) 10]
Test Case: 224 | Input/Output: [(74 5 25 22) 5]
Test Case: 225 | Input/Output: [(72 75 71 37) 37]
Test Case: 226 | Input/Output: [(20 10 40 88) 10]
Test Case: 227 | Input/Output: [(85 69 100 30) 30]
Test Case: 228 | Input/Output: [(55 23 69 66) 23]
Test Case: 229 | Input/Output: [(7 8 59 81) 7]
Test Case: 230 | Input/Output: [(55 75 41 6) 6]
Test Case: 231 | Input/Output: [(67 91 81 88) 67]
Test Case: 232 | Input/Output: [(97 90 2 19) 2]
Test Case: 233 | Input/Output: [(73 18 61 19) 18]
Test Case: 234 | Input/Output: [(8 94 31 81) 8]
Test Case: 235 | Input/Output: [(48 58 77 19) 19]
Test Case: 236 | Input/Output: [(42 65 12 97) 12]
Test Case: 237 | Input/Output: [(38 17 8 4) 4]
Test Case: 238 | Input/Output: [(40 0 17 96) 0]
Test Case: 239 | Input/Output: [(1 31 51 55) 1]
Test Case: 240 | Input/Output: [(35 35 84 35) 35]
Test Case: 241 | Input/Output: [(64 34 51 84) 34]
Test Case: 242 | Input/Output: [(28 49 92 21) 21]
Test Case: 243 | Input/Output: [(96 45 64 48) 45]
Test Case: 244 | Input/Output: [(67 22 53 48) 22]
Test Case: 245 | Input/Output: [(0 19 37 29) 0]
Test Case: 246 | Input/Output: [(28 73 89 20) 20]
Test Case: 247 | Input/Output: [(84 84 40 20) 20]
Test Case: 248 | Input/Output: [(74 71 67 74) 67]
Test Case: 249 | Input/Output: [(13 58 17 60) 13]
Test Case: 250 | Input/Output: [(61 50 42 44) 42]
Test Case: 251 | Input/Output: [(27 56 10 38) 10]
Test Case: 252 | Input/Output: [(36 88 99 31) 31]
Test Case: 253 | Input/Output: [(29 14 80 25) 14]
Test Case: 254 | Input/Output: [(39 33 10 35) 10]
Test Case: 255 | Input/Output: [(36 62 59 27) 27]
Test Case: 256 | Input/Output: [(31 91 91 75) 31]
Test Case: 257 | Input/Output: [(76 26 71 37) 26]
Test Case: 258 | Input/Output: [(50 82 26 19) 19]
Test Case: 259 | Input/Output: [(83 80 38 43) 38]
Test Case: 260 | Input/Output: [(64 81 32 44) 32]
Test Case: 261 | Input/Output: [(56 49 46 20) 20]
Test Case: 262 | Input/Output: [(30 36 28 100) 28]
Test Case: 263 | Input/Output: [(100 63 11 88) 11]
Test Case: 264 | Input/Output: [(10 47 40 26) 10]
Test Case: 265 | Input/Output: [(75 44 59 60) 44]
Test Case: 266 | Input/Output: [(10 91 11 91) 10]
Test Case: 267 | Input/Output: [(31 24 87 98) 24]
Test Case: 268 | Input/Output: [(72 17 82 43) 17]
Test Case: 269 | Input/Output: [(97 85 91 11) 11]
Test Case: 270 | Input/Output: [(0 91 7 31) 0]
Test Case: 271 | Input/Output: [(79 66 18 13) 13]
Test Case: 272 | Input/Output: [(62 34 97 79) 34]
Test Case: 273 | Input/Output: [(41 88 40 31) 31]
Test Case: 274 | Input/Output: [(60 82 63 52) 52]
Test Case: 275 | Input/Output: [(63 57 40 80) 40]
Test Case: 276 | Input/Output: [(71 56 52 4) 4]
Test Case: 277 | Input/Output: [(37 12 34 81) 12]
Test Case: 278 | Input/Output: [(89 33 0 7) 0]
Test Case: 279 | Input/Output: [(55 25 79 86) 25]
Test Case: 280 | Input/Output: [(70 1 38 93) 1]
Test Case: 281 | Input/Output: [(38 73 40 36) 36]
Test Case: 282 | Input/Output: [(69 16 79 100) 16]
Test Case: 283 | Input/Output: [(61 15 57 31) 15]
Test Case: 284 | Input/Output: [(41 6 78 67) 6]
Test Case: 285 | Input/Output: [(74 28 68 90) 28]
Test Case: 286 | Input/Output: [(42 9 23 89) 9]
Test Case: 287 | Input/Output: [(65 7 47 63) 7]
Test Case: 288 | Input/Output: [(33 49 98 68) 33]
Test Case: 289 | Input/Output: [(88 69 50 70) 50]
Test Case: 290 | Input/Output: [(19 14 11 66) 11]
Test Case: 291 | Input/Output: [(25 2 85 75) 2]
Test Case: 292 | Input/Output: [(49 17 14 97) 14]
Test Case: 293 | Input/Output: [(49 56 6 98) 6]
Test Case: 294 | Input/Output: [(69 38 38 79) 38]
Test Case: 295 | Input/Output: [(30 68 92 41) 30]
Test Case: 296 | Input/Output: [(45 100 83 79) 45]
Test Case: 297 | Input/Output: [(51 35 3 34) 3]
Test Case: 298 | Input/Output: [(49 20 30 25) 20]
Test Case: 299 | Input/Output: [(74 77 17 100) 17]
Test Case: 300 | Input/Output: [(99 100 98 19) 19]
Test Case: 301 | Input/Output: [(43 72 33 71) 33]
Test Case: 302 | Input/Output: [(76 12 49 65) 12]
Test Case: 303 | Input/Output: [(25 78 16 46) 16]
Test Case: 304 | Input/Output: [(4 40 35 23) 4]
Test Case: 305 | Input/Output: [(23 38 37 43) 23]
Test Case: 306 | Input/Output: [(47 94 25 79) 25]
Test Case: 307 | Input/Output: [(34 68 87 9) 9]
Test Case: 308 | Input/Output: [(19 15 21 92) 15]
Test Case: 309 | Input/Output: [(74 69 29 60) 29]
Test Case: 310 | Input/Output: [(100 21 30 42) 21]
Test Case: 311 | Input/Output: [(64 28 77 85) 28]
Test Case: 312 | Input/Output: [(6 64 1 96) 1]
Test Case: 313 | Input/Output: [(49 92 96 46) 46]
Test Case: 314 | Input/Output: [(85 6 70 93) 6]
Test Case: 315 | Input/Output: [(15 62 52 55) 15]
Test Case: 316 | Input/Output: [(71 75 47 41) 41]
Test Case: 317 | Input/Output: [(100 90 29 65) 29]
Test Case: 318 | Input/Output: [(36 76 16 4) 4]
Test Case: 319 | Input/Output: [(26 42 60 36) 26]
Test Case: 320 | Input/Output: [(25 11 21 31) 11]
Test Case: 321 | Input/Output: [(25 68 55 57) 25]
Test Case: 322 | Input/Output: [(0 34 41 14) 0]
Test Case: 323 | Input/Output: [(11 53 98 36) 11]
Test Case: 324 | Input/Output: [(10 77 41 91) 10]
Test Case: 325 | Input/Output: [(89 40 25 37) 25]
Test Case: 326 | Input/Output: [(6 54 47 69) 6]
Test Case: 327 | Input/Output: [(47 74 85 92) 47]
Test Case: 328 | Input/Output: [(50 50 25 46) 25]
Test Case: 329 | Input/Output: [(5 49 48 8) 5]
Test Case: 330 | Input/Output: [(62 78 57 100) 57]
Test Case: 331 | Input/Output: [(87 33 84 24) 24]
Test Case: 332 | Input/Output: [(90 51 11 72) 11]
Test Case: 333 | Input/Output: [(77 82 64 51) 51]
Test Case: 334 | Input/Output: [(92 5 39 14) 5]
Test Case: 335 | Input/Output: [(97 51 64 39) 39]
Test Case: 336 | Input/Output: [(75 75 71 44) 44]
Test Case: 337 | Input/Output: [(48 89 51 32) 32]
Test Case: 338 | Input/Output: [(74 95 97 23) 23]
Test Case: 339 | Input/Output: [(77 7 79 56) 7]
Test Case: 340 | Input/Output: [(62 53 76 67) 53]
Test Case: 341 | Input/Output: [(46 33 65 27) 27]
Test Case: 342 | Input/Output: [(70 5 85 100) 5]
Test Case: 343 | Input/Output: [(71 33 19 45) 19]
Test Case: 344 | Input/Output: [(32 67 70 0) 0]
Test Case: 345 | Input/Output: [(62 93 35 21) 21]
Test Case: 346 | Input/Output: [(90 43 89 47) 43]
Test Case: 347 | Input/Output: [(8 39 35 90) 8]
Test Case: 348 | Input/Output: [(21 91 83 54) 21]
Test Case: 349 | Input/Output: [(4 25 79 69) 4]
Test Case: 350 | Input/Output: [(31 76 8 59) 8]
Test Case: 351 | Input/Output: [(11 33 60 29) 11]
Test Case: 352 | Input/Output: [(44 71 40 71) 40]
Test Case: 353 | Input/Output: [(61 35 0 46) 0]
Test Case: 354 | Input/Output: [(43 5 72 42) 5]
Test Case: 355 | Input/Output: [(81 1 9 9) 1]
Test Case: 356 | Input/Output: [(58 42 86 66) 42]
Test Case: 357 | Input/Output: [(82 60 78 36) 36]
Test Case: 358 | Input/Output: [(5 70 34 19) 5]
Test Case: 359 | Input/Output: [(18 72 56 91) 18]
Test Case: 360 | Input/Output: [(48 26 10 44) 10]
Test Case: 361 | Input/Output: [(95 29 86 92) 29]
Test Case: 362 | Input/Output: [(63 9 52 77) 9]
Test Case: 363 | Input/Output: [(72 51 16 7) 7]
Test Case: 364 | Input/Output: [(82 89 61 43) 43]
Test Case: 365 | Input/Output: [(82 100 65 65) 65]
Test Case: 366 | Input/Output: [(64 48 87 7) 7]
Test Case: 367 | Input/Output: [(23 47 41 46) 23]
Test Case: 368 | Input/Output: [(43 24 52 11) 11]
Test Case: 369 | Input/Output: [(80 13 85 50) 13]
Test Case: 370 | Input/Output: [(97 37 87 23) 23]
Test Case: 371 | Input/Output: [(30 16 84 41) 16]
Test Case: 372 | Input/Output: [(67 51 47 45) 45]
Test Case: 373 | Input/Output: [(33 54 70 38) 33]
Test Case: 374 | Input/Output: [(93 59 90 96) 59]
Test Case: 375 | Input/Output: [(52 76 92 5) 5]
Test Case: 376 | Input/Output: [(69 60 8 48) 8]
Test Case: 377 | Input/Output: [(16 34 79 86) 16]
Test Case: 378 | Input/Output: [(11 60 99 1) 1]
Test Case: 379 | Input/Output: [(95 17 33 13) 13]
Test Case: 380 | Input/Output: [(5 34 62 52) 5]
Test Case: 381 | Input/Output: [(90 61 96 64) 61]
Test Case: 382 | Input/Output: [(41 57 90 54) 41]
Test Case: 383 | Input/Output: [(81 20 46 10) 10]
Test Case: 384 | Input/Output: [(18 63 57 26) 18]
Test Case: 385 | Input/Output: [(95 52 53 25) 25]
Test Case: 386 | Input/Output: [(25 29 86 61) 25]
Test Case: 387 | Input/Output: [(5 95 19 8) 5]
Test Case: 388 | Input/Output: [(9 54 8 19) 8]
Test Case: 389 | Input/Output: [(0 74 7 94) 0]
Test Case: 390 | Input/Output: [(63 71 44 100) 44]
Test Case: 391 | Input/Output: [(22 62 73 79) 22]
Test Case: 392 | Input/Output: [(83 65 79 14) 14]
Test Case: 393 | Input/Output: [(11 88 51 20) 11]
Test Case: 394 | Input/Output: [(81 96 62 95) 62]
Test Case: 395 | Input/Output: [(5 70 37 25) 5]
Test Case: 396 | Input/Output: [(59 53 72 90) 53]
Test Case: 397 | Input/Output: [(26 41 64 0) 0]
Test Case: 398 | Input/Output: [(32 79 71 23) 23]
Test Case: 399 | Input/Output: [(34 53 78 9) 9]
Test Case: 400 | Input/Output: [(25 6 20 18) 6]
Test Case: 401 | Input/Output: [(26 62 39 -37) -37]
Test Case: 402 | Input/Output: [(51 -59 -11 52) -59]
Test Case: 403 | Input/Output: [(-72 89 99 -95) -95]
Test Case: 404 | Input/Output: [(60 -5 7 -93) -93]
Test Case: 405 | Input/Output: [(4 -7 12 28) -7]
Test Case: 406 | Input/Output: [(-57 -94 71 19) -94]
Test Case: 407 | Input/Output: [(58 -45 -28 -5) -45]
Test Case: 408 | Input/Output: [(-6 91 97 -75) -75]
Test Case: 409 | Input/Output: [(99 -55 80 -75) -75]
Test Case: 410 | Input/Output: [(-9 17 88 -53) -53]
Test Case: 411 | Input/Output: [(59 -54 52 -99) -99]
Test Case: 412 | Input/Output: [(-50 85 -51 -66) -66]
Test Case: 413 | Input/Output: [(65 -83 64 91) -83]
Test Case: 414 | Input/Output: [(82 -38 -88 -68) -88]
Test Case: 415 | Input/Output: [(-93 -93 -66 -8) -93]
Test Case: 416 | Input/Output: [(85 -9 37 17) -9]
Test Case: 417 | Input/Output: [(-21 -81 79 -71) -81]
Test Case: 418 | Input/Output: [(38 -43 81 9) -43]
Test Case: 419 | Input/Output: [(-66 31 68 -51) -66]
Test Case: 420 | Input/Output: [(-24 5 78 98) -24]
Test Case: 421 | Input/Output: [(5 76 2 -82) -82]
Test Case: 422 | Input/Output: [(-75 28 3 -86) -86]
Test Case: 423 | Input/Output: [(-78 16 91 -44) -78]
Test Case: 424 | Input/Output: [(20 51 24 -38) -38]
Test Case: 425 | Input/Output: [(-72 -45 -42 -64) -72]
Test Case: 426 | Input/Output: [(27 48 59 53) 27]
Test Case: 427 | Input/Output: [(41 -36 74 -27) -36]
Test Case: 428 | Input/Output: [(-4 -61 83 3) -61]
Test Case: 429 | Input/Output: [(65 93 -28 -78) -78]
Test Case: 430 | Input/Output: [(72 -67 -68 -7) -68]
Test Case: 431 | Input/Output: [(73 -49 -56 24) -56]
Test Case: 432 | Input/Output: [(45 -6 -4 -38) -38]
Test Case: 433 | Input/Output: [(60 -89 -90 -29) -90]
Test Case: 434 | Input/Output: [(-42 80 51 75) -42]
Test Case: 435 | Input/Output: [(-55 -78 -51 1) -78]
Test Case: 436 | Input/Output: [(20 81 86 -76) -76]
Test Case: 437 | Input/Output: [(-66 68 49 18) -66]
Test Case: 438 | Input/Output: [(70 2 -8 84) -8]
Test Case: 439 | Input/Output: [(11 -75 94 -95) -95]
Test Case: 440 | Input/Output: [(9 75 82 -58) -58]
Test Case: 441 | Input/Output: [(-24 29 50 -93) -93]
Test Case: 442 | Input/Output: [(-65 83 85 100) -65]
Test Case: 443 | Input/Output: [(-30 -53 47 71) -53]
Test Case: 444 | Input/Output: [(-5 -23 4 -17) -23]
Test Case: 445 | Input/Output: [(70 -11 -38 2) -38]
Test Case: 446 | Input/Output: [(16 62 -86 9) -86]
Test Case: 447 | Input/Output: [(59 85 50 65) 50]
Test Case: 448 | Input/Output: [(-45 23 10 27) -45]
Test Case: 449 | Input/Output: [(-58 95 91 18) -58]
Test Case: 450 | Input/Output: [(8 17 86 43) 8]
Test Case: 451 | Input/Output: [(26 100 -38 87) -38]
Test Case: 452 | Input/Output: [(-45 7 -8 13) -45]
Test Case: 453 | Input/Output: [(100 79 27 21) 21]
Test Case: 454 | Input/Output: [(-66 67 25 88) -66]
Test Case: 455 | Input/Output: [(29 45 30 -15) -15]
Test Case: 456 | Input/Output: [(-8 -73 -92 -80) -92]
Test Case: 457 | Input/Output: [(80 93 45 -57) -57]
Test Case: 458 | Input/Output: [(-94 7 6 3) -94]
Test Case: 459 | Input/Output: [(53 24 -85 -40) -85]
Test Case: 460 | Input/Output: [(96 84 93 59) 59]
Test Case: 461 | Input/Output: [(-82 -90 16 12) -90]
Test Case: 462 | Input/Output: [(-96 27 98 63) -96]
Test Case: 463 | Input/Output: [(-94 32 -25 98) -94]
Test Case: 464 | Input/Output: [(-5 99 47 49) -5]
Test Case: 465 | Input/Output: [(-44 -38 -91 -60) -91]
Test Case: 466 | Input/Output: [(47 -31 -11 26) -31]
Test Case: 467 | Input/Output: [(85 -77 -72 18) -77]
Test Case: 468 | Input/Output: [(25 71 85 -59) -59]
Test Case: 469 | Input/Output: [(-57 -36 -71 75) -71]
Test Case: 470 | Input/Output: [(88 66 -80 80) -80]
Test Case: 471 | Input/Output: [(-96 -99 -73 42) -99]
Test Case: 472 | Input/Output: [(-34 72 -71 -53) -71]
Test Case: 473 | Input/Output: [(76 7 71 62) 7]
Test Case: 474 | Input/Output: [(92 14 22 81) 14]
Test Case: 475 | Input/Output: [(46 28 -79 -35) -79]
Test Case: 476 | Input/Output: [(44 38 -61 -89) -89]
Test Case: 477 | Input/Output: [(11 -3 -36 -32) -36]
Test Case: 478 | Input/Output: [(-62 84 -1 -13) -62]
Test Case: 479 | Input/Output: [(88 61 -27 -87) -87]
Test Case: 480 | Input/Output: [(10 49 11 10) 10]
Test Case: 481 | Input/Output: [(90 -18 -76 -93) -93]
Test Case: 482 | Input/Output: [(-10 -90 58 -36) -90]
Test Case: 483 | Input/Output: [(-4 -75 52 82) -75]
Test Case: 484 | Input/Output: [(34 64 49 53) 34]
Test Case: 485 | Input/Output: [(-30 -97 -62 -2) -97]
Test Case: 486 | Input/Output: [(2 58 -29 26) -29]
Test Case: 487 | Input/Output: [(66 -84 41 46) -84]
Test Case: 488 | Input/Output: [(-78 64 -35 37) -78]
Test Case: 489 | Input/Output: [(90 -18 60 89) -18]
Test Case: 490 | Input/Output: [(99 89 14 40) 14]
Test Case: 491 | Input/Output: [(-16 -63 -56 53) -63]
Test Case: 492 | Input/Output: [(-77 53 46 -43) -77]
Test Case: 493 | Input/Output: [(75 -66 95 42) -66]
Test Case: 494 | Input/Output: [(-53 -45 23 41) -53]
Test Case: 495 | Input/Output: [(92 -98 -16 95) -98]
Test Case: 496 | Input/Output: [(-60 -39 -49 0) -60]
Test Case: 497 | Input/Output: [(-98 -91 18 -48) -98]
Test Case: 498 | Input/Output: [(79 47 -87 -58) -87]
Test Case: 499 | Input/Output: [(14 -24 30 -2) -24]
Test Case: 500 | Input/Output: [(-13 -78 82 86) -78]
Test Case: 501 | Input/Output: [(-34 -8 88 69) -34]
Test Case: 502 | Input/Output: [(-69 58 87 4) -69]
Test Case: 503 | Input/Output: [(-46 12 -77 -86) -86]
Test Case: 504 | Input/Output: [(65 -1 1 -19) -19]
Test Case: 505 | Input/Output: [(-95 43 18 2) -95]
Test Case: 506 | Input/Output: [(74 96 -54 69) -54]
Test Case: 507 | Input/Output: [(0 90 7 8) 0]
Test Case: 508 | Input/Output: [(67 53 -80 78) -80]
Test Case: 509 | Input/Output: [(84 -53 -85 -71) -85]
Test Case: 510 | Input/Output: [(24 84 14 -53) -53]
Test Case: 511 | Input/Output: [(2 29 58 84) 2]
Test Case: 512 | Input/Output: [(-75 -58 -41 -95) -95]
Test Case: 513 | Input/Output: [(-89 83 -20 89) -89]
Test Case: 514 | Input/Output: [(-11 -51 -67 -83) -83]
Test Case: 515 | Input/Output: [(97 -91 88 70) -91]
Test Case: 516 | Input/Output: [(80 -5 59 43) -5]
Test Case: 517 | Input/Output: [(-88 78 26 -53) -88]
Test Case: 518 | Input/Output: [(-47 -62 71 69) -62]
Test Case: 519 | Input/Output: [(18 -61 -87 29) -87]
Test Case: 520 | Input/Output: [(-47 80 18 77) -47]
Test Case: 521 | Input/Output: [(45 -28 32 54) -28]
Test Case: 522 | Input/Output: [(43 -51 -82 -1) -82]
Test Case: 523 | Input/Output: [(77 64 -29 -14) -29]
Test Case: 524 | Input/Output: [(65 -38 95 65) -38]
Test Case: 525 | Input/Output: [(-92 30 75 32) -92]
Test Case: 526 | Input/Output: [(0 90 -43 -20) -43]
Test Case: 527 | Input/Output: [(72 -48 33 12) -48]
Test Case: 528 | Input/Output: [(-17 -53 67 81) -53]
Test Case: 529 | Input/Output: [(54 63 -68 -36) -68]
Test Case: 530 | Input/Output: [(8 3 -34 25) -34]
Test Case: 531 | Input/Output: [(-70 -19 -77 26) -77]
Test Case: 532 | Input/Output: [(8 -21 -62 -25) -62]
Test Case: 533 | Input/Output: [(-69 -46 4 -29) -69]
Test Case: 534 | Input/Output: [(19 -95 78 -74) -95]
Test Case: 535 | Input/Output: [(-52 70 46 -16) -52]
Test Case: 536 | Input/Output: [(-47 -85 -1 -3) -85]
Test Case: 537 | Input/Output: [(-77 -22 -69 -74) -77]
Test Case: 538 | Input/Output: [(92 -91 1 43) -91]
Test Case: 539 | Input/Output: [(-88 -8 -69 71) -88]
Test Case: 540 | Input/Output: [(39 61 -36 75) -36]
Test Case: 541 | Input/Output: [(-99 89 6 38) -99]
Test Case: 542 | Input/Output: [(64 45 -93 -42) -93]
Test Case: 543 | Input/Output: [(-53 46 47 -11) -53]
Test Case: 544 | Input/Output: [(-94 -27 95 69) -94]
Test Case: 545 | Input/Output: [(-56 -25 -36 -59) -59]
Test Case: 546 | Input/Output: [(39 76 -11 17) -11]
Test Case: 547 | Input/Output: [(-8 -23 -91 -24) -91]
Test Case: 548 | Input/Output: [(3 -96 -34 2) -96]
Test Case: 549 | Input/Output: [(61 30 26 7) 7]
Test Case: 550 | Input/Output: [(33 -55 -8 -56) -56]
Test Case: 551 | Input/Output: [(-5 -34 -9 79) -34]
Test Case: 552 | Input/Output: [(29 -58 65 -29) -58]
Test Case: 553 | Input/Output: [(-17 -67 -87 -7) -87]
Test Case: 554 | Input/Output: [(-11 -2 90 -94) -94]
Test Case: 555 | Input/Output: [(67 -73 43 -25) -73]
Test Case: 556 | Input/Output: [(-24 60 -13 -35) -35]
Test Case: 557 | Input/Output: [(72 -49 79 -53) -53]
Test Case: 558 | Input/Output: [(-92 -69 45 -55) -92]
Test Case: 559 | Input/Output: [(-96 -80 -71 81) -96]
Test Case: 560 | Input/Output: [(82 49 51 77) 49]
Test Case: 561 | Input/Output: [(-15 -36 -79 -49) -79]
Test Case: 562 | Input/Output: [(7 -46 69 -58) -58]
Test Case: 563 | Input/Output: [(98 90 65 11) 11]
Test Case: 564 | Input/Output: [(27 0 93 60) 0]
Test Case: 565 | Input/Output: [(-6 -54 -37 66) -54]
Test Case: 566 | Input/Output: [(-100 9 -56 40) -100]
Test Case: 567 | Input/Output: [(-18 -63 -74 -78) -78]
Test Case: 568 | Input/Output: [(-14 41 -9 -16) -16]
Test Case: 569 | Input/Output: [(28 87 89 -68) -68]
Test Case: 570 | Input/Output: [(-26 -71 78 -1) -71]
Test Case: 571 | Input/Output: [(-75 83 8 -10) -75]
Test Case: 572 | Input/Output: [(-23 100 -96 -99) -99]
Test Case: 573 | Input/Output: [(-38 65 -55 46) -55]
Test Case: 574 | Input/Output: [(-83 -55 -24 50) -83]
Test Case: 575 | Input/Output: [(60 -74 -16 -64) -74]
Test Case: 576 | Input/Output: [(2 -33 10 -67) -67]
Test Case: 577 | Input/Output: [(28 -11 39 -10) -11]
Test Case: 578 | Input/Output: [(10 -31 94 41) -31]
Test Case: 579 | Input/Output: [(72 18 12 51) 12]
Test Case: 580 | Input/Output: [(16 63 91 -27) -27]
Test Case: 581 | Input/Output: [(68 56 21 17) 17]
Test Case: 582 | Input/Output: [(-5 -54 2 -44) -54]
Test Case: 583 | Input/Output: [(-18 -51 -88 -49) -88]
Test Case: 584 | Input/Output: [(58 -47 46 32) -47]
Test Case: 585 | Input/Output: [(-38 -25 63 -34) -38]
Test Case: 586 | Input/Output: [(-87 -97 -56 -73) -97]
Test Case: 587 | Input/Output: [(-90 -79 -29 55) -90]
Test Case: 588 | Input/Output: [(-87 37 33 -37) -87]
Test Case: 589 | Input/Output: [(50 -49 99 -46) -49]
Test Case: 590 | Input/Output: [(-18 -86 48 88) -86]
Test Case: 591 | Input/Output: [(74 42 -62 27) -62]
Test Case: 592 | Input/Output: [(65 -39 -11 28) -39]
Test Case: 593 | Input/Output: [(54 -11 -2 -12) -12]
Test Case: 594 | Input/Output: [(-19 67 27 -52) -52]
Test Case: 595 | Input/Output: [(-40 63 40 75) -40]
Test Case: 596 | Input/Output: [(-100 -58 -26 -70) -100]
Test Case: 597 | Input/Output: [(78 59 -75 76) -75]
Test Case: 598 | Input/Output: [(80 4 66 10) 4]
Test Case: 599 | Input/Output: [(17 -67 -6 38) -67]
Test Case: 600 | Input/Output: [(-34 -70 99 -25) -70]
Test Case: 601 | Input/Output: [(-23 -71 78 -72) -72]
Test Case: 602 | Input/Output: [(46 89 57 28) 28]
Test Case: 603 | Input/Output: [(16 1 -76 55) -76]
Test Case: 604 | Input/Output: [(25 -99 -53 34) -99]
Test Case: 605 | Input/Output: [(78 -39 -18 28) -39]
Test Case: 606 | Input/Output: [(-66 -88 -31 -85) -88]
Test Case: 607 | Input/Output: [(-54 5 -73 32) -73]
Test Case: 608 | Input/Output: [(62 -91 -77 -36) -91]
Test Case: 609 | Input/Output: [(26 -98 -88 54) -98]
Test Case: 610 | Input/Output: [(20 88 -8 -44) -44]
Test Case: 611 | Input/Output: [(-85 -89 1 -38) -89]
Test Case: 612 | Input/Output: [(-79 -87 -25 -46) -87]
Test Case: 613 | Input/Output: [(-57 -90 -77 -43) -90]
Test Case: 614 | Input/Output: [(-82 -95 -34 -48) -95]
Test Case: 615 | Input/Output: [(59 -28 90 47) -28]
Test Case: 616 | Input/Output: [(10 -94 -65 73) -94]
Test Case: 617 | Input/Output: [(70 31 -100 -91) -100]
Test Case: 618 | Input/Output: [(44 -65 -66 -64) -66]
Test Case: 619 | Input/Output: [(-43 -76 -38 30) -76]
Test Case: 620 | Input/Output: [(-23 50 -67 69) -67]
Test Case: 621 | Input/Output: [(-67 -25 20 -52) -67]
Test Case: 622 | Input/Output: [(63 -47 -5 -56) -56]
Test Case: 623 | Input/Output: [(67 -76 15 67) -76]
Test Case: 624 | Input/Output: [(-85 99 74 -34) -85]
Test Case: 625 | Input/Output: [(94 31 57 -80) -80]
Test Case: 626 | Input/Output: [(-30 -69 65 71) -69]
Test Case: 627 | Input/Output: [(-79 89 89 -83) -83]
Test Case: 628 | Input/Output: [(-4 5 -60 74) -60]
Test Case: 629 | Input/Output: [(-59 52 -99 69) -99]
Test Case: 630 | Input/Output: [(96 81 98 -36) -36]
Test Case: 631 | Input/Output: [(19 62 -58 -16) -58]
Test Case: 632 | Input/Output: [(-93 -4 56 -24) -93]
Test Case: 633 | Input/Output: [(34 67 8 -16) -16]
Test Case: 634 | Input/Output: [(-72 70 20 -24) -72]
Test Case: 635 | Input/Output: [(-29 22 -81 86) -81]
Test Case: 636 | Input/Output: [(95 -57 -57 -33) -57]
Test Case: 637 | Input/Output: [(60 27 41 -83) -83]
Test Case: 638 | Input/Output: [(-26 83 37 46) -26]
Test Case: 639 | Input/Output: [(80 -35 -90 -97) -97]
Test Case: 640 | Input/Output: [(61 24 -41 -37) -41]
Test Case: 641 | Input/Output: [(38 -34 -50 69) -50]
Test Case: 642 | Input/Output: [(6 -2 85 -32) -32]
Test Case: 643 | Input/Output: [(-73 44 -50 96) -73]
Test Case: 644 | Input/Output: [(50 -20 6 -12) -20]
Test Case: 645 | Input/Output: [(-61 -96 21 43) -96]
Test Case: 646 | Input/Output: [(65 -66 91 52) -66]
Test Case: 647 | Input/Output: [(-51 39 -95 -31) -95]
Test Case: 648 | Input/Output: [(13 3 15 66) 3]
Test Case: 649 | Input/Output: [(-29 -55 -9 79) -55]
Test Case: 650 | Input/Output: [(-15 63 -32 12) -32]
Test Case: 651 | Input/Output: [(38 75 49 -71) -71]
Test Case: 652 | Input/Output: [(-27 49 92 -30) -30]
Test Case: 653 | Input/Output: [(11 -56 -33 -4) -56]
Test Case: 654 | Input/Output: [(14 19 45 1) 1]
Test Case: 655 | Input/Output: [(-20 68 13 -42) -42]
Test Case: 656 | Input/Output: [(-89 30 -89 54) -89]
Test Case: 657 | Input/Output: [(-73 -22 63 -76) -76]
Test Case: 658 | Input/Output: [(-52 -67 -19 -12) -67]
Test Case: 659 | Input/Output: [(-71 -35 37 55) -71]
Test Case: 660 | Input/Output: [(-20 37 -32 84) -32]
Test Case: 661 | Input/Output: [(52 18 17 -67) -67]
Test Case: 662 | Input/Output: [(-95 68 14 -54) -95]
Test Case: 663 | Input/Output: [(42 -26 -61 -58) -61]
Test Case: 664 | Input/Output: [(-79 -80 -3 -48) -80]
Test Case: 665 | Input/Output: [(71 6 -58 97) -58]
Test Case: 666 | Input/Output: [(-26 40 20 -93) -93]
Test Case: 667 | Input/Output: [(-6 -27 -21 -35) -35]
Test Case: 668 | Input/Output: [(-2 -89 28 88) -89]
Test Case: 669 | Input/Output: [(-97 -15 29 75) -97]
Test Case: 670 | Input/Output: [(-91 1 -29 77) -91]
Test Case: 671 | Input/Output: [(2 66 -44 23) -44]
Test Case: 672 | Input/Output: [(-35 86 -22 -88) -88]
Test Case: 673 | Input/Output: [(-40 -62 4 -10) -62]
Test Case: 674 | Input/Output: [(-20 84 -63 29) -63]
Test Case: 675 | Input/Output: [(-87 -57 3 -43) -87]
Test Case: 676 | Input/Output: [(-3 -80 26 -32) -80]
Test Case: 677 | Input/Output: [(70 -96 -70 35) -96]
Test Case: 678 | Input/Output: [(-26 -25 90 -92) -92]
Test Case: 679 | Input/Output: [(57 -24 -86 11) -86]
Test Case: 680 | Input/Output: [(63 -99 -81 -5) -99]
Test Case: 681 | Input/Output: [(34 -66 -56 5) -66]
Test Case: 682 | Input/Output: [(-76 3 3 -94) -94]
Test Case: 683 | Input/Output: [(20 -13 20 79) -13]
Test Case: 684 | Input/Output: [(60 78 13 45) 13]
Test Case: 685 | Input/Output: [(86 -1 49 -57) -57]
Test Case: 686 | Input/Output: [(-41 16 39 88) -41]
Test Case: 687 | Input/Output: [(-10 -55 33 -21) -55]
Test Case: 688 | Input/Output: [(-37 -88 63 68) -88]
Test Case: 689 | Input/Output: [(96 -87 -92 68) -92]
Test Case: 690 | Input/Output: [(94 70 -48 54) -48]
Test Case: 691 | Input/Output: [(-78 -69 25 -34) -78]
Test Case: 692 | Input/Output: [(78 -80 39 55) -80]
Test Case: 693 | Input/Output: [(43 77 36 -8) -8]
Test Case: 694 | Input/Output: [(-75 4 -100 -49) -100]
Test Case: 695 | Input/Output: [(-46 36 -8 -32) -46]
Test Case: 696 | Input/Output: [(-41 7 22 70) -41]
Test Case: 697 | Input/Output: [(97 -44 -64 4) -64]
Test Case: 698 | Input/Output: [(43 -67 -92 -12) -92]
Test Case: 699 | Input/Output: [(27 -46 72 -23) -46]
Test Case: 700 | Input/Output: [(-42 55 89 48) -42]
Test Case: 701 | Input/Output: [(-42 -62 51 54) -62]
Test Case: 702 | Input/Output: [(-88 22 -89 -50) -89]
Test Case: 703 | Input/Output: [(99 97 -15 -12) -15]
Test Case: 704 | Input/Output: [(-12 -68 96 98) -68]
Test Case: 705 | Input/Output: [(38 -17 -22 -5) -22]
Test Case: 706 | Input/Output: [(-44 99 78 -87) -87]
Test Case: 707 | Input/Output: [(5 -78 23 64) -78]
Test Case: 708 | Input/Output: [(41 -30 65 -91) -91]
Test Case: 709 | Input/Output: [(93 -10 46 -59) -59]
Test Case: 710 | Input/Output: [(85 2 65 -34) -34]
Test Case: 711 | Input/Output: [(97 53 14 -69) -69]
Test Case: 712 | Input/Output: [(32 14 93 28) 14]
Test Case: 713 | Input/Output: [(-12 70 -18 -53) -53]
Test Case: 714 | Input/Output: [(85 -36 -58 -64) -64]
Test Case: 715 | Input/Output: [(-18 17 -23 -28) -28]
Test Case: 716 | Input/Output: [(-76 -5 22 -59) -76]
Test Case: 717 | Input/Output: [(-94 -17 -1 60) -94]
Test Case: 718 | Input/Output: [(-84 -64 -55 -42) -84]
Test Case: 719 | Input/Output: [(49 -12 -12 -83) -83]
Test Case: 720 | Input/Output: [(-23 82 25 -65) -65]
Test Case: 721 | Input/Output: [(-44 -33 -49 45) -49]
Test Case: 722 | Input/Output: [(-78 -51 14 71) -78]
Test Case: 723 | Input/Output: [(25 84 -78 67) -78]
Test Case: 724 | Input/Output: [(-14 22 27 66) -14]
Test Case: 725 | Input/Output: [(58 79 -94 32) -94]
Test Case: 726 | Input/Output: [(80 -89 -67 82) -89]
Test Case: 727 | Input/Output: [(-44 -1 -12 49) -44]
Test Case: 728 | Input/Output: [(91 -34 80 -7) -34]
Test Case: 729 | Input/Output: [(-91 73 42 -91) -91]
Test Case: 730 | Input/Output: [(-9 89 92 -8) -9]
Test Case: 731 | Input/Output: [(98 -14 31 30) -14]
Test Case: 732 | Input/Output: [(4 98 42 28) 4]
Test Case: 733 | Input/Output: [(-54 -23 52 74) -54]
Test Case: 734 | Input/Output: [(17 -48 -17 -33) -48]
Test Case: 735 | Input/Output: [(-61 -90 -11 8) -90]
Test Case: 736 | Input/Output: [(72 76 -83 20) -83]
Test Case: 737 | Input/Output: [(49 78 -14 86) -14]
Test Case: 738 | Input/Output: [(40 -24 -74 -44) -74]
Test Case: 739 | Input/Output: [(-32 -23 -8 37) -32]
Test Case: 740 | Input/Output: [(-6 -21 3 -50) -50]
Test Case: 741 | Input/Output: [(-94 63 -9 -26) -94]
Test Case: 742 | Input/Output: [(77 -24 0 77) -24]
Test Case: 743 | Input/Output: [(46 -100 17 0) -100]
Test Case: 744 | Input/Output: [(-5 6 -28 -40) -40]
Test Case: 745 | Input/Output: [(12 -16 15 -22) -22]
Test Case: 746 | Input/Output: [(89 59 -16 -13) -16]
Test Case: 747 | Input/Output: [(-89 42 98 -82) -89]
Test Case: 748 | Input/Output: [(62 34 98 -23) -23]
Test Case: 749 | Input/Output: [(-96 22 -14 70) -96]
Test Case: 750 | Input/Output: [(-61 -94 2 11) -94]
Test Case: 751 | Input/Output: [(-16 29 85 -27) -27]
Test Case: 752 | Input/Output: [(81 35 70 -90) -90]
Test Case: 753 | Input/Output: [(-45 48 30 -35) -45]
Test Case: 754 | Input/Output: [(53 -18 76 -52) -52]
Test Case: 755 | Input/Output: [(80 34 70 -25) -25]
Test Case: 756 | Input/Output: [(14 -23 -27 -79) -79]
Test Case: 757 | Input/Output: [(-28 -90 -9 34) -90]
Test Case: 758 | Input/Output: [(39 -2 -20 31) -20]
Test Case: 759 | Input/Output: [(32 -86 -43 -61) -86]
Test Case: 760 | Input/Output: [(22 82 18 56) 18]
Test Case: 761 | Input/Output: [(52 -63 -33 2) -63]
Test Case: 762 | Input/Output: [(81 -18 -71 -81) -81]
Test Case: 763 | Input/Output: [(82 35 66 -12) -12]
Test Case: 764 | Input/Output: [(-94 83 -17 -13) -94]
Test Case: 765 | Input/Output: [(0 -71 -38 -50) -71]
Test Case: 766 | Input/Output: [(98 -17 14 -28) -28]
Test Case: 767 | Input/Output: [(16 100 26 -83) -83]
Test Case: 768 | Input/Output: [(59 97 -39 -69) -69]
Test Case: 769 | Input/Output: [(-53 10 -97 -43) -97]
Test Case: 770 | Input/Output: [(69 60 22 -82) -82]
Test Case: 771 | Input/Output: [(3 45 34 -39) -39]
Test Case: 772 | Input/Output: [(-6 -98 -68 67) -98]
Test Case: 773 | Input/Output: [(-45 19 -99 33) -99]
Test Case: 774 | Input/Output: [(-17 84 84 -95) -95]
Test Case: 775 | Input/Output: [(-3 -38 -8 41) -38]
Test Case: 776 | Input/Output: [(-57 -69 -49 -62) -69]
Test Case: 777 | Input/Output: [(50 -8 93 34) -8]
Test Case: 778 | Input/Output: [(76 -72 -55 0) -72]
Test Case: 779 | Input/Output: [(-35 -90 -63 -22) -90]
Test Case: 780 | Input/Output: [(76 -62 -11 95) -62]
Test Case: 781 | Input/Output: [(-96 56 71 82) -96]
Test Case: 782 | Input/Output: [(-50 83 -21 -3) -50]
Test Case: 783 | Input/Output: [(81 24 32 81) 24]
Test Case: 784 | Input/Output: [(0 -25 77 20) -25]
Test Case: 785 | Input/Output: [(83 44 67 -90) -90]
Test Case: 786 | Input/Output: [(49 73 -58 -50) -58]
Test Case: 787 | Input/Output: [(40 76 -71 -94) -94]
Test Case: 788 | Input/Output: [(56 19 12 -87) -87]
Test Case: 789 | Input/Output: [(2 57 -58 66) -58]
Test Case: 790 | Input/Output: [(13 72 41 72) 13]
Test Case: 791 | Input/Output: [(-30 -24 50 1) -30]
Test Case: 792 | Input/Output: [(47 5 23 63) 5]
Test Case: 793 | Input/Output: [(36 52 -86 9) -86]
Test Case: 794 | Input/Output: [(-97 -44 95 89) -97]
Test Case: 795 | Input/Output: [(-33 -24 -17 4) -33]
Test Case: 796 | Input/Output: [(16 36 66 67) 16]
Test Case: 797 | Input/Output: [(-3 52 45 -62) -62]
Test Case: 798 | Input/Output: [(24 36 -39 26) -39]
Test Case: 799 | Input/Output: [(45 -12 -49 -77) -77]
Test Case: 800 | Input/Output: [(45 15 34 11) 11]
Test Case: 801 | Input/Output: [(4 -3 -39 -64) -64]
Test Case: 802 | Input/Output: [(80 49 -38 75) -38]
Test Case: 803 | Input/Output: [(-91 94 88 -58) -91]
Test Case: 804 | Input/Output: [(-81 -18 -81 38) -81]
Test Case: 805 | Input/Output: [(53 34 90 -83) -83]
Test Case: 806 | Input/Output: [(32 39 -9 48) -9]
Test Case: 807 | Input/Output: [(33 -38 -44 -58) -58]
Test Case: 808 | Input/Output: [(-74 25 -89 -88) -89]
Test Case: 809 | Input/Output: [(-53 -23 37 100) -53]
Test Case: 810 | Input/Output: [(7 63 90 -77) -77]
Test Case: 811 | Input/Output: [(11 -4 65 -54) -54]
Test Case: 812 | Input/Output: [(-24 5 -93 -89) -93]
Test Case: 813 | Input/Output: [(-3 86 -96 45) -96]
Test Case: 814 | Input/Output: [(-73 52 12 66) -73]
Test Case: 815 | Input/Output: [(99 -9 -6 -29) -29]
Test Case: 816 | Input/Output: [(-81 64 17 35) -81]
Test Case: 817 | Input/Output: [(52 -46 -19 92) -46]
Test Case: 818 | Input/Output: [(64 26 30 50) 26]
Test Case: 819 | Input/Output: [(100 5 0 1) 0]
Test Case: 820 | Input/Output: [(10 29 15 40) 10]
Test Case: 821 | Input/Output: [(11 93 26 -79) -79]
Test Case: 822 | Input/Output: [(32 11 62 60) 11]
Test Case: 823 | Input/Output: [(-36 8 -35 91) -36]
Test Case: 824 | Input/Output: [(19 33 28 -89) -89]
Test Case: 825 | Input/Output: [(-93 74 -1 -99) -99]
Test Case: 826 | Input/Output: [(95 -29 27 35) -29]
Test Case: 827 | Input/Output: [(76 -43 17 34) -43]
Test Case: 828 | Input/Output: [(-5 -12 -27 19) -27]
Test Case: 829 | Input/Output: [(-10 -2 93 -92) -92]
Test Case: 830 | Input/Output: [(96 21 41 69) 21]
Test Case: 831 | Input/Output: [(68 -80 75 -45) -80]
Test Case: 832 | Input/Output: [(-6 -42 -63 -64) -64]
Test Case: 833 | Input/Output: [(-4 -93 55 25) -93]
Test Case: 834 | Input/Output: [(75 71 -74 -86) -86]
Test Case: 835 | Input/Output: [(74 49 -78 71) -78]
Test Case: 836 | Input/Output: [(-12 62 -9 56) -12]
Test Case: 837 | Input/Output: [(-49 -98 49 -39) -98]
Test Case: 838 | Input/Output: [(-88 76 -26 -53) -88]
Test Case: 839 | Input/Output: [(0 -40 -68 -49) -68]
Test Case: 840 | Input/Output: [(21 81 50 27) 21]
Test Case: 841 | Input/Output: [(-9 -55 -79 -78) -79]
Test Case: 842 | Input/Output: [(-94 -15 23 0) -94]
Test Case: 843 | Input/Output: [(66 -41 -14 -9) -41]
Test Case: 844 | Input/Output: [(47 -57 63 -87) -87]
Test Case: 845 | Input/Output: [(74 55 -12 -68) -68]
Test Case: 846 | Input/Output: [(-18 -69 -79 49) -79]
Test Case: 847 | Input/Output: [(92 93 91 63) 63]
Test Case: 848 | Input/Output: [(46 57 99 93) 46]
Test Case: 849 | Input/Output: [(34 -89 10 -78) -89]
Test Case: 850 | Input/Output: [(46 46 -99 -39) -99]
Test Case: 851 | Input/Output: [(80 -42 68 34) -42]
Test Case: 852 | Input/Output: [(-69 -22 -67 -91) -91]
Test Case: 853 | Input/Output: [(52 14 -58 36) -58]
Test Case: 854 | Input/Output: [(52 -11 -23 -11) -23]
Test Case: 855 | Input/Output: [(36 7 -31 -65) -65]
Test Case: 856 | Input/Output: [(-60 -46 -41 4) -60]
Test Case: 857 | Input/Output: [(-26 -10 55 -18) -26]
Test Case: 858 | Input/Output: [(3 88 46 95) 3]
Test Case: 859 | Input/Output: [(-72 74 -23 -2) -72]
Test Case: 860 | Input/Output: [(36 -48 14 -52) -52]
Test Case: 861 | Input/Output: [(15 -49 76 -81) -81]
Test Case: 862 | Input/Output: [(50 -66 -81 -54) -81]
Test Case: 863 | Input/Output: [(1 0 -85 -95) -95]
Test Case: 864 | Input/Output: [(81 45 -85 17) -85]
Test Case: 865 | Input/Output: [(-31 50 30 60) -31]
Test Case: 866 | Input/Output: [(-58 66 -53 93) -58]
Test Case: 867 | Input/Output: [(19 -79 40 22) -79]
Test Case: 868 | Input/Output: [(-83 -7 -93 -23) -93]
Test Case: 869 | Input/Output: [(-28 70 45 -91) -91]
Test Case: 870 | Input/Output: [(-3 42 93 20) -3]
Test Case: 871 | Input/Output: [(13 -26 -55 40) -55]
Test Case: 872 | Input/Output: [(77 -83 -56 81) -83]
Test Case: 873 | Input/Output: [(-45 -22 -99 77) -99]
Test Case: 874 | Input/Output: [(92 -26 -83 27) -83]
Test Case: 875 | Input/Output: [(37 45 59 62) 37]
Test Case: 876 | Input/Output: [(74 -5 -39 95) -39]
Test Case: 877 | Input/Output: [(-61 -50 88 -38) -61]
Test Case: 878 | Input/Output: [(-15 6 -69 -54) -69]
Test Case: 879 | Input/Output: [(-48 96 -99 83) -99]
Test Case: 880 | Input/Output: [(-96 -48 23 23) -96]
Test Case: 881 | Input/Output: [(-59 81 -71 -83) -83]
Test Case: 882 | Input/Output: [(22 -59 -94 -5) -94]
Test Case: 883 | Input/Output: [(90 -63 58 -13) -63]
Test Case: 884 | Input/Output: [(-67 -44 20 -54) -67]
Test Case: 885 | Input/Output: [(50 -5 28 -67) -67]
Test Case: 886 | Input/Output: [(-98 89 -89 -31) -98]
Test Case: 887 | Input/Output: [(-29 -41 25 6) -41]
Test Case: 888 | Input/Output: [(30 97 -7 36) -7]
Test Case: 889 | Input/Output: [(12 32 -33 -56) -56]
Test Case: 890 | Input/Output: [(53 4 -67 -45) -67]
Test Case: 891 | Input/Output: [(-68 16 23 -9) -68]
Test Case: 892 | Input/Output: [(91 16 97 39) 16]
Test Case: 893 | Input/Output: [(-44 -88 -60 -97) -97]
Test Case: 894 | Input/Output: [(73 -4 -50 -89) -89]
Test Case: 895 | Input/Output: [(93 -78 9 51) -78]
Test Case: 896 | Input/Output: [(19 -78 -29 -40) -78]
Test Case: 897 | Input/Output: [(19 -76 -96 -58) -96]
Test Case: 898 | Input/Output: [(15 94 -33 12) -33]
Test Case: 899 | Input/Output: [(-94 34 -55 -67) -94]
Test Case: 900 | Input/Output: [(-78 -42 -40 34) -78]
Test Case: 901 | Input/Output: [(84 2 27 49) 2]
Test Case: 902 | Input/Output: [(18 -100 -25 -95) -100]
Test Case: 903 | Input/Output: [(-1 87 -69 -26) -69]
Test Case: 904 | Input/Output: [(-12 7 -38 -64) -64]
Test Case: 905 | Input/Output: [(-49 8 -84 59) -84]
Test Case: 906 | Input/Output: [(-88 -63 -16 33) -88]
Test Case: 907 | Input/Output: [(-26 -94 48 -75) -94]
Test Case: 908 | Input/Output: [(-97 75 -63 7) -97]
Test Case: 909 | Input/Output: [(35 83 -86 -84) -86]
Test Case: 910 | Input/Output: [(77 -79 60 54) -79]
Test Case: 911 | Input/Output: [(-2 -34 11 -35) -35]
Test Case: 912 | Input/Output: [(-69 38 10 32) -69]
Test Case: 913 | Input/Output: [(-18 9 43 37) -18]
Test Case: 914 | Input/Output: [(96 -4 -40 -100) -100]
Test Case: 915 | Input/Output: [(-79 -11 3 -14) -79]
Test Case: 916 | Input/Output: [(83 -44 -41 88) -44]
Test Case: 917 | Input/Output: [(43 -42 -65 61) -65]
Test Case: 918 | Input/Output: [(65 71 92 -55) -55]
Test Case: 919 | Input/Output: [(-51 20 -53 66) -53]
Test Case: 920 | Input/Output: [(75 -52 29 -71) -71]
Test Case: 921 | Input/Output: [(-79 -21 -65 -10) -79]
Test Case: 922 | Input/Output: [(25 13 -37 -13) -37]
Test Case: 923 | Input/Output: [(-2 -79 -18 96) -79]
Test Case: 924 | Input/Output: [(41 2 -97 64) -97]
Test Case: 925 | Input/Output: [(-9 66 -92 -24) -92]
Test Case: 926 | Input/Output: [(-84 3 80 74) -84]
Test Case: 927 | Input/Output: [(42 -90 79 -71) -90]
Test Case: 928 | Input/Output: [(-37 -96 -96 -98) -98]
Test Case: 929 | Input/Output: [(-22 -9 -68 -91) -91]
Test Case: 930 | Input/Output: [(56 67 -76 -86) -86]
Test Case: 931 | Input/Output: [(1 22 -6 -85) -85]
Test Case: 932 | Input/Output: [(78 -64 -43 85) -64]
Test Case: 933 | Input/Output: [(66 36 6 -86) -86]
Test Case: 934 | Input/Output: [(78 16 -11 31) -11]
Test Case: 935 | Input/Output: [(51 -91 -5 7) -91]
Test Case: 936 | Input/Output: [(32 -56 -75 -96) -96]
Test Case: 937 | Input/Output: [(-70 -54 -20 89) -70]
Test Case: 938 | Input/Output: [(11 -33 -49 -3) -49]
Test Case: 939 | Input/Output: [(-58 37 88 -73) -73]
Test Case: 940 | Input/Output: [(-14 -2 1 1) -14]
Test Case: 941 | Input/Output: [(-54 20 79 -59) -59]
Test Case: 942 | Input/Output: [(4 93 1 74) 1]
Test Case: 943 | Input/Output: [(-35 -65 -42 39) -65]
Test Case: 944 | Input/Output: [(16 -67 21 38) -67]
Test Case: 945 | Input/Output: [(55 -44 32 -6) -44]
Test Case: 946 | Input/Output: [(92 -95 -14 93) -95]
Test Case: 947 | Input/Output: [(-11 96 49 16) -11]
Test Case: 948 | Input/Output: [(81 -2 7 -85) -85]
Test Case: 949 | Input/Output: [(-73 -20 93 -22) -73]
Test Case: 950 | Input/Output: [(72 -64 -72 -35) -72]
Test Case: 951 | Input/Output: [(-12 -12 36 -34) -34]
Test Case: 952 | Input/Output: [(-38 -14 -11 -42) -42]
Test Case: 953 | Input/Output: [(-58 40 -73 69) -73]
Test Case: 954 | Input/Output: [(-15 -68 31 -52) -68]
Test Case: 955 | Input/Output: [(-14 -20 64 -65) -65]
Test Case: 956 | Input/Output: [(18 75 -64 -83) -83]
Test Case: 957 | Input/Output: [(50 -31 78 51) -31]
Test Case: 958 | Input/Output: [(57 -93 -45 15) -93]
Test Case: 959 | Input/Output: [(-73 -51 -74 -3) -74]
Test Case: 960 | Input/Output: [(17 64 98 55) 17]
Test Case: 961 | Input/Output: [(-28 89 91 25) -28]
Test Case: 962 | Input/Output: [(34 -41 -33 -45) -45]
Test Case: 963 | Input/Output: [(49 -50 49 46) -50]
Test Case: 964 | Input/Output: [(-67 69 45 -29) -67]
Test Case: 965 | Input/Output: [(18 -1 94 72) -1]
Test Case: 966 | Input/Output: [(-5 -94 31 41) -94]
Test Case: 967 | Input/Output: [(-32 62 -17 -62) -62]
Test Case: 968 | Input/Output: [(12 36 57 79) 12]
Test Case: 969 | Input/Output: [(-26 -41 -55 80) -55]
Test Case: 970 | Input/Output: [(84 -28 33 -68) -68]
Test Case: 971 | Input/Output: [(35 -95 -82 -50) -95]
Test Case: 972 | Input/Output: [(41 1 -73 5) -73]
Test Case: 973 | Input/Output: [(-70 29 10 47) -70]
Test Case: 974 | Input/Output: [(53 -85 66 97) -85]
Test Case: 975 | Input/Output: [(-81 68 57 6) -81]
Test Case: 976 | Input/Output: [(36 59 26 71) 26]
Test Case: 977 | Input/Output: [(-97 23 -81 23) -97]
Test Case: 978 | Input/Output: [(-30 94 -13 58) -30]
Test Case: 979 | Input/Output: [(-11 -8 -90 -88) -90]
Test Case: 980 | Input/Output: [(44 63 -28 55) -28]
Test Case: 981 | Input/Output: [(-40 -11 23 -22) -40]
Test Case: 982 | Input/Output: [(16 -80 84 -90) -90]
Test Case: 983 | Input/Output: [(84 30 71 -77) -77]
Test Case: 984 | Input/Output: [(-44 51 51 -20) -44]
Test Case: 985 | Input/Output: [(-82 5 65 -70) -82]
Test Case: 986 | Input/Output: [(28 35 58 52) 28]
Test Case: 987 | Input/Output: [(9 69 13 -6) -6]
Test Case: 988 | Input/Output: [(-97 65 -25 48) -97]
Test Case: 989 | Input/Output: [(-64 -87 -26 49) -87]
Test Case: 990 | Input/Output: [(-84 41 -12 14) -84]
Test Case: 991 | Input/Output: [(29 91 30 -30) -30]
Test Case: 992 | Input/Output: [(-52 -82 -8 -30) -82]
Test Case: 993 | Input/Output: [(19 93 -12 -21) -21]
Test Case: 994 | Input/Output: [(-8 -47 -92 -64) -92]
Test Case: 995 | Input/Output: [(37 94 51 20) 20]
Test Case: 996 | Input/Output: [(-37 -67 -8 -47) -67]
Test Case: 997 | Input/Output: [(-15 68 -73 10) -73]
Test Case: 998 | Input/Output: [(92 65 -45 9) -45]
Test Case: 999 | Input/Output: [(33 -10 -5 33) -10]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -54 54 67 65 -25 126 -10 -108 8 102 61 116 -74 -56 12 92
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-12 -12 -12 -78] -78] [[-28 -28 -73 -28] -73] [[-98 -98 97 -98] -98] [[-95 -95 -95 69] -95] [[73 47 73 73] 47] [[50 57 50 50] 50] [[41 41 41 -57] -57] [[56 56 56 -34] -34] [[20 20 20 29] 20] [[35 63 35 35] 35] [(-19 -19 -19 -19) -19] [(75 75 75 75) 75] [(-99 -99 -99 -99) -99] [(-94 -94 -94 -94) -94] [(-50 -50 -50 -50) -50] [(4 57 96 84) 4] [(3 6 47 36) 3] [(80 45 84 84) 45] [(29 74 97 86) 29] [(88 5 63 22) 5] [(11 19 50 70) 11] [(91 14 3 92) 3] [(58 77 42 10) 10] [(97 11 41 61) 11] [(91 14 80 36) 14] [(32 5 64 47) 5] [(64 38 100 89) 38] [(76 55 32 2) 2] [(54 83 22 23) 22] [(32 78 99 55) 32] [(14 1 62 32) 1] [(7 8 56 17) 7] [(71 3 34 58) 3] [(33 37 5 7) 5] [(3 61 68 73) 3] [(26 27 -46 -57) -57] [(23 99 5 29) 5] [(4 24 -10 -80) -80] [(-49 -19 90 -58) -58] [(-39 -40 20 83) -40] [(-64 -15 -70 76) -70] [(-95 24 76 -3) -95] [(-43 5 28 -13) -43] [(-38 -94 76 -83) -94] [(49 59 -85 93) -85] [(57 -20 -24 -7) -24] [(-12 -52 -29 89) -52] [(51 -90 -54 -99) -99] [(-28 47 -51 -42) -51] [(-98 -9 -8 2) -98] [(-35 87 48 35) -35] [(39 -74 1 -3) -74] [(-93 -62 83 -73) -93] [(-99 41 -26 70) -99] [(54 -16 25 53) -16] [(52 29 96 -68) -68] [(-4 -9 2 -35) -35] [(51 41 16 -91) -91] [(-100 34 -4 -41) -100] [(-26 13 98 32) -26] [(13 98 -71 88) -71] [(-87 -72 -26 -70) -87] [(32 -34 70 -23) -34] [(7 60 -31 -67) -67] [(-31 -24 25 -56) -56] [(71 -52 94 -67) -67] [(66 5 5 97) 5] [(-66 27 44 -1) -66] [(-100 87 39 74) -100] [(70 69 -60 100) -60] [(52 -85 -41 -74) -85] [(-77 -48 -19 -30) -77] [(50 36 49 29) 29] [(39 -12 32 -74) -74] [(-59 100 -18 -63) -63] [(-77 -65 84 -63) -77] [(-28 63 56 72) -28] [(98 10 -3 -21) -21] [(-44 78 -91 57) -91] [(-95 45 -27 98) -95] [(7 46 -93 -73) -93] [(-96 15 -30 52) -96] [(80 -82 91 -55) -82] [(3 72 75 -43) -43] [(-25 -15 -4 -37) -37] [(13 -54 38 86) -54] [(92 -26 -2 -98) -98] [(-90 -54 -51 -34) -90] [(-36 -14 69 47) -36] [(-6 -19 18 -45) -45] [(12 42 23 -12) -12] [(11 -20 99 25) -20] [(82 -76 -80 -56) -80] [(-40 -37 -50 -55) -55] [(62 53 -78 -57) -78])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 73                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: 41                 
Correct output: -34                 | Program output: 56                 
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 80                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 91                 
Correct output: 10                  | Program output: 58                 
Correct output: 11                  | Program output: 97                 
Correct output: 14                  | Program output: 91                 
Correct output: 5                   | Program output: 32                 
Correct output: 38                  | Program output: 64                 
Correct output: 2                   | Program output: 76                 
Correct output: 22                  | Program output: 54                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 71                 
Correct output: 5                   | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: 26                 
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: 4                  
Correct output: -58                 | Program output: -49                
Correct output: -40                 | Program output: -39                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -38                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: 57                 
Correct output: -52                 | Program output: -12                
Correct output: -99                 | Program output: 51                 
Correct output: -51                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: 39                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: 54                 
Correct output: -68                 | Program output: 52                 
Correct output: -35                 | Program output: -4                 
Correct output: -91                 | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: 32                 
Correct output: -67                 | Program output: 7                  
Correct output: -56                 | Program output: -31                
Correct output: -67                 | Program output: 71                 
Correct output: 5                   | Program output: 66                 
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 70                 
Correct output: -85                 | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 50                 
Correct output: -74                 | Program output: 39                 
Correct output: -63                 | Program output: -59                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: 98                 
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: 80                 
Correct output: -43                 | Program output: 3                  
Correct output: -37                 | Program output: -25                
Correct output: -54                 | Program output: 13                 
Correct output: -98                 | Program output: 92                 
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -6                 
Correct output: -12                 | Program output: 12                 
Correct output: -20                 | Program output: 11                 
Correct output: -80                 | Program output: 82                 
Correct output: -55                 | Program output: -40                
Correct output: -78                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_eq})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 boolean_invert_first_then_and exec_s (exec_noop) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush boolean_swap exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush integer_rot exec_s_when_autoconstructing (print_exec (boolean_dup_times integer_div boolean_yankdup exec_do*count (integer_shove boolean_xor exec_dup_items exec_y () exec_noop integer_swap boolean_and boolean_not integer_fromboolean boolean_xor integer_swap integer_gt exec_rot () (in3 exec_s_when_autoconstructing () (exec_do*count (exec_yank boolean_yank) boolean_invert_second_then_and boolean_dup_items boolean_or integer_yankdup in3 exec_eq) ()) ()))) () ()))) ())) ()))
Lexicase best errors: [0 1 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 115
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_eq})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 boolean_invert_first_then_and exec_s (exec_noop) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush boolean_swap exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush integer_rot exec_s_when_autoconstructing (print_exec (boolean_dup_times integer_div boolean_yankdup exec_do*count (integer_shove boolean_xor exec_dup_items exec_y () exec_noop integer_swap boolean_and boolean_not integer_fromboolean boolean_xor integer_swap integer_gt exec_rot () (in3 exec_s_when_autoconstructing () (exec_do*count (exec_yank boolean_yank) boolean_invert_second_then_and boolean_dup_items boolean_or integer_yankdup in3 exec_eq) ()) ()))) () ()))) ())) ()))
Zero cases best errors: [0 1 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 115
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 1000 7 2 2 2 3 2 2 2)
Population mean number of elite cases: 1.02
Count of perfect (error zero) individuals by case: (2 0 7 2 2 2 3 2 2 2)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction tagged_461} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_noop} {:close 2, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -19})
Best program: (exec_yank tagged_461 boolean_yankdup exec_yank boolean_rot exec_noop exec_yankdup in1 exec_while () boolean_xor exec_y (print_integer exec_pop (integer_gt) boolean_dup_items integer_add exec_noop) integer_lte boolean_invert_second_then_and exec_do*count () print_integer integer_eq exec_if (exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing () (-19))) ())
Errors: [0 1 0 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 9.976
Median total errors in population: 10
Error averages by case: (0.998 1.0 0.993 0.998 0.998 0.998 0.997 0.998 0.998 0.998)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.263
Average program size in population (points): 71.901
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 496615
--- Timings ---
Current time: 1559582640839 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.4%
Reproduction:         0.9 seconds, 34.0%
Fitness Testing:      1.6 seconds, 61.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -73                 | Program output: -73                
Correct output: -98                 | Program output: 97                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 73                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: 41                 
Correct output: -34                 | Program output: 56                 
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 96                 
Correct output: 3                   | Program output: 47                 
Correct output: 45                  | Program output: 84                 
Correct output: 29                  | Program output: 97                 
Correct output: 5                   | Program output: 63                 
Correct output: 11                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 42                 
Correct output: 11                  | Program output: 41                 
Correct output: 14                  | Program output: 80                 
Correct output: 5                   | Program output: 64                 
Correct output: 38                  | Program output: 100                
Correct output: 2                   | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 99                 
Correct output: 1                   | Program output: 62                 
Correct output: 7                   | Program output: 56                 
Correct output: 3                   | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 68                 
Correct output: -57                 | Program output: -46                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -10                
Correct output: -58                 | Program output: 90                 
Correct output: -40                 | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 76                 
Correct output: -43                 | Program output: 28                 
Correct output: -94                 | Program output: 76                 
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -29                
Correct output: -99                 | Program output: -54                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -8                 
Correct output: -35                 | Program output: 48                 
Correct output: -74                 | Program output: 1                  
Correct output: -93                 | Program output: 83                 
Correct output: -99                 | Program output: -26                
Correct output: -16                 | Program output: 25                 
Correct output: -68                 | Program output: 96                 
Correct output: -35                 | Program output: 2                  
Correct output: -91                 | Program output: 16                 
Correct output: -100                | Program output: -4                 
Correct output: -26                 | Program output: 98                 
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -26                
Correct output: -34                 | Program output: 70                 
Correct output: -67                 | Program output: -31                
Correct output: -56                 | Program output: 25                 
Correct output: -67                 | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: 44                 
Correct output: -100                | Program output: 39                 
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -41                
Correct output: -77                 | Program output: -19                
Correct output: 29                  | Program output: 49                 
Correct output: -74                 | Program output: 32                 
Correct output: -63                 | Program output: -18                
Correct output: -77                 | Program output: 84                 
Correct output: -28                 | Program output: 56                 
Correct output: -21                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -27                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -30                
Correct output: -82                 | Program output: 91                 
Correct output: -43                 | Program output: 75                 
Correct output: -37                 | Program output: -4                 
Correct output: -54                 | Program output: 38                 
Correct output: -98                 | Program output: -2                 
Correct output: -90                 | Program output: -51                
Correct output: -36                 | Program output: 69                 
Correct output: -45                 | Program output: 18                 
Correct output: -12                 | Program output: 23                 
Correct output: -20                 | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -50                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_749})
Lexicase best program: (exec_do*count (integer_div boolean_shove exec_dup_times (in3 integer_yank integer_swap exec_y (print_integer exec_k () (exec_shove (integer_inc integer_eq boolean_invert_second_then_and in3 exec_stackdepth tagged_749))))))
Lexicase best errors: [1 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_749})
Zero cases best program: (exec_do*count (integer_div boolean_shove exec_dup_times (in3 integer_yank integer_swap exec_y (print_integer exec_k () (exec_shove (integer_inc integer_eq boolean_invert_second_then_and in3 exec_stackdepth tagged_749))))))
Zero cases best errors: [1 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (356 129 129 1 435 1 921 766 921 921)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (356 129 129 1 435 1 921 766 921 921)
Population mean number of perfect (error zero) cases: 4.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 2, :instruction -13} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction 97} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction print_exec} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove})
Best program: (integer_stackdepth boolean_rot in3 exec_eq integer_gt exec_rot (print_integer exec_y () exec_do*while ()) (integer_yankdup boolean_yankdup) (integer_stackdepth) integer_gt integer_sub integer_div integer_stackdepth integer_dup_times in4 integer_dup_times in4 print_integer -13 boolean_and integer_swap integer_dup_times in4 boolean_invert_first_then_and integer_gt exec_do*range (boolean_yankdup boolean_swap boolean_swap) integer_add boolean_yankdup print_exec (exec_yankdup boolean_dup_items exec_do*count (print_exec (boolean_pop boolean_flush boolean_empty boolean_yankdup)) boolean_dup_times exec_noop) 97 exec_dup_items boolean_rot integer_yank integer_yankdup in1 boolean_empty in2 boolean_dup_items boolean_dup_items exec_rot (in2 exec_do*while ()) (integer_shove exec_y () integer_mult) (exec_y (boolean_pop) boolean_rot exec_noop print_exec (integer_empty) boolean_dup_times boolean_rot exec_empty print_newline exec_when (exec_y_when_autoconstructing (integer_dup_times integer_shove integer_mult exec_when (exec_shove ())))))
Errors: [1 0 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 78
Size: 99
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 5.42
Median total errors in population: 5
Error averages by case: (0.644 0.871 0.871 0.999 0.565 0.999 0.079 0.234 0.079 0.079)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.445
Average program size in population (points): 64.121
Average percent parens in population: 0.299
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.484
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1350028
--- Timings ---
Current time: 1559582643627 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.3 seconds, 40.7%
Fitness Testing:      2.3 seconds, 40.5%
Report:               1.0 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 73                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: 41                 
Correct output: -34                 | Program output: 56                 
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 80                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 91                 
Correct output: 10                  | Program output: 58                 
Correct output: 11                  | Program output: 97                 
Correct output: 14                  | Program output: 91                 
Correct output: 5                   | Program output: 32                 
Correct output: 38                  | Program output: 64                 
Correct output: 2                   | Program output: 76                 
Correct output: 22                  | Program output: 54                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 71                 
Correct output: 5                   | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: 26                 
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: 4                  
Correct output: -58                 | Program output: -49                
Correct output: -40                 | Program output: -39                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -38                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: 57                 
Correct output: -52                 | Program output: -12                
Correct output: -99                 | Program output: 51                 
Correct output: -51                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: 39                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: 54                 
Correct output: -68                 | Program output: 52                 
Correct output: -35                 | Program output: -4                 
Correct output: -91                 | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: 32                 
Correct output: -67                 | Program output: 7                  
Correct output: -56                 | Program output: -31                
Correct output: -67                 | Program output: 71                 
Correct output: 5                   | Program output: 66                 
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 70                 
Correct output: -85                 | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 50                 
Correct output: -74                 | Program output: 39                 
Correct output: -63                 | Program output: -59                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: 98                 
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: 80                 
Correct output: -43                 | Program output: 3                  
Correct output: -37                 | Program output: -25                
Correct output: -54                 | Program output: 13                 
Correct output: -98                 | Program output: 92                 
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -6                 
Correct output: -12                 | Program output: 12                 
Correct output: -20                 | Program output: 11                 
Correct output: -80                 | Program output: 82                 
Correct output: -55                 | Program output: -40                
Correct output: -78                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (exec_noop) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush boolean_swap exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))) ())) ()))
Lexicase best errors: [0 0 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (exec_noop) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush boolean_swap exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))) ())) ()))
Zero cases best errors: [0 0 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (900 590 434 294 144 304 303 291 144 157)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (900 590 434 294 144 304 303 291 144 157)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_y})
Best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 boolean_invert_first_then_and exec_s (exec_noop) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush boolean_swap exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty exec_do*times (integer_rot exec_stackdepth in3 integer_rot boolean_yankdup) exec_noop) (in4 exec_y ()))) ())) ()))
Errors: [0 0 0 1 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 39
Size: 58
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 6.439
Median total errors in population: 7
Error averages by case: (0.1 0.41 0.566 0.706 0.856 0.696 0.697 0.709 0.856 0.843)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.315
Average program size in population (points): 66.234
Average percent parens in population: 0.274
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.1505
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2097380
--- Timings ---
Current time: 1559582646685 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.4 seconds, 48.7%
Fitness Testing:      3.0 seconds, 33.3%
Report:               1.5 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: 41                 
Correct output: -34                 | Program output: 56                 
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 58                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 55                 
Correct output: 22                  | Program output: 54                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: 26                 
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: 4                  
Correct output: -58                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -90                
Correct output: -51                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: 29                 
Correct output: -35                 | Program output: -9                 
Correct output: -91                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: 7                  
Correct output: -56                 | Program output: -31                
Correct output: -67                 | Program output: -52                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 36                 
Correct output: -74                 | Program output: -12                
Correct output: -63                 | Program output: -59                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: 10                 
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: 3                  
Correct output: -37                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -19                
Correct output: -12                 | Program output: 12                 
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -40                
Correct output: -78                 | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))) ())) ()))
Lexicase best errors: [0 1 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 71
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))) ())) ()))
Zero cases best errors: [0 1 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 71
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (306 206 929 306 296 122 297 122 122 297)
Population mean number of elite cases: 3.00
Count of perfect (error zero) individuals by case: (306 206 929 306 296 122 297 122 122 297)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))) ())) ()))
Errors: [0 1 0 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 71
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 6.997
Median total errors in population: 7
Error averages by case: (0.694 0.794 0.071 0.694 0.704 0.878 0.703 0.878 0.878 0.703)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.004
Average program size in population (points): 66.408
Average percent parens in population: 0.279
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.60425
Median age in population: 4.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2795032
--- Timings ---
Current time: 1559582649596 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.4 seconds, 53.6%
Fitness Testing:      3.6 seconds, 30.3%
Report:               1.8 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: 41                 
Correct output: -34                 | Program output: 56                 
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 58                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 55                 
Correct output: 22                  | Program output: 54                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: 26                 
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: 4                  
Correct output: -58                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -90                
Correct output: -51                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: 29                 
Correct output: -35                 | Program output: -9                 
Correct output: -91                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: 7                  
Correct output: -56                 | Program output: -31                
Correct output: -67                 | Program output: -52                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 36                 
Correct output: -74                 | Program output: -12                
Correct output: -63                 | Program output: -59                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: 10                 
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: 3                  
Correct output: -37                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -19                
Correct output: -12                 | Program output: 12                 
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -40                
Correct output: -78                 | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))) ())) ()))
Lexicase best errors: [1 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 71
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))) ())) ()))
Zero cases best errors: [1 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 71
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 87 292 535 538 623 536 292 87 292)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (291 87 292 535 538 623 536 292 87 292)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (boolean_yankdup) exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq) () (exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))))) ())) ()))
Errors: [1 1 1 0 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 60
Size: 86
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 6.427
Median total errors in population: 6
Error averages by case: (0.709 0.913 0.708 0.465 0.462 0.377 0.464 0.708 0.913 0.708)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.766
Average program size in population (points): 64.845
Average percent parens in population: 0.278
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.418625
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 250
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 251
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3412213
--- Timings ---
Current time: 1559582652709 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.7 seconds, 57.7%
Fitness Testing:      4.2 seconds, 27.6%
Report:               2.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -73                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: 41                 
Correct output: -34                 | Program output: 56                 
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 57                 
Correct output: 3                   | Program output: 6                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 78                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 61                 
Correct output: -57                 | Program output: -46                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -10                
Correct output: -58                 | Program output: -19                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 24                 
Correct output: -43                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -90                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -9                 
Correct output: -35                 | Program output: 48                 
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -62                
Correct output: -99                 | Program output: -26                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: 29                 
Correct output: -35                 | Program output: -9                 
Correct output: -91                 | Program output: 16                 
Correct output: -100                | Program output: -4                 
Correct output: -26                 | Program output: 13                 
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -72                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: -31                
Correct output: -56                 | Program output: -24                
Correct output: -67                 | Program output: -52                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: 27                 
Correct output: -100                | Program output: 39                 
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -48                
Correct output: 29                  | Program output: 36                 
Correct output: -74                 | Program output: -12                
Correct output: -63                 | Program output: -18                
Correct output: -77                 | Program output: -65                
Correct output: -28                 | Program output: 56                 
Correct output: -21                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -27                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -30                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: 72                 
Correct output: -37                 | Program output: -15                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -26                
Correct output: -90                 | Program output: -54                
Correct output: -36                 | Program output: -14                
Correct output: -45                 | Program output: -19                
Correct output: -12                 | Program output: 23                 
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -50                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_y})
Lexicase best program: (boolean_yankdup exec_do*times (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) boolean_yankdup) (exec_noop) in4 exec_y ())) ()))
Lexicase best errors: [0 1 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_y})
Zero cases best program: (boolean_yankdup exec_do*times (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) boolean_yankdup) (exec_noop) in4 exec_y ())) ()))
Zero cases best errors: [0 1 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (316 201 200 200 522 317 407 317 317 408)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (316 201 200 200 522 317 407 317 317 408)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor})
Best program: (integer_sub exec_do*count (boolean_invert_first_then_and exec_empty in1 in2 in3 integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (boolean_xor boolean_empty integer_eq tag_exec_180 (boolean_xor) integer_swap) (boolean_not boolean_xor) integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush integer_rot exec_s_when_autoconstructing (print_exec (boolean_dup_times integer_div boolean_yankdup exec_do*count (integer_shove boolean_xor))) () ())))) ())
Errors: [0 0 0 0 0 1 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 62
Size: 84
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.795
Median total errors in population: 6
Error averages by case: (0.684 0.799 0.8 0.8 0.478 0.683 0.593 0.683 0.683 0.592)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.25
Average program size in population (points): 60.356
Average percent parens in population: 0.267
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.7915625
Median age in population: 7.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4210536
--- Timings ---
Current time: 1559582655539 milliseconds
Total Time:          17.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.6 seconds, 59.1%
Fitness Testing:      4.8 seconds, 26.8%
Report:               2.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: 41                 
Correct output: -34                 | Program output: 56                 
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 58                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 55                 
Correct output: 22                  | Program output: 54                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: 26                 
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: 4                  
Correct output: -58                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -90                
Correct output: -51                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: 29                 
Correct output: -35                 | Program output: -9                 
Correct output: -91                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: 7                  
Correct output: -56                 | Program output: -31                
Correct output: -67                 | Program output: -52                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 36                 
Correct output: -74                 | Program output: -12                
Correct output: -63                 | Program output: -59                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: 10                 
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: 3                  
Correct output: -37                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -19                
Correct output: -12                 | Program output: 12                 
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -40                
Correct output: -78                 | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_sub) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))) ())) ()))
Lexicase best errors: [1 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 71
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_sub) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))) ())) ()))
Zero cases best errors: [1 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 71
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (181 388 387 748 753 182 181 387 389 181)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (181 388 387 748 753 182 181 387 389 181)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup exec_s_when_autoconstructing (integer_dec exec_do*count () exec_eq) () (exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))))) ())) ()))
Errors: [1 0 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 50
Size: 74
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.223
Median total errors in population: 6
Error averages by case: (0.819 0.612 0.613 0.252 0.247 0.818 0.819 0.613 0.611 0.819)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.547
Average program size in population (points): 72.493
Average percent parens in population: 0.275
Minimum age in population: 7.0
Maximum age in population: 11.1875
Average age in population: 9.6603125
Median age in population: 9.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4605359
--- Timings ---
Current time: 1559582658260 milliseconds
Total Time:          20.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.7 seconds, 61.4%
Fitness Testing:      5.2 seconds, 25.1%
Report:               2.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: 41                 
Correct output: -34                 | Program output: 56                 
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 58                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 55                 
Correct output: 22                  | Program output: 54                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: 26                 
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: 4                  
Correct output: -58                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -90                
Correct output: -51                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: 29                 
Correct output: -35                 | Program output: -9                 
Correct output: -91                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: 7                  
Correct output: -56                 | Program output: -31                
Correct output: -67                 | Program output: -52                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 36                 
Correct output: -74                 | Program output: -12                
Correct output: -63                 | Program output: -59                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: 10                 
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: 3                  
Correct output: -37                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -19                
Correct output: -12                 | Program output: 12                 
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -40                
Correct output: -78                 | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_sub boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min print_exec (boolean_dup_times integer_div boolean_yankdup exec_do*count (integer_shove boolean_xor))))) ())) ()))
Lexicase best errors: [0 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 80
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_sub boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min print_exec (boolean_dup_times integer_div boolean_yankdup exec_do*count (integer_shove boolean_xor))))) ())) ()))
Zero cases best errors: [0 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 80
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (513 568 366 934 513 515 405 558 405 515)
Population mean number of elite cases: 5.29
Count of perfect (error zero) individuals by case: (513 568 366 934 513 515 405 558 405 515)
Population mean number of perfect (error zero) cases: 5.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (exec_do*count (boolean_and in1 in2 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (boolean_stackdepth boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) (boolean_not tagged_412 integer_add integer_rot exec_stackdepth in3 integer_rot integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq)) (exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))))) ()))
Errors: [0 0 1 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 58
Size: 79
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 4.708
Median total errors in population: 3
Error averages by case: (0.487 0.432 0.634 0.066 0.487 0.485 0.595 0.442 0.595 0.485)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.876
Average program size in population (points): 65.316
Average percent parens in population: 0.281
Minimum age in population: 8.0625
Maximum age in population: 12.671875
Average age in population: 10.9266875
Median age in population: 10.9765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5219661
--- Timings ---
Current time: 1559582660918 milliseconds
Total Time:          23.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.5 seconds, 62.3%
Fitness Testing:      5.7 seconds, 24.4%
Report:               3.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 73                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 80                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 91                 
Correct output: 10                  | Program output: 10                 
Correct output: 11                  | Program output: 61                 
Correct output: 14                  | Program output: 36                 
Correct output: 5                   | Program output: 32                 
Correct output: 38                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 58                 
Correct output: 5                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -39                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -83                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -7                 
Correct output: -52                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -3                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: 53                 
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 5                   | Program output: 66                 
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 70                 
Correct output: -85                 | Program output: -74                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 29                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -55                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -54                 | Program output: 13                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -45                
Correct output: -12                 | Program output: -12                
Correct output: -20                 | Program output: 11                 
Correct output: -80                 | Program output: -56                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -57                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 exec_empty in4 integer_min) print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))) ())
Lexicase best errors: [1 0 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 73
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 exec_empty in4 integer_min) print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))) ())
Zero cases best errors: [1 0 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 73
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 378 935 556 556 378 926 1000 1000 378)
Population mean number of elite cases: 7.11
Count of perfect (error zero) individuals by case: (0 378 935 556 556 378 926 0 0 378)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 exec_empty in4 integer_min) print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))) ())
Errors: [1 0 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 54
Size: 73
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 5.893
Median total errors in population: 6
Error averages by case: (1.0 0.622 0.065 0.444 0.444 0.622 0.074 1.0 1.0 0.622)
Error minima by case: (1 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 49.578
Average program size in population (points): 70.467
Average percent parens in population: 0.297
Minimum age in population: 9.625
Maximum age in population: 14.2421875
Average age in population: 12.7626328125
Median age in population: 12.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5446989
--- Timings ---
Current time: 1559582663243 milliseconds
Total Time:          25.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.3 seconds, 63.7%
Fitness Testing:      5.9 seconds, 23.1%
Report:               3.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 57                 
Correct output: 3                   | Program output: 6                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 19                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 10                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 32                  | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 7                  
Correct output: 3                   | Program output: 61                 
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -15                
Correct output: -95                 | Program output: -3                 
Correct output: -43                 | Program output: -13                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 59                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -42                
Correct output: -98                 | Program output: -9                 
Correct output: -35                 | Program output: 35                 
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -73                
Correct output: -99                 | Program output: 41                 
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -41                
Correct output: -26                 | Program output: 13                 
Correct output: -71                 | Program output: 88                 
Correct output: -87                 | Program output: -72                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -1                 
Correct output: -100                | Program output: 74                 
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -48                
Correct output: 29                  | Program output: 29                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -77                 | Program output: -65                
Correct output: -28                 | Program output: 63                 
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: 57                 
Correct output: -95                 | Program output: 45                 
Correct output: -93                 | Program output: -73                
Correct output: -96                 | Program output: 15                 
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -54                
Correct output: -36                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -12                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -57                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup in2 in4 integer_min print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_k () () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))) ())) ())) ())
Lexicase best errors: [1 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 65
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup in2 in4 integer_min print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_k () () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))) ())) ())) ())
Zero cases best errors: [1 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 65
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (706 820 371 1 1 814 372 947 820 944)
Population mean number of elite cases: 5.80
Count of perfect (error zero) individuals by case: (706 820 371 1 1 814 372 947 820 944)
Population mean number of perfect (error zero) cases: 5.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_s (exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times (exec_if (print_integer boolean_rot) (exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty boolean_yankdup tag_exec_180 (boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_k () () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))) ()))))) ())
Errors: [1 0 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 71
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 4.204
Median total errors in population: 4
Error averages by case: (0.294 0.18 0.629 0.999 0.999 0.186 0.628 0.053 0.18 0.056)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.378
Average program size in population (points): 72.233
Average percent parens in population: 0.275
Minimum age in population: 11.5625
Maximum age in population: 15.80078125
Average age in population: 14.7047890625
Median age in population: 14.67578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 248
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 250
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5631641
--- Timings ---
Current time: 1559582665556 milliseconds
Total Time:          27.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.1 seconds, 64.9%
Fitness Testing:      6.1 seconds, 22.0%
Report:               3.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 194
Test mean error for best: 0.19400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 10                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 29                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -45                
Correct output: -12                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -57                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 70
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 70
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 843 410 553 843 843 843 842 952 394)
Population mean number of elite cases: 6.77
Count of perfect (error zero) individuals by case: (247 843 410 553 843 843 843 842 952 394)
Population mean number of perfect (error zero) cases: 6.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 54
Size: 70
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 3.23
Median total errors in population: 3
Error averages by case: (0.753 0.157 0.59 0.447 0.157 0.157 0.157 0.158 0.048 0.606)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.257
Average program size in population (points): 72.09
Average percent parens in population: 0.275
Minimum age in population: 13.390625
Maximum age in population: 17.42578125
Average age in population: 16.04451953125
Median age in population: 16.11328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5816402
--- Timings ---
Current time: 1559582667785 milliseconds
Total Time:          30.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.9 seconds, 65.9%
Fitness Testing:      6.3 seconds, 21.0%
Report:               3.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 194
Test mean error for best: 0.19400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 10                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 29                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -45                
Correct output: -12                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -57                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_487} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) integer_swap) (boolean_not tagged_487 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 78
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_487} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) integer_swap) (boolean_not tagged_487 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 78
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (648 875 875 716 879 711 724 878 283 871)
Population mean number of elite cases: 7.46
Count of perfect (error zero) individuals by case: (648 875 875 716 879 711 724 878 283 871)
Population mean number of perfect (error zero) cases: 7.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_yank integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 54
Size: 70
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 2.54
Median total errors in population: 1
Error averages by case: (0.352 0.125 0.125 0.284 0.121 0.289 0.276 0.122 0.717 0.129)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.804
Average program size in population (points): 70.671
Average percent parens in population: 0.238
Minimum age in population: 16.078125
Maximum age in population: 18.625
Average age in population: 17.2480224609375
Median age in population: 17.517578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 293
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 297
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.01
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5997323
--- Timings ---
Current time: 1559582670111 milliseconds
Total Time:          32.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.8 seconds, 67.0%
Fitness Testing:      6.5 seconds, 20.1%
Report:               4.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 194
Test mean error for best: 0.19400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 10                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 29                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -45                
Correct output: -12                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -57                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup) (tag_exec_180 (boolean_xor) boolean_xor) integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))))
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 70
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup) (tag_exec_180 (boolean_xor) boolean_xor) integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count () exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))))
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 70
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (846 846 844 959 217 756 959 761 215 941)
Population mean number of elite cases: 7.34
Count of perfect (error zero) individuals by case: (846 846 844 959 217 756 959 761 215 941)
Population mean number of perfect (error zero) cases: 7.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (exec_when () boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq)) (exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))))
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 54
Size: 71
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 2.656
Median total errors in population: 2
Error averages by case: (0.154 0.154 0.156 0.041 0.783 0.244 0.041 0.239 0.785 0.059)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.917
Average program size in population (points): 70.704
Average percent parens in population: 0.237
Minimum age in population: 17.078125
Maximum age in population: 20.119140625
Average age in population: 18.73660009765625
Median age in population: 18.721923828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 154
Genome diversity (% unique genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6183095
--- Timings ---
Current time: 1559582672434 milliseconds
Total Time:          34.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.7 seconds, 68.0%
Fitness Testing:      6.7 seconds, 19.3%
Report:               4.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -73                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 73                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: 41                 
Correct output: -34                 | Program output: 56                 
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 80                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 63                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 42                 
Correct output: 11                  | Program output: 41                 
Correct output: 14                  | Program output: 80                 
Correct output: 5                   | Program output: 32                 
Correct output: 38                  | Program output: 64                 
Correct output: 2                   | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -46                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -10                
Correct output: -58                 | Program output: -49                
Correct output: -40                 | Program output: -39                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -29                
Correct output: -99                 | Program output: -54                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: 1                  
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: 25                 
Correct output: -68                 | Program output: 52                 
Correct output: -35                 | Program output: -4                 
Correct output: -91                 | Program output: 16                 
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: 32                 
Correct output: -67                 | Program output: -31                
Correct output: -56                 | Program output: -31                
Correct output: -67                 | Program output: 71                 
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 49                 
Correct output: -74                 | Program output: 32                 
Correct output: -63                 | Program output: -59                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: 80                 
Correct output: -43                 | Program output: 3                  
Correct output: -37                 | Program output: -25                
Correct output: -54                 | Program output: 13                 
Correct output: -98                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -6                 
Correct output: -12                 | Program output: 12                 
Correct output: -20                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -50                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in3 exec_empty in1 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 78
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in3 exec_empty in1 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 78
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (570 570 949 570 932 549 949 569 380 549)
Population mean number of elite cases: 6.59
Count of perfect (error zero) individuals by case: (570 570 949 570 932 549 949 569 380 549)
Population mean number of perfect (error zero) cases: 6.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in3 exec_empty in1 exec_s (integer_min) (print_integer) (integer_dup boolean_dup boolean_invert_second_then_and)) exec_s (exec_noop exec_noop boolean_not) (exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (exec_empty) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot exec_flush)))) ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 55
Size: 77
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 3.413
Median total errors in population: 2
Error averages by case: (0.43 0.43 0.051 0.43 0.068 0.451 0.051 0.431 0.62 0.451)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.103
Average program size in population (points): 72.404
Average percent parens in population: 0.251
Minimum age in population: 18.359375
Maximum age in population: 21.908203125
Average age in population: 20.28194848632812
Median age in population: 20.3466796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6380122
--- Timings ---
Current time: 1559582674720 milliseconds
Total Time:          37.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.4 seconds, 68.7%
Fitness Testing:      6.9 seconds, 18.7%
Report:               4.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 194
Test mean error for best: 0.19400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 10                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 29                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -45                
Correct output: -12                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -57                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup integer_dup_times boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot) integer_swap exec_rot (integer_mult) (integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) integer_swap) (boolean_not tagged_412 integer_add integer_swap) boolean_not tagged_412 integer_add boolean_dup tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq exec_y (integer_fromboolean integer_inc boolean_invert_first_then_and integer_rot integer_min exec_flush))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 76
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup integer_dup_times boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot) integer_swap exec_rot (integer_mult) (integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) integer_swap) (boolean_not tagged_412 integer_add integer_swap) boolean_not tagged_412 integer_add boolean_dup tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq exec_y (integer_fromboolean integer_inc boolean_invert_first_then_and integer_rot integer_min exec_flush))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 76
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (945 940 940 314 935 314 619 314 944 314)
Population mean number of elite cases: 6.58
Count of perfect (error zero) individuals by case: (945 940 940 314 935 314 619 314 944 314)
Population mean number of perfect (error zero) cases: 6.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (exec_do*range (integer_inc exec_shove (integer_rot integer_min exec_flush)))) ()))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 46
Size: 62
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 3.421
Median total errors in population: 4
Error averages by case: (0.055 0.06 0.06 0.686 0.065 0.686 0.381 0.686 0.056 0.686)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.756
Average program size in population (points): 74.675
Average percent parens in population: 0.265
Minimum age in population: 19.67578125
Maximum age in population: 23.6943359375
Average age in population: 21.8548603515625
Median age in population: 21.9075927734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6608887
--- Timings ---
Current time: 1559582677149 milliseconds
Total Time:          39.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.4 seconds, 69.2%
Fitness Testing:      7.2 seconds, 18.1%
Report:               4.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 194
Test mean error for best: 0.19400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 10                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 29                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -45                
Correct output: -12                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -57                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_292} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not integer_stackdepth exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not tagged_292 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) (exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 70
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_292} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not integer_stackdepth exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not tagged_292 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) (exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 70
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (798 801 651 797 789 939 789 783 951 275)
Population mean number of elite cases: 7.57
Count of perfect (error zero) individuals by case: (798 801 651 797 789 939 789 783 951 275)
Population mean number of perfect (error zero) cases: 7.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_120} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and})
Best program: (boolean_yankdup exec_do*count (exec_do*count (in1 in2 in4 integer_min) integer_min) print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (integer_swap exec_rot (integer_mult tag_exec_120 (boolean_xor) integer_empty) (integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) exec_y (boolean_dup_times integer_inc exec_shove (integer_rot integer_min boolean_and)))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 2.427
Median total errors in population: 1
Error averages by case: (0.202 0.199 0.349 0.203 0.211 0.061 0.211 0.217 0.049 0.725)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.915
Average program size in population (points): 71.62
Average percent parens in population: 0.246
Minimum age in population: 20.67578125
Maximum age in population: 25.234619140625
Average age in population: 23.44132299804688
Median age in population: 23.49627685546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6811864
--- Timings ---
Current time: 1559582679388 milliseconds
Total Time:          41.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.1 seconds, 69.8%
Fitness Testing:      7.4 seconds, 17.6%
Report:               5.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 194
Test mean error for best: 0.19400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 10                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 29                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -45                
Correct output: -12                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -57                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2) in4 integer_min) integer_min print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq)) (exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 70
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2) in4 integer_min) integer_min print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) integer_swap) (boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq)) (exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 70
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (827 820 323 826 821 737 826 959 733 738)
Population mean number of elite cases: 7.61
Count of perfect (error zero) individuals by case: (827 820 323 826 821 737 826 959 733 738)
Population mean number of perfect (error zero) cases: 7.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (exec_do*count (exec_do*while (in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and) exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) exec_eq) () exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush))))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 54
Size: 71
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 2.39
Median total errors in population: 1
Error averages by case: (0.173 0.18 0.677 0.174 0.179 0.263 0.174 0.041 0.267 0.262)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.063
Average program size in population (points): 70.995
Average percent parens in population: 0.237
Minimum age in population: 21.97998046875
Maximum age in population: 27.17413330078125
Average age in population: 25.14248577880859
Median age in population: 25.18917846679688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7003235
--- Timings ---
Current time: 1559582681633 milliseconds
Total Time:          44.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        31.0 seconds, 70.3%
Fitness Testing:      7.5 seconds, 17.1%
Report:               5.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 194
Test mean error for best: 0.19400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 10                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 29                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -45                
Correct output: -12                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -57                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 3, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_yankdup in1 in2 in4 integer_min integer_min print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty) (boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min)))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 64
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 3, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_yankdup in1 in2 in4 integer_min integer_min print_integer integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty) (boolean_yankdup tag_exec_180 (boolean_xor) boolean_xor) integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 64
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (929 729 726 729 726 724 822 827 726 725)
Population mean number of elite cases: 7.66
Count of perfect (error zero) individuals by case: (929 729 726 729 726 724 822 827 726 725)
Population mean number of perfect (error zero) cases: 7.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction tag_exec_180} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_412} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush})
Best program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 64
Size: 82
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 2.337
Median total errors in population: 0
Error averages by case: (0.071 0.271 0.274 0.271 0.274 0.276 0.178 0.173 0.274 0.275)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.884
Average program size in population (points): 70.551
Average percent parens in population: 0.235
Minimum age in population: 22.97998046875
Maximum age in population: 29.10067749023438
Average age in population: 26.66653634643555
Median age in population: 26.772216796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.01
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7205527
--- Timings ---
Current time: 1559582683862 milliseconds
Total Time:          46.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.7 seconds, 70.8%
Fitness Testing:      7.7 seconds, 16.7%
Report:               5.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 17
Successful program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 82


Auto-simplifying with starting size: 82
step: 0
program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 500
program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 1000
program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 1500
program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 2000
program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 2500
program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 3000
program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 3500
program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 4000
program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 4500
program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 5000
program: (boolean_yankdup exec_do*count (exec_do*count (exec_empty in1 in2 in4 integer_min) integer_min print_integer) integer_dup boolean_dup boolean_invert_second_then_and exec_noop boolean_not exec_flush exec_dup_items exec_y_when_autoconstructing (exec_yank exec_do*times () exec_if (print_integer boolean_rot exec_shove (boolean_rot exec_do*times () integer_gte print_integer boolean_rot exec_shove (boolean_rot integer_swap exec_rot (integer_mult integer_inc) (exec_dup (boolean_empty integer_inc) integer_empty boolean_empty in2 tag_exec_180 (boolean_xor) boolean_xor) (integer_swap) boolean_not boolean_xor) boolean_xor integer_swap) boolean_not tagged_412 integer_add boolean_dup boolean_empty integer_dec exec_do*count ()) (exec_eq)) exec_y (integer_fromboolean integer_inc exec_shove (integer_rot integer_min exec_flush)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 194
Test mean error for best: 0.19400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 50                  | Program output: 50                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: 20                  | Program output: 20                 
Correct output: 35                  | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 45                  | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 14                 
Correct output: 10                  | Program output: 10                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 5                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: 5                   | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -70                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 49                 
Correct output: -24                 | Program output: -20                
Correct output: -52                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -74                 | Program output: -74                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -34                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 5                   | Program output: 5                  
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: 29                  | Program output: 29                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -77                 | Program output: -77                
Correct output: -28                 | Program output: -28                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -43                 | Program output: -43                
Correct output: -37                 | Program output: -37                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -45                 | Program output: -45                
Correct output: -12                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -57                
;;******************************
