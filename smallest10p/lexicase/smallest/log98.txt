Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[16 39 39 39] 16] [[58 58 58 -13] -13] [[-22 -22 -6 -22] -22] [[51 51 51 44] 44] [[-53 -53 -15 -53] -53] [[-62 -77 -77 -77] -77] [[67 23 23 23] 23] [[91 91 91 14] 14] [[45 45 27 45] 27] [[80 -59 80 80] -59] [(46 46 46 46) 46] [(-50 -50 -50 -50) -50] [(25 25 25 25) 25] [(82 82 82 82) 82] [(37 37 37 37) 37] [(59 83 86 34) 34] [(78 13 38 56) 13] [(49 53 89 7) 7] [(93 40 18 67) 18] [(87 74 35 65) 35] [(66 79 30 66) 30] [(7 32 78 20) 7] [(50 62 57 89) 50] [(62 77 8 76) 8] [(19 64 14 10) 10] [(61 34 87 2) 2] [(95 22 11 2) 2] [(8 4 1 6) 1] [(61 10 5 55) 5] [(64 71 52 23) 23] [(87 25 28 67) 25] [(7 33 73 30) 7] [(96 69 88 30) 30] [(90 53 67 73) 53] [(8 46 15 9) 8] [(85 71 -64 -69) -69] [(-88 46 71 -29) -88] [(-21 -80 75 41) -80] [(-29 -36 -99 -82) -99] [(-81 69 56 45) -81] [(-14 -93 -73 90) -93] [(47 84 -84 -23) -84] [(31 98 73 -38) -38] [(69 -33 -77 6) -77] [(69 66 -71 71) -71] [(-61 -87 8 -23) -87] [(-31 -15 47 69) -31] [(-19 -29 95 20) -29] [(-66 -60 -35 15) -66] [(67 75 -10 45) -10] [(-32 -57 -4 26) -57] [(66 -54 -9 81) -54] [(54 -35 -8 1) -35] [(-29 45 -100 -86) -100] [(-11 -78 4 -10) -78] [(89 -40 -93 -21) -93] [(4 -58 -47 -51) -58] [(84 -32 66 80) -32] [(85 14 79 45) 14] [(7 79 -28 77) -28] [(-70 -49 -81 5) -81] [(-86 25 21 -31) -86] [(25 -8 -55 67) -55] [(-4 72 -91 -40) -91] [(29 62 6 6) 6] [(-79 -46 49 -82) -82] [(92 -15 -76 44) -76] [(52 -86 -59 79) -86] [(-58 -17 -100 -27) -100] [(32 -57 28 -100) -100] [(-16 -58 31 -97) -97] [(52 56 -68 87) -68] [(-66 -10 65 80) -66] [(54 -71 -27 49) -71] [(-25 38 86 24) -25] [(-78 -2 -94 -79) -94] [(-78 -5 -52 -53) -78] [(-57 12 74 -33) -57] [(-7 99 97 -94) -94] [(34 13 -87 -13) -87] [(64 91 -78 -19) -78] [(-8 -3 -64 21) -64] [(-78 50 -81 -48) -81] [(40 43 -52 21) -52] [(-11 96 -30 -82) -82] [(-81 -57 -75 -17) -81] [(-2 77 35 60) -2] [(3 97 13 95) 3] [(-93 55 -53 -63) -93] [(-47 61 69 -81) -81] [(100 49 -65 50) -65] [(57 -47 69 16) -47] [(-40 -33 38 61) -40] [(-75 53 49 89) -75] [(86 -27 68 -90) -90])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[16 39 39 39] 16]
Train Case:   6 | Input/Output: [[58 58 58 -13] -13]
Train Case:   7 | Input/Output: [[-22 -22 -6 -22] -22]
Train Case:   8 | Input/Output: [[51 51 51 44] 44]
Train Case:   9 | Input/Output: [[-53 -53 -15 -53] -53]
Train Case:  10 | Input/Output: [[-62 -77 -77 -77] -77]
Train Case:  11 | Input/Output: [[67 23 23 23] 23]
Train Case:  12 | Input/Output: [[91 91 91 14] 14]
Train Case:  13 | Input/Output: [[45 45 27 45] 27]
Train Case:  14 | Input/Output: [[80 -59 80 80] -59]
Train Case:  15 | Input/Output: [(46 46 46 46) 46]
Train Case:  16 | Input/Output: [(-50 -50 -50 -50) -50]
Train Case:  17 | Input/Output: [(25 25 25 25) 25]
Train Case:  18 | Input/Output: [(82 82 82 82) 82]
Train Case:  19 | Input/Output: [(37 37 37 37) 37]
Train Case:  20 | Input/Output: [(59 83 86 34) 34]
Train Case:  21 | Input/Output: [(78 13 38 56) 13]
Train Case:  22 | Input/Output: [(49 53 89 7) 7]
Train Case:  23 | Input/Output: [(93 40 18 67) 18]
Train Case:  24 | Input/Output: [(87 74 35 65) 35]
Train Case:  25 | Input/Output: [(66 79 30 66) 30]
Train Case:  26 | Input/Output: [(7 32 78 20) 7]
Train Case:  27 | Input/Output: [(50 62 57 89) 50]
Train Case:  28 | Input/Output: [(62 77 8 76) 8]
Train Case:  29 | Input/Output: [(19 64 14 10) 10]
Train Case:  30 | Input/Output: [(61 34 87 2) 2]
Train Case:  31 | Input/Output: [(95 22 11 2) 2]
Train Case:  32 | Input/Output: [(8 4 1 6) 1]
Train Case:  33 | Input/Output: [(61 10 5 55) 5]
Train Case:  34 | Input/Output: [(64 71 52 23) 23]
Train Case:  35 | Input/Output: [(87 25 28 67) 25]
Train Case:  36 | Input/Output: [(7 33 73 30) 7]
Train Case:  37 | Input/Output: [(96 69 88 30) 30]
Train Case:  38 | Input/Output: [(90 53 67 73) 53]
Train Case:  39 | Input/Output: [(8 46 15 9) 8]
Train Case:  40 | Input/Output: [(85 71 -64 -69) -69]
Train Case:  41 | Input/Output: [(-88 46 71 -29) -88]
Train Case:  42 | Input/Output: [(-21 -80 75 41) -80]
Train Case:  43 | Input/Output: [(-29 -36 -99 -82) -99]
Train Case:  44 | Input/Output: [(-81 69 56 45) -81]
Train Case:  45 | Input/Output: [(-14 -93 -73 90) -93]
Train Case:  46 | Input/Output: [(47 84 -84 -23) -84]
Train Case:  47 | Input/Output: [(31 98 73 -38) -38]
Train Case:  48 | Input/Output: [(69 -33 -77 6) -77]
Train Case:  49 | Input/Output: [(69 66 -71 71) -71]
Train Case:  50 | Input/Output: [(-61 -87 8 -23) -87]
Train Case:  51 | Input/Output: [(-31 -15 47 69) -31]
Train Case:  52 | Input/Output: [(-19 -29 95 20) -29]
Train Case:  53 | Input/Output: [(-66 -60 -35 15) -66]
Train Case:  54 | Input/Output: [(67 75 -10 45) -10]
Train Case:  55 | Input/Output: [(-32 -57 -4 26) -57]
Train Case:  56 | Input/Output: [(66 -54 -9 81) -54]
Train Case:  57 | Input/Output: [(54 -35 -8 1) -35]
Train Case:  58 | Input/Output: [(-29 45 -100 -86) -100]
Train Case:  59 | Input/Output: [(-11 -78 4 -10) -78]
Train Case:  60 | Input/Output: [(89 -40 -93 -21) -93]
Train Case:  61 | Input/Output: [(4 -58 -47 -51) -58]
Train Case:  62 | Input/Output: [(84 -32 66 80) -32]
Train Case:  63 | Input/Output: [(85 14 79 45) 14]
Train Case:  64 | Input/Output: [(7 79 -28 77) -28]
Train Case:  65 | Input/Output: [(-70 -49 -81 5) -81]
Train Case:  66 | Input/Output: [(-86 25 21 -31) -86]
Train Case:  67 | Input/Output: [(25 -8 -55 67) -55]
Train Case:  68 | Input/Output: [(-4 72 -91 -40) -91]
Train Case:  69 | Input/Output: [(29 62 6 6) 6]
Train Case:  70 | Input/Output: [(-79 -46 49 -82) -82]
Train Case:  71 | Input/Output: [(92 -15 -76 44) -76]
Train Case:  72 | Input/Output: [(52 -86 -59 79) -86]
Train Case:  73 | Input/Output: [(-58 -17 -100 -27) -100]
Train Case:  74 | Input/Output: [(32 -57 28 -100) -100]
Train Case:  75 | Input/Output: [(-16 -58 31 -97) -97]
Train Case:  76 | Input/Output: [(52 56 -68 87) -68]
Train Case:  77 | Input/Output: [(-66 -10 65 80) -66]
Train Case:  78 | Input/Output: [(54 -71 -27 49) -71]
Train Case:  79 | Input/Output: [(-25 38 86 24) -25]
Train Case:  80 | Input/Output: [(-78 -2 -94 -79) -94]
Train Case:  81 | Input/Output: [(-78 -5 -52 -53) -78]
Train Case:  82 | Input/Output: [(-57 12 74 -33) -57]
Train Case:  83 | Input/Output: [(-7 99 97 -94) -94]
Train Case:  84 | Input/Output: [(34 13 -87 -13) -87]
Train Case:  85 | Input/Output: [(64 91 -78 -19) -78]
Train Case:  86 | Input/Output: [(-8 -3 -64 21) -64]
Train Case:  87 | Input/Output: [(-78 50 -81 -48) -81]
Train Case:  88 | Input/Output: [(40 43 -52 21) -52]
Train Case:  89 | Input/Output: [(-11 96 -30 -82) -82]
Train Case:  90 | Input/Output: [(-81 -57 -75 -17) -81]
Train Case:  91 | Input/Output: [(-2 77 35 60) -2]
Train Case:  92 | Input/Output: [(3 97 13 95) 3]
Train Case:  93 | Input/Output: [(-93 55 -53 -63) -93]
Train Case:  94 | Input/Output: [(-47 61 69 -81) -81]
Train Case:  95 | Input/Output: [(100 49 -65 50) -65]
Train Case:  96 | Input/Output: [(57 -47 69 16) -47]
Train Case:  97 | Input/Output: [(-40 -33 38 61) -40]
Train Case:  98 | Input/Output: [(-75 53 49 89) -75]
Train Case:  99 | Input/Output: [(86 -27 68 -90) -90]
Test Case:   0 | Input/Output: [[-92 -48 -48 -48] -92]
Test Case:   1 | Input/Output: [[20 20 12 20] 12]
Test Case:   2 | Input/Output: [[73 -7 -7 -7] -7]
Test Case:   3 | Input/Output: [[38 38 25 38] 25]
Test Case:   4 | Input/Output: [[-38 -38 -43 -38] -43]
Test Case:   5 | Input/Output: [[85 76 85 85] 76]
Test Case:   6 | Input/Output: [[-10 -34 -34 -34] -34]
Test Case:   7 | Input/Output: [[-46 -46 -58 -46] -58]
Test Case:   8 | Input/Output: [[-37 48 48 48] -37]
Test Case:   9 | Input/Output: [[-98 -98 -98 95] -98]
Test Case:  10 | Input/Output: [[87 35 35 35] 35]
Test Case:  11 | Input/Output: [[74 74 74 66] 66]
Test Case:  12 | Input/Output: [[-58 -58 -58 56] -58]
Test Case:  13 | Input/Output: [[67 67 67 38] 38]
Test Case:  14 | Input/Output: [[-43 -43 -43 -11] -43]
Test Case:  15 | Input/Output: [[-72 -40 -72 -72] -72]
Test Case:  16 | Input/Output: [[-1 86 -1 -1] -1]
Test Case:  17 | Input/Output: [[-64 82 -64 -64] -64]
Test Case:  18 | Input/Output: [[-43 -43 -43 -43] -43]
Test Case:  19 | Input/Output: [[40 40 23 40] 23]
Test Case:  20 | Input/Output: [[-50 24 24 24] -50]
Test Case:  21 | Input/Output: [[46 46 46 -18] -18]
Test Case:  22 | Input/Output: [[-30 -30 -30 -8] -30]
Test Case:  23 | Input/Output: [[-50 -81 -50 -50] -81]
Test Case:  24 | Input/Output: [[-7 96 96 96] -7]
Test Case:  25 | Input/Output: [[33 33 -13 33] -13]
Test Case:  26 | Input/Output: [[-21 -50 -21 -21] -50]
Test Case:  27 | Input/Output: [[-82 -96 -82 -82] -96]
Test Case:  28 | Input/Output: [[83 83 83 -35] -35]
Test Case:  29 | Input/Output: [[58 -10 -10 -10] -10]
Test Case:  30 | Input/Output: [[17 60 17 17] 17]
Test Case:  31 | Input/Output: [[-51 -46 -46 -46] -51]
Test Case:  32 | Input/Output: [[81 81 81 -59] -59]
Test Case:  33 | Input/Output: [[-56 -56 -56 79] -56]
Test Case:  34 | Input/Output: [[-91 -91 -91 69] -91]
Test Case:  35 | Input/Output: [[5 -40 5 5] -40]
Test Case:  36 | Input/Output: [[-52 -52 12 -52] -52]
Test Case:  37 | Input/Output: [[72 -42 72 72] -42]
Test Case:  38 | Input/Output: [[2 2 2 56] 2]
Test Case:  39 | Input/Output: [[34 -44 34 34] -44]
Test Case:  40 | Input/Output: [[11 82 82 82] 11]
Test Case:  41 | Input/Output: [[-50 -50 -50 -51] -51]
Test Case:  42 | Input/Output: [[-28 13 13 13] -28]
Test Case:  43 | Input/Output: [[32 32 32 62] 32]
Test Case:  44 | Input/Output: [[-43 65 -43 -43] -43]
Test Case:  45 | Input/Output: [[40 40 73 40] 40]
Test Case:  46 | Input/Output: [[-52 7 -52 -52] -52]
Test Case:  47 | Input/Output: [[98 75 98 98] 75]
Test Case:  48 | Input/Output: [[-38 31 31 31] -38]
Test Case:  49 | Input/Output: [[-56 -83 -56 -56] -83]
Test Case:  50 | Input/Output: [[-11 -60 -60 -60] -60]
Test Case:  51 | Input/Output: [[-29 -29 -46 -29] -46]
Test Case:  52 | Input/Output: [[52 52 52 60] 52]
Test Case:  53 | Input/Output: [[24 24 24 56] 24]
Test Case:  54 | Input/Output: [[58 58 58 -30] -30]
Test Case:  55 | Input/Output: [[83 83 -10 83] -10]
Test Case:  56 | Input/Output: [[-91 -75 -75 -75] -91]
Test Case:  57 | Input/Output: [[-35 -35 31 -35] -35]
Test Case:  58 | Input/Output: [[-37 -37 9 -37] -37]
Test Case:  59 | Input/Output: [[-84 -84 -84 58] -84]
Test Case:  60 | Input/Output: [[0 0 0 82] 0]
Test Case:  61 | Input/Output: [[-16 10 10 10] -16]
Test Case:  62 | Input/Output: [[48 -46 -46 -46] -46]
Test Case:  63 | Input/Output: [[72 -15 72 72] -15]
Test Case:  64 | Input/Output: [[-76 74 74 74] -76]
Test Case:  65 | Input/Output: [[-26 -26 -26 -91] -91]
Test Case:  66 | Input/Output: [[-6 -6 -6 70] -6]
Test Case:  67 | Input/Output: [[40 -85 -85 -85] -85]
Test Case:  68 | Input/Output: [[-8 -48 -48 -48] -48]
Test Case:  69 | Input/Output: [[-98 -98 -98 -71] -98]
Test Case:  70 | Input/Output: [[1 79 1 1] 1]
Test Case:  71 | Input/Output: [[28 -50 28 28] -50]
Test Case:  72 | Input/Output: [[-81 -51 -81 -81] -81]
Test Case:  73 | Input/Output: [[-40 -44 -44 -44] -44]
Test Case:  74 | Input/Output: [[-79 -93 -79 -79] -93]
Test Case:  75 | Input/Output: [[46 46 -52 46] -52]
Test Case:  76 | Input/Output: [[-74 -74 -74 34] -74]
Test Case:  77 | Input/Output: [[-14 -14 -14 77] -14]
Test Case:  78 | Input/Output: [[-86 -86 -86 -5] -86]
Test Case:  79 | Input/Output: [[-46 5 -46 -46] -46]
Test Case:  80 | Input/Output: [[-82 -82 -82 -8] -82]
Test Case:  81 | Input/Output: [[-30 -30 -82 -30] -82]
Test Case:  82 | Input/Output: [[33 33 33 -62] -62]
Test Case:  83 | Input/Output: [[47 47 47 -33] -33]
Test Case:  84 | Input/Output: [[60 -35 -35 -35] -35]
Test Case:  85 | Input/Output: [[85 85 85 -43] -43]
Test Case:  86 | Input/Output: [[48 48 48 -77] -77]
Test Case:  87 | Input/Output: [[-80 -80 -94 -80] -94]
Test Case:  88 | Input/Output: [[9 9 9 87] 9]
Test Case:  89 | Input/Output: [[-80 -34 -80 -80] -80]
Test Case:  90 | Input/Output: [[74 74 74 -28] -28]
Test Case:  91 | Input/Output: [[66 66 18 66] 18]
Test Case:  92 | Input/Output: [[55 95 55 55] 55]
Test Case:  93 | Input/Output: [[-67 -67 25 -67] -67]
Test Case:  94 | Input/Output: [[81 81 10 81] 10]
Test Case:  95 | Input/Output: [[56 56 56 -60] -60]
Test Case:  96 | Input/Output: [[-9 22 -9 -9] -9]
Test Case:  97 | Input/Output: [[-30 -30 30 -30] -30]
Test Case:  98 | Input/Output: [[80 -90 80 80] -90]
Test Case:  99 | Input/Output: [[83 83 85 83] 83]
Test Case: 100 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 101 | Input/Output: [(3 3 3 3) 3]
Test Case: 102 | Input/Output: [(35 35 35 35) 35]
Test Case: 103 | Input/Output: [(58 58 58 58) 58]
Test Case: 104 | Input/Output: [(28 28 28 28) 28]
Test Case: 105 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 106 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 107 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 108 | Input/Output: [(4 4 4 4) 4]
Test Case: 109 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 110 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 111 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 112 | Input/Output: [(71 71 71 71) 71]
Test Case: 113 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 114 | Input/Output: [(74 74 74 74) 74]
Test Case: 115 | Input/Output: [(80 80 80 80) 80]
Test Case: 116 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 117 | Input/Output: [(48 48 48 48) 48]
Test Case: 118 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 119 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 120 | Input/Output: [(72 72 72 72) 72]
Test Case: 121 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 122 | Input/Output: [(21 21 21 21) 21]
Test Case: 123 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 124 | Input/Output: [(47 47 47 47) 47]
Test Case: 125 | Input/Output: [(57 57 57 57) 57]
Test Case: 126 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 127 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 128 | Input/Output: [(48 48 48 48) 48]
Test Case: 129 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 130 | Input/Output: [(96 96 96 96) 96]
Test Case: 131 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 132 | Input/Output: [(80 80 80 80) 80]
Test Case: 133 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 134 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 135 | Input/Output: [(9 9 9 9) 9]
Test Case: 136 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 137 | Input/Output: [(76 76 76 76) 76]
Test Case: 138 | Input/Output: [(71 71 71 71) 71]
Test Case: 139 | Input/Output: [(51 51 51 51) 51]
Test Case: 140 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 141 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 142 | Input/Output: [(29 29 29 29) 29]
Test Case: 143 | Input/Output: [(62 62 62 62) 62]
Test Case: 144 | Input/Output: [(3 3 3 3) 3]
Test Case: 145 | Input/Output: [(44 44 44 44) 44]
Test Case: 146 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 147 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 148 | Input/Output: [(55 55 55 55) 55]
Test Case: 149 | Input/Output: [(69 69 69 69) 69]
Test Case: 150 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 151 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 152 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 153 | Input/Output: [(95 95 95 95) 95]
Test Case: 154 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 155 | Input/Output: [(21 21 21 21) 21]
Test Case: 156 | Input/Output: [(64 64 64 64) 64]
Test Case: 157 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 158 | Input/Output: [(48 48 48 48) 48]
Test Case: 159 | Input/Output: [(80 80 80 80) 80]
Test Case: 160 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 161 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 162 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 163 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 164 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 165 | Input/Output: [(74 74 74 74) 74]
Test Case: 166 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 167 | Input/Output: [(58 58 58 58) 58]
Test Case: 168 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 169 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 170 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 171 | Input/Output: [(39 39 39 39) 39]
Test Case: 172 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 173 | Input/Output: [(80 80 80 80) 80]
Test Case: 174 | Input/Output: [(81 81 81 81) 81]
Test Case: 175 | Input/Output: [(75 75 75 75) 75]
Test Case: 176 | Input/Output: [(13 13 13 13) 13]
Test Case: 177 | Input/Output: [(38 38 38 38) 38]
Test Case: 178 | Input/Output: [(8 8 8 8) 8]
Test Case: 179 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 180 | Input/Output: [(13 13 13 13) 13]
Test Case: 181 | Input/Output: [(56 56 56 56) 56]
Test Case: 182 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 183 | Input/Output: [(7 7 7 7) 7]
Test Case: 184 | Input/Output: [(36 36 36 36) 36]
Test Case: 185 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 186 | Input/Output: [(66 66 66 66) 66]
Test Case: 187 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 188 | Input/Output: [(54 54 54 54) 54]
Test Case: 189 | Input/Output: [(74 74 74 74) 74]
Test Case: 190 | Input/Output: [(83 83 83 83) 83]
Test Case: 191 | Input/Output: [(69 69 69 69) 69]
Test Case: 192 | Input/Output: [(39 39 39 39) 39]
Test Case: 193 | Input/Output: [(59 59 59 59) 59]
Test Case: 194 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 195 | Input/Output: [(91 91 91 91) 91]
Test Case: 196 | Input/Output: [(60 60 60 60) 60]
Test Case: 197 | Input/Output: [(68 68 68 68) 68]
Test Case: 198 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 199 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 200 | Input/Output: [(14 72 23 99) 14]
Test Case: 201 | Input/Output: [(92 10 29 28) 10]
Test Case: 202 | Input/Output: [(99 87 22 88) 22]
Test Case: 203 | Input/Output: [(28 88 26 46) 26]
Test Case: 204 | Input/Output: [(27 52 28 85) 27]
Test Case: 205 | Input/Output: [(59 34 46 69) 34]
Test Case: 206 | Input/Output: [(98 91 8 80) 8]
Test Case: 207 | Input/Output: [(22 12 96 12) 12]
Test Case: 208 | Input/Output: [(100 6 26 86) 6]
Test Case: 209 | Input/Output: [(38 97 3 83) 3]
Test Case: 210 | Input/Output: [(54 26 95 70) 26]
Test Case: 211 | Input/Output: [(81 84 4 27) 4]
Test Case: 212 | Input/Output: [(7 88 66 42) 7]
Test Case: 213 | Input/Output: [(23 37 11 73) 11]
Test Case: 214 | Input/Output: [(8 52 52 15) 8]
Test Case: 215 | Input/Output: [(60 1 23 79) 1]
Test Case: 216 | Input/Output: [(38 56 22 70) 22]
Test Case: 217 | Input/Output: [(8 26 83 58) 8]
Test Case: 218 | Input/Output: [(29 39 33 19) 19]
Test Case: 219 | Input/Output: [(35 40 92 71) 35]
Test Case: 220 | Input/Output: [(58 51 60 49) 49]
Test Case: 221 | Input/Output: [(68 76 30 53) 30]
Test Case: 222 | Input/Output: [(6 98 69 84) 6]
Test Case: 223 | Input/Output: [(91 50 36 72) 36]
Test Case: 224 | Input/Output: [(6 12 26 91) 6]
Test Case: 225 | Input/Output: [(50 18 77 27) 18]
Test Case: 226 | Input/Output: [(19 22 15 80) 15]
Test Case: 227 | Input/Output: [(75 29 36 12) 12]
Test Case: 228 | Input/Output: [(19 38 9 61) 9]
Test Case: 229 | Input/Output: [(52 63 82 41) 41]
Test Case: 230 | Input/Output: [(47 29 81 54) 29]
Test Case: 231 | Input/Output: [(32 55 61 89) 32]
Test Case: 232 | Input/Output: [(90 60 4 17) 4]
Test Case: 233 | Input/Output: [(48 12 6 67) 6]
Test Case: 234 | Input/Output: [(41 84 33 48) 33]
Test Case: 235 | Input/Output: [(55 41 18 72) 18]
Test Case: 236 | Input/Output: [(36 12 1 52) 1]
Test Case: 237 | Input/Output: [(80 75 22 13) 13]
Test Case: 238 | Input/Output: [(39 98 92 76) 39]
Test Case: 239 | Input/Output: [(96 93 25 64) 25]
Test Case: 240 | Input/Output: [(22 32 33 42) 22]
Test Case: 241 | Input/Output: [(99 51 50 8) 8]
Test Case: 242 | Input/Output: [(41 100 40 70) 40]
Test Case: 243 | Input/Output: [(35 75 1 87) 1]
Test Case: 244 | Input/Output: [(73 64 68 29) 29]
Test Case: 245 | Input/Output: [(61 82 3 25) 3]
Test Case: 246 | Input/Output: [(91 59 45 15) 15]
Test Case: 247 | Input/Output: [(1 25 13 14) 1]
Test Case: 248 | Input/Output: [(38 82 28 80) 28]
Test Case: 249 | Input/Output: [(91 46 80 39) 39]
Test Case: 250 | Input/Output: [(36 53 85 16) 16]
Test Case: 251 | Input/Output: [(62 77 1 71) 1]
Test Case: 252 | Input/Output: [(23 95 91 63) 23]
Test Case: 253 | Input/Output: [(90 36 84 44) 36]
Test Case: 254 | Input/Output: [(68 68 11 49) 11]
Test Case: 255 | Input/Output: [(77 80 70 56) 56]
Test Case: 256 | Input/Output: [(47 67 72 7) 7]
Test Case: 257 | Input/Output: [(30 6 54 27) 6]
Test Case: 258 | Input/Output: [(39 99 56 36) 36]
Test Case: 259 | Input/Output: [(50 3 64 57) 3]
Test Case: 260 | Input/Output: [(8 44 15 9) 8]
Test Case: 261 | Input/Output: [(18 40 63 27) 18]
Test Case: 262 | Input/Output: [(64 83 69 86) 64]
Test Case: 263 | Input/Output: [(59 31 38 100) 31]
Test Case: 264 | Input/Output: [(54 73 46 74) 46]
Test Case: 265 | Input/Output: [(60 98 74 84) 60]
Test Case: 266 | Input/Output: [(37 12 24 34) 12]
Test Case: 267 | Input/Output: [(15 60 48 6) 6]
Test Case: 268 | Input/Output: [(0 17 62 91) 0]
Test Case: 269 | Input/Output: [(67 42 79 60) 42]
Test Case: 270 | Input/Output: [(14 99 4 93) 4]
Test Case: 271 | Input/Output: [(74 14 24 67) 14]
Test Case: 272 | Input/Output: [(45 28 3 86) 3]
Test Case: 273 | Input/Output: [(29 30 53 55) 29]
Test Case: 274 | Input/Output: [(68 41 32 58) 32]
Test Case: 275 | Input/Output: [(75 2 27 88) 2]
Test Case: 276 | Input/Output: [(13 50 30 22) 13]
Test Case: 277 | Input/Output: [(59 88 70 73) 59]
Test Case: 278 | Input/Output: [(99 21 2 83) 2]
Test Case: 279 | Input/Output: [(93 97 92 9) 9]
Test Case: 280 | Input/Output: [(34 9 68 61) 9]
Test Case: 281 | Input/Output: [(49 58 84 16) 16]
Test Case: 282 | Input/Output: [(6 91 69 89) 6]
Test Case: 283 | Input/Output: [(11 3 99 1) 1]
Test Case: 284 | Input/Output: [(27 67 15 40) 15]
Test Case: 285 | Input/Output: [(77 25 1 46) 1]
Test Case: 286 | Input/Output: [(94 93 21 47) 21]
Test Case: 287 | Input/Output: [(11 82 75 84) 11]
Test Case: 288 | Input/Output: [(30 57 1 12) 1]
Test Case: 289 | Input/Output: [(67 98 44 77) 44]
Test Case: 290 | Input/Output: [(76 14 46 21) 14]
Test Case: 291 | Input/Output: [(90 65 93 29) 29]
Test Case: 292 | Input/Output: [(88 48 78 46) 46]
Test Case: 293 | Input/Output: [(97 52 18 69) 18]
Test Case: 294 | Input/Output: [(32 9 24 3) 3]
Test Case: 295 | Input/Output: [(99 71 61 100) 61]
Test Case: 296 | Input/Output: [(1 11 6 79) 1]
Test Case: 297 | Input/Output: [(94 6 37 22) 6]
Test Case: 298 | Input/Output: [(97 98 86 46) 46]
Test Case: 299 | Input/Output: [(80 85 23 37) 23]
Test Case: 300 | Input/Output: [(100 62 70 31) 31]
Test Case: 301 | Input/Output: [(13 23 74 99) 13]
Test Case: 302 | Input/Output: [(13 63 19 55) 13]
Test Case: 303 | Input/Output: [(94 21 87 35) 21]
Test Case: 304 | Input/Output: [(52 13 80 22) 13]
Test Case: 305 | Input/Output: [(26 0 82 84) 0]
Test Case: 306 | Input/Output: [(28 19 51 46) 19]
Test Case: 307 | Input/Output: [(95 40 37 18) 18]
Test Case: 308 | Input/Output: [(34 70 10 9) 9]
Test Case: 309 | Input/Output: [(69 89 0 43) 0]
Test Case: 310 | Input/Output: [(11 67 96 28) 11]
Test Case: 311 | Input/Output: [(6 38 38 72) 6]
Test Case: 312 | Input/Output: [(36 23 90 24) 23]
Test Case: 313 | Input/Output: [(4 65 83 91) 4]
Test Case: 314 | Input/Output: [(92 16 36 32) 16]
Test Case: 315 | Input/Output: [(16 19 34 86) 16]
Test Case: 316 | Input/Output: [(51 75 42 61) 42]
Test Case: 317 | Input/Output: [(12 46 80 10) 10]
Test Case: 318 | Input/Output: [(51 68 92 6) 6]
Test Case: 319 | Input/Output: [(13 59 38 98) 13]
Test Case: 320 | Input/Output: [(21 56 41 36) 21]
Test Case: 321 | Input/Output: [(90 44 93 72) 44]
Test Case: 322 | Input/Output: [(42 96 44 53) 42]
Test Case: 323 | Input/Output: [(56 52 48 40) 40]
Test Case: 324 | Input/Output: [(60 28 33 66) 28]
Test Case: 325 | Input/Output: [(36 72 76 33) 33]
Test Case: 326 | Input/Output: [(7 18 31 54) 7]
Test Case: 327 | Input/Output: [(59 64 51 54) 51]
Test Case: 328 | Input/Output: [(16 23 83 36) 16]
Test Case: 329 | Input/Output: [(6 30 1 39) 1]
Test Case: 330 | Input/Output: [(14 22 87 18) 14]
Test Case: 331 | Input/Output: [(27 96 93 98) 27]
Test Case: 332 | Input/Output: [(92 12 58 68) 12]
Test Case: 333 | Input/Output: [(11 44 1 59) 1]
Test Case: 334 | Input/Output: [(1 34 82 15) 1]
Test Case: 335 | Input/Output: [(53 62 93 95) 53]
Test Case: 336 | Input/Output: [(55 4 14 41) 4]
Test Case: 337 | Input/Output: [(98 59 82 10) 10]
Test Case: 338 | Input/Output: [(84 82 43 62) 43]
Test Case: 339 | Input/Output: [(38 9 78 62) 9]
Test Case: 340 | Input/Output: [(57 56 26 74) 26]
Test Case: 341 | Input/Output: [(53 57 15 16) 15]
Test Case: 342 | Input/Output: [(40 68 98 17) 17]
Test Case: 343 | Input/Output: [(99 16 25 72) 16]
Test Case: 344 | Input/Output: [(51 78 17 4) 4]
Test Case: 345 | Input/Output: [(100 96 2 5) 2]
Test Case: 346 | Input/Output: [(13 18 36 38) 13]
Test Case: 347 | Input/Output: [(41 54 92 40) 40]
Test Case: 348 | Input/Output: [(1 72 90 18) 1]
Test Case: 349 | Input/Output: [(23 32 13 32) 13]
Test Case: 350 | Input/Output: [(53 29 74 14) 14]
Test Case: 351 | Input/Output: [(50 79 71 77) 50]
Test Case: 352 | Input/Output: [(29 14 23 5) 5]
Test Case: 353 | Input/Output: [(74 7 47 8) 7]
Test Case: 354 | Input/Output: [(92 27 90 44) 27]
Test Case: 355 | Input/Output: [(71 32 90 30) 30]
Test Case: 356 | Input/Output: [(95 49 93 75) 49]
Test Case: 357 | Input/Output: [(78 37 41 29) 29]
Test Case: 358 | Input/Output: [(97 69 14 67) 14]
Test Case: 359 | Input/Output: [(26 40 85 15) 15]
Test Case: 360 | Input/Output: [(61 48 6 11) 6]
Test Case: 361 | Input/Output: [(59 96 42 72) 42]
Test Case: 362 | Input/Output: [(65 86 22 0) 0]
Test Case: 363 | Input/Output: [(74 12 80 11) 11]
Test Case: 364 | Input/Output: [(0 51 11 85) 0]
Test Case: 365 | Input/Output: [(97 27 57 79) 27]
Test Case: 366 | Input/Output: [(6 75 69 46) 6]
Test Case: 367 | Input/Output: [(36 87 94 57) 36]
Test Case: 368 | Input/Output: [(12 81 66 76) 12]
Test Case: 369 | Input/Output: [(68 96 49 10) 10]
Test Case: 370 | Input/Output: [(99 10 50 8) 8]
Test Case: 371 | Input/Output: [(88 10 90 77) 10]
Test Case: 372 | Input/Output: [(66 31 33 0) 0]
Test Case: 373 | Input/Output: [(34 63 41 20) 20]
Test Case: 374 | Input/Output: [(32 71 6 32) 6]
Test Case: 375 | Input/Output: [(25 48 2 4) 2]
Test Case: 376 | Input/Output: [(95 1 52 63) 1]
Test Case: 377 | Input/Output: [(54 20 13 30) 13]
Test Case: 378 | Input/Output: [(85 47 60 39) 39]
Test Case: 379 | Input/Output: [(6 29 77 18) 6]
Test Case: 380 | Input/Output: [(28 37 42 10) 10]
Test Case: 381 | Input/Output: [(49 96 88 41) 41]
Test Case: 382 | Input/Output: [(74 47 21 85) 21]
Test Case: 383 | Input/Output: [(3 94 49 27) 3]
Test Case: 384 | Input/Output: [(62 91 24 87) 24]
Test Case: 385 | Input/Output: [(81 79 90 70) 70]
Test Case: 386 | Input/Output: [(70 53 21 56) 21]
Test Case: 387 | Input/Output: [(73 97 52 67) 52]
Test Case: 388 | Input/Output: [(0 64 53 70) 0]
Test Case: 389 | Input/Output: [(35 47 22 31) 22]
Test Case: 390 | Input/Output: [(62 73 88 30) 30]
Test Case: 391 | Input/Output: [(19 81 64 46) 19]
Test Case: 392 | Input/Output: [(71 78 47 57) 47]
Test Case: 393 | Input/Output: [(57 79 92 8) 8]
Test Case: 394 | Input/Output: [(83 33 45 12) 12]
Test Case: 395 | Input/Output: [(27 65 38 1) 1]
Test Case: 396 | Input/Output: [(95 5 89 46) 5]
Test Case: 397 | Input/Output: [(23 46 78 31) 23]
Test Case: 398 | Input/Output: [(73 13 84 52) 13]
Test Case: 399 | Input/Output: [(68 64 47 1) 1]
Test Case: 400 | Input/Output: [(78 77 -63 18) -63]
Test Case: 401 | Input/Output: [(-2 -55 -89 -38) -89]
Test Case: 402 | Input/Output: [(-84 85 -20 -75) -84]
Test Case: 403 | Input/Output: [(-2 6 -75 -38) -75]
Test Case: 404 | Input/Output: [(22 -90 -57 95) -90]
Test Case: 405 | Input/Output: [(-71 -19 84 -73) -73]
Test Case: 406 | Input/Output: [(-75 -90 25 -99) -99]
Test Case: 407 | Input/Output: [(-19 -13 15 -29) -29]
Test Case: 408 | Input/Output: [(88 -34 30 -80) -80]
Test Case: 409 | Input/Output: [(65 -78 -3 65) -78]
Test Case: 410 | Input/Output: [(-69 -4 -7 86) -69]
Test Case: 411 | Input/Output: [(20 78 75 55) 20]
Test Case: 412 | Input/Output: [(-42 91 84 56) -42]
Test Case: 413 | Input/Output: [(-39 -85 -84 -81) -85]
Test Case: 414 | Input/Output: [(-63 -48 -90 -98) -98]
Test Case: 415 | Input/Output: [(61 48 5 -93) -93]
Test Case: 416 | Input/Output: [(-74 -6 -60 37) -74]
Test Case: 417 | Input/Output: [(98 -26 32 97) -26]
Test Case: 418 | Input/Output: [(-90 1 -38 61) -90]
Test Case: 419 | Input/Output: [(-11 -84 -78 -17) -84]
Test Case: 420 | Input/Output: [(63 32 -93 71) -93]
Test Case: 421 | Input/Output: [(-69 -31 -64 79) -69]
Test Case: 422 | Input/Output: [(-84 57 -58 -53) -84]
Test Case: 423 | Input/Output: [(-46 -8 53 15) -46]
Test Case: 424 | Input/Output: [(-46 -25 100 12) -46]
Test Case: 425 | Input/Output: [(-65 10 -21 39) -65]
Test Case: 426 | Input/Output: [(55 34 -14 32) -14]
Test Case: 427 | Input/Output: [(4 65 -69 99) -69]
Test Case: 428 | Input/Output: [(-42 71 50 73) -42]
Test Case: 429 | Input/Output: [(-41 -67 -98 -83) -98]
Test Case: 430 | Input/Output: [(-50 93 -99 40) -99]
Test Case: 431 | Input/Output: [(2 64 39 28) 2]
Test Case: 432 | Input/Output: [(-96 -27 -50 80) -96]
Test Case: 433 | Input/Output: [(73 -8 -10 32) -10]
Test Case: 434 | Input/Output: [(94 82 78 40) 40]
Test Case: 435 | Input/Output: [(-2 62 58 -28) -28]
Test Case: 436 | Input/Output: [(79 21 -35 75) -35]
Test Case: 437 | Input/Output: [(59 -95 -17 -54) -95]
Test Case: 438 | Input/Output: [(-76 -44 55 82) -76]
Test Case: 439 | Input/Output: [(-4 84 -87 -40) -87]
Test Case: 440 | Input/Output: [(10 -79 -8 89) -79]
Test Case: 441 | Input/Output: [(-87 53 71 27) -87]
Test Case: 442 | Input/Output: [(-47 -62 42 15) -62]
Test Case: 443 | Input/Output: [(36 48 96 58) 36]
Test Case: 444 | Input/Output: [(-5 -68 -90 -56) -90]
Test Case: 445 | Input/Output: [(85 95 4 26) 4]
Test Case: 446 | Input/Output: [(-9 56 -49 3) -49]
Test Case: 447 | Input/Output: [(69 72 -21 -77) -77]
Test Case: 448 | Input/Output: [(-53 -11 -87 78) -87]
Test Case: 449 | Input/Output: [(-20 77 75 -73) -73]
Test Case: 450 | Input/Output: [(46 29 -64 -19) -64]
Test Case: 451 | Input/Output: [(2 -44 -96 -70) -96]
Test Case: 452 | Input/Output: [(70 -77 -18 49) -77]
Test Case: 453 | Input/Output: [(-89 17 -51 -84) -89]
Test Case: 454 | Input/Output: [(9 -97 -62 51) -97]
Test Case: 455 | Input/Output: [(-18 78 -37 -60) -60]
Test Case: 456 | Input/Output: [(-92 -29 -32 61) -92]
Test Case: 457 | Input/Output: [(19 36 54 -75) -75]
Test Case: 458 | Input/Output: [(-48 -96 -99 54) -99]
Test Case: 459 | Input/Output: [(14 95 -74 -58) -74]
Test Case: 460 | Input/Output: [(-91 -52 -84 90) -91]
Test Case: 461 | Input/Output: [(-28 -45 -76 -94) -94]
Test Case: 462 | Input/Output: [(85 -70 73 -84) -84]
Test Case: 463 | Input/Output: [(4 90 76 17) 4]
Test Case: 464 | Input/Output: [(-30 -62 39 -22) -62]
Test Case: 465 | Input/Output: [(-97 49 -85 13) -97]
Test Case: 466 | Input/Output: [(11 -33 -41 -50) -50]
Test Case: 467 | Input/Output: [(50 -33 80 95) -33]
Test Case: 468 | Input/Output: [(93 -62 -93 68) -93]
Test Case: 469 | Input/Output: [(-94 -27 10 -55) -94]
Test Case: 470 | Input/Output: [(82 -21 31 14) -21]
Test Case: 471 | Input/Output: [(30 85 -41 17) -41]
Test Case: 472 | Input/Output: [(34 28 15 -11) -11]
Test Case: 473 | Input/Output: [(-66 81 46 -9) -66]
Test Case: 474 | Input/Output: [(-64 5 -25 -82) -82]
Test Case: 475 | Input/Output: [(16 81 -67 -98) -98]
Test Case: 476 | Input/Output: [(73 -58 -88 87) -88]
Test Case: 477 | Input/Output: [(-1 -72 11 69) -72]
Test Case: 478 | Input/Output: [(-68 43 65 -97) -97]
Test Case: 479 | Input/Output: [(-52 18 -36 -61) -61]
Test Case: 480 | Input/Output: [(95 -93 87 -100) -100]
Test Case: 481 | Input/Output: [(-96 32 61 -35) -96]
Test Case: 482 | Input/Output: [(-61 -24 75 38) -61]
Test Case: 483 | Input/Output: [(54 -38 -94 69) -94]
Test Case: 484 | Input/Output: [(74 -81 84 28) -81]
Test Case: 485 | Input/Output: [(41 -90 39 11) -90]
Test Case: 486 | Input/Output: [(64 12 -32 80) -32]
Test Case: 487 | Input/Output: [(73 -44 -91 85) -91]
Test Case: 488 | Input/Output: [(48 -45 88 -1) -45]
Test Case: 489 | Input/Output: [(-39 -71 77 -53) -71]
Test Case: 490 | Input/Output: [(87 90 88 -79) -79]
Test Case: 491 | Input/Output: [(-20 32 76 96) -20]
Test Case: 492 | Input/Output: [(4 27 0 32) 0]
Test Case: 493 | Input/Output: [(94 -68 -65 -67) -68]
Test Case: 494 | Input/Output: [(-42 16 5 35) -42]
Test Case: 495 | Input/Output: [(-82 -65 -31 -51) -82]
Test Case: 496 | Input/Output: [(-25 6 98 -35) -35]
Test Case: 497 | Input/Output: [(-39 82 -56 -62) -62]
Test Case: 498 | Input/Output: [(-15 -5 57 11) -15]
Test Case: 499 | Input/Output: [(81 -27 -29 34) -29]
Test Case: 500 | Input/Output: [(-79 -10 2 -41) -79]
Test Case: 501 | Input/Output: [(39 83 1 20) 1]
Test Case: 502 | Input/Output: [(62 7 43 -33) -33]
Test Case: 503 | Input/Output: [(-21 -76 -89 59) -89]
Test Case: 504 | Input/Output: [(-76 -18 26 -100) -100]
Test Case: 505 | Input/Output: [(97 92 50 -50) -50]
Test Case: 506 | Input/Output: [(78 24 -62 14) -62]
Test Case: 507 | Input/Output: [(-14 -64 32 90) -64]
Test Case: 508 | Input/Output: [(95 -47 -77 -62) -77]
Test Case: 509 | Input/Output: [(15 64 76 -76) -76]
Test Case: 510 | Input/Output: [(51 45 -97 56) -97]
Test Case: 511 | Input/Output: [(77 -93 -55 -87) -93]
Test Case: 512 | Input/Output: [(-39 -87 -15 59) -87]
Test Case: 513 | Input/Output: [(10 42 -37 31) -37]
Test Case: 514 | Input/Output: [(-61 -75 78 76) -75]
Test Case: 515 | Input/Output: [(-45 59 -84 -50) -84]
Test Case: 516 | Input/Output: [(5 -31 43 27) -31]
Test Case: 517 | Input/Output: [(44 -44 81 51) -44]
Test Case: 518 | Input/Output: [(18 -100 22 83) -100]
Test Case: 519 | Input/Output: [(87 -36 21 57) -36]
Test Case: 520 | Input/Output: [(31 22 -35 37) -35]
Test Case: 521 | Input/Output: [(66 -29 -89 81) -89]
Test Case: 522 | Input/Output: [(-43 -56 41 -4) -56]
Test Case: 523 | Input/Output: [(4 -80 -67 99) -80]
Test Case: 524 | Input/Output: [(89 71 69 44) 44]
Test Case: 525 | Input/Output: [(-29 4 84 32) -29]
Test Case: 526 | Input/Output: [(34 85 90 95) 34]
Test Case: 527 | Input/Output: [(-65 -25 39 63) -65]
Test Case: 528 | Input/Output: [(24 -90 99 -95) -95]
Test Case: 529 | Input/Output: [(-54 30 17 -43) -54]
Test Case: 530 | Input/Output: [(92 43 55 1) 1]
Test Case: 531 | Input/Output: [(-56 -83 33 -43) -83]
Test Case: 532 | Input/Output: [(99 42 34 21) 21]
Test Case: 533 | Input/Output: [(15 -20 61 7) -20]
Test Case: 534 | Input/Output: [(62 52 96 84) 52]
Test Case: 535 | Input/Output: [(-72 -33 -69 95) -72]
Test Case: 536 | Input/Output: [(31 -95 95 -99) -99]
Test Case: 537 | Input/Output: [(25 92 -35 -51) -51]
Test Case: 538 | Input/Output: [(12 -95 57 -48) -95]
Test Case: 539 | Input/Output: [(3 -84 14 -66) -84]
Test Case: 540 | Input/Output: [(96 32 72 -71) -71]
Test Case: 541 | Input/Output: [(-3 -83 49 81) -83]
Test Case: 542 | Input/Output: [(-12 62 -73 40) -73]
Test Case: 543 | Input/Output: [(0 96 -85 97) -85]
Test Case: 544 | Input/Output: [(-50 -44 87 -55) -55]
Test Case: 545 | Input/Output: [(31 88 -4 -29) -29]
Test Case: 546 | Input/Output: [(77 -96 -97 23) -97]
Test Case: 547 | Input/Output: [(-53 -27 47 21) -53]
Test Case: 548 | Input/Output: [(38 -83 70 95) -83]
Test Case: 549 | Input/Output: [(100 -13 64 80) -13]
Test Case: 550 | Input/Output: [(-60 23 62 22) -60]
Test Case: 551 | Input/Output: [(26 47 -96 -63) -96]
Test Case: 552 | Input/Output: [(76 94 37 61) 37]
Test Case: 553 | Input/Output: [(45 1 -17 -36) -36]
Test Case: 554 | Input/Output: [(-39 78 97 56) -39]
Test Case: 555 | Input/Output: [(-97 58 43 0) -97]
Test Case: 556 | Input/Output: [(-62 60 88 -44) -62]
Test Case: 557 | Input/Output: [(-97 38 -47 41) -97]
Test Case: 558 | Input/Output: [(-57 -9 -66 11) -66]
Test Case: 559 | Input/Output: [(-55 -74 -5 -7) -74]
Test Case: 560 | Input/Output: [(-14 78 4 73) -14]
Test Case: 561 | Input/Output: [(-37 -45 48 7) -45]
Test Case: 562 | Input/Output: [(99 60 37 -56) -56]
Test Case: 563 | Input/Output: [(4 -24 -93 54) -93]
Test Case: 564 | Input/Output: [(-53 -74 -83 -94) -94]
Test Case: 565 | Input/Output: [(-22 -25 -69 79) -69]
Test Case: 566 | Input/Output: [(-6 -66 37 57) -66]
Test Case: 567 | Input/Output: [(1 51 77 -87) -87]
Test Case: 568 | Input/Output: [(-28 28 -44 -54) -54]
Test Case: 569 | Input/Output: [(40 1 -91 -57) -91]
Test Case: 570 | Input/Output: [(-99 68 -66 40) -99]
Test Case: 571 | Input/Output: [(-6 20 12 -54) -54]
Test Case: 572 | Input/Output: [(58 -2 25 -65) -65]
Test Case: 573 | Input/Output: [(-47 74 -9 -11) -47]
Test Case: 574 | Input/Output: [(16 -30 -35 88) -35]
Test Case: 575 | Input/Output: [(-24 28 -31 1) -31]
Test Case: 576 | Input/Output: [(52 -83 -91 50) -91]
Test Case: 577 | Input/Output: [(28 -98 -57 46) -98]
Test Case: 578 | Input/Output: [(43 -8 -6 15) -8]
Test Case: 579 | Input/Output: [(70 -54 -27 -75) -75]
Test Case: 580 | Input/Output: [(-83 -11 -93 86) -93]
Test Case: 581 | Input/Output: [(59 61 -6 48) -6]
Test Case: 582 | Input/Output: [(70 -10 -50 -38) -50]
Test Case: 583 | Input/Output: [(-84 -77 77 -88) -88]
Test Case: 584 | Input/Output: [(11 -75 -21 43) -75]
Test Case: 585 | Input/Output: [(-91 -20 -92 -19) -92]
Test Case: 586 | Input/Output: [(56 16 -58 7) -58]
Test Case: 587 | Input/Output: [(-1 3 48 -56) -56]
Test Case: 588 | Input/Output: [(-78 -59 47 -14) -78]
Test Case: 589 | Input/Output: [(-10 90 50 71) -10]
Test Case: 590 | Input/Output: [(24 -17 39 84) -17]
Test Case: 591 | Input/Output: [(41 25 23 -94) -94]
Test Case: 592 | Input/Output: [(-41 91 65 -74) -74]
Test Case: 593 | Input/Output: [(98 13 7 -94) -94]
Test Case: 594 | Input/Output: [(-29 -37 -25 56) -37]
Test Case: 595 | Input/Output: [(44 -59 -81 60) -81]
Test Case: 596 | Input/Output: [(48 -69 34 -93) -93]
Test Case: 597 | Input/Output: [(-89 -6 48 99) -89]
Test Case: 598 | Input/Output: [(25 -34 -11 79) -34]
Test Case: 599 | Input/Output: [(80 -31 37 -19) -31]
Test Case: 600 | Input/Output: [(4 -68 -29 -91) -91]
Test Case: 601 | Input/Output: [(-12 -46 -95 -33) -95]
Test Case: 602 | Input/Output: [(65 40 75 -64) -64]
Test Case: 603 | Input/Output: [(-15 -59 0 -8) -59]
Test Case: 604 | Input/Output: [(14 -58 -35 72) -58]
Test Case: 605 | Input/Output: [(-74 98 -97 37) -97]
Test Case: 606 | Input/Output: [(-23 84 60 82) -23]
Test Case: 607 | Input/Output: [(81 39 -32 -5) -32]
Test Case: 608 | Input/Output: [(100 -56 0 23) -56]
Test Case: 609 | Input/Output: [(-58 68 39 -70) -70]
Test Case: 610 | Input/Output: [(63 47 -61 -8) -61]
Test Case: 611 | Input/Output: [(-8 12 82 91) -8]
Test Case: 612 | Input/Output: [(40 -3 27 17) -3]
Test Case: 613 | Input/Output: [(90 4 -27 99) -27]
Test Case: 614 | Input/Output: [(-56 95 -80 70) -80]
Test Case: 615 | Input/Output: [(-18 -87 -60 -76) -87]
Test Case: 616 | Input/Output: [(88 40 -93 34) -93]
Test Case: 617 | Input/Output: [(-63 72 -11 18) -63]
Test Case: 618 | Input/Output: [(51 67 5 28) 5]
Test Case: 619 | Input/Output: [(-99 34 13 -15) -99]
Test Case: 620 | Input/Output: [(-87 64 7 94) -87]
Test Case: 621 | Input/Output: [(64 -90 42 -51) -90]
Test Case: 622 | Input/Output: [(84 -63 86 -58) -63]
Test Case: 623 | Input/Output: [(50 -99 -80 56) -99]
Test Case: 624 | Input/Output: [(-51 74 98 4) -51]
Test Case: 625 | Input/Output: [(-86 -30 50 51) -86]
Test Case: 626 | Input/Output: [(2 63 -93 18) -93]
Test Case: 627 | Input/Output: [(-89 -6 47 -100) -100]
Test Case: 628 | Input/Output: [(-36 -36 1 -54) -54]
Test Case: 629 | Input/Output: [(-81 49 65 78) -81]
Test Case: 630 | Input/Output: [(36 5 47 28) 5]
Test Case: 631 | Input/Output: [(-1 73 40 69) -1]
Test Case: 632 | Input/Output: [(26 93 -27 82) -27]
Test Case: 633 | Input/Output: [(-10 -81 7 89) -81]
Test Case: 634 | Input/Output: [(79 49 97 -2) -2]
Test Case: 635 | Input/Output: [(22 -46 -96 93) -96]
Test Case: 636 | Input/Output: [(42 -4 -57 66) -57]
Test Case: 637 | Input/Output: [(-89 -70 -91 -63) -91]
Test Case: 638 | Input/Output: [(-48 35 37 34) -48]
Test Case: 639 | Input/Output: [(-11 66 82 46) -11]
Test Case: 640 | Input/Output: [(35 -81 -44 -49) -81]
Test Case: 641 | Input/Output: [(35 64 -67 6) -67]
Test Case: 642 | Input/Output: [(-95 17 -59 -36) -95]
Test Case: 643 | Input/Output: [(55 -83 -29 -30) -83]
Test Case: 644 | Input/Output: [(-70 -32 -64 13) -70]
Test Case: 645 | Input/Output: [(81 94 -50 -47) -50]
Test Case: 646 | Input/Output: [(-100 97 -2 14) -100]
Test Case: 647 | Input/Output: [(19 -10 63 0) -10]
Test Case: 648 | Input/Output: [(32 -79 -94 0) -94]
Test Case: 649 | Input/Output: [(68 83 100 31) 31]
Test Case: 650 | Input/Output: [(3 -24 97 26) -24]
Test Case: 651 | Input/Output: [(69 -89 61 -55) -89]
Test Case: 652 | Input/Output: [(-55 -48 -74 -59) -74]
Test Case: 653 | Input/Output: [(36 21 -72 52) -72]
Test Case: 654 | Input/Output: [(-20 -27 -20 82) -27]
Test Case: 655 | Input/Output: [(95 54 -40 -20) -40]
Test Case: 656 | Input/Output: [(54 -41 -26 78) -41]
Test Case: 657 | Input/Output: [(-30 -36 89 69) -36]
Test Case: 658 | Input/Output: [(-34 -44 75 -43) -44]
Test Case: 659 | Input/Output: [(-36 14 74 -5) -36]
Test Case: 660 | Input/Output: [(-29 40 -61 96) -61]
Test Case: 661 | Input/Output: [(-63 -28 -19 40) -63]
Test Case: 662 | Input/Output: [(-88 -64 -25 -88) -88]
Test Case: 663 | Input/Output: [(-66 -53 32 43) -66]
Test Case: 664 | Input/Output: [(33 0 -9 19) -9]
Test Case: 665 | Input/Output: [(74 -58 50 -78) -78]
Test Case: 666 | Input/Output: [(21 14 80 4) 4]
Test Case: 667 | Input/Output: [(28 6 -12 29) -12]
Test Case: 668 | Input/Output: [(-95 -9 65 55) -95]
Test Case: 669 | Input/Output: [(69 95 63 7) 7]
Test Case: 670 | Input/Output: [(-29 98 10 -98) -98]
Test Case: 671 | Input/Output: [(85 -9 -63 57) -63]
Test Case: 672 | Input/Output: [(21 87 -10 -40) -40]
Test Case: 673 | Input/Output: [(-27 17 18 65) -27]
Test Case: 674 | Input/Output: [(81 -67 25 82) -67]
Test Case: 675 | Input/Output: [(-87 30 -84 -19) -87]
Test Case: 676 | Input/Output: [(44 8 13 25) 8]
Test Case: 677 | Input/Output: [(82 -98 -29 -64) -98]
Test Case: 678 | Input/Output: [(-67 81 77 -66) -67]
Test Case: 679 | Input/Output: [(4 -37 99 2) -37]
Test Case: 680 | Input/Output: [(-67 -60 -71 -27) -71]
Test Case: 681 | Input/Output: [(-26 -18 46 7) -26]
Test Case: 682 | Input/Output: [(79 70 -99 27) -99]
Test Case: 683 | Input/Output: [(6 39 70 50) 6]
Test Case: 684 | Input/Output: [(8 -17 -19 -15) -19]
Test Case: 685 | Input/Output: [(65 61 -62 68) -62]
Test Case: 686 | Input/Output: [(76 93 83 38) 38]
Test Case: 687 | Input/Output: [(-91 -37 -93 -28) -93]
Test Case: 688 | Input/Output: [(95 -97 35 -20) -97]
Test Case: 689 | Input/Output: [(-7 -92 96 -42) -92]
Test Case: 690 | Input/Output: [(98 9 -60 -77) -77]
Test Case: 691 | Input/Output: [(54 92 87 -90) -90]
Test Case: 692 | Input/Output: [(82 32 -28 31) -28]
Test Case: 693 | Input/Output: [(92 -54 69 -41) -54]
Test Case: 694 | Input/Output: [(46 90 -24 45) -24]
Test Case: 695 | Input/Output: [(77 -57 85 -11) -57]
Test Case: 696 | Input/Output: [(65 98 47 -41) -41]
Test Case: 697 | Input/Output: [(-97 -20 15 -95) -97]
Test Case: 698 | Input/Output: [(-93 64 -37 73) -93]
Test Case: 699 | Input/Output: [(-45 0 -70 -56) -70]
Test Case: 700 | Input/Output: [(-48 -62 99 2) -62]
Test Case: 701 | Input/Output: [(-13 -53 -39 -1) -53]
Test Case: 702 | Input/Output: [(-91 89 -77 23) -91]
Test Case: 703 | Input/Output: [(69 -10 -63 67) -63]
Test Case: 704 | Input/Output: [(-36 -83 32 -59) -83]
Test Case: 705 | Input/Output: [(-62 76 67 -14) -62]
Test Case: 706 | Input/Output: [(25 -98 -23 37) -98]
Test Case: 707 | Input/Output: [(55 -84 -54 -73) -84]
Test Case: 708 | Input/Output: [(51 -85 -46 -91) -91]
Test Case: 709 | Input/Output: [(-96 81 -79 -30) -96]
Test Case: 710 | Input/Output: [(-12 -89 37 41) -89]
Test Case: 711 | Input/Output: [(24 -14 -25 -100) -100]
Test Case: 712 | Input/Output: [(53 59 -82 3) -82]
Test Case: 713 | Input/Output: [(-11 -89 43 9) -89]
Test Case: 714 | Input/Output: [(-37 -82 -14 92) -82]
Test Case: 715 | Input/Output: [(11 -29 -48 -11) -48]
Test Case: 716 | Input/Output: [(74 1 -83 -31) -83]
Test Case: 717 | Input/Output: [(41 -69 28 -9) -69]
Test Case: 718 | Input/Output: [(-66 -56 98 -59) -66]
Test Case: 719 | Input/Output: [(80 -40 -58 29) -58]
Test Case: 720 | Input/Output: [(62 -43 -37 38) -43]
Test Case: 721 | Input/Output: [(-64 83 -31 -62) -64]
Test Case: 722 | Input/Output: [(-46 -31 51 36) -46]
Test Case: 723 | Input/Output: [(-36 7 6 49) -36]
Test Case: 724 | Input/Output: [(-30 81 -89 -84) -89]
Test Case: 725 | Input/Output: [(62 21 -17 -42) -42]
Test Case: 726 | Input/Output: [(0 38 19 91) 0]
Test Case: 727 | Input/Output: [(-31 10 40 -17) -31]
Test Case: 728 | Input/Output: [(76 -30 -21 -78) -78]
Test Case: 729 | Input/Output: [(27 47 -20 -78) -78]
Test Case: 730 | Input/Output: [(58 -58 20 -73) -73]
Test Case: 731 | Input/Output: [(62 -17 71 97) -17]
Test Case: 732 | Input/Output: [(100 -34 -94 24) -94]
Test Case: 733 | Input/Output: [(23 -23 -95 -82) -95]
Test Case: 734 | Input/Output: [(64 29 58 -42) -42]
Test Case: 735 | Input/Output: [(-30 25 -25 45) -30]
Test Case: 736 | Input/Output: [(-40 28 -48 -85) -85]
Test Case: 737 | Input/Output: [(79 66 5 49) 5]
Test Case: 738 | Input/Output: [(35 93 84 -89) -89]
Test Case: 739 | Input/Output: [(-2 -60 74 4) -60]
Test Case: 740 | Input/Output: [(-65 84 73 66) -65]
Test Case: 741 | Input/Output: [(2 42 -21 -72) -72]
Test Case: 742 | Input/Output: [(-28 45 -1 -49) -49]
Test Case: 743 | Input/Output: [(-98 -99 -38 -90) -99]
Test Case: 744 | Input/Output: [(25 -27 -19 -18) -27]
Test Case: 745 | Input/Output: [(-53 63 73 -84) -84]
Test Case: 746 | Input/Output: [(-56 30 -94 -9) -94]
Test Case: 747 | Input/Output: [(54 -45 68 79) -45]
Test Case: 748 | Input/Output: [(58 -10 31 -53) -53]
Test Case: 749 | Input/Output: [(51 -95 4 67) -95]
Test Case: 750 | Input/Output: [(-38 -71 -61 -27) -71]
Test Case: 751 | Input/Output: [(-17 -52 -70 -30) -70]
Test Case: 752 | Input/Output: [(92 66 57 46) 46]
Test Case: 753 | Input/Output: [(-67 -30 64 -13) -67]
Test Case: 754 | Input/Output: [(13 -68 -62 75) -68]
Test Case: 755 | Input/Output: [(-69 82 -2 90) -69]
Test Case: 756 | Input/Output: [(59 -47 71 -20) -47]
Test Case: 757 | Input/Output: [(91 -74 51 18) -74]
Test Case: 758 | Input/Output: [(-9 59 73 -94) -94]
Test Case: 759 | Input/Output: [(68 37 -36 -76) -76]
Test Case: 760 | Input/Output: [(67 -64 43 -72) -72]
Test Case: 761 | Input/Output: [(59 67 27 61) 27]
Test Case: 762 | Input/Output: [(51 -85 46 -72) -85]
Test Case: 763 | Input/Output: [(-41 -100 36 -55) -100]
Test Case: 764 | Input/Output: [(-42 93 -6 -51) -51]
Test Case: 765 | Input/Output: [(66 -8 20 -96) -96]
Test Case: 766 | Input/Output: [(-49 63 55 76) -49]
Test Case: 767 | Input/Output: [(56 -29 -96 -47) -96]
Test Case: 768 | Input/Output: [(47 99 -18 76) -18]
Test Case: 769 | Input/Output: [(-54 8 56 49) -54]
Test Case: 770 | Input/Output: [(76 66 70 41) 41]
Test Case: 771 | Input/Output: [(-14 85 -44 21) -44]
Test Case: 772 | Input/Output: [(-78 40 28 -52) -78]
Test Case: 773 | Input/Output: [(25 -31 97 -51) -51]
Test Case: 774 | Input/Output: [(45 85 14 97) 14]
Test Case: 775 | Input/Output: [(3 34 83 59) 3]
Test Case: 776 | Input/Output: [(-97 -1 -72 74) -97]
Test Case: 777 | Input/Output: [(-13 52 -86 -81) -86]
Test Case: 778 | Input/Output: [(-52 -97 -51 95) -97]
Test Case: 779 | Input/Output: [(31 1 87 76) 1]
Test Case: 780 | Input/Output: [(89 -38 66 -3) -38]
Test Case: 781 | Input/Output: [(6 -84 -55 -89) -89]
Test Case: 782 | Input/Output: [(82 63 45 74) 45]
Test Case: 783 | Input/Output: [(-9 30 71 -96) -96]
Test Case: 784 | Input/Output: [(68 -55 -74 96) -74]
Test Case: 785 | Input/Output: [(48 42 -37 -27) -37]
Test Case: 786 | Input/Output: [(35 37 24 -57) -57]
Test Case: 787 | Input/Output: [(45 82 -32 59) -32]
Test Case: 788 | Input/Output: [(-52 69 42 50) -52]
Test Case: 789 | Input/Output: [(-69 71 -64 -5) -69]
Test Case: 790 | Input/Output: [(-17 6 45 62) -17]
Test Case: 791 | Input/Output: [(-2 31 -64 74) -64]
Test Case: 792 | Input/Output: [(11 -29 91 13) -29]
Test Case: 793 | Input/Output: [(-52 -37 -65 43) -65]
Test Case: 794 | Input/Output: [(62 -11 92 -85) -85]
Test Case: 795 | Input/Output: [(91 91 -91 -22) -91]
Test Case: 796 | Input/Output: [(-11 22 34 71) -11]
Test Case: 797 | Input/Output: [(63 37 -64 27) -64]
Test Case: 798 | Input/Output: [(-70 -1 81 -67) -70]
Test Case: 799 | Input/Output: [(75 -37 61 37) -37]
Test Case: 800 | Input/Output: [(99 -71 -31 92) -71]
Test Case: 801 | Input/Output: [(44 -23 -61 85) -61]
Test Case: 802 | Input/Output: [(-21 32 79 94) -21]
Test Case: 803 | Input/Output: [(-94 29 4 -97) -97]
Test Case: 804 | Input/Output: [(-60 -30 -19 -89) -89]
Test Case: 805 | Input/Output: [(22 33 4 -78) -78]
Test Case: 806 | Input/Output: [(14 -54 59 94) -54]
Test Case: 807 | Input/Output: [(-23 -40 -21 50) -40]
Test Case: 808 | Input/Output: [(-77 97 9 -83) -83]
Test Case: 809 | Input/Output: [(-88 -2 -36 -63) -88]
Test Case: 810 | Input/Output: [(-39 41 92 14) -39]
Test Case: 811 | Input/Output: [(40 -23 -34 32) -34]
Test Case: 812 | Input/Output: [(2 66 -38 54) -38]
Test Case: 813 | Input/Output: [(11 100 38 74) 11]
Test Case: 814 | Input/Output: [(14 98 94 -8) -8]
Test Case: 815 | Input/Output: [(-77 -52 2 27) -77]
Test Case: 816 | Input/Output: [(-30 46 -9 30) -30]
Test Case: 817 | Input/Output: [(-88 59 71 -99) -99]
Test Case: 818 | Input/Output: [(31 4 -83 -16) -83]
Test Case: 819 | Input/Output: [(-62 -57 88 -68) -68]
Test Case: 820 | Input/Output: [(-40 -22 -87 79) -87]
Test Case: 821 | Input/Output: [(80 -83 87 41) -83]
Test Case: 822 | Input/Output: [(-100 97 -65 27) -100]
Test Case: 823 | Input/Output: [(22 -64 -37 -68) -68]
Test Case: 824 | Input/Output: [(-48 4 52 16) -48]
Test Case: 825 | Input/Output: [(45 -93 -60 -57) -93]
Test Case: 826 | Input/Output: [(89 -47 -62 41) -62]
Test Case: 827 | Input/Output: [(97 -43 93 90) -43]
Test Case: 828 | Input/Output: [(-35 -55 -56 -74) -74]
Test Case: 829 | Input/Output: [(-26 43 56 87) -26]
Test Case: 830 | Input/Output: [(-22 12 23 6) -22]
Test Case: 831 | Input/Output: [(31 36 91 15) 15]
Test Case: 832 | Input/Output: [(-90 -39 57 -69) -90]
Test Case: 833 | Input/Output: [(-93 38 -29 -57) -93]
Test Case: 834 | Input/Output: [(34 -35 -63 30) -63]
Test Case: 835 | Input/Output: [(64 13 -45 -31) -45]
Test Case: 836 | Input/Output: [(-83 41 -27 70) -83]
Test Case: 837 | Input/Output: [(4 81 -55 -16) -55]
Test Case: 838 | Input/Output: [(100 -37 -45 -26) -45]
Test Case: 839 | Input/Output: [(-37 60 82 11) -37]
Test Case: 840 | Input/Output: [(34 83 -20 -17) -20]
Test Case: 841 | Input/Output: [(-29 -50 -97 98) -97]
Test Case: 842 | Input/Output: [(-40 78 2 -67) -67]
Test Case: 843 | Input/Output: [(-54 40 55 -93) -93]
Test Case: 844 | Input/Output: [(29 47 -21 8) -21]
Test Case: 845 | Input/Output: [(-3 -87 -59 -67) -87]
Test Case: 846 | Input/Output: [(-79 -66 -36 33) -79]
Test Case: 847 | Input/Output: [(41 -64 -10 59) -64]
Test Case: 848 | Input/Output: [(-53 46 55 -17) -53]
Test Case: 849 | Input/Output: [(-31 -96 -94 -94) -96]
Test Case: 850 | Input/Output: [(-63 -46 -48 -82) -82]
Test Case: 851 | Input/Output: [(-3 44 -21 -40) -40]
Test Case: 852 | Input/Output: [(0 14 14 96) 0]
Test Case: 853 | Input/Output: [(-14 -34 5 -79) -79]
Test Case: 854 | Input/Output: [(83 -68 -64 -8) -68]
Test Case: 855 | Input/Output: [(-13 76 58 -55) -55]
Test Case: 856 | Input/Output: [(-33 75 -77 -88) -88]
Test Case: 857 | Input/Output: [(15 43 23 41) 15]
Test Case: 858 | Input/Output: [(-27 -70 12 -83) -83]
Test Case: 859 | Input/Output: [(-2 -77 1 98) -77]
Test Case: 860 | Input/Output: [(-77 94 84 22) -77]
Test Case: 861 | Input/Output: [(-2 -5 -73 98) -73]
Test Case: 862 | Input/Output: [(-33 6 48 -80) -80]
Test Case: 863 | Input/Output: [(-77 56 -35 63) -77]
Test Case: 864 | Input/Output: [(-38 -86 -32 -98) -98]
Test Case: 865 | Input/Output: [(2 -92 -21 -98) -98]
Test Case: 866 | Input/Output: [(-5 -41 -46 -5) -46]
Test Case: 867 | Input/Output: [(-75 99 39 85) -75]
Test Case: 868 | Input/Output: [(75 45 -44 -81) -81]
Test Case: 869 | Input/Output: [(89 71 81 64) 64]
Test Case: 870 | Input/Output: [(-60 19 83 -44) -60]
Test Case: 871 | Input/Output: [(-34 -10 -40 -65) -65]
Test Case: 872 | Input/Output: [(-9 -33 17 -50) -50]
Test Case: 873 | Input/Output: [(64 72 47 49) 47]
Test Case: 874 | Input/Output: [(-68 6 28 89) -68]
Test Case: 875 | Input/Output: [(-68 -54 0 79) -68]
Test Case: 876 | Input/Output: [(-51 -69 -83 11) -83]
Test Case: 877 | Input/Output: [(-51 28 -86 2) -86]
Test Case: 878 | Input/Output: [(-66 43 -89 -49) -89]
Test Case: 879 | Input/Output: [(80 57 87 83) 57]
Test Case: 880 | Input/Output: [(33 21 -76 23) -76]
Test Case: 881 | Input/Output: [(-22 99 -27 30) -27]
Test Case: 882 | Input/Output: [(-3 -3 -60 -69) -69]
Test Case: 883 | Input/Output: [(-47 56 26 87) -47]
Test Case: 884 | Input/Output: [(-95 20 -11 52) -95]
Test Case: 885 | Input/Output: [(-98 -23 -53 -74) -98]
Test Case: 886 | Input/Output: [(33 -93 60 67) -93]
Test Case: 887 | Input/Output: [(-69 61 94 -62) -69]
Test Case: 888 | Input/Output: [(-48 15 11 -24) -48]
Test Case: 889 | Input/Output: [(-96 -50 33 90) -96]
Test Case: 890 | Input/Output: [(33 -27 -33 -86) -86]
Test Case: 891 | Input/Output: [(-52 -14 53 83) -52]
Test Case: 892 | Input/Output: [(30 20 81 -7) -7]
Test Case: 893 | Input/Output: [(27 -68 56 -42) -68]
Test Case: 894 | Input/Output: [(-12 59 -7 -46) -46]
Test Case: 895 | Input/Output: [(-62 66 -11 -43) -62]
Test Case: 896 | Input/Output: [(76 -53 -34 9) -53]
Test Case: 897 | Input/Output: [(61 1 -26 50) -26]
Test Case: 898 | Input/Output: [(50 -55 80 -90) -90]
Test Case: 899 | Input/Output: [(-54 37 83 -22) -54]
Test Case: 900 | Input/Output: [(-66 86 50 -9) -66]
Test Case: 901 | Input/Output: [(-8 50 46 58) -8]
Test Case: 902 | Input/Output: [(81 -26 56 34) -26]
Test Case: 903 | Input/Output: [(-32 -64 75 -26) -64]
Test Case: 904 | Input/Output: [(-7 -36 -38 62) -38]
Test Case: 905 | Input/Output: [(-37 91 26 86) -37]
Test Case: 906 | Input/Output: [(88 48 -25 46) -25]
Test Case: 907 | Input/Output: [(19 -17 56 -16) -17]
Test Case: 908 | Input/Output: [(26 10 -11 51) -11]
Test Case: 909 | Input/Output: [(64 18 -45 65) -45]
Test Case: 910 | Input/Output: [(33 -88 -5 46) -88]
Test Case: 911 | Input/Output: [(55 41 23 -99) -99]
Test Case: 912 | Input/Output: [(-32 64 10 -23) -32]
Test Case: 913 | Input/Output: [(-31 3 -77 -88) -88]
Test Case: 914 | Input/Output: [(-79 34 -100 -69) -100]
Test Case: 915 | Input/Output: [(-3 -36 -100 -71) -100]
Test Case: 916 | Input/Output: [(-65 -38 -19 92) -65]
Test Case: 917 | Input/Output: [(-73 78 52 -4) -73]
Test Case: 918 | Input/Output: [(32 -76 -12 70) -76]
Test Case: 919 | Input/Output: [(89 35 41 -61) -61]
Test Case: 920 | Input/Output: [(93 31 -79 43) -79]
Test Case: 921 | Input/Output: [(-44 5 -15 -12) -44]
Test Case: 922 | Input/Output: [(-78 -72 -51 -11) -78]
Test Case: 923 | Input/Output: [(37 -15 89 23) -15]
Test Case: 924 | Input/Output: [(-56 -20 100 -31) -56]
Test Case: 925 | Input/Output: [(-40 1 66 25) -40]
Test Case: 926 | Input/Output: [(-94 28 -96 93) -96]
Test Case: 927 | Input/Output: [(-75 70 -54 83) -75]
Test Case: 928 | Input/Output: [(-7 6 -88 -68) -88]
Test Case: 929 | Input/Output: [(-4 63 1 10) -4]
Test Case: 930 | Input/Output: [(31 63 -9 74) -9]
Test Case: 931 | Input/Output: [(-52 87 -100 -19) -100]
Test Case: 932 | Input/Output: [(-45 -89 50 -46) -89]
Test Case: 933 | Input/Output: [(91 -79 -63 38) -79]
Test Case: 934 | Input/Output: [(-85 74 65 42) -85]
Test Case: 935 | Input/Output: [(61 -24 -68 -46) -68]
Test Case: 936 | Input/Output: [(22 6 40 -19) -19]
Test Case: 937 | Input/Output: [(80 48 27 -88) -88]
Test Case: 938 | Input/Output: [(-48 -49 74 -37) -49]
Test Case: 939 | Input/Output: [(-45 -2 -20 12) -45]
Test Case: 940 | Input/Output: [(79 64 0 -35) -35]
Test Case: 941 | Input/Output: [(32 43 74 -40) -40]
Test Case: 942 | Input/Output: [(-71 57 -16 28) -71]
Test Case: 943 | Input/Output: [(9 -61 59 4) -61]
Test Case: 944 | Input/Output: [(-11 39 -81 79) -81]
Test Case: 945 | Input/Output: [(67 2 -87 -6) -87]
Test Case: 946 | Input/Output: [(-100 -94 71 2) -100]
Test Case: 947 | Input/Output: [(7 65 -1 -36) -36]
Test Case: 948 | Input/Output: [(-63 -35 -81 -57) -81]
Test Case: 949 | Input/Output: [(-76 -72 -28 54) -76]
Test Case: 950 | Input/Output: [(-37 -14 -50 -85) -85]
Test Case: 951 | Input/Output: [(-44 -89 -43 79) -89]
Test Case: 952 | Input/Output: [(10 28 -62 -69) -69]
Test Case: 953 | Input/Output: [(94 -29 -70 72) -70]
Test Case: 954 | Input/Output: [(-18 29 81 82) -18]
Test Case: 955 | Input/Output: [(4 62 -62 19) -62]
Test Case: 956 | Input/Output: [(-91 -78 40 67) -91]
Test Case: 957 | Input/Output: [(98 61 63 88) 61]
Test Case: 958 | Input/Output: [(58 25 -91 -41) -91]
Test Case: 959 | Input/Output: [(-10 20 4 -75) -75]
Test Case: 960 | Input/Output: [(-64 -70 83 36) -70]
Test Case: 961 | Input/Output: [(-3 52 22 -95) -95]
Test Case: 962 | Input/Output: [(10 -7 -59 -98) -98]
Test Case: 963 | Input/Output: [(-12 -68 84 -71) -71]
Test Case: 964 | Input/Output: [(65 -53 37 81) -53]
Test Case: 965 | Input/Output: [(-86 -11 -97 -7) -97]
Test Case: 966 | Input/Output: [(-13 29 14 75) -13]
Test Case: 967 | Input/Output: [(63 -43 21 -86) -86]
Test Case: 968 | Input/Output: [(-61 28 45 -37) -61]
Test Case: 969 | Input/Output: [(97 -91 -41 62) -91]
Test Case: 970 | Input/Output: [(-28 47 -90 43) -90]
Test Case: 971 | Input/Output: [(-1 31 -82 -61) -82]
Test Case: 972 | Input/Output: [(78 -44 80 6) -44]
Test Case: 973 | Input/Output: [(7 -28 23 -12) -28]
Test Case: 974 | Input/Output: [(87 -23 -96 86) -96]
Test Case: 975 | Input/Output: [(64 83 -14 91) -14]
Test Case: 976 | Input/Output: [(-51 31 83 13) -51]
Test Case: 977 | Input/Output: [(-80 -61 5 75) -80]
Test Case: 978 | Input/Output: [(88 37 -86 32) -86]
Test Case: 979 | Input/Output: [(73 -38 -76 0) -76]
Test Case: 980 | Input/Output: [(47 -19 69 -39) -39]
Test Case: 981 | Input/Output: [(-98 100 -49 22) -98]
Test Case: 982 | Input/Output: [(14 -12 -99 -85) -99]
Test Case: 983 | Input/Output: [(77 61 -21 -3) -21]
Test Case: 984 | Input/Output: [(-61 44 25 -94) -94]
Test Case: 985 | Input/Output: [(3 22 -52 -33) -52]
Test Case: 986 | Input/Output: [(9 -16 49 48) -16]
Test Case: 987 | Input/Output: [(-100 70 -9 72) -100]
Test Case: 988 | Input/Output: [(-94 68 -76 38) -94]
Test Case: 989 | Input/Output: [(26 -4 -59 84) -59]
Test Case: 990 | Input/Output: [(12 15 -14 11) -14]
Test Case: 991 | Input/Output: [(26 -30 -15 -53) -53]
Test Case: 992 | Input/Output: [(-66 -94 3 -51) -94]
Test Case: 993 | Input/Output: [(88 41 -27 -31) -31]
Test Case: 994 | Input/Output: [(78 12 68 -76) -76]
Test Case: 995 | Input/Output: [(20 -17 -7 -52) -52]
Test Case: 996 | Input/Output: [(-32 15 30 100) -32]
Test Case: 997 | Input/Output: [(44 95 -30 -50) -50]
Test Case: 998 | Input/Output: [(-84 -11 -24 -19) -84]
Test Case: 999 | Input/Output: [(-71 -34 15 13) -71]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -59 38 -91 12 53 -12 39 82 11 -59 -121 50 56 91 55 76
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[16 39 39 39] 16] [[58 58 58 -13] -13] [[-22 -22 -6 -22] -22] [[51 51 51 44] 44] [[-53 -53 -15 -53] -53] [[-62 -77 -77 -77] -77] [[67 23 23 23] 23] [[91 91 91 14] 14] [[45 45 27 45] 27] [[80 -59 80 80] -59] [(46 46 46 46) 46] [(-50 -50 -50 -50) -50] [(25 25 25 25) 25] [(82 82 82 82) 82] [(37 37 37 37) 37] [(59 83 86 34) 34] [(78 13 38 56) 13] [(49 53 89 7) 7] [(93 40 18 67) 18] [(87 74 35 65) 35] [(66 79 30 66) 30] [(7 32 78 20) 7] [(50 62 57 89) 50] [(62 77 8 76) 8] [(19 64 14 10) 10] [(61 34 87 2) 2] [(95 22 11 2) 2] [(8 4 1 6) 1] [(61 10 5 55) 5] [(64 71 52 23) 23] [(87 25 28 67) 25] [(7 33 73 30) 7] [(96 69 88 30) 30] [(90 53 67 73) 53] [(8 46 15 9) 8] [(85 71 -64 -69) -69] [(-88 46 71 -29) -88] [(-21 -80 75 41) -80] [(-29 -36 -99 -82) -99] [(-81 69 56 45) -81] [(-14 -93 -73 90) -93] [(47 84 -84 -23) -84] [(31 98 73 -38) -38] [(69 -33 -77 6) -77] [(69 66 -71 71) -71] [(-61 -87 8 -23) -87] [(-31 -15 47 69) -31] [(-19 -29 95 20) -29] [(-66 -60 -35 15) -66] [(67 75 -10 45) -10] [(-32 -57 -4 26) -57] [(66 -54 -9 81) -54] [(54 -35 -8 1) -35] [(-29 45 -100 -86) -100] [(-11 -78 4 -10) -78] [(89 -40 -93 -21) -93] [(4 -58 -47 -51) -58] [(84 -32 66 80) -32] [(85 14 79 45) 14] [(7 79 -28 77) -28] [(-70 -49 -81 5) -81] [(-86 25 21 -31) -86] [(25 -8 -55 67) -55] [(-4 72 -91 -40) -91] [(29 62 6 6) 6] [(-79 -46 49 -82) -82] [(92 -15 -76 44) -76] [(52 -86 -59 79) -86] [(-58 -17 -100 -27) -100] [(32 -57 28 -100) -100] [(-16 -58 31 -97) -97] [(52 56 -68 87) -68] [(-66 -10 65 80) -66] [(54 -71 -27 49) -71] [(-25 38 86 24) -25] [(-78 -2 -94 -79) -94] [(-78 -5 -52 -53) -78] [(-57 12 74 -33) -57] [(-7 99 97 -94) -94] [(34 13 -87 -13) -87] [(64 91 -78 -19) -78] [(-8 -3 -64 21) -64] [(-78 50 -81 -48) -81] [(40 43 -52 21) -52] [(-11 96 -30 -82) -82] [(-81 -57 -75 -17) -81] [(-2 77 35 60) -2] [(3 97 13 95) 3] [(-93 55 -53 -63) -93] [(-47 61 69 -81) -81] [(100 49 -65 50) -65] [(57 -47 69 16) -47] [(-40 -33 38 61) -40] [(-75 53 49 89) -75] [(86 -27 68 -90) -90])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 39                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -6                 
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -15                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 86                 
Correct output: 13                  | Program output: 38                 
Correct output: 7                   | Program output: 89                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 78                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 14                 
Correct output: 2                   | Program output: 87                 
Correct output: 2                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 52                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 73                 
Correct output: 30                  | Program output: 88                 
Correct output: 53                  | Program output: 67                 
Correct output: 8                   | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -88                 | Program output: 71                 
Correct output: -80                 | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 56                 
Correct output: -93                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: 73                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: 8                  
Correct output: -31                 | Program output: 47                 
Correct output: -29                 | Program output: 95                 
Correct output: -66                 | Program output: -35                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -4                 
Correct output: -54                 | Program output: -9                 
Correct output: -35                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -47                
Correct output: -32                 | Program output: 66                 
Correct output: 14                  | Program output: 79                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 21                 
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: 49                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: 28                 
Correct output: -97                 | Program output: 31                 
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 65                 
Correct output: -71                 | Program output: -27                
Correct output: -25                 | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -52                
Correct output: -57                 | Program output: 74                 
Correct output: -94                 | Program output: 97                 
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -30                
Correct output: -81                 | Program output: -75                
Correct output: -2                  | Program output: 35                 
Correct output: 3                   | Program output: 13                 
Correct output: -93                 | Program output: -53                
Correct output: -81                 | Program output: 69                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 69                 
Correct output: -40                 | Program output: 38                 
Correct output: -75                 | Program output: 49                 
Correct output: -90                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_729} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_y_when_autoconstructing (boolean_dup_times in3) exec_rot () (exec_rot (boolean_yank) (print_boolean boolean_empty) (integer_yankdup) exec_s (exec_y (boolean_pop print_integer) exec_dup (exec_dup_times (integer_max boolean_yank) in1) exec_do*range (exec_if () (boolean_pop boolean_yank boolean_shove boolean_flush integer_lte exec_empty exec_k () (integer_shove exec_do*count (integer_dup_times boolean_swap) boolean_dup_items print_boolean exec_do*times (exec_dup_items exec_do*count (exec_rot (exec_noop) (exec_pop () integer_div integer_mult exec_yankdup integer_mod boolean_dup_times boolean_invert_second_then_and tagged_729 exec_yank) () exec_dup_items exec_do*count (integer_yankdup)) integer_stackdepth integer_stackdepth boolean_invert_first_then_and integer_dup_times boolean_yankdup) exec_stackdepth exec_s_when_autoconstructing () () ())))) () ()) ())
Lexicase best errors: [1 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 87
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_729} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_y_when_autoconstructing (boolean_dup_times in3) exec_rot () (exec_rot (boolean_yank) (print_boolean boolean_empty) (integer_yankdup) exec_s (exec_y (boolean_pop print_integer) exec_dup (exec_dup_times (integer_max boolean_yank) in1) exec_do*range (exec_if () (boolean_pop boolean_yank boolean_shove boolean_flush integer_lte exec_empty exec_k () (integer_shove exec_do*count (integer_dup_times boolean_swap) boolean_dup_items print_boolean exec_do*times (exec_dup_items exec_do*count (exec_rot (exec_noop) (exec_pop () integer_div integer_mult exec_yankdup integer_mod boolean_dup_times boolean_invert_second_then_and tagged_729 exec_yank) () exec_dup_items exec_do*count (integer_yankdup)) integer_stackdepth integer_stackdepth boolean_invert_first_then_and integer_dup_times boolean_yankdup) exec_stackdepth exec_s_when_autoconstructing () () ())))) () ()) ())
Zero cases best errors: [1 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 87
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 1 7 2 2 4 2 2 2 4)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (2 1 7 2 2 4 2 2 2 4)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank})
Best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 integer_yank boolean_yankdup) (boolean_xor boolean_pop print_integer exec_swap () (integer_yankdup boolean_swap) integer_min) (exec_pop () print_integer exec_s (exec_shove () boolean_rot integer_yank) (boolean_invert_first_then_and exec_eq integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth exec_shove (exec_noop exec_dup_items exec_stackdepth exec_yankdup) integer_yank)) ()))
Errors: [1 1 1 0 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 39
Size: 52
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 9.972
Median total errors in population: 10
Error averages by case: (0.998 0.999 0.993 0.998 0.998 0.996 0.998 0.998 0.998 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.646
Average program size in population (points): 69.483
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 470126
--- Timings ---
Current time: 1559584805774 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.8 seconds, 28.6%
Fitness Testing:      1.8 seconds, 67.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -62                
Correct output: 23                  | Program output: 67                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 45                 
Correct output: -59                 | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 59                 
Correct output: 13                  | Program output: 78                 
Correct output: 7                   | Program output: 49                 
Correct output: 18                  | Program output: 93                 
Correct output: 35                  | Program output: 87                 
Correct output: 30                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 2                   | Program output: 61                 
Correct output: 2                   | Program output: 95                 
Correct output: 1                   | Program output: 8                  
Correct output: 5                   | Program output: 61                 
Correct output: 23                  | Program output: 64                 
Correct output: 25                  | Program output: 87                 
Correct output: 7                   | Program output: 7                  
Correct output: 30                  | Program output: 96                 
Correct output: 53                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 85                 
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -21                
Correct output: -99                 | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -14                
Correct output: -84                 | Program output: 47                 
Correct output: -38                 | Program output: 31                 
Correct output: -77                 | Program output: 69                 
Correct output: -71                 | Program output: 69                 
Correct output: -87                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -29                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -10                 | Program output: 67                 
Correct output: -57                 | Program output: -32                
Correct output: -54                 | Program output: 66                 
Correct output: -35                 | Program output: 54                 
Correct output: -100                | Program output: -29                
Correct output: -78                 | Program output: -11                
Correct output: -93                 | Program output: 89                 
Correct output: -58                 | Program output: 4                  
Correct output: -32                 | Program output: 84                 
Correct output: 14                  | Program output: 85                 
Correct output: -28                 | Program output: 7                  
Correct output: -81                 | Program output: -70                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 25                 
Correct output: -91                 | Program output: -4                 
Correct output: 6                   | Program output: 29                 
Correct output: -82                 | Program output: -79                
Correct output: -76                 | Program output: 92                 
Correct output: -86                 | Program output: 52                 
Correct output: -100                | Program output: -58                
Correct output: -100                | Program output: 32                 
Correct output: -97                 | Program output: -16                
Correct output: -68                 | Program output: 52                 
Correct output: -66                 | Program output: -66                
Correct output: -71                 | Program output: 54                 
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -7                 
Correct output: -87                 | Program output: 34                 
Correct output: -78                 | Program output: 64                 
Correct output: -64                 | Program output: -8                 
Correct output: -81                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -82                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -2                  | Program output: -2                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -47                
Correct output: -65                 | Program output: 100                
Correct output: -47                 | Program output: 57                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: 86                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_565} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_dup_items} {:close 1, :instruction tag_integer_994} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction 56} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_boolean_449} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_empty integer_div boolean_stackdepth integer_dec tag_exec_565 (boolean_xor integer_pop integer_add integer_fromboolean) exec_yankdup boolean_xor in2 boolean_eq boolean_invert_first_then_and boolean_dup_items tag_integer_994 exec_shove (exec_k (exec_do*range (integer_sub integer_yank exec_swap (exec_do*times (exec_do*count (56 boolean_xor boolean_xor) integer_div integer_yank boolean_dup) integer_gte) (in1 exec_k_when_autoconstructing (boolean_or exec_s (print_integer exec_do*range (exec_k (in4) (boolean_yankdup boolean_flush exec_y_when_autoconstructing (exec_rot (integer_dec) (exec_noop boolean_pop boolean_not boolean_frominteger) (integer_max exec_yankdup in3 print_boolean integer_flush in2 integer_mult exec_k (boolean_invert_second_then_and) (tag_boolean_449) boolean_yank) exec_flush integer_yankdup integer_stackdepth exec_stackdepth)))) () ()) ()))) ()))
Lexicase best errors: [0 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 87
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_565} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_dup_items} {:close 1, :instruction tag_integer_994} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction 56} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_boolean_449} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_empty integer_div boolean_stackdepth integer_dec tag_exec_565 (boolean_xor integer_pop integer_add integer_fromboolean) exec_yankdup boolean_xor in2 boolean_eq boolean_invert_first_then_and boolean_dup_items tag_integer_994 exec_shove (exec_k (exec_do*range (integer_sub integer_yank exec_swap (exec_do*times (exec_do*count (56 boolean_xor boolean_xor) integer_div integer_yank boolean_dup) integer_gte) (in1 exec_k_when_autoconstructing (boolean_or exec_s (print_integer exec_do*range (exec_k (in4) (boolean_yankdup boolean_flush exec_y_when_autoconstructing (exec_rot (integer_dec) (exec_noop boolean_pop boolean_not boolean_frominteger) (integer_max exec_yankdup in3 print_boolean integer_flush in2 integer_mult exec_k (boolean_invert_second_then_and) (tag_boolean_449) boolean_yank) exec_flush integer_yankdup integer_stackdepth exec_stackdepth)))) () ()) ()))) ()))
Zero cases best errors: [0 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 87
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (851 347 205 206 347 83 505 350 206 347)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (851 347 205 206 347 83 505 350 206 347)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_565} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_dup_items} {:close 1, :instruction tag_integer_994} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction 56} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_boolean_449} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth})
Best program: (integer_empty integer_div boolean_stackdepth integer_dec tag_exec_565 (boolean_xor integer_pop integer_add integer_fromboolean) exec_yankdup boolean_xor in2 boolean_eq boolean_invert_first_then_and boolean_dup_items tag_integer_994 exec_shove (exec_k (exec_do*range (integer_sub integer_yank exec_swap (exec_do*times (exec_do*count (56 boolean_xor boolean_xor) integer_div integer_yank boolean_dup) integer_gte) (in1 exec_k_when_autoconstructing (boolean_or exec_s (print_integer exec_do*range (exec_k (in4) (boolean_yankdup boolean_flush exec_y_when_autoconstructing (exec_rot (integer_dec) (exec_noop boolean_pop boolean_not boolean_frominteger) (integer_max exec_yankdup in3 print_boolean integer_flush in2 integer_mult exec_k (boolean_invert_second_then_and) (tag_boolean_449) boolean_yank) exec_flush integer_yankdup integer_stackdepth exec_stackdepth)))) () ()) ()))) ()))
Errors: [0 1 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 63
Size: 87
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.553
Median total errors in population: 5
Error averages by case: (0.149 0.653 0.795 0.794 0.653 0.917 0.495 0.65 0.794 0.653)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.06
Average program size in population (points): 69.293
Average percent parens in population: 0.280
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.479
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.518
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.506
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1301033
--- Timings ---
Current time: 1559584809011 milliseconds
Total Time:           6.4 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.4 seconds, 37.2%
Fitness Testing:      2.9 seconds, 45.1%
Report:               1.0 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 39                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -6                 
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -15                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 86                 
Correct output: 13                  | Program output: 38                 
Correct output: 7                   | Program output: 89                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 78                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 14                 
Correct output: 2                   | Program output: 87                 
Correct output: 2                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 52                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 73                 
Correct output: 30                  | Program output: 88                 
Correct output: 53                  | Program output: 67                 
Correct output: 8                   | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -88                 | Program output: 71                 
Correct output: -80                 | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 56                 
Correct output: -93                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: 73                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: 8                  
Correct output: -31                 | Program output: 47                 
Correct output: -29                 | Program output: 95                 
Correct output: -66                 | Program output: -35                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -4                 
Correct output: -54                 | Program output: -9                 
Correct output: -35                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -47                
Correct output: -32                 | Program output: 66                 
Correct output: 14                  | Program output: 79                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 21                 
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: 49                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: 28                 
Correct output: -97                 | Program output: 31                 
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 65                 
Correct output: -71                 | Program output: -27                
Correct output: -25                 | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -52                
Correct output: -57                 | Program output: 74                 
Correct output: -94                 | Program output: 97                 
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -30                
Correct output: -81                 | Program output: -75                
Correct output: -2                  | Program output: 35                 
Correct output: 3                   | Program output: 13                 
Correct output: -93                 | Program output: -53                
Correct output: -81                 | Program output: 69                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 69                 
Correct output: -40                 | Program output: 38                 
Correct output: -75                 | Program output: 49                 
Correct output: -90                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 integer_yank boolean_yankdup) (boolean_xor boolean_pop print_integer exec_swap () (integer_yankdup integer_dec) integer_min) (exec_pop () print_integer exec_s (exec_shove () boolean_rot integer_yank) (boolean_invert_first_then_and exec_eq integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth exec_shove (exec_noop exec_dup_items exec_stackdepth exec_yankdup) integer_yank)) ()))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 integer_yank boolean_yankdup) (boolean_xor boolean_pop print_integer exec_swap () (integer_yankdup integer_dec) integer_min) (exec_pop () print_integer exec_s (exec_shove () boolean_rot integer_yank) (boolean_invert_first_then_and exec_eq integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth exec_shove (exec_noop exec_dup_items exec_stackdepth exec_yankdup) integer_yank)) ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (396 336 850 396 119 1000 1000 397 331 119)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (396 336 850 396 119 0 0 397 331 119)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank})
Best program: (exec_y_when_autoconstructing (boolean_dup_times boolean_not) exec_rot () (boolean_frominteger) (boolean_rot integer_dup) integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 integer_yank exec_dup () boolean_xor boolean_pop print_integer exec_swap () (integer_yankdup boolean_swap) integer_min) (exec_pop () print_integer exec_s (exec_shove () boolean_rot integer_yank) (boolean_invert_first_then_and exec_eq integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth exec_shove (exec_noop exec_dup_items exec_stackdepth exec_yankdup) integer_yank)) ()) ())
Errors: [0 1 0 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 41
Size: 59
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 7.056
Median total errors in population: 7
Error averages by case: (0.604 0.664 0.15 0.604 0.881 1.0 1.0 0.603 0.669 0.881)
Error minima by case: (0 0 0 0 0 1 1 0 0 0)
Average genome size in population (length): 52.931
Average program size in population (points): 75.105
Average percent parens in population: 0.292
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.927
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2184114
--- Timings ---
Current time: 1559584812546 milliseconds
Total Time:          10.2 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.7 seconds, 45.8%
Fitness Testing:      3.8 seconds, 37.4%
Report:               1.6 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 39                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -6                 
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -15                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 86                 
Correct output: 13                  | Program output: 38                 
Correct output: 7                   | Program output: 89                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 78                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 14                 
Correct output: 2                   | Program output: 87                 
Correct output: 2                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 52                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 73                 
Correct output: 30                  | Program output: 88                 
Correct output: 53                  | Program output: 67                 
Correct output: 8                   | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -88                 | Program output: 71                 
Correct output: -80                 | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 56                 
Correct output: -93                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: 73                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: 8                  
Correct output: -31                 | Program output: 47                 
Correct output: -29                 | Program output: 95                 
Correct output: -66                 | Program output: -35                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -4                 
Correct output: -54                 | Program output: -9                 
Correct output: -35                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -47                
Correct output: -32                 | Program output: 66                 
Correct output: 14                  | Program output: 79                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 21                 
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: 49                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: 28                 
Correct output: -97                 | Program output: 31                 
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 65                 
Correct output: -71                 | Program output: -27                
Correct output: -25                 | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -52                
Correct output: -57                 | Program output: 74                 
Correct output: -94                 | Program output: 97                 
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -30                
Correct output: -81                 | Program output: -75                
Correct output: -2                  | Program output: 35                 
Correct output: 3                   | Program output: 13                 
Correct output: -93                 | Program output: -53                
Correct output: -81                 | Program output: 69                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 69                 
Correct output: -40                 | Program output: 38                 
Correct output: -75                 | Program output: 49                 
Correct output: -90                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_729} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_y_when_autoconstructing (boolean_dup_times in3) exec_rot () (exec_rot (boolean_yank) (print_boolean boolean_empty) (integer_yankdup) exec_s (exec_y (boolean_pop print_integer) exec_dup (exec_dup_times (integer_max boolean_yank) in1) exec_do*range (exec_if () (boolean_pop boolean_yank boolean_shove boolean_flush integer_div) integer_yankdup exec_do*range (boolean_and)) boolean_eq exec_flush integer_dup_items exec_noop integer_stackdepth exec_dup_items print_exec (boolean_flush) integer_dup_times print_exec () integer_flush integer_inc integer_sub exec_if (integer_lte exec_empty exec_k () (integer_shove exec_do*count (integer_dup_times boolean_swap) boolean_dup_items print_boolean exec_do*times (exec_dup_items integer_mult exec_rot (exec_noop) (exec_pop () integer_div integer_mult exec_yankdup integer_mod boolean_dup_times boolean_invert_second_then_and tagged_729 integer_yank) () exec_dup_items exec_do*count (integer_yankdup)) integer_stackdepth integer_stackdepth boolean_invert_first_then_and integer_dup_times boolean_yankdup) exec_stackdepth exec_s_when_autoconstructing () () ()) ()) () ()) ())
Lexicase best errors: [1 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 109
Percent parens: 0.312
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_729} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_y_when_autoconstructing (boolean_dup_times in3) exec_rot () (exec_rot (boolean_yank) (print_boolean boolean_empty) (integer_yankdup) exec_s (exec_y (boolean_pop print_integer) exec_dup (exec_dup_times (integer_max boolean_yank) in1) exec_do*range (exec_if () (boolean_pop boolean_yank boolean_shove boolean_flush integer_div) integer_yankdup exec_do*range (boolean_and)) boolean_eq exec_flush integer_dup_items exec_noop integer_stackdepth exec_dup_items print_exec (boolean_flush) integer_dup_times print_exec () integer_flush integer_inc integer_sub exec_if (integer_lte exec_empty exec_k () (integer_shove exec_do*count (integer_dup_times boolean_swap) boolean_dup_items print_boolean exec_do*times (exec_dup_items integer_mult exec_rot (exec_noop) (exec_pop () integer_div integer_mult exec_yankdup integer_mod boolean_dup_times boolean_invert_second_then_and tagged_729 integer_yank) () exec_dup_items exec_do*count (integer_yankdup)) integer_stackdepth integer_stackdepth boolean_invert_first_then_and integer_dup_times boolean_yankdup) exec_stackdepth exec_s_when_autoconstructing () () ()) ()) () ()) ())
Zero cases best errors: [1 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 109
Percent parens: 0.312
--- Lexicase Population Statistics ---
Count of elite individuals by case: (243 363 362 366 232 362 362 232 232 841)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (243 363 362 366 232 362 362 232 232 841)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_729} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (exec_y_when_autoconstructing (boolean_dup_times in3) exec_rot () (exec_rot (boolean_yank) (print_boolean boolean_empty) (integer_yankdup) exec_s (exec_y (boolean_pop print_integer) exec_dup (exec_dup_times (integer_max boolean_yank) in1) exec_do*range (exec_if () (boolean_pop boolean_yank boolean_shove boolean_flush integer_lte exec_empty exec_k () (integer_shove exec_do*count (integer_dup_times boolean_swap) boolean_dup_items print_boolean exec_do*times (exec_dup_items exec_do*count (exec_rot (exec_noop) (exec_pop () integer_div integer_mult exec_yankdup integer_mod boolean_dup_times boolean_invert_second_then_and tagged_729 exec_yank) () exec_dup_items exec_do*count (integer_yankdup)) integer_stackdepth integer_stackdepth boolean_invert_first_then_and integer_dup_times boolean_yankdup) exec_stackdepth exec_s_when_autoconstructing () () ())))) () ()) ())
Errors: [1 0 0 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 87
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 6.405
Median total errors in population: 6
Error averages by case: (0.757 0.637 0.638 0.634 0.768 0.638 0.638 0.768 0.768 0.159)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.2
Average program size in population (points): 75.44
Average percent parens in population: 0.291
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.40325
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2963539
--- Timings ---
Current time: 1559584816141 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.8 seconds, 50.6%
Fitness Testing:      4.6 seconds, 34.1%
Report:               2.0 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 39                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -6                 
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -15                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 86                 
Correct output: 13                  | Program output: 38                 
Correct output: 7                   | Program output: 89                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 78                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 14                 
Correct output: 2                   | Program output: 87                 
Correct output: 2                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 52                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 73                 
Correct output: 30                  | Program output: 88                 
Correct output: 53                  | Program output: 67                 
Correct output: 8                   | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -88                 | Program output: 71                 
Correct output: -80                 | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 56                 
Correct output: -93                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: 73                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: 8                  
Correct output: -31                 | Program output: 47                 
Correct output: -29                 | Program output: 95                 
Correct output: -66                 | Program output: -35                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -4                 
Correct output: -54                 | Program output: -9                 
Correct output: -35                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -47                
Correct output: -32                 | Program output: 66                 
Correct output: 14                  | Program output: 79                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 21                 
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: 49                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: 28                 
Correct output: -97                 | Program output: 31                 
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 65                 
Correct output: -71                 | Program output: -27                
Correct output: -25                 | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -52                
Correct output: -57                 | Program output: 74                 
Correct output: -94                 | Program output: 97                 
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -30                
Correct output: -81                 | Program output: -75                
Correct output: -2                  | Program output: 35                 
Correct output: 3                   | Program output: 13                 
Correct output: -93                 | Program output: -53                
Correct output: -81                 | Program output: 69                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 69                 
Correct output: -40                 | Program output: 38                 
Correct output: -75                 | Program output: 49                 
Correct output: -90                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 integer_yank boolean_yankdup) (boolean_xor boolean_pop print_integer exec_swap () (integer_yankdup boolean_swap) integer_min) (exec_pop () print_integer exec_s (exec_shove () boolean_rot integer_yank) (boolean_invert_first_then_and exec_eq integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth exec_shove (exec_noop exec_dup_items exec_stackdepth exec_yankdup) integer_yank)) ()))
Lexicase best errors: [1 1 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 integer_yank boolean_yankdup) (boolean_xor boolean_pop print_integer exec_swap () (integer_yankdup boolean_swap) integer_min) (exec_pop () print_integer exec_s (exec_shove () boolean_rot integer_yank) (boolean_invert_first_then_and exec_eq integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth exec_shove (exec_noop exec_dup_items exec_stackdepth exec_yankdup) integer_yank)) ()))
Zero cases best errors: [1 1 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 344 1000 847 1000 503 1000 501 501 344)
Population mean number of elite cases: 7.04
Count of perfect (error zero) individuals by case: (0 344 0 847 0 503 0 501 501 344)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 2, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank})
Best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 integer_yank boolean_yankdup) (boolean_xor boolean_pop print_integer exec_swap () (integer_yankdup boolean_swap integer_min exec_pop () print_integer exec_s (exec_shove () boolean_rot integer_yank) (boolean_invert_first_then_and exec_eq integer_fromboolean integer_dec exec_dup_times (boolean_stackdepth exec_shove (exec_noop exec_dup_items exec_stackdepth exec_yankdup) integer_yank)) ())) ())
Errors: [1 1 1 0 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 39
Size: 52
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.96
Median total errors in population: 7
Error averages by case: (1.0 0.656 1.0 0.153 1.0 0.497 1.0 0.499 0.499 0.656)
Error minima by case: (1 0 1 0 1 0 1 0 0 0)
Average genome size in population (length): 41.523
Average program size in population (points): 57.621
Average percent parens in population: 0.270
Minimum age in population: 4.0
Maximum age in population: 7.375
Average age in population: 6.056875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 215
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3760853
--- Timings ---
Current time: 1559584819437 milliseconds
Total Time:          17.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 52.8%
Fitness Testing:      5.4 seconds, 31.3%
Report:               2.6 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 45                 
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 49                 
Correct output: 18                  | Program output: 40                 
Correct output: 35                  | Program output: 74                 
Correct output: 30                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 2                   | Program output: 34                 
Correct output: 2                   | Program output: 22                 
Correct output: 1                   | Program output: 4                  
Correct output: 5                   | Program output: 10                 
Correct output: 23                  | Program output: 64                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 7                  
Correct output: 30                  | Program output: 69                 
Correct output: 53                  | Program output: 53                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 71                 
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -36                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: 47                 
Correct output: -38                 | Program output: 31                 
Correct output: -77                 | Program output: -33                
Correct output: -71                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -29                 | Program output: -29                
Correct output: -66                 | Program output: -66                
Correct output: -10                 | Program output: 67                 
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -29                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: -32                
Correct output: 14                  | Program output: 14                 
Correct output: -28                 | Program output: 7                  
Correct output: -81                 | Program output: -70                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -8                 
Correct output: -91                 | Program output: -4                 
Correct output: 6                   | Program output: 29                 
Correct output: -82                 | Program output: -79                
Correct output: -76                 | Program output: -15                
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -58                
Correct output: -100                | Program output: -57                
Correct output: -97                 | Program output: -58                
Correct output: -68                 | Program output: 52                 
Correct output: -66                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -7                 
Correct output: -87                 | Program output: 13                 
Correct output: -78                 | Program output: 64                 
Correct output: -64                 | Program output: -8                 
Correct output: -81                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -82                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -2                  | Program output: -2                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -47                
Correct output: -65                 | Program output: 49                 
Correct output: -47                 | Program output: -47                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -27                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_swap integer_gt in2 integer_sub exec_stackdepth exec_shove (print_integer integer_dup boolean_frominteger integer_swap exec_pop () in1 boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ())))
Lexicase best errors: [0 1 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_swap integer_gt in2 integer_sub exec_stackdepth exec_shove (print_integer integer_dup boolean_frominteger integer_swap exec_pop () in1 boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ())))
Zero cases best errors: [0 1 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (910 1000 300 312 563 1000 312 562 1000 312)
Population mean number of elite cases: 6.27
Count of perfect (error zero) individuals by case: (910 0 300 312 563 0 312 562 0 312)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Best program: (integer_swap integer_gt in2 integer_sub exec_stackdepth exec_shove (print_integer integer_dup boolean_frominteger integer_swap exec_pop () in1 boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ())))
Errors: [0 1 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 47
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 6.729
Median total errors in population: 7
Error averages by case: (0.09 1.0 0.7 0.688 0.437 1.0 0.688 0.438 1.0 0.688)
Error minima by case: (0 1 0 0 0 1 0 0 1 0)
Average genome size in population (length): 41.13
Average program size in population (points): 57.586
Average percent parens in population: 0.277
Minimum age in population: 5.0
Maximum age in population: 9.0625
Average age in population: 7.462
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 139
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4564345
--- Timings ---
Current time: 1559584822291 milliseconds
Total Time:          19.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.8 seconds, 54.0%
Fitness Testing:      6.2 seconds, 30.9%
Report:               2.9 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 397
Test mean error for best: 0.39700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 59                 
Correct output: 13                  | Program output: 38                 
Correct output: 7                   | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 14                 
Correct output: 2                   | Program output: 61                 
Correct output: 2                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 52                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 30                  | Program output: 88                 
Correct output: 53                  | Program output: 67                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: 31                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -29                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -32                
Correct output: -54                 | Program output: -9                 
Correct output: -35                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -47                
Correct output: -32                 | Program output: 66                 
Correct output: 14                  | Program output: 79                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: 28                 
Correct output: -97                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: -71                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -7                 
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -30                
Correct output: -81                 | Program output: -81                
Correct output: -2                  | Program output: -2                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 57                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_swap integer_gt in2 integer_sub exec_stackdepth exec_shove (print_integer integer_dup boolean_frominteger integer_swap exec_pop () in1 boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ())))
Lexicase best errors: [0 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_swap integer_gt in2 integer_sub exec_stackdepth exec_shove (print_integer integer_dup boolean_frominteger integer_swap exec_pop () in1 boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ())))
Zero cases best errors: [0 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (510 346 910 928 347 862 511 1000 863 927)
Population mean number of elite cases: 7.20
Count of perfect (error zero) individuals by case: (510 346 910 928 347 862 511 0 863 927)
Population mean number of perfect (error zero) cases: 6.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
Errors: [1 0 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 3.796
Median total errors in population: 3
Error averages by case: (0.49 0.654 0.09 0.072 0.653 0.138 0.489 1.0 0.137 0.073)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 37.006
Average program size in population (points): 49.669
Average percent parens in population: 0.253
Minimum age in population: 6.875
Maximum age in population: 10.75
Average age in population: 8.87815625
Median age in population: 8.953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 204
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 209
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5077773
--- Timings ---
Current time: 1559584824931 milliseconds
Total Time:          22.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.5 seconds, 55.6%
Fitness Testing:      6.7 seconds, 29.6%
Report:               3.3 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 397
Test mean error for best: 0.39700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 59                 
Correct output: 13                  | Program output: 38                 
Correct output: 7                   | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 14                 
Correct output: 2                   | Program output: 61                 
Correct output: 2                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 52                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 30                  | Program output: 88                 
Correct output: 53                  | Program output: 67                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: 31                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -29                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -32                
Correct output: -54                 | Program output: -9                 
Correct output: -35                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -47                
Correct output: -32                 | Program output: 66                 
Correct output: 14                  | Program output: 79                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: 28                 
Correct output: -97                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: -71                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -7                 
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -30                
Correct output: -81                 | Program output: -81                
Correct output: -2                  | Program output: -2                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 57                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
Lexicase best errors: [1 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 53
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
Zero cases best errors: [1 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 53
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (413 439 869 861 916 439 412 412 439 439)
Population mean number of elite cases: 5.64
Count of perfect (error zero) individuals by case: (413 439 869 861 916 439 412 412 439 439)
Population mean number of perfect (error zero) cases: 5.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
Errors: [1 0 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 4.361
Median total errors in population: 4
Error averages by case: (0.587 0.561 0.131 0.139 0.084 0.561 0.588 0.588 0.561 0.561)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.42
Average program size in population (points): 50.57
Average percent parens in population: 0.258
Minimum age in population: 8.375
Maximum age in population: 12.078125
Average age in population: 10.295015625
Median age in population: 10.34375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5604033
--- Timings ---
Current time: 1559584827640 milliseconds
Total Time:          25.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.4 seconds, 56.9%
Fitness Testing:      7.2 seconds, 28.5%
Report:               3.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: 58                 
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 51                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 91                 
Correct output: 27                  | Program output: 45                 
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 49                 
Correct output: 18                  | Program output: 40                 
Correct output: 35                  | Program output: 74                 
Correct output: 30                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 2                   | Program output: 34                 
Correct output: 2                   | Program output: 22                 
Correct output: 1                   | Program output: 4                  
Correct output: 5                   | Program output: 10                 
Correct output: 23                  | Program output: 64                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 7                  
Correct output: 30                  | Program output: 69                 
Correct output: 53                  | Program output: 53                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 71                 
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -36                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: 47                 
Correct output: -38                 | Program output: 31                 
Correct output: -77                 | Program output: -33                
Correct output: -71                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -29                 | Program output: -29                
Correct output: -66                 | Program output: -66                
Correct output: -10                 | Program output: 67                 
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -29                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: -32                
Correct output: 14                  | Program output: 14                 
Correct output: -28                 | Program output: 7                  
Correct output: -81                 | Program output: -70                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -8                 
Correct output: -91                 | Program output: -4                 
Correct output: 6                   | Program output: 29                 
Correct output: -82                 | Program output: -79                
Correct output: -76                 | Program output: -15                
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -58                
Correct output: -100                | Program output: -57                
Correct output: -97                 | Program output: -58                
Correct output: -68                 | Program output: 52                 
Correct output: -66                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -7                 
Correct output: -87                 | Program output: 13                 
Correct output: -78                 | Program output: 64                 
Correct output: -64                 | Program output: -8                 
Correct output: -81                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -82                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -2                  | Program output: -2                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -47                
Correct output: -65                 | Program output: 49                 
Correct output: -47                 | Program output: -47                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -27                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_swap integer_gt in2 integer_sub exec_stackdepth exec_shove (in1 integer_dup boolean_frominteger integer_swap exec_pop () in1 boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (integer_flush integer_min) integer_gte integer_dup_times boolean_and integer_stackdepth integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()))
Lexicase best errors: [0 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_swap integer_gt in2 integer_sub exec_stackdepth exec_shove (in1 integer_dup boolean_frominteger integer_swap exec_pop () in1 boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (integer_flush integer_min) integer_gte integer_dup_times boolean_and integer_stackdepth integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()))
Zero cases best errors: [0 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (346 500 843 347 2 499 346 2 905 2)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (346 500 843 347 2 499 346 2 905 2)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Best program: (integer_swap integer_gt in2 integer_sub exec_stackdepth exec_shove (print_integer integer_dup boolean_frominteger integer_swap exec_pop () in1 boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min boolean_rot integer_max exec_dup (print_integer integer_dup exec_s (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and boolean_and integer_min) (boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ())))) () ()))
Errors: [0 1 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 49
Size: 67
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.208
Median total errors in population: 6
Error averages by case: (0.654 0.5 0.157 0.653 0.998 0.501 0.654 0.998 0.095 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.785
Average program size in population (points): 51.283
Average percent parens in population: 0.261
Minimum age in population: 9.5
Maximum age in population: 13.53125
Average age in population: 11.7479921875
Median age in population: 11.8203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6137555
--- Timings ---
Current time: 1559584830633 milliseconds
Total Time:          28.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.3 seconds, 58.1%
Fitness Testing:      7.7 seconds, 27.5%
Report:               3.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 233
Test mean error for best: 0.23300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: -13                
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 45                 
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 40                 
Correct output: 35                  | Program output: 65                 
Correct output: 30                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 4                  
Correct output: 5                   | Program output: 10                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 53                  | Program output: 53                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -23                
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -33                
Correct output: -71                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -29                 | Program output: -29                
Correct output: -66                 | Program output: -66                
Correct output: -10                 | Program output: 45                 
Correct output: -57                 | Program output: -57                
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -86                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: -32                
Correct output: 14                  | Program output: 14                 
Correct output: -28                 | Program output: 7                  
Correct output: -81                 | Program output: -70                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -8                 
Correct output: -91                 | Program output: -40                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -15                
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -58                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: 52                 
Correct output: -66                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -79                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -13                
Correct output: -78                 | Program output: -19                
Correct output: -64                 | Program output: -8                 
Correct output: -81                 | Program output: -78                
Correct output: -52                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -2                  | Program output: -2                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 49                 
Correct output: -47                 | Program output: -47                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_swap integer_gt in2 integer_sub exec_stackdepth exec_shove (print_integer integer_dup boolean_frominteger integer_swap exec_pop () in1 boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ())))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 53
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_swap integer_gt in2 integer_sub exec_stackdepth exec_shove (print_integer integer_dup boolean_frominteger integer_swap exec_pop () in1 boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ())))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 53
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (222 318 873 873 318 867 902 320 917 220)
Population mean number of elite cases: 5.83
Count of perfect (error zero) individuals by case: (222 318 873 873 318 867 902 320 917 220)
Population mean number of perfect (error zero) cases: 5.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Best program: (integer_swap integer_gt in2 integer_sub exec_stackdepth exec_shove (print_integer integer_dup boolean_frominteger integer_swap exec_pop () in1 boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ())))
Errors: [1 0 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 41
Size: 53
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 4.17
Median total errors in population: 3
Error averages by case: (0.778 0.682 0.127 0.127 0.682 0.133 0.098 0.68 0.083 0.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.339
Average program size in population (points): 47.741
Average percent parens in population: 0.258
Minimum age in population: 10.5
Maximum age in population: 15.16796875
Average age in population: 13.41109765625
Median age in population: 13.546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6636393
--- Timings ---
Current time: 1559584833362 milliseconds
Total Time:          31.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.2 seconds, 58.7%
Fitness Testing:      8.2 seconds, 26.5%
Report:               4.5 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 186
Test mean error for best: 0.18600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: -13                
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 13                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 53                  | Program output: 67                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -29                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -32                
Correct output: -54                 | Program output: -9                 
Correct output: -35                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -51                
Correct output: -32                 | Program output: 66                 
Correct output: 14                  | Program output: 45                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: -71                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -2                  | Program output: -2                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 16                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 60
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (357 511 358 513 357 508 829 822 465 518)
Population mean number of elite cases: 5.24
Count of perfect (error zero) individuals by case: (357 511 358 513 357 508 829 822 465 518)
Population mean number of perfect (error zero) cases: 5.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty in1 boolean_eq integer_swap boolean_and integer_min) (integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 42
Size: 58
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 4.762
Median total errors in population: 5
Error averages by case: (0.643 0.489 0.642 0.487 0.643 0.492 0.171 0.178 0.535 0.482)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.856
Average program size in population (points): 53.116
Average percent parens in population: 0.249
Minimum age in population: 12.25
Maximum age in population: 16.416015625
Average age in population: 14.8968828125
Median age in population: 14.859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 301
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 311
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7205126
--- Timings ---
Current time: 1559584836191 milliseconds
Total Time:          33.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.1 seconds, 59.4%
Fitness Testing:      8.8 seconds, 26.0%
Report:               4.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 186
Test mean error for best: 0.18600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: -13                
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 13                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 53                  | Program output: 67                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -29                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -32                
Correct output: -54                 | Program output: -9                 
Correct output: -35                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -51                
Correct output: -32                 | Program output: 66                 
Correct output: 14                  | Program output: 45                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: -71                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -2                  | Program output: -2                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 16                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty in1 boolean_eq integer_swap boolean_and integer_min) (integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 58
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty in1 boolean_eq integer_swap boolean_and integer_min) (integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 58
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (825 890 617 616 616 890 872 826 616 897)
Population mean number of elite cases: 7.66
Count of perfect (error zero) individuals by case: (825 890 617 616 616 890 872 826 616 897)
Population mean number of perfect (error zero) cases: 7.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_boolean_659} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank})
Best program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 44
Size: 60
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 2.335
Median total errors in population: 0
Error averages by case: (0.175 0.11 0.383 0.384 0.384 0.11 0.128 0.174 0.384 0.103)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.506
Average program size in population (points): 56.401
Average percent parens in population: 0.264
Minimum age in population: 14.76953125
Maximum age in population: 17.74609375
Average age in population: 16.3116455078125
Median age in population: 16.490234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.01
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7795426
--- Timings ---
Current time: 1559584838986 milliseconds
Total Time:          36.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.9 seconds, 59.9%
Fitness Testing:      9.4 seconds, 25.6%
Report:               5.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 11
Successful program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 60


Auto-simplifying with starting size: 60
step: 0
program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 500
program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 1000
program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 1500
program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 2000
program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 2500
program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 3000
program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 3500
program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 4000
program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 4500
program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 5000
program: (integer_lt boolean_dup_times boolean_frominteger boolean_rot integer_dup integer_stackdepth integer_shove tag_boolean_659 integer_flush print_integer exec_s (in3 exec_rot () (boolean_yankdup) (boolean_swap) exec_empty exec_empty in1 boolean_pop integer_swap boolean_and integer_min) (boolean_rot integer_max exec_dup (in4 integer_min) boolean_rot integer_max exec_dup (print_integer integer_dup exec_do*times (exec_rot (integer_min) (integer_gte integer_dup_times boolean_and integer_stackdepth exec_rot (boolean_dup_items boolean_dup_items boolean_swap) (integer_yank) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 186
Test mean error for best: 0.18600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -13                 | Program output: -13                
Correct output: -22                 | Program output: -22                
Correct output: 44                  | Program output: 44                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: -59                 | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: -50                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 82                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 13                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 53                  | Program output: 67                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -29                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -32                
Correct output: -54                 | Program output: -9                 
Correct output: -35                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -51                
Correct output: -32                 | Program output: 66                 
Correct output: 14                  | Program output: 45                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: 6                   | Program output: 6                  
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: -71                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -2                  | Program output: -2                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: 16                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
;;******************************
