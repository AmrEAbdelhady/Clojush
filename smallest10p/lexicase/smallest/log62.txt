Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-59 -59 -96 -59] -96] [[-60 -67 -67 -67] -67] [[-21 -21 -7 -21] -21] [[-37 -37 13 -37] -37] [[-55 12 12 12] -55] [[46 41 46 46] 41] [[-37 -37 -37 5] -37] [[89 89 73 89] 73] [[61 61 61 61] 61] [[-45 25 -45 -45] -45] [(-2 -2 -2 -2) -2] [(-88 -88 -88 -88) -88] [(-38 -38 -38 -38) -38] [(-52 -52 -52 -52) -52] [(-41 -41 -41 -41) -41] [(65 28 15 70) 15] [(69 61 94 87) 61] [(57 31 96 1) 1] [(79 55 82 69) 55] [(93 56 21 47) 21] [(59 66 76 35) 35] [(95 50 32 50) 32] [(57 94 14 71) 14] [(47 77 84 9) 9] [(52 15 43 50) 15] [(83 3 9 16) 3] [(30 93 99 37) 30] [(54 69 53 2) 2] [(44 62 62 27) 27] [(72 97 98 96) 72] [(52 20 17 67) 17] [(49 48 80 47) 47] [(47 74 8 100) 8] [(66 45 55 75) 45] [(74 13 50 49) 13] [(-54 74 -24 90) -54] [(-65 36 -93 44) -93] [(-31 -72 -73 -82) -82] [(-22 -9 94 20) -22] [(44 53 -1 -38) -38] [(48 50 26 -27) -27] [(71 -99 33 30) -99] [(-29 -51 -97 2) -97] [(-15 42 3 91) -15] [(88 5 -79 16) -79] [(97 31 -7 60) -7] [(-3 22 -37 24) -37] [(-45 93 63 90) -45] [(-25 -68 -42 100) -68] [(-17 -93 -78 -59) -93] [(12 47 21 -28) -28] [(91 -8 40 77) -8] [(-85 54 -96 -6) -96] [(-37 -2 11 77) -37] [(-90 -16 -35 32) -90] [(-51 -88 77 41) -88] [(-24 64 -74 -62) -74] [(89 -76 -22 87) -76] [(42 3 -93 19) -93] [(-40 -75 45 69) -75] [(-26 -73 -66 42) -73] [(-19 83 -8 8) -19] [(13 -24 2 -69) -69] [(-39 9 65 94) -39] [(17 16 -84 -87) -87] [(44 95 -42 82) -42] [(3 -44 36 -2) -44] [(3 31 21 1) 1] [(15 48 -67 28) -67] [(92 19 88 -41) -41] [(-46 49 -10 -96) -96] [(47 98 51 43) 43] [(-23 82 80 -79) -79] [(-57 93 -96 -2) -96] [(50 -46 -53 -8) -53] [(49 100 -58 72) -58] [(-40 5 -12 -31) -40] [(96 -8 -1 -54) -54] [(-39 -95 25 90) -95] [(95 -51 -77 23) -77] [(96 -60 46 -81) -81] [(-39 84 -97 -25) -97] [(11 -5 63 -1) -5] [(4 74 39 -21) -21] [(78 30 -2 41) -2] [(28 -40 -93 -85) -93] [(51 -87 -68 27) -87] [(-18 -13 50 -92) -92] [(71 14 81 -52) -52] [(-38 60 91 -13) -38] [(73 92 -2 -64) -64] [(-77 18 16 -44) -77] [(-76 -30 -96 87) -96] [(59 40 46 24) 24] [(85 -41 -94 -99) -99])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-59 -59 -96 -59] -96]
Train Case:   6 | Input/Output: [[-60 -67 -67 -67] -67]
Train Case:   7 | Input/Output: [[-21 -21 -7 -21] -21]
Train Case:   8 | Input/Output: [[-37 -37 13 -37] -37]
Train Case:   9 | Input/Output: [[-55 12 12 12] -55]
Train Case:  10 | Input/Output: [[46 41 46 46] 41]
Train Case:  11 | Input/Output: [[-37 -37 -37 5] -37]
Train Case:  12 | Input/Output: [[89 89 73 89] 73]
Train Case:  13 | Input/Output: [[61 61 61 61] 61]
Train Case:  14 | Input/Output: [[-45 25 -45 -45] -45]
Train Case:  15 | Input/Output: [(-2 -2 -2 -2) -2]
Train Case:  16 | Input/Output: [(-88 -88 -88 -88) -88]
Train Case:  17 | Input/Output: [(-38 -38 -38 -38) -38]
Train Case:  18 | Input/Output: [(-52 -52 -52 -52) -52]
Train Case:  19 | Input/Output: [(-41 -41 -41 -41) -41]
Train Case:  20 | Input/Output: [(65 28 15 70) 15]
Train Case:  21 | Input/Output: [(69 61 94 87) 61]
Train Case:  22 | Input/Output: [(57 31 96 1) 1]
Train Case:  23 | Input/Output: [(79 55 82 69) 55]
Train Case:  24 | Input/Output: [(93 56 21 47) 21]
Train Case:  25 | Input/Output: [(59 66 76 35) 35]
Train Case:  26 | Input/Output: [(95 50 32 50) 32]
Train Case:  27 | Input/Output: [(57 94 14 71) 14]
Train Case:  28 | Input/Output: [(47 77 84 9) 9]
Train Case:  29 | Input/Output: [(52 15 43 50) 15]
Train Case:  30 | Input/Output: [(83 3 9 16) 3]
Train Case:  31 | Input/Output: [(30 93 99 37) 30]
Train Case:  32 | Input/Output: [(54 69 53 2) 2]
Train Case:  33 | Input/Output: [(44 62 62 27) 27]
Train Case:  34 | Input/Output: [(72 97 98 96) 72]
Train Case:  35 | Input/Output: [(52 20 17 67) 17]
Train Case:  36 | Input/Output: [(49 48 80 47) 47]
Train Case:  37 | Input/Output: [(47 74 8 100) 8]
Train Case:  38 | Input/Output: [(66 45 55 75) 45]
Train Case:  39 | Input/Output: [(74 13 50 49) 13]
Train Case:  40 | Input/Output: [(-54 74 -24 90) -54]
Train Case:  41 | Input/Output: [(-65 36 -93 44) -93]
Train Case:  42 | Input/Output: [(-31 -72 -73 -82) -82]
Train Case:  43 | Input/Output: [(-22 -9 94 20) -22]
Train Case:  44 | Input/Output: [(44 53 -1 -38) -38]
Train Case:  45 | Input/Output: [(48 50 26 -27) -27]
Train Case:  46 | Input/Output: [(71 -99 33 30) -99]
Train Case:  47 | Input/Output: [(-29 -51 -97 2) -97]
Train Case:  48 | Input/Output: [(-15 42 3 91) -15]
Train Case:  49 | Input/Output: [(88 5 -79 16) -79]
Train Case:  50 | Input/Output: [(97 31 -7 60) -7]
Train Case:  51 | Input/Output: [(-3 22 -37 24) -37]
Train Case:  52 | Input/Output: [(-45 93 63 90) -45]
Train Case:  53 | Input/Output: [(-25 -68 -42 100) -68]
Train Case:  54 | Input/Output: [(-17 -93 -78 -59) -93]
Train Case:  55 | Input/Output: [(12 47 21 -28) -28]
Train Case:  56 | Input/Output: [(91 -8 40 77) -8]
Train Case:  57 | Input/Output: [(-85 54 -96 -6) -96]
Train Case:  58 | Input/Output: [(-37 -2 11 77) -37]
Train Case:  59 | Input/Output: [(-90 -16 -35 32) -90]
Train Case:  60 | Input/Output: [(-51 -88 77 41) -88]
Train Case:  61 | Input/Output: [(-24 64 -74 -62) -74]
Train Case:  62 | Input/Output: [(89 -76 -22 87) -76]
Train Case:  63 | Input/Output: [(42 3 -93 19) -93]
Train Case:  64 | Input/Output: [(-40 -75 45 69) -75]
Train Case:  65 | Input/Output: [(-26 -73 -66 42) -73]
Train Case:  66 | Input/Output: [(-19 83 -8 8) -19]
Train Case:  67 | Input/Output: [(13 -24 2 -69) -69]
Train Case:  68 | Input/Output: [(-39 9 65 94) -39]
Train Case:  69 | Input/Output: [(17 16 -84 -87) -87]
Train Case:  70 | Input/Output: [(44 95 -42 82) -42]
Train Case:  71 | Input/Output: [(3 -44 36 -2) -44]
Train Case:  72 | Input/Output: [(3 31 21 1) 1]
Train Case:  73 | Input/Output: [(15 48 -67 28) -67]
Train Case:  74 | Input/Output: [(92 19 88 -41) -41]
Train Case:  75 | Input/Output: [(-46 49 -10 -96) -96]
Train Case:  76 | Input/Output: [(47 98 51 43) 43]
Train Case:  77 | Input/Output: [(-23 82 80 -79) -79]
Train Case:  78 | Input/Output: [(-57 93 -96 -2) -96]
Train Case:  79 | Input/Output: [(50 -46 -53 -8) -53]
Train Case:  80 | Input/Output: [(49 100 -58 72) -58]
Train Case:  81 | Input/Output: [(-40 5 -12 -31) -40]
Train Case:  82 | Input/Output: [(96 -8 -1 -54) -54]
Train Case:  83 | Input/Output: [(-39 -95 25 90) -95]
Train Case:  84 | Input/Output: [(95 -51 -77 23) -77]
Train Case:  85 | Input/Output: [(96 -60 46 -81) -81]
Train Case:  86 | Input/Output: [(-39 84 -97 -25) -97]
Train Case:  87 | Input/Output: [(11 -5 63 -1) -5]
Train Case:  88 | Input/Output: [(4 74 39 -21) -21]
Train Case:  89 | Input/Output: [(78 30 -2 41) -2]
Train Case:  90 | Input/Output: [(28 -40 -93 -85) -93]
Train Case:  91 | Input/Output: [(51 -87 -68 27) -87]
Train Case:  92 | Input/Output: [(-18 -13 50 -92) -92]
Train Case:  93 | Input/Output: [(71 14 81 -52) -52]
Train Case:  94 | Input/Output: [(-38 60 91 -13) -38]
Train Case:  95 | Input/Output: [(73 92 -2 -64) -64]
Train Case:  96 | Input/Output: [(-77 18 16 -44) -77]
Train Case:  97 | Input/Output: [(-76 -30 -96 87) -96]
Train Case:  98 | Input/Output: [(59 40 46 24) 24]
Train Case:  99 | Input/Output: [(85 -41 -94 -99) -99]
Test Case:   0 | Input/Output: [[-25 -78 -78 -78] -78]
Test Case:   1 | Input/Output: [[-91 -91 -91 58] -91]
Test Case:   2 | Input/Output: [[79 79 42 79] 42]
Test Case:   3 | Input/Output: [[24 24 -4 24] -4]
Test Case:   4 | Input/Output: [[65 65 12 65] 12]
Test Case:   5 | Input/Output: [[-55 -55 -88 -55] -88]
Test Case:   6 | Input/Output: [[-27 21 -27 -27] -27]
Test Case:   7 | Input/Output: [[32 60 60 60] 32]
Test Case:   8 | Input/Output: [[75 75 75 82] 75]
Test Case:   9 | Input/Output: [[11 -11 -11 -11] -11]
Test Case:  10 | Input/Output: [[25 25 42 25] 25]
Test Case:  11 | Input/Output: [[98 98 98 -61] -61]
Test Case:  12 | Input/Output: [[49 49 49 24] 24]
Test Case:  13 | Input/Output: [[35 35 8 35] 8]
Test Case:  14 | Input/Output: [[-44 -44 -44 100] -44]
Test Case:  15 | Input/Output: [[-100 -5 -100 -100] -100]
Test Case:  16 | Input/Output: [[56 -31 -31 -31] -31]
Test Case:  17 | Input/Output: [[-30 54 -30 -30] -30]
Test Case:  18 | Input/Output: [[-94 51 51 51] -94]
Test Case:  19 | Input/Output: [[16 -4 -4 -4] -4]
Test Case:  20 | Input/Output: [[78 -45 78 78] -45]
Test Case:  21 | Input/Output: [[89 89 89 70] 70]
Test Case:  22 | Input/Output: [[-37 -37 -71 -37] -71]
Test Case:  23 | Input/Output: [[-91 -91 -91 -69] -91]
Test Case:  24 | Input/Output: [[-59 -59 3 -59] -59]
Test Case:  25 | Input/Output: [[87 87 92 87] 87]
Test Case:  26 | Input/Output: [[-36 -36 -36 -7] -36]
Test Case:  27 | Input/Output: [[-17 98 -17 -17] -17]
Test Case:  28 | Input/Output: [[-5 -11 -5 -5] -11]
Test Case:  29 | Input/Output: [[-70 -70 -32 -70] -70]
Test Case:  30 | Input/Output: [[-59 4 -59 -59] -59]
Test Case:  31 | Input/Output: [[22 -90 22 22] -90]
Test Case:  32 | Input/Output: [[-46 -46 -66 -46] -66]
Test Case:  33 | Input/Output: [[71 -8 -8 -8] -8]
Test Case:  34 | Input/Output: [[-45 -45 -45 22] -45]
Test Case:  35 | Input/Output: [[64 95 95 95] 64]
Test Case:  36 | Input/Output: [[64 64 64 -91] -91]
Test Case:  37 | Input/Output: [[-74 46 -74 -74] -74]
Test Case:  38 | Input/Output: [[65 65 58 65] 58]
Test Case:  39 | Input/Output: [[24 -37 -37 -37] -37]
Test Case:  40 | Input/Output: [[34 55 34 34] 34]
Test Case:  41 | Input/Output: [[-15 -11 -11 -11] -15]
Test Case:  42 | Input/Output: [[-86 23 -86 -86] -86]
Test Case:  43 | Input/Output: [[-64 -64 -64 -70] -70]
Test Case:  44 | Input/Output: [[-43 -5 -43 -43] -43]
Test Case:  45 | Input/Output: [[7 7 7 22] 7]
Test Case:  46 | Input/Output: [[71 71 71 -88] -88]
Test Case:  47 | Input/Output: [[38 38 -98 38] -98]
Test Case:  48 | Input/Output: [[25 -9 25 25] -9]
Test Case:  49 | Input/Output: [[61 61 0 61] 0]
Test Case:  50 | Input/Output: [[-16 -16 41 -16] -16]
Test Case:  51 | Input/Output: [[-73 -73 -73 -86] -86]
Test Case:  52 | Input/Output: [[-8 96 96 96] -8]
Test Case:  53 | Input/Output: [[-88 10 -88 -88] -88]
Test Case:  54 | Input/Output: [[-43 -43 -43 99] -43]
Test Case:  55 | Input/Output: [[-70 -70 -70 34] -70]
Test Case:  56 | Input/Output: [[6 6 22 6] 6]
Test Case:  57 | Input/Output: [[28 -4 -4 -4] -4]
Test Case:  58 | Input/Output: [[94 94 94 -82] -82]
Test Case:  59 | Input/Output: [[0 0 0 -23] -23]
Test Case:  60 | Input/Output: [[34 -5 -5 -5] -5]
Test Case:  61 | Input/Output: [[59 59 -93 59] -93]
Test Case:  62 | Input/Output: [[-17 -29 -29 -29] -29]
Test Case:  63 | Input/Output: [[-97 -66 -66 -66] -97]
Test Case:  64 | Input/Output: [[31 31 58 31] 31]
Test Case:  65 | Input/Output: [[93 93 -39 93] -39]
Test Case:  66 | Input/Output: [[-51 -51 -51 9] -51]
Test Case:  67 | Input/Output: [[66 66 66 -50] -50]
Test Case:  68 | Input/Output: [[-55 -55 -47 -55] -55]
Test Case:  69 | Input/Output: [[12 -66 -66 -66] -66]
Test Case:  70 | Input/Output: [[-11 82 82 82] -11]
Test Case:  71 | Input/Output: [[-26 -54 -26 -26] -54]
Test Case:  72 | Input/Output: [[26 26 -43 26] -43]
Test Case:  73 | Input/Output: [[-2 -2 -2 -31] -31]
Test Case:  74 | Input/Output: [[27 25 25 25] 25]
Test Case:  75 | Input/Output: [[-22 -22 -22 -66] -66]
Test Case:  76 | Input/Output: [[30 30 30 7] 7]
Test Case:  77 | Input/Output: [[-17 -17 74 -17] -17]
Test Case:  78 | Input/Output: [[17 17 -76 17] -76]
Test Case:  79 | Input/Output: [[-97 -97 -97 -20] -97]
Test Case:  80 | Input/Output: [[77 77 77 -48] -48]
Test Case:  81 | Input/Output: [[37 37 37 -84] -84]
Test Case:  82 | Input/Output: [[-82 -82 -82 83] -82]
Test Case:  83 | Input/Output: [[67 100 100 100] 67]
Test Case:  84 | Input/Output: [[-68 -68 -68 -98] -98]
Test Case:  85 | Input/Output: [[91 91 62 91] 62]
Test Case:  86 | Input/Output: [[41 4 41 41] 4]
Test Case:  87 | Input/Output: [[66 86 86 86] 66]
Test Case:  88 | Input/Output: [[61 -87 61 61] -87]
Test Case:  89 | Input/Output: [[18 24 18 18] 18]
Test Case:  90 | Input/Output: [[-99 15 15 15] -99]
Test Case:  91 | Input/Output: [[-19 -19 -52 -19] -52]
Test Case:  92 | Input/Output: [[-87 10 -87 -87] -87]
Test Case:  93 | Input/Output: [[29 83 83 83] 29]
Test Case:  94 | Input/Output: [[51 51 -76 51] -76]
Test Case:  95 | Input/Output: [[-38 -38 65 -38] -38]
Test Case:  96 | Input/Output: [[32 32 32 -62] -62]
Test Case:  97 | Input/Output: [[-15 -15 -15 -40] -40]
Test Case:  98 | Input/Output: [[37 -71 37 37] -71]
Test Case:  99 | Input/Output: [[60 60 60 -78] -78]
Test Case: 100 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 101 | Input/Output: [(5 5 5 5) 5]
Test Case: 102 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 103 | Input/Output: [(89 89 89 89) 89]
Test Case: 104 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 105 | Input/Output: [(64 64 64 64) 64]
Test Case: 106 | Input/Output: [(88 88 88 88) 88]
Test Case: 107 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 108 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 109 | Input/Output: [(77 77 77 77) 77]
Test Case: 110 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 111 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 112 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 113 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 114 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 115 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 116 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 117 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 118 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 119 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 120 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 121 | Input/Output: [(50 50 50 50) 50]
Test Case: 122 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 123 | Input/Output: [(92 92 92 92) 92]
Test Case: 124 | Input/Output: [(22 22 22 22) 22]
Test Case: 125 | Input/Output: [(12 12 12 12) 12]
Test Case: 126 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 127 | Input/Output: [(91 91 91 91) 91]
Test Case: 128 | Input/Output: [(20 20 20 20) 20]
Test Case: 129 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 130 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 131 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 132 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 133 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 134 | Input/Output: [(44 44 44 44) 44]
Test Case: 135 | Input/Output: [(28 28 28 28) 28]
Test Case: 136 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 137 | Input/Output: [(89 89 89 89) 89]
Test Case: 138 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 139 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 140 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 141 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 142 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 143 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 144 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 145 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 146 | Input/Output: [(14 14 14 14) 14]
Test Case: 147 | Input/Output: [(74 74 74 74) 74]
Test Case: 148 | Input/Output: [(91 91 91 91) 91]
Test Case: 149 | Input/Output: [(73 73 73 73) 73]
Test Case: 150 | Input/Output: [(2 2 2 2) 2]
Test Case: 151 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 152 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 153 | Input/Output: [(16 16 16 16) 16]
Test Case: 154 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 155 | Input/Output: [(0 0 0 0) 0]
Test Case: 156 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 157 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 158 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 159 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 160 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 161 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 162 | Input/Output: [(93 93 93 93) 93]
Test Case: 163 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 164 | Input/Output: [(89 89 89 89) 89]
Test Case: 165 | Input/Output: [(10 10 10 10) 10]
Test Case: 166 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 167 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 168 | Input/Output: [(69 69 69 69) 69]
Test Case: 169 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 170 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 171 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 172 | Input/Output: [(50 50 50 50) 50]
Test Case: 173 | Input/Output: [(62 62 62 62) 62]
Test Case: 174 | Input/Output: [(44 44 44 44) 44]
Test Case: 175 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 176 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 177 | Input/Output: [(6 6 6 6) 6]
Test Case: 178 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 179 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 180 | Input/Output: [(91 91 91 91) 91]
Test Case: 181 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 182 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 183 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 184 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 185 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 186 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 187 | Input/Output: [(31 31 31 31) 31]
Test Case: 188 | Input/Output: [(20 20 20 20) 20]
Test Case: 189 | Input/Output: [(20 20 20 20) 20]
Test Case: 190 | Input/Output: [(59 59 59 59) 59]
Test Case: 191 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 192 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 193 | Input/Output: [(92 92 92 92) 92]
Test Case: 194 | Input/Output: [(3 3 3 3) 3]
Test Case: 195 | Input/Output: [(26 26 26 26) 26]
Test Case: 196 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 197 | Input/Output: [(0 0 0 0) 0]
Test Case: 198 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 199 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 200 | Input/Output: [(84 65 14 6) 6]
Test Case: 201 | Input/Output: [(96 46 60 84) 46]
Test Case: 202 | Input/Output: [(67 85 36 8) 8]
Test Case: 203 | Input/Output: [(79 50 11 33) 11]
Test Case: 204 | Input/Output: [(7 0 3 59) 0]
Test Case: 205 | Input/Output: [(64 1 92 95) 1]
Test Case: 206 | Input/Output: [(39 48 39 61) 39]
Test Case: 207 | Input/Output: [(17 56 23 9) 9]
Test Case: 208 | Input/Output: [(33 26 78 65) 26]
Test Case: 209 | Input/Output: [(53 1 99 50) 1]
Test Case: 210 | Input/Output: [(59 87 45 38) 38]
Test Case: 211 | Input/Output: [(86 96 93 87) 86]
Test Case: 212 | Input/Output: [(57 33 13 34) 13]
Test Case: 213 | Input/Output: [(94 29 99 28) 28]
Test Case: 214 | Input/Output: [(56 22 25 18) 18]
Test Case: 215 | Input/Output: [(96 15 99 38) 15]
Test Case: 216 | Input/Output: [(16 98 56 50) 16]
Test Case: 217 | Input/Output: [(96 87 37 29) 29]
Test Case: 218 | Input/Output: [(51 38 51 23) 23]
Test Case: 219 | Input/Output: [(29 0 12 57) 0]
Test Case: 220 | Input/Output: [(14 94 77 53) 14]
Test Case: 221 | Input/Output: [(62 96 17 36) 17]
Test Case: 222 | Input/Output: [(60 81 50 10) 10]
Test Case: 223 | Input/Output: [(55 2 89 62) 2]
Test Case: 224 | Input/Output: [(70 49 97 27) 27]
Test Case: 225 | Input/Output: [(26 89 73 26) 26]
Test Case: 226 | Input/Output: [(69 32 52 26) 26]
Test Case: 227 | Input/Output: [(2 18 3 30) 2]
Test Case: 228 | Input/Output: [(80 19 93 19) 19]
Test Case: 229 | Input/Output: [(3 75 68 57) 3]
Test Case: 230 | Input/Output: [(7 93 78 74) 7]
Test Case: 231 | Input/Output: [(64 73 33 75) 33]
Test Case: 232 | Input/Output: [(100 82 91 4) 4]
Test Case: 233 | Input/Output: [(11 49 30 45) 11]
Test Case: 234 | Input/Output: [(41 47 87 80) 41]
Test Case: 235 | Input/Output: [(63 3 76 64) 3]
Test Case: 236 | Input/Output: [(13 2 20 55) 2]
Test Case: 237 | Input/Output: [(87 10 61 26) 10]
Test Case: 238 | Input/Output: [(62 58 72 15) 15]
Test Case: 239 | Input/Output: [(0 40 62 83) 0]
Test Case: 240 | Input/Output: [(21 60 89 38) 21]
Test Case: 241 | Input/Output: [(52 17 46 67) 17]
Test Case: 242 | Input/Output: [(67 29 46 23) 23]
Test Case: 243 | Input/Output: [(10 77 53 65) 10]
Test Case: 244 | Input/Output: [(23 50 79 50) 23]
Test Case: 245 | Input/Output: [(63 72 100 45) 45]
Test Case: 246 | Input/Output: [(84 97 35 42) 35]
Test Case: 247 | Input/Output: [(87 17 14 58) 14]
Test Case: 248 | Input/Output: [(95 86 10 96) 10]
Test Case: 249 | Input/Output: [(73 21 59 88) 21]
Test Case: 250 | Input/Output: [(22 92 16 66) 16]
Test Case: 251 | Input/Output: [(45 22 57 24) 22]
Test Case: 252 | Input/Output: [(41 99 78 45) 41]
Test Case: 253 | Input/Output: [(45 47 48 53) 45]
Test Case: 254 | Input/Output: [(69 44 50 27) 27]
Test Case: 255 | Input/Output: [(69 89 75 50) 50]
Test Case: 256 | Input/Output: [(51 99 100 8) 8]
Test Case: 257 | Input/Output: [(16 43 63 79) 16]
Test Case: 258 | Input/Output: [(34 82 0 65) 0]
Test Case: 259 | Input/Output: [(54 93 96 21) 21]
Test Case: 260 | Input/Output: [(56 91 85 14) 14]
Test Case: 261 | Input/Output: [(94 35 89 44) 35]
Test Case: 262 | Input/Output: [(93 65 68 11) 11]
Test Case: 263 | Input/Output: [(26 37 39 43) 26]
Test Case: 264 | Input/Output: [(47 83 38 50) 38]
Test Case: 265 | Input/Output: [(1 70 49 60) 1]
Test Case: 266 | Input/Output: [(31 79 100 99) 31]
Test Case: 267 | Input/Output: [(9 22 30 33) 9]
Test Case: 268 | Input/Output: [(63 1 57 33) 1]
Test Case: 269 | Input/Output: [(86 59 24 86) 24]
Test Case: 270 | Input/Output: [(20 52 38 16) 16]
Test Case: 271 | Input/Output: [(57 80 48 42) 42]
Test Case: 272 | Input/Output: [(5 96 36 40) 5]
Test Case: 273 | Input/Output: [(33 11 13 3) 3]
Test Case: 274 | Input/Output: [(68 62 85 24) 24]
Test Case: 275 | Input/Output: [(32 1 34 32) 1]
Test Case: 276 | Input/Output: [(76 66 53 55) 53]
Test Case: 277 | Input/Output: [(42 93 70 80) 42]
Test Case: 278 | Input/Output: [(10 51 10 68) 10]
Test Case: 279 | Input/Output: [(4 35 37 4) 4]
Test Case: 280 | Input/Output: [(9 13 25 70) 9]
Test Case: 281 | Input/Output: [(66 60 52 18) 18]
Test Case: 282 | Input/Output: [(43 64 47 23) 23]
Test Case: 283 | Input/Output: [(59 55 63 40) 40]
Test Case: 284 | Input/Output: [(75 61 11 24) 11]
Test Case: 285 | Input/Output: [(73 82 61 96) 61]
Test Case: 286 | Input/Output: [(61 66 99 50) 50]
Test Case: 287 | Input/Output: [(45 34 94 9) 9]
Test Case: 288 | Input/Output: [(14 40 28 42) 14]
Test Case: 289 | Input/Output: [(42 76 9 7) 7]
Test Case: 290 | Input/Output: [(1 81 90 82) 1]
Test Case: 291 | Input/Output: [(81 45 74 44) 44]
Test Case: 292 | Input/Output: [(78 70 33 23) 23]
Test Case: 293 | Input/Output: [(44 22 43 35) 22]
Test Case: 294 | Input/Output: [(43 93 22 91) 22]
Test Case: 295 | Input/Output: [(73 16 73 65) 16]
Test Case: 296 | Input/Output: [(18 61 78 60) 18]
Test Case: 297 | Input/Output: [(98 53 4 7) 4]
Test Case: 298 | Input/Output: [(82 44 89 44) 44]
Test Case: 299 | Input/Output: [(71 57 51 10) 10]
Test Case: 300 | Input/Output: [(39 21 19 74) 19]
Test Case: 301 | Input/Output: [(21 54 33 6) 6]
Test Case: 302 | Input/Output: [(62 68 95 94) 62]
Test Case: 303 | Input/Output: [(16 96 81 4) 4]
Test Case: 304 | Input/Output: [(85 10 59 15) 10]
Test Case: 305 | Input/Output: [(3 85 86 67) 3]
Test Case: 306 | Input/Output: [(65 9 30 15) 9]
Test Case: 307 | Input/Output: [(10 21 34 11) 10]
Test Case: 308 | Input/Output: [(62 11 98 21) 11]
Test Case: 309 | Input/Output: [(50 98 32 53) 32]
Test Case: 310 | Input/Output: [(97 76 77 74) 74]
Test Case: 311 | Input/Output: [(33 40 81 70) 33]
Test Case: 312 | Input/Output: [(19 70 94 84) 19]
Test Case: 313 | Input/Output: [(95 27 45 71) 27]
Test Case: 314 | Input/Output: [(76 60 32 2) 2]
Test Case: 315 | Input/Output: [(81 67 1 0) 0]
Test Case: 316 | Input/Output: [(70 68 38 55) 38]
Test Case: 317 | Input/Output: [(28 59 38 13) 13]
Test Case: 318 | Input/Output: [(86 50 44 70) 44]
Test Case: 319 | Input/Output: [(16 35 12 83) 12]
Test Case: 320 | Input/Output: [(8 56 39 15) 8]
Test Case: 321 | Input/Output: [(61 11 88 99) 11]
Test Case: 322 | Input/Output: [(60 2 92 39) 2]
Test Case: 323 | Input/Output: [(17 12 52 22) 12]
Test Case: 324 | Input/Output: [(44 24 48 12) 12]
Test Case: 325 | Input/Output: [(97 12 94 7) 7]
Test Case: 326 | Input/Output: [(54 36 62 82) 36]
Test Case: 327 | Input/Output: [(20 8 21 62) 8]
Test Case: 328 | Input/Output: [(76 77 91 46) 46]
Test Case: 329 | Input/Output: [(46 41 86 10) 10]
Test Case: 330 | Input/Output: [(57 11 26 26) 11]
Test Case: 331 | Input/Output: [(56 92 5 25) 5]
Test Case: 332 | Input/Output: [(67 44 91 25) 25]
Test Case: 333 | Input/Output: [(3 43 25 47) 3]
Test Case: 334 | Input/Output: [(47 56 47 67) 47]
Test Case: 335 | Input/Output: [(31 97 85 75) 31]
Test Case: 336 | Input/Output: [(79 15 68 35) 15]
Test Case: 337 | Input/Output: [(23 64 43 12) 12]
Test Case: 338 | Input/Output: [(29 94 89 67) 29]
Test Case: 339 | Input/Output: [(68 71 52 70) 52]
Test Case: 340 | Input/Output: [(92 7 14 97) 7]
Test Case: 341 | Input/Output: [(90 47 8 74) 8]
Test Case: 342 | Input/Output: [(91 91 47 26) 26]
Test Case: 343 | Input/Output: [(60 59 65 71) 59]
Test Case: 344 | Input/Output: [(46 9 56 31) 9]
Test Case: 345 | Input/Output: [(31 47 77 10) 10]
Test Case: 346 | Input/Output: [(98 54 42 27) 27]
Test Case: 347 | Input/Output: [(21 85 21 59) 21]
Test Case: 348 | Input/Output: [(90 46 67 92) 46]
Test Case: 349 | Input/Output: [(59 84 98 89) 59]
Test Case: 350 | Input/Output: [(38 95 76 58) 38]
Test Case: 351 | Input/Output: [(87 12 93 35) 12]
Test Case: 352 | Input/Output: [(49 34 99 31) 31]
Test Case: 353 | Input/Output: [(96 9 34 74) 9]
Test Case: 354 | Input/Output: [(90 14 4 44) 4]
Test Case: 355 | Input/Output: [(60 1 49 83) 1]
Test Case: 356 | Input/Output: [(2 2 83 34) 2]
Test Case: 357 | Input/Output: [(49 85 59 19) 19]
Test Case: 358 | Input/Output: [(66 55 32 79) 32]
Test Case: 359 | Input/Output: [(7 64 71 15) 7]
Test Case: 360 | Input/Output: [(21 57 21 18) 18]
Test Case: 361 | Input/Output: [(23 79 4 5) 4]
Test Case: 362 | Input/Output: [(39 64 56 64) 39]
Test Case: 363 | Input/Output: [(46 79 52 91) 46]
Test Case: 364 | Input/Output: [(80 65 31 5) 5]
Test Case: 365 | Input/Output: [(22 62 38 66) 22]
Test Case: 366 | Input/Output: [(94 71 5 33) 5]
Test Case: 367 | Input/Output: [(26 100 90 1) 1]
Test Case: 368 | Input/Output: [(86 78 13 27) 13]
Test Case: 369 | Input/Output: [(1 82 87 100) 1]
Test Case: 370 | Input/Output: [(73 82 64 10) 10]
Test Case: 371 | Input/Output: [(87 60 69 39) 39]
Test Case: 372 | Input/Output: [(86 49 47 83) 47]
Test Case: 373 | Input/Output: [(96 10 36 12) 10]
Test Case: 374 | Input/Output: [(26 83 15 44) 15]
Test Case: 375 | Input/Output: [(98 99 38 25) 25]
Test Case: 376 | Input/Output: [(70 47 76 42) 42]
Test Case: 377 | Input/Output: [(13 12 99 69) 12]
Test Case: 378 | Input/Output: [(3 18 53 45) 3]
Test Case: 379 | Input/Output: [(46 25 84 97) 25]
Test Case: 380 | Input/Output: [(91 32 45 57) 32]
Test Case: 381 | Input/Output: [(42 9 51 32) 9]
Test Case: 382 | Input/Output: [(79 24 32 45) 24]
Test Case: 383 | Input/Output: [(43 47 44 92) 43]
Test Case: 384 | Input/Output: [(11 2 66 4) 2]
Test Case: 385 | Input/Output: [(37 16 14 66) 14]
Test Case: 386 | Input/Output: [(24 42 37 24) 24]
Test Case: 387 | Input/Output: [(10 58 19 55) 10]
Test Case: 388 | Input/Output: [(98 80 64 64) 64]
Test Case: 389 | Input/Output: [(13 44 70 33) 13]
Test Case: 390 | Input/Output: [(31 81 37 71) 31]
Test Case: 391 | Input/Output: [(58 35 29 83) 29]
Test Case: 392 | Input/Output: [(65 45 26 83) 26]
Test Case: 393 | Input/Output: [(10 65 34 53) 10]
Test Case: 394 | Input/Output: [(82 42 95 47) 42]
Test Case: 395 | Input/Output: [(69 67 45 23) 23]
Test Case: 396 | Input/Output: [(5 89 35 50) 5]
Test Case: 397 | Input/Output: [(84 81 89 49) 49]
Test Case: 398 | Input/Output: [(25 8 43 0) 0]
Test Case: 399 | Input/Output: [(77 77 16 59) 16]
Test Case: 400 | Input/Output: [(-6 -11 -56 -92) -92]
Test Case: 401 | Input/Output: [(23 -75 94 5) -75]
Test Case: 402 | Input/Output: [(-62 81 98 -40) -62]
Test Case: 403 | Input/Output: [(45 -42 -67 -43) -67]
Test Case: 404 | Input/Output: [(1 56 68 -19) -19]
Test Case: 405 | Input/Output: [(2 -23 -74 69) -74]
Test Case: 406 | Input/Output: [(-31 53 -57 -34) -57]
Test Case: 407 | Input/Output: [(-81 -73 -48 82) -81]
Test Case: 408 | Input/Output: [(28 28 -53 8) -53]
Test Case: 409 | Input/Output: [(-9 78 68 -24) -24]
Test Case: 410 | Input/Output: [(77 71 -7 -36) -36]
Test Case: 411 | Input/Output: [(-70 82 61 -75) -75]
Test Case: 412 | Input/Output: [(-71 41 66 13) -71]
Test Case: 413 | Input/Output: [(-6 34 12 49) -6]
Test Case: 414 | Input/Output: [(100 16 42 -71) -71]
Test Case: 415 | Input/Output: [(75 75 25 51) 25]
Test Case: 416 | Input/Output: [(93 -13 50 -76) -76]
Test Case: 417 | Input/Output: [(64 30 95 -94) -94]
Test Case: 418 | Input/Output: [(82 26 -14 58) -14]
Test Case: 419 | Input/Output: [(-63 98 -94 68) -94]
Test Case: 420 | Input/Output: [(-51 -51 -44 66) -51]
Test Case: 421 | Input/Output: [(48 -30 -39 -2) -39]
Test Case: 422 | Input/Output: [(-11 -71 -2 77) -71]
Test Case: 423 | Input/Output: [(-99 -95 94 82) -99]
Test Case: 424 | Input/Output: [(13 -14 -74 -55) -74]
Test Case: 425 | Input/Output: [(-3 -67 -50 63) -67]
Test Case: 426 | Input/Output: [(-38 -33 42 96) -38]
Test Case: 427 | Input/Output: [(-58 76 -34 -28) -58]
Test Case: 428 | Input/Output: [(64 24 -55 68) -55]
Test Case: 429 | Input/Output: [(-48 13 -48 88) -48]
Test Case: 430 | Input/Output: [(-33 -6 76 -37) -37]
Test Case: 431 | Input/Output: [(-93 -66 95 -68) -93]
Test Case: 432 | Input/Output: [(-50 83 -50 -15) -50]
Test Case: 433 | Input/Output: [(10 3 80 94) 3]
Test Case: 434 | Input/Output: [(-77 9 89 -14) -77]
Test Case: 435 | Input/Output: [(-8 39 56 -43) -43]
Test Case: 436 | Input/Output: [(-78 -23 -15 43) -78]
Test Case: 437 | Input/Output: [(63 47 -74 5) -74]
Test Case: 438 | Input/Output: [(89 -40 29 -70) -70]
Test Case: 439 | Input/Output: [(-96 45 17 72) -96]
Test Case: 440 | Input/Output: [(-1 -23 -98 -100) -100]
Test Case: 441 | Input/Output: [(-26 -30 58 -60) -60]
Test Case: 442 | Input/Output: [(94 -54 29 -13) -54]
Test Case: 443 | Input/Output: [(-62 100 -92 -35) -92]
Test Case: 444 | Input/Output: [(-31 -79 72 -65) -79]
Test Case: 445 | Input/Output: [(11 -20 -98 27) -98]
Test Case: 446 | Input/Output: [(-24 -2 -79 -44) -79]
Test Case: 447 | Input/Output: [(-20 6 12 58) -20]
Test Case: 448 | Input/Output: [(-52 24 -97 63) -97]
Test Case: 449 | Input/Output: [(58 80 87 -16) -16]
Test Case: 450 | Input/Output: [(-7 63 -77 -43) -77]
Test Case: 451 | Input/Output: [(-94 -61 19 -95) -95]
Test Case: 452 | Input/Output: [(19 -89 75 -78) -89]
Test Case: 453 | Input/Output: [(-12 53 12 -89) -89]
Test Case: 454 | Input/Output: [(11 42 -24 6) -24]
Test Case: 455 | Input/Output: [(22 35 56 88) 22]
Test Case: 456 | Input/Output: [(68 -95 2 -41) -95]
Test Case: 457 | Input/Output: [(-6 9 37 33) -6]
Test Case: 458 | Input/Output: [(-14 -6 -82 -60) -82]
Test Case: 459 | Input/Output: [(43 -57 -19 -85) -85]
Test Case: 460 | Input/Output: [(-68 -91 83 -7) -91]
Test Case: 461 | Input/Output: [(31 48 -73 44) -73]
Test Case: 462 | Input/Output: [(47 32 85 50) 32]
Test Case: 463 | Input/Output: [(98 -18 -40 18) -40]
Test Case: 464 | Input/Output: [(-28 -94 -74 47) -94]
Test Case: 465 | Input/Output: [(-86 -68 -86 -29) -86]
Test Case: 466 | Input/Output: [(-86 55 89 96) -86]
Test Case: 467 | Input/Output: [(-17 34 -35 98) -35]
Test Case: 468 | Input/Output: [(-65 -83 4 -89) -89]
Test Case: 469 | Input/Output: [(-6 -80 56 89) -80]
Test Case: 470 | Input/Output: [(-37 39 78 -38) -38]
Test Case: 471 | Input/Output: [(-72 -16 62 37) -72]
Test Case: 472 | Input/Output: [(-64 5 -70 -60) -70]
Test Case: 473 | Input/Output: [(3 41 57 45) 3]
Test Case: 474 | Input/Output: [(66 66 -22 50) -22]
Test Case: 475 | Input/Output: [(-13 -29 -3 61) -29]
Test Case: 476 | Input/Output: [(-3 76 64 65) -3]
Test Case: 477 | Input/Output: [(40 -41 88 -45) -45]
Test Case: 478 | Input/Output: [(-69 -25 -88 34) -88]
Test Case: 479 | Input/Output: [(-77 13 90 49) -77]
Test Case: 480 | Input/Output: [(-78 4 -47 0) -78]
Test Case: 481 | Input/Output: [(80 2 -9 -60) -60]
Test Case: 482 | Input/Output: [(68 20 7 -19) -19]
Test Case: 483 | Input/Output: [(55 -85 57 -39) -85]
Test Case: 484 | Input/Output: [(-20 -50 77 29) -50]
Test Case: 485 | Input/Output: [(78 75 -92 51) -92]
Test Case: 486 | Input/Output: [(-1 -44 21 -48) -48]
Test Case: 487 | Input/Output: [(-17 17 -44 76) -44]
Test Case: 488 | Input/Output: [(12 35 73 69) 12]
Test Case: 489 | Input/Output: [(10 -91 11 -49) -91]
Test Case: 490 | Input/Output: [(1 -28 -26 -86) -86]
Test Case: 491 | Input/Output: [(-72 65 29 14) -72]
Test Case: 492 | Input/Output: [(12 99 5 52) 5]
Test Case: 493 | Input/Output: [(-16 -42 53 -86) -86]
Test Case: 494 | Input/Output: [(65 68 -45 97) -45]
Test Case: 495 | Input/Output: [(0 27 -70 68) -70]
Test Case: 496 | Input/Output: [(-85 -95 -20 32) -95]
Test Case: 497 | Input/Output: [(72 -55 95 -86) -86]
Test Case: 498 | Input/Output: [(73 7 42 -81) -81]
Test Case: 499 | Input/Output: [(75 22 12 98) 12]
Test Case: 500 | Input/Output: [(-89 -23 -23 -52) -89]
Test Case: 501 | Input/Output: [(63 91 44 83) 44]
Test Case: 502 | Input/Output: [(-24 10 -76 -47) -76]
Test Case: 503 | Input/Output: [(-89 16 -69 -86) -89]
Test Case: 504 | Input/Output: [(-4 -96 -15 57) -96]
Test Case: 505 | Input/Output: [(-92 -31 -52 -77) -92]
Test Case: 506 | Input/Output: [(-41 -100 35 12) -100]
Test Case: 507 | Input/Output: [(81 69 -69 40) -69]
Test Case: 508 | Input/Output: [(-59 44 45 -94) -94]
Test Case: 509 | Input/Output: [(72 -40 9 33) -40]
Test Case: 510 | Input/Output: [(26 37 -28 -80) -80]
Test Case: 511 | Input/Output: [(55 15 59 33) 15]
Test Case: 512 | Input/Output: [(-74 -75 -36 -18) -75]
Test Case: 513 | Input/Output: [(78 -53 -35 -50) -53]
Test Case: 514 | Input/Output: [(36 -98 51 -1) -98]
Test Case: 515 | Input/Output: [(71 52 84 -94) -94]
Test Case: 516 | Input/Output: [(-96 -20 -26 -26) -96]
Test Case: 517 | Input/Output: [(38 78 82 -87) -87]
Test Case: 518 | Input/Output: [(6 81 -47 52) -47]
Test Case: 519 | Input/Output: [(9 -70 32 32) -70]
Test Case: 520 | Input/Output: [(98 70 69 -98) -98]
Test Case: 521 | Input/Output: [(36 67 -75 55) -75]
Test Case: 522 | Input/Output: [(5 49 -17 -2) -17]
Test Case: 523 | Input/Output: [(-89 21 8 -60) -89]
Test Case: 524 | Input/Output: [(-30 -89 91 -5) -89]
Test Case: 525 | Input/Output: [(-78 -79 -43 -34) -79]
Test Case: 526 | Input/Output: [(-64 23 -29 -60) -64]
Test Case: 527 | Input/Output: [(-92 -99 1 91) -99]
Test Case: 528 | Input/Output: [(36 -1 -65 -61) -65]
Test Case: 529 | Input/Output: [(69 12 -84 83) -84]
Test Case: 530 | Input/Output: [(-8 -96 -75 -49) -96]
Test Case: 531 | Input/Output: [(-21 -60 52 -78) -78]
Test Case: 532 | Input/Output: [(-33 75 13 95) -33]
Test Case: 533 | Input/Output: [(35 34 3 38) 3]
Test Case: 534 | Input/Output: [(-28 56 62 54) -28]
Test Case: 535 | Input/Output: [(-31 -42 -37 -28) -42]
Test Case: 536 | Input/Output: [(-20 -68 -42 -2) -68]
Test Case: 537 | Input/Output: [(47 -30 -18 71) -30]
Test Case: 538 | Input/Output: [(43 -100 12 43) -100]
Test Case: 539 | Input/Output: [(27 -72 -36 84) -72]
Test Case: 540 | Input/Output: [(-30 100 -20 67) -30]
Test Case: 541 | Input/Output: [(87 -44 3 -80) -80]
Test Case: 542 | Input/Output: [(-42 30 7 -25) -42]
Test Case: 543 | Input/Output: [(-100 -9 -68 87) -100]
Test Case: 544 | Input/Output: [(8 -83 52 19) -83]
Test Case: 545 | Input/Output: [(-60 88 -9 41) -60]
Test Case: 546 | Input/Output: [(-78 -76 24 -97) -97]
Test Case: 547 | Input/Output: [(48 -73 73 -58) -73]
Test Case: 548 | Input/Output: [(4 -100 75 -5) -100]
Test Case: 549 | Input/Output: [(93 98 21 -78) -78]
Test Case: 550 | Input/Output: [(-25 93 74 73) -25]
Test Case: 551 | Input/Output: [(-48 -15 -87 39) -87]
Test Case: 552 | Input/Output: [(75 83 44 8) 8]
Test Case: 553 | Input/Output: [(-39 -53 -60 94) -60]
Test Case: 554 | Input/Output: [(-62 -33 -83 -27) -83]
Test Case: 555 | Input/Output: [(-53 -13 57 -11) -53]
Test Case: 556 | Input/Output: [(-30 80 51 44) -30]
Test Case: 557 | Input/Output: [(-29 -46 -44 -10) -46]
Test Case: 558 | Input/Output: [(64 -79 -1 4) -79]
Test Case: 559 | Input/Output: [(-48 -100 93 27) -100]
Test Case: 560 | Input/Output: [(32 3 -34 -70) -70]
Test Case: 561 | Input/Output: [(-12 -36 15 46) -36]
Test Case: 562 | Input/Output: [(-10 34 -59 -44) -59]
Test Case: 563 | Input/Output: [(75 -19 -13 10) -19]
Test Case: 564 | Input/Output: [(8 -46 -10 -39) -46]
Test Case: 565 | Input/Output: [(-11 70 74 -15) -15]
Test Case: 566 | Input/Output: [(47 -13 -87 -86) -87]
Test Case: 567 | Input/Output: [(58 -1 -70 -37) -70]
Test Case: 568 | Input/Output: [(57 -4 -86 22) -86]
Test Case: 569 | Input/Output: [(38 10 69 -1) -1]
Test Case: 570 | Input/Output: [(-28 40 1 56) -28]
Test Case: 571 | Input/Output: [(-15 66 50 -47) -47]
Test Case: 572 | Input/Output: [(64 0 86 58) 0]
Test Case: 573 | Input/Output: [(-93 -61 67 -16) -93]
Test Case: 574 | Input/Output: [(94 15 -63 45) -63]
Test Case: 575 | Input/Output: [(-68 4 84 84) -68]
Test Case: 576 | Input/Output: [(45 -16 76 -36) -36]
Test Case: 577 | Input/Output: [(11 31 18 3) 3]
Test Case: 578 | Input/Output: [(-30 -15 44 -51) -51]
Test Case: 579 | Input/Output: [(-63 -57 7 10) -63]
Test Case: 580 | Input/Output: [(-36 26 -58 -39) -58]
Test Case: 581 | Input/Output: [(38 8 58 -21) -21]
Test Case: 582 | Input/Output: [(-80 -96 94 64) -96]
Test Case: 583 | Input/Output: [(6 92 78 -43) -43]
Test Case: 584 | Input/Output: [(68 65 -56 -10) -56]
Test Case: 585 | Input/Output: [(-48 -40 83 -23) -48]
Test Case: 586 | Input/Output: [(-48 66 14 -2) -48]
Test Case: 587 | Input/Output: [(99 31 -55 55) -55]
Test Case: 588 | Input/Output: [(-95 42 -30 47) -95]
Test Case: 589 | Input/Output: [(51 20 8 -25) -25]
Test Case: 590 | Input/Output: [(75 90 2 10) 2]
Test Case: 591 | Input/Output: [(-39 22 83 73) -39]
Test Case: 592 | Input/Output: [(-32 6 -70 81) -70]
Test Case: 593 | Input/Output: [(-54 -16 -13 44) -54]
Test Case: 594 | Input/Output: [(96 -46 96 46) -46]
Test Case: 595 | Input/Output: [(43 9 19 -12) -12]
Test Case: 596 | Input/Output: [(55 58 81 32) 32]
Test Case: 597 | Input/Output: [(57 -19 90 -2) -19]
Test Case: 598 | Input/Output: [(36 27 77 -98) -98]
Test Case: 599 | Input/Output: [(27 -95 -41 9) -95]
Test Case: 600 | Input/Output: [(-96 6 56 2) -96]
Test Case: 601 | Input/Output: [(30 -86 97 -57) -86]
Test Case: 602 | Input/Output: [(-36 8 -22 20) -36]
Test Case: 603 | Input/Output: [(-63 -51 60 62) -63]
Test Case: 604 | Input/Output: [(-99 9 58 -12) -99]
Test Case: 605 | Input/Output: [(74 -85 57 -15) -85]
Test Case: 606 | Input/Output: [(71 78 62 -57) -57]
Test Case: 607 | Input/Output: [(45 66 -82 15) -82]
Test Case: 608 | Input/Output: [(-9 100 -73 -51) -73]
Test Case: 609 | Input/Output: [(-91 -83 -97 86) -97]
Test Case: 610 | Input/Output: [(-62 64 71 -98) -98]
Test Case: 611 | Input/Output: [(-78 49 67 97) -78]
Test Case: 612 | Input/Output: [(-42 -57 -21 77) -57]
Test Case: 613 | Input/Output: [(33 -17 -66 9) -66]
Test Case: 614 | Input/Output: [(-64 28 -85 -39) -85]
Test Case: 615 | Input/Output: [(99 -19 -87 84) -87]
Test Case: 616 | Input/Output: [(84 -60 -82 45) -82]
Test Case: 617 | Input/Output: [(15 58 51 63) 15]
Test Case: 618 | Input/Output: [(88 9 -73 85) -73]
Test Case: 619 | Input/Output: [(-49 20 84 -78) -78]
Test Case: 620 | Input/Output: [(62 61 85 32) 32]
Test Case: 621 | Input/Output: [(6 54 89 35) 6]
Test Case: 622 | Input/Output: [(89 -97 -94 20) -97]
Test Case: 623 | Input/Output: [(52 56 91 -52) -52]
Test Case: 624 | Input/Output: [(-65 9 59 67) -65]
Test Case: 625 | Input/Output: [(-8 -65 45 -92) -92]
Test Case: 626 | Input/Output: [(-8 32 43 -48) -48]
Test Case: 627 | Input/Output: [(7 -80 84 12) -80]
Test Case: 628 | Input/Output: [(94 -25 -16 91) -25]
Test Case: 629 | Input/Output: [(-80 -98 -58 -64) -98]
Test Case: 630 | Input/Output: [(60 53 5 -63) -63]
Test Case: 631 | Input/Output: [(-37 -63 73 70) -63]
Test Case: 632 | Input/Output: [(33 79 -67 -85) -85]
Test Case: 633 | Input/Output: [(95 77 -73 72) -73]
Test Case: 634 | Input/Output: [(8 -90 47 -52) -90]
Test Case: 635 | Input/Output: [(-34 6 100 -30) -34]
Test Case: 636 | Input/Output: [(-70 -86 26 -35) -86]
Test Case: 637 | Input/Output: [(-26 55 -46 9) -46]
Test Case: 638 | Input/Output: [(-42 -82 24 54) -82]
Test Case: 639 | Input/Output: [(-18 43 -46 -9) -46]
Test Case: 640 | Input/Output: [(-43 5 -47 27) -47]
Test Case: 641 | Input/Output: [(-54 63 -63 -56) -63]
Test Case: 642 | Input/Output: [(-81 87 -18 -33) -81]
Test Case: 643 | Input/Output: [(-68 88 45 -14) -68]
Test Case: 644 | Input/Output: [(21 82 96 30) 21]
Test Case: 645 | Input/Output: [(-28 49 87 -60) -60]
Test Case: 646 | Input/Output: [(-67 99 48 -92) -92]
Test Case: 647 | Input/Output: [(7 -5 9 -10) -10]
Test Case: 648 | Input/Output: [(-68 -68 -37 -21) -68]
Test Case: 649 | Input/Output: [(45 -98 -41 -39) -98]
Test Case: 650 | Input/Output: [(36 -50 6 -61) -61]
Test Case: 651 | Input/Output: [(35 -76 -100 -50) -100]
Test Case: 652 | Input/Output: [(-25 25 16 31) -25]
Test Case: 653 | Input/Output: [(14 -28 -21 -98) -98]
Test Case: 654 | Input/Output: [(-19 3 -65 -17) -65]
Test Case: 655 | Input/Output: [(51 43 19 54) 19]
Test Case: 656 | Input/Output: [(59 -1 -62 86) -62]
Test Case: 657 | Input/Output: [(78 -27 4 -81) -81]
Test Case: 658 | Input/Output: [(2 80 68 -2) -2]
Test Case: 659 | Input/Output: [(-82 39 -56 35) -82]
Test Case: 660 | Input/Output: [(26 81 65 55) 26]
Test Case: 661 | Input/Output: [(-30 -42 -53 -74) -74]
Test Case: 662 | Input/Output: [(34 -31 -41 89) -41]
Test Case: 663 | Input/Output: [(-96 -88 68 -62) -96]
Test Case: 664 | Input/Output: [(-8 -18 -26 45) -26]
Test Case: 665 | Input/Output: [(62 25 68 16) 16]
Test Case: 666 | Input/Output: [(48 23 -67 -97) -97]
Test Case: 667 | Input/Output: [(70 -3 -35 77) -35]
Test Case: 668 | Input/Output: [(-32 29 71 -99) -99]
Test Case: 669 | Input/Output: [(45 -41 -90 0) -90]
Test Case: 670 | Input/Output: [(87 64 -46 12) -46]
Test Case: 671 | Input/Output: [(-42 94 -55 44) -55]
Test Case: 672 | Input/Output: [(79 -53 -35 -28) -53]
Test Case: 673 | Input/Output: [(-6 -74 -96 -14) -96]
Test Case: 674 | Input/Output: [(-2 -39 -62 -20) -62]
Test Case: 675 | Input/Output: [(41 80 -70 79) -70]
Test Case: 676 | Input/Output: [(25 -60 -82 51) -82]
Test Case: 677 | Input/Output: [(38 -81 84 -83) -83]
Test Case: 678 | Input/Output: [(24 73 12 17) 12]
Test Case: 679 | Input/Output: [(-42 -45 43 -2) -45]
Test Case: 680 | Input/Output: [(-22 -54 34 42) -54]
Test Case: 681 | Input/Output: [(-36 -60 80 88) -60]
Test Case: 682 | Input/Output: [(53 80 5 -93) -93]
Test Case: 683 | Input/Output: [(-98 -65 -88 -17) -98]
Test Case: 684 | Input/Output: [(-36 -3 22 -40) -40]
Test Case: 685 | Input/Output: [(-37 19 -38 49) -38]
Test Case: 686 | Input/Output: [(57 -26 83 -75) -75]
Test Case: 687 | Input/Output: [(44 64 55 63) 44]
Test Case: 688 | Input/Output: [(95 -10 3 94) -10]
Test Case: 689 | Input/Output: [(9 6 23 -54) -54]
Test Case: 690 | Input/Output: [(59 20 -2 67) -2]
Test Case: 691 | Input/Output: [(-29 -47 -3 100) -47]
Test Case: 692 | Input/Output: [(22 80 -60 -56) -60]
Test Case: 693 | Input/Output: [(69 54 -19 71) -19]
Test Case: 694 | Input/Output: [(65 -64 -6 78) -64]
Test Case: 695 | Input/Output: [(-34 -60 -2 69) -60]
Test Case: 696 | Input/Output: [(44 92 -82 -42) -82]
Test Case: 697 | Input/Output: [(-70 -73 -61 93) -73]
Test Case: 698 | Input/Output: [(-73 -49 -15 7) -73]
Test Case: 699 | Input/Output: [(91 -48 80 34) -48]
Test Case: 700 | Input/Output: [(-82 -88 -98 -16) -98]
Test Case: 701 | Input/Output: [(-48 -41 85 76) -48]
Test Case: 702 | Input/Output: [(-19 -94 -14 -89) -94]
Test Case: 703 | Input/Output: [(7 10 -32 -19) -32]
Test Case: 704 | Input/Output: [(-88 -94 -58 6) -94]
Test Case: 705 | Input/Output: [(-92 -41 23 25) -92]
Test Case: 706 | Input/Output: [(-79 25 -61 -46) -79]
Test Case: 707 | Input/Output: [(-68 -61 -61 48) -68]
Test Case: 708 | Input/Output: [(-89 -62 30 57) -89]
Test Case: 709 | Input/Output: [(-51 89 78 -92) -92]
Test Case: 710 | Input/Output: [(6 91 58 61) 6]
Test Case: 711 | Input/Output: [(-96 63 14 81) -96]
Test Case: 712 | Input/Output: [(-47 35 40 -35) -47]
Test Case: 713 | Input/Output: [(22 -96 -31 -14) -96]
Test Case: 714 | Input/Output: [(38 45 -92 42) -92]
Test Case: 715 | Input/Output: [(-59 28 -100 65) -100]
Test Case: 716 | Input/Output: [(-66 -70 89 -22) -70]
Test Case: 717 | Input/Output: [(16 -50 -61 -93) -93]
Test Case: 718 | Input/Output: [(17 -42 71 53) -42]
Test Case: 719 | Input/Output: [(96 48 97 83) 48]
Test Case: 720 | Input/Output: [(56 93 -83 -58) -83]
Test Case: 721 | Input/Output: [(-76 -68 22 51) -76]
Test Case: 722 | Input/Output: [(-56 -84 17 78) -84]
Test Case: 723 | Input/Output: [(-26 14 44 -12) -26]
Test Case: 724 | Input/Output: [(-83 -3 -90 -6) -90]
Test Case: 725 | Input/Output: [(-40 -58 14 -87) -87]
Test Case: 726 | Input/Output: [(-7 -84 -88 57) -88]
Test Case: 727 | Input/Output: [(-75 11 -80 91) -80]
Test Case: 728 | Input/Output: [(44 31 -50 10) -50]
Test Case: 729 | Input/Output: [(-93 13 -55 15) -93]
Test Case: 730 | Input/Output: [(-5 71 -26 40) -26]
Test Case: 731 | Input/Output: [(-95 88 -96 -6) -96]
Test Case: 732 | Input/Output: [(23 24 94 -54) -54]
Test Case: 733 | Input/Output: [(-17 96 26 -61) -61]
Test Case: 734 | Input/Output: [(45 87 -97 41) -97]
Test Case: 735 | Input/Output: [(-19 5 50 77) -19]
Test Case: 736 | Input/Output: [(84 100 64 -49) -49]
Test Case: 737 | Input/Output: [(61 -30 -38 -32) -38]
Test Case: 738 | Input/Output: [(-84 -80 -5 -10) -84]
Test Case: 739 | Input/Output: [(-35 75 56 -54) -54]
Test Case: 740 | Input/Output: [(83 13 94 0) 0]
Test Case: 741 | Input/Output: [(-31 -98 69 -80) -98]
Test Case: 742 | Input/Output: [(81 -41 75 -87) -87]
Test Case: 743 | Input/Output: [(-73 -90 -77 -96) -96]
Test Case: 744 | Input/Output: [(56 -86 48 52) -86]
Test Case: 745 | Input/Output: [(76 -47 55 -87) -87]
Test Case: 746 | Input/Output: [(-29 67 -29 70) -29]
Test Case: 747 | Input/Output: [(29 -48 -7 -61) -61]
Test Case: 748 | Input/Output: [(5 -62 -22 -40) -62]
Test Case: 749 | Input/Output: [(79 -36 82 27) -36]
Test Case: 750 | Input/Output: [(-69 -81 -28 -23) -81]
Test Case: 751 | Input/Output: [(90 -51 -63 -83) -83]
Test Case: 752 | Input/Output: [(-58 92 82 18) -58]
Test Case: 753 | Input/Output: [(87 -92 -87 18) -92]
Test Case: 754 | Input/Output: [(-39 94 -66 -77) -77]
Test Case: 755 | Input/Output: [(-20 53 29 42) -20]
Test Case: 756 | Input/Output: [(2 -49 -21 88) -49]
Test Case: 757 | Input/Output: [(-58 -65 90 8) -65]
Test Case: 758 | Input/Output: [(38 -38 2 6) -38]
Test Case: 759 | Input/Output: [(-10 -41 67 -47) -47]
Test Case: 760 | Input/Output: [(-4 -52 85 93) -52]
Test Case: 761 | Input/Output: [(-34 -53 14 -37) -53]
Test Case: 762 | Input/Output: [(-48 91 -29 54) -48]
Test Case: 763 | Input/Output: [(-14 16 50 27) -14]
Test Case: 764 | Input/Output: [(50 -97 6 -16) -97]
Test Case: 765 | Input/Output: [(7 35 -3 -34) -34]
Test Case: 766 | Input/Output: [(69 53 -9 -64) -64]
Test Case: 767 | Input/Output: [(-57 -81 39 66) -81]
Test Case: 768 | Input/Output: [(20 -36 -40 9) -40]
Test Case: 769 | Input/Output: [(26 50 -36 20) -36]
Test Case: 770 | Input/Output: [(19 -24 53 -76) -76]
Test Case: 771 | Input/Output: [(89 11 -16 87) -16]
Test Case: 772 | Input/Output: [(98 -81 71 -79) -81]
Test Case: 773 | Input/Output: [(-92 -83 -48 66) -92]
Test Case: 774 | Input/Output: [(40 -41 75 90) -41]
Test Case: 775 | Input/Output: [(-42 -70 100 -39) -70]
Test Case: 776 | Input/Output: [(31 -87 8 75) -87]
Test Case: 777 | Input/Output: [(-48 22 73 -75) -75]
Test Case: 778 | Input/Output: [(68 -13 33 -48) -48]
Test Case: 779 | Input/Output: [(31 -5 -84 -11) -84]
Test Case: 780 | Input/Output: [(11 -71 -37 72) -71]
Test Case: 781 | Input/Output: [(-72 80 -71 22) -72]
Test Case: 782 | Input/Output: [(-48 -52 -91 24) -91]
Test Case: 783 | Input/Output: [(-53 -97 30 9) -97]
Test Case: 784 | Input/Output: [(76 45 -12 98) -12]
Test Case: 785 | Input/Output: [(9 -51 89 35) -51]
Test Case: 786 | Input/Output: [(23 -71 68 50) -71]
Test Case: 787 | Input/Output: [(72 84 -58 32) -58]
Test Case: 788 | Input/Output: [(-62 94 -96 -17) -96]
Test Case: 789 | Input/Output: [(-50 -60 -78 -76) -78]
Test Case: 790 | Input/Output: [(99 20 -75 57) -75]
Test Case: 791 | Input/Output: [(-49 60 20 54) -49]
Test Case: 792 | Input/Output: [(-49 -94 -88 -53) -94]
Test Case: 793 | Input/Output: [(58 17 -22 -27) -27]
Test Case: 794 | Input/Output: [(-3 -12 78 46) -12]
Test Case: 795 | Input/Output: [(-45 41 44 -89) -89]
Test Case: 796 | Input/Output: [(16 -12 -56 66) -56]
Test Case: 797 | Input/Output: [(21 -42 -17 -91) -91]
Test Case: 798 | Input/Output: [(5 -20 -27 -65) -65]
Test Case: 799 | Input/Output: [(60 -33 -91 20) -91]
Test Case: 800 | Input/Output: [(-93 12 -2 65) -93]
Test Case: 801 | Input/Output: [(-44 55 -61 -83) -83]
Test Case: 802 | Input/Output: [(89 -46 -58 58) -58]
Test Case: 803 | Input/Output: [(27 -15 36 -68) -68]
Test Case: 804 | Input/Output: [(-18 -61 -60 95) -61]
Test Case: 805 | Input/Output: [(-50 39 55 -76) -76]
Test Case: 806 | Input/Output: [(15 53 26 -62) -62]
Test Case: 807 | Input/Output: [(-50 -32 -63 96) -63]
Test Case: 808 | Input/Output: [(-5 -3 27 -13) -13]
Test Case: 809 | Input/Output: [(-60 64 -89 54) -89]
Test Case: 810 | Input/Output: [(-93 81 -40 -76) -93]
Test Case: 811 | Input/Output: [(-14 -81 -64 85) -81]
Test Case: 812 | Input/Output: [(-57 -2 -65 -12) -65]
Test Case: 813 | Input/Output: [(-29 8 -1 71) -29]
Test Case: 814 | Input/Output: [(-91 44 -34 80) -91]
Test Case: 815 | Input/Output: [(97 -97 21 -19) -97]
Test Case: 816 | Input/Output: [(-5 -41 -44 -90) -90]
Test Case: 817 | Input/Output: [(-35 65 57 -33) -35]
Test Case: 818 | Input/Output: [(-57 5 -39 38) -57]
Test Case: 819 | Input/Output: [(-41 16 -7 -15) -41]
Test Case: 820 | Input/Output: [(97 6 -32 51) -32]
Test Case: 821 | Input/Output: [(-74 28 11 -82) -82]
Test Case: 822 | Input/Output: [(81 -7 24 -79) -79]
Test Case: 823 | Input/Output: [(-27 -71 81 -79) -79]
Test Case: 824 | Input/Output: [(1 -66 -25 -11) -66]
Test Case: 825 | Input/Output: [(73 46 58 19) 19]
Test Case: 826 | Input/Output: [(-29 -68 75 8) -68]
Test Case: 827 | Input/Output: [(-96 77 39 40) -96]
Test Case: 828 | Input/Output: [(93 -29 -4 -2) -29]
Test Case: 829 | Input/Output: [(62 -33 21 -69) -69]
Test Case: 830 | Input/Output: [(-26 23 14 -8) -26]
Test Case: 831 | Input/Output: [(99 -93 89 -100) -100]
Test Case: 832 | Input/Output: [(-12 25 -86 42) -86]
Test Case: 833 | Input/Output: [(86 49 27 41) 27]
Test Case: 834 | Input/Output: [(-71 93 -19 -62) -71]
Test Case: 835 | Input/Output: [(97 71 27 82) 27]
Test Case: 836 | Input/Output: [(1 -58 -41 0) -58]
Test Case: 837 | Input/Output: [(25 39 19 -26) -26]
Test Case: 838 | Input/Output: [(-30 63 73 40) -30]
Test Case: 839 | Input/Output: [(-27 54 36 28) -27]
Test Case: 840 | Input/Output: [(54 -74 -32 51) -74]
Test Case: 841 | Input/Output: [(-71 84 -35 32) -71]
Test Case: 842 | Input/Output: [(-25 10 -38 -67) -67]
Test Case: 843 | Input/Output: [(61 66 7 -67) -67]
Test Case: 844 | Input/Output: [(-96 -68 -86 62) -96]
Test Case: 845 | Input/Output: [(-97 84 -23 71) -97]
Test Case: 846 | Input/Output: [(74 -77 32 -74) -77]
Test Case: 847 | Input/Output: [(45 -37 -33 -21) -37]
Test Case: 848 | Input/Output: [(45 66 -4 33) -4]
Test Case: 849 | Input/Output: [(63 57 -19 -8) -19]
Test Case: 850 | Input/Output: [(51 -16 40 -89) -89]
Test Case: 851 | Input/Output: [(-59 -75 -10 -70) -75]
Test Case: 852 | Input/Output: [(-65 -11 9 75) -65]
Test Case: 853 | Input/Output: [(80 86 -29 73) -29]
Test Case: 854 | Input/Output: [(-62 -14 36 -34) -62]
Test Case: 855 | Input/Output: [(-80 74 70 -34) -80]
Test Case: 856 | Input/Output: [(-72 -36 -70 74) -72]
Test Case: 857 | Input/Output: [(-92 12 80 40) -92]
Test Case: 858 | Input/Output: [(-7 81 36 -69) -69]
Test Case: 859 | Input/Output: [(-97 29 -55 63) -97]
Test Case: 860 | Input/Output: [(-61 -8 6 -85) -85]
Test Case: 861 | Input/Output: [(51 -91 19 -51) -91]
Test Case: 862 | Input/Output: [(51 -72 1 -97) -97]
Test Case: 863 | Input/Output: [(69 -45 -62 -8) -62]
Test Case: 864 | Input/Output: [(-68 62 -52 69) -68]
Test Case: 865 | Input/Output: [(87 53 77 -7) -7]
Test Case: 866 | Input/Output: [(7 36 17 98) 7]
Test Case: 867 | Input/Output: [(36 67 49 -2) -2]
Test Case: 868 | Input/Output: [(-32 26 -89 4) -89]
Test Case: 869 | Input/Output: [(56 63 34 54) 34]
Test Case: 870 | Input/Output: [(78 -34 80 80) -34]
Test Case: 871 | Input/Output: [(73 22 -51 32) -51]
Test Case: 872 | Input/Output: [(-1 -66 -55 88) -66]
Test Case: 873 | Input/Output: [(8 1 -83 -95) -95]
Test Case: 874 | Input/Output: [(-28 40 -62 93) -62]
Test Case: 875 | Input/Output: [(-29 -34 18 -54) -54]
Test Case: 876 | Input/Output: [(22 -71 -7 4) -71]
Test Case: 877 | Input/Output: [(93 -82 -32 -15) -82]
Test Case: 878 | Input/Output: [(11 47 -7 69) -7]
Test Case: 879 | Input/Output: [(24 65 -15 26) -15]
Test Case: 880 | Input/Output: [(-70 -71 -55 83) -71]
Test Case: 881 | Input/Output: [(-63 -61 93 -52) -63]
Test Case: 882 | Input/Output: [(-85 -35 60 -74) -85]
Test Case: 883 | Input/Output: [(0 39 -88 54) -88]
Test Case: 884 | Input/Output: [(23 30 -11 54) -11]
Test Case: 885 | Input/Output: [(22 23 -49 -3) -49]
Test Case: 886 | Input/Output: [(43 71 -81 -69) -81]
Test Case: 887 | Input/Output: [(77 -94 -71 27) -94]
Test Case: 888 | Input/Output: [(3 42 -52 -87) -87]
Test Case: 889 | Input/Output: [(-5 -19 40 69) -19]
Test Case: 890 | Input/Output: [(61 -31 17 92) -31]
Test Case: 891 | Input/Output: [(-50 -52 -91 48) -91]
Test Case: 892 | Input/Output: [(62 -46 79 10) -46]
Test Case: 893 | Input/Output: [(58 -35 -95 -82) -95]
Test Case: 894 | Input/Output: [(82 -67 -7 -42) -67]
Test Case: 895 | Input/Output: [(-31 79 -75 -46) -75]
Test Case: 896 | Input/Output: [(-69 -99 55 49) -99]
Test Case: 897 | Input/Output: [(-16 -45 -87 49) -87]
Test Case: 898 | Input/Output: [(-25 -32 -62 24) -62]
Test Case: 899 | Input/Output: [(57 -33 84 -80) -80]
Test Case: 900 | Input/Output: [(5 55 69 -52) -52]
Test Case: 901 | Input/Output: [(71 66 23 -49) -49]
Test Case: 902 | Input/Output: [(92 52 31 -28) -28]
Test Case: 903 | Input/Output: [(85 75 68 26) 26]
Test Case: 904 | Input/Output: [(-95 60 80 -77) -95]
Test Case: 905 | Input/Output: [(67 -60 75 95) -60]
Test Case: 906 | Input/Output: [(48 -62 -68 38) -68]
Test Case: 907 | Input/Output: [(-34 -16 -77 -61) -77]
Test Case: 908 | Input/Output: [(-44 -49 -51 79) -51]
Test Case: 909 | Input/Output: [(31 27 87 -26) -26]
Test Case: 910 | Input/Output: [(65 29 1 13) 1]
Test Case: 911 | Input/Output: [(71 -92 42 -100) -100]
Test Case: 912 | Input/Output: [(7 -4 95 65) -4]
Test Case: 913 | Input/Output: [(-66 -80 42 87) -80]
Test Case: 914 | Input/Output: [(-36 86 -97 -21) -97]
Test Case: 915 | Input/Output: [(13 9 45 -52) -52]
Test Case: 916 | Input/Output: [(59 -73 -70 -70) -73]
Test Case: 917 | Input/Output: [(-86 96 64 44) -86]
Test Case: 918 | Input/Output: [(18 25 -2 87) -2]
Test Case: 919 | Input/Output: [(45 59 -96 26) -96]
Test Case: 920 | Input/Output: [(68 72 42 51) 42]
Test Case: 921 | Input/Output: [(9 37 96 7) 7]
Test Case: 922 | Input/Output: [(71 64 -90 87) -90]
Test Case: 923 | Input/Output: [(-2 -89 -28 -36) -89]
Test Case: 924 | Input/Output: [(-29 87 76 84) -29]
Test Case: 925 | Input/Output: [(-31 81 8 -32) -32]
Test Case: 926 | Input/Output: [(-26 -11 44 1) -26]
Test Case: 927 | Input/Output: [(-20 -87 -81 -100) -100]
Test Case: 928 | Input/Output: [(-77 -12 68 -25) -77]
Test Case: 929 | Input/Output: [(93 41 -11 -86) -86]
Test Case: 930 | Input/Output: [(56 -22 18 -74) -74]
Test Case: 931 | Input/Output: [(43 47 -72 80) -72]
Test Case: 932 | Input/Output: [(-66 -3 -82 -82) -82]
Test Case: 933 | Input/Output: [(39 55 2 47) 2]
Test Case: 934 | Input/Output: [(92 22 -13 -51) -51]
Test Case: 935 | Input/Output: [(100 56 52 -93) -93]
Test Case: 936 | Input/Output: [(-87 37 -51 59) -87]
Test Case: 937 | Input/Output: [(-51 -32 -48 -78) -78]
Test Case: 938 | Input/Output: [(37 -76 -69 96) -76]
Test Case: 939 | Input/Output: [(-49 -35 37 -66) -66]
Test Case: 940 | Input/Output: [(72 -97 16 73) -97]
Test Case: 941 | Input/Output: [(27 50 82 -67) -67]
Test Case: 942 | Input/Output: [(47 -11 -25 73) -25]
Test Case: 943 | Input/Output: [(-44 -46 12 -86) -86]
Test Case: 944 | Input/Output: [(78 56 -63 62) -63]
Test Case: 945 | Input/Output: [(-51 78 27 4) -51]
Test Case: 946 | Input/Output: [(84 75 -64 -46) -64]
Test Case: 947 | Input/Output: [(38 -40 -58 5) -58]
Test Case: 948 | Input/Output: [(-18 8 49 89) -18]
Test Case: 949 | Input/Output: [(57 -92 79 -90) -92]
Test Case: 950 | Input/Output: [(27 -12 59 46) -12]
Test Case: 951 | Input/Output: [(-76 -74 8 -33) -76]
Test Case: 952 | Input/Output: [(-88 26 -39 -84) -88]
Test Case: 953 | Input/Output: [(81 81 -50 62) -50]
Test Case: 954 | Input/Output: [(2 -44 10 -59) -59]
Test Case: 955 | Input/Output: [(-61 100 79 24) -61]
Test Case: 956 | Input/Output: [(-17 -48 95 41) -48]
Test Case: 957 | Input/Output: [(-99 86 -33 -49) -99]
Test Case: 958 | Input/Output: [(-92 79 -98 -93) -98]
Test Case: 959 | Input/Output: [(11 14 84 -75) -75]
Test Case: 960 | Input/Output: [(83 79 -38 71) -38]
Test Case: 961 | Input/Output: [(-63 51 -84 54) -84]
Test Case: 962 | Input/Output: [(53 87 32 -65) -65]
Test Case: 963 | Input/Output: [(72 88 52 30) 30]
Test Case: 964 | Input/Output: [(-82 21 13 87) -82]
Test Case: 965 | Input/Output: [(36 49 -22 -50) -50]
Test Case: 966 | Input/Output: [(-19 70 87 -77) -77]
Test Case: 967 | Input/Output: [(-77 -100 95 -14) -100]
Test Case: 968 | Input/Output: [(51 -1 -81 79) -81]
Test Case: 969 | Input/Output: [(90 90 -80 -4) -80]
Test Case: 970 | Input/Output: [(50 29 39 -90) -90]
Test Case: 971 | Input/Output: [(-63 19 -68 -21) -68]
Test Case: 972 | Input/Output: [(0 31 41 -22) -22]
Test Case: 973 | Input/Output: [(79 -16 18 11) -16]
Test Case: 974 | Input/Output: [(-1 -92 27 -12) -92]
Test Case: 975 | Input/Output: [(-18 -100 78 -50) -100]
Test Case: 976 | Input/Output: [(-57 -64 50 -5) -64]
Test Case: 977 | Input/Output: [(-69 36 72 62) -69]
Test Case: 978 | Input/Output: [(-46 31 -94 99) -94]
Test Case: 979 | Input/Output: [(-62 -35 100 66) -62]
Test Case: 980 | Input/Output: [(-7 -79 -86 -31) -86]
Test Case: 981 | Input/Output: [(-80 -30 -52 -36) -80]
Test Case: 982 | Input/Output: [(59 54 94 -16) -16]
Test Case: 983 | Input/Output: [(52 9 49 -22) -22]
Test Case: 984 | Input/Output: [(-11 -55 -77 -25) -77]
Test Case: 985 | Input/Output: [(69 59 76 71) 59]
Test Case: 986 | Input/Output: [(-57 67 -39 -28) -57]
Test Case: 987 | Input/Output: [(99 38 29 60) 29]
Test Case: 988 | Input/Output: [(-81 -49 74 -99) -99]
Test Case: 989 | Input/Output: [(65 62 32 -23) -23]
Test Case: 990 | Input/Output: [(48 -5 5 91) -5]
Test Case: 991 | Input/Output: [(37 12 60 -38) -38]
Test Case: 992 | Input/Output: [(-65 25 -79 35) -79]
Test Case: 993 | Input/Output: [(89 11 3 25) 3]
Test Case: 994 | Input/Output: [(-35 -20 52 57) -35]
Test Case: 995 | Input/Output: [(53 29 72 8) 8]
Test Case: 996 | Input/Output: [(63 69 -82 -80) -82]
Test Case: 997 | Input/Output: [(-76 -87 85 -10) -87]
Test Case: 998 | Input/Output: [(-45 -25 -66 -98) -98]
Test Case: 999 | Input/Output: [(-25 67 47 14) -25]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -50 4 -23 -30 -56 -90 -128 -91 -80 -71 -14 -30 2 -24 -80 -70
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-59 -59 -96 -59] -96] [[-60 -67 -67 -67] -67] [[-21 -21 -7 -21] -21] [[-37 -37 13 -37] -37] [[-55 12 12 12] -55] [[46 41 46 46] 41] [[-37 -37 -37 5] -37] [[89 89 73 89] 73] [[61 61 61 61] 61] [[-45 25 -45 -45] -45] [(-2 -2 -2 -2) -2] [(-88 -88 -88 -88) -88] [(-38 -38 -38 -38) -38] [(-52 -52 -52 -52) -52] [(-41 -41 -41 -41) -41] [(65 28 15 70) 15] [(69 61 94 87) 61] [(57 31 96 1) 1] [(79 55 82 69) 55] [(93 56 21 47) 21] [(59 66 76 35) 35] [(95 50 32 50) 32] [(57 94 14 71) 14] [(47 77 84 9) 9] [(52 15 43 50) 15] [(83 3 9 16) 3] [(30 93 99 37) 30] [(54 69 53 2) 2] [(44 62 62 27) 27] [(72 97 98 96) 72] [(52 20 17 67) 17] [(49 48 80 47) 47] [(47 74 8 100) 8] [(66 45 55 75) 45] [(74 13 50 49) 13] [(-54 74 -24 90) -54] [(-65 36 -93 44) -93] [(-31 -72 -73 -82) -82] [(-22 -9 94 20) -22] [(44 53 -1 -38) -38] [(48 50 26 -27) -27] [(71 -99 33 30) -99] [(-29 -51 -97 2) -97] [(-15 42 3 91) -15] [(88 5 -79 16) -79] [(97 31 -7 60) -7] [(-3 22 -37 24) -37] [(-45 93 63 90) -45] [(-25 -68 -42 100) -68] [(-17 -93 -78 -59) -93] [(12 47 21 -28) -28] [(91 -8 40 77) -8] [(-85 54 -96 -6) -96] [(-37 -2 11 77) -37] [(-90 -16 -35 32) -90] [(-51 -88 77 41) -88] [(-24 64 -74 -62) -74] [(89 -76 -22 87) -76] [(42 3 -93 19) -93] [(-40 -75 45 69) -75] [(-26 -73 -66 42) -73] [(-19 83 -8 8) -19] [(13 -24 2 -69) -69] [(-39 9 65 94) -39] [(17 16 -84 -87) -87] [(44 95 -42 82) -42] [(3 -44 36 -2) -44] [(3 31 21 1) 1] [(15 48 -67 28) -67] [(92 19 88 -41) -41] [(-46 49 -10 -96) -96] [(47 98 51 43) 43] [(-23 82 80 -79) -79] [(-57 93 -96 -2) -96] [(50 -46 -53 -8) -53] [(49 100 -58 72) -58] [(-40 5 -12 -31) -40] [(96 -8 -1 -54) -54] [(-39 -95 25 90) -95] [(95 -51 -77 23) -77] [(96 -60 46 -81) -81] [(-39 84 -97 -25) -97] [(11 -5 63 -1) -5] [(4 74 39 -21) -21] [(78 30 -2 41) -2] [(28 -40 -93 -85) -93] [(51 -87 -68 27) -87] [(-18 -13 50 -92) -92] [(71 14 81 -52) -52] [(-38 60 91 -13) -38] [(73 92 -2 -64) -64] [(-77 18 16 -44) -77] [(-76 -30 -96 87) -96] [(59 40 46 24) 24] [(85 -41 -94 -99) -99])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 623
Test mean error for best: 0.62300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -96                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -21                
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: 12                 
Correct output: 41                  | Program output: 46                 
Correct output: -37                 | Program output: 5                  
Correct output: 73                  | Program output: 89                 
Correct output: 61                  | Program output: 61                 
Correct output: -45                 | Program output: -45                
Correct output: -2                  | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: 15                  | Program output: 70                 
Correct output: 61                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 55                  | Program output: 69                 
Correct output: 21                  | Program output: 47                 
Correct output: 35                  | Program output: 35                 
Correct output: 32                  | Program output: 50                 
Correct output: 14                  | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 50                 
Correct output: 3                   | Program output: 16                 
Correct output: 30                  | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 96                 
Correct output: 17                  | Program output: 67                 
Correct output: 47                  | Program output: 47                 
Correct output: 8                   | Program output: 100                
Correct output: 45                  | Program output: 75                 
Correct output: 13                  | Program output: 49                 
Correct output: -54                 | Program output: 90                 
Correct output: -93                 | Program output: 44                 
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: 20                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 30                 
Correct output: -97                 | Program output: 2                  
Correct output: -15                 | Program output: 91                 
Correct output: -79                 | Program output: 16                 
Correct output: -7                  | Program output: 60                 
Correct output: -37                 | Program output: 24                 
Correct output: -45                 | Program output: 90                 
Correct output: -68                 | Program output: 100                
Correct output: -93                 | Program output: -59                
Correct output: -28                 | Program output: -28                
Correct output: -8                  | Program output: 77                 
Correct output: -96                 | Program output: -6                 
Correct output: -37                 | Program output: 77                 
Correct output: -90                 | Program output: 32                 
Correct output: -88                 | Program output: 41                 
Correct output: -74                 | Program output: -62                
Correct output: -76                 | Program output: 87                 
Correct output: -93                 | Program output: 19                 
Correct output: -75                 | Program output: 69                 
Correct output: -73                 | Program output: 42                 
Correct output: -19                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -39                 | Program output: 94                 
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: 82                 
Correct output: -44                 | Program output: -2                 
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: 43                  | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -2                 
Correct output: -53                 | Program output: -8                 
Correct output: -58                 | Program output: 72                 
Correct output: -40                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: 90                 
Correct output: -77                 | Program output: 23                 
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -25                
Correct output: -5                  | Program output: -1                 
Correct output: -21                 | Program output: -21                
Correct output: -2                  | Program output: 41                 
Correct output: -93                 | Program output: -85                
Correct output: -87                 | Program output: 27                 
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: -52                
Correct output: -38                 | Program output: -13                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -44                
Correct output: -96                 | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction print_exec} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Lexicase best program: (exec_k_when_autoconstructing (boolean_and integer_min boolean_dup_times) (integer_fromboolean) in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and boolean_pop exec_when (boolean_dup_times in3 integer_dup_items boolean_empty) boolean_dup integer_yank) () exec_dup (exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_not) (print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685)) boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult integer_dec) (exec_do*range (integer_mult integer_div exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) print_exec (exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not))))))))
Lexicase best errors: [1 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 105
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction print_exec} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Zero cases best program: (exec_k_when_autoconstructing (boolean_and integer_min boolean_dup_times) (integer_fromboolean) in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and boolean_pop exec_when (boolean_dup_times in3 integer_dup_items boolean_empty) boolean_dup integer_yank) () exec_dup (exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_not) (print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685)) boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult integer_dec) (exec_do*range (integer_mult integer_div exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) print_exec (exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not))))))))
Zero cases best errors: [1 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 105
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 13 2 3 6 5 2 1 5 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 13 2 3 6 5 2 1 5 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_noop integer_dec integer_max boolean_stackdepth boolean_swap integer_flush integer_dup_times boolean_xor integer_mod in4 print_boolean in2 exec_if () (print_boolean) exec_while () boolean_frominteger print_integer exec_y (exec_stackdepth) exec_dup (integer_max) in4 integer_yank exec_yank integer_mod boolean_xor integer_fromboolean boolean_invert_second_then_and integer_dup exec_flush integer_inc boolean_swap exec_yank exec_k (boolean_swap integer_dup print_integer exec_y (integer_add integer_sub) in4) ())
Errors: [1 0 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 51
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 9.957
Median total errors in population: 10
Error averages by case: (0.997 0.987 0.998 0.997 0.994 0.995 0.998 0.999 0.995 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.698
Average program size in population (points): 72.59
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 513035
--- Timings ---
Current time: 1559583790246 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.8 seconds, 28.1%
Fitness Testing:      1.8 seconds, 68.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -7                 
Correct output: -37                 | Program output: 13                 
Correct output: -55                 | Program output: 12                 
Correct output: 41                  | Program output: 46                 
Correct output: -37                 | Program output: -37                
Correct output: 73                  | Program output: 73                 
Correct output: 61                  | Program output: 61                 
Correct output: -45                 | Program output: -45                
Correct output: -2                  | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: 15                  | Program output: 15                 
Correct output: 61                  | Program output: 94                 
Correct output: 1                   | Program output: 96                 
Correct output: 55                  | Program output: 82                 
Correct output: 21                  | Program output: 21                 
Correct output: 35                  | Program output: 76                 
Correct output: 32                  | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 84                 
Correct output: 15                  | Program output: 43                 
Correct output: 3                   | Program output: 9                  
Correct output: 30                  | Program output: 99                 
Correct output: 2                   | Program output: 53                 
Correct output: 27                  | Program output: 62                 
Correct output: 72                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 47                  | Program output: 80                 
Correct output: 8                   | Program output: 8                  
Correct output: 45                  | Program output: 55                 
Correct output: 13                  | Program output: 50                 
Correct output: -54                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -73                
Correct output: -22                 | Program output: 94                 
Correct output: -38                 | Program output: -1                 
Correct output: -27                 | Program output: 26                 
Correct output: -99                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -7                  | Program output: -7                 
Correct output: -37                 | Program output: -37                
Correct output: -45                 | Program output: 63                 
Correct output: -68                 | Program output: -42                
Correct output: -93                 | Program output: -78                
Correct output: -28                 | Program output: 21                 
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 11                 
Correct output: -90                 | Program output: -35                
Correct output: -88                 | Program output: 77                 
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -22                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: 45                 
Correct output: -73                 | Program output: -66                
Correct output: -19                 | Program output: -8                 
Correct output: -69                 | Program output: 2                  
Correct output: -39                 | Program output: 65                 
Correct output: -87                 | Program output: -84                
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: 36                 
Correct output: 1                   | Program output: 21                 
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: 88                 
Correct output: -96                 | Program output: -10                
Correct output: 43                  | Program output: 51                 
Correct output: -79                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -12                
Correct output: -54                 | Program output: -1                 
Correct output: -95                 | Program output: 25                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 46                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 63                 
Correct output: -21                 | Program output: 39                 
Correct output: -2                  | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -68                
Correct output: -92                 | Program output: 50                 
Correct output: -52                 | Program output: 81                 
Correct output: -38                 | Program output: 91                 
Correct output: -64                 | Program output: -2                 
Correct output: -77                 | Program output: 16                 
Correct output: -96                 | Program output: -96                
Correct output: 24                  | Program output: 46                 
Correct output: -99                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_315} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_empty boolean_swap boolean_xor exec_yankdup integer_dup_times boolean_yankdup exec_noop boolean_or boolean_empty boolean_or integer_sub integer_yankdup integer_dec integer_dec tagged_315 integer_mod integer_swap exec_noop exec_eq integer_flush print_integer in4 print_integer exec_do*count (boolean_invert_first_then_and) exec_dup () integer_yankdup boolean_pop integer_gt boolean_pop exec_k () (boolean_pop exec_k_when_autoconstructing () (integer_dup_times print_integer) integer_dup))
Lexicase best errors: [0 0 0 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_315} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_empty boolean_swap boolean_xor exec_yankdup integer_dup_times boolean_yankdup exec_noop boolean_or boolean_empty boolean_or integer_sub integer_yankdup integer_dec integer_dec tagged_315 integer_mod integer_swap exec_noop exec_eq integer_flush print_integer in4 print_integer exec_do*count (boolean_invert_first_then_and) exec_dup () integer_yankdup boolean_pop integer_gt boolean_pop exec_k () (boolean_pop exec_k_when_autoconstructing () (integer_dup_times print_integer) integer_dup))
Zero cases best errors: [0 0 0 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 263 264 178 176 293 739 5 291 291)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (263 263 264 178 176 293 739 5 291 291)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_715} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction integer_max} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop})
Best program: (exec_do*range () in3 boolean_flush print_integer boolean_stackdepth integer_mod tagged_715 integer_gt exec_s () (exec_eq) () exec_swap (exec_noop boolean_dup_times exec_s_when_autoconstructing (exec_swap (integer_gte integer_yankdup integer_flush exec_s_when_autoconstructing (in4) (integer_max) (integer_inc) boolean_swap exec_pop (exec_s_when_autoconstructing (boolean_pop) () ())) ()) () ()) ())
Errors: [1 1 1 1 1 0 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 26
Size: 45
Percent parens: 0.422
--- Population Statistics ---
Average total errors in population: 7.237
Median total errors in population: 6
Error averages by case: (0.737 0.737 0.736 0.822 0.824 0.707 0.261 0.995 0.709 0.709)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.747
Average program size in population (points): 67.278
Average percent parens in population: 0.276
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.488
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1169800
--- Timings ---
Current time: 1559583793370 milliseconds
Total Time:           6.3 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.8 seconds, 44.4%
Fitness Testing:      2.6 seconds, 41.4%
Report:               0.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -7                 
Correct output: -37                 | Program output: 13                 
Correct output: -55                 | Program output: 12                 
Correct output: 41                  | Program output: 46                 
Correct output: -37                 | Program output: -37                
Correct output: 73                  | Program output: 73                 
Correct output: 61                  | Program output: 61                 
Correct output: -45                 | Program output: -45                
Correct output: -2                  | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: 15                  | Program output: 15                 
Correct output: 61                  | Program output: 94                 
Correct output: 1                   | Program output: 96                 
Correct output: 55                  | Program output: 82                 
Correct output: 21                  | Program output: 21                 
Correct output: 35                  | Program output: 76                 
Correct output: 32                  | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 84                 
Correct output: 15                  | Program output: 43                 
Correct output: 3                   | Program output: 9                  
Correct output: 30                  | Program output: 99                 
Correct output: 2                   | Program output: 53                 
Correct output: 27                  | Program output: 62                 
Correct output: 72                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 47                  | Program output: 80                 
Correct output: 8                   | Program output: 8                  
Correct output: 45                  | Program output: 55                 
Correct output: 13                  | Program output: 50                 
Correct output: -54                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -73                
Correct output: -22                 | Program output: 94                 
Correct output: -38                 | Program output: -1                 
Correct output: -27                 | Program output: 26                 
Correct output: -99                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -7                  | Program output: -7                 
Correct output: -37                 | Program output: -37                
Correct output: -45                 | Program output: 63                 
Correct output: -68                 | Program output: -42                
Correct output: -93                 | Program output: -78                
Correct output: -28                 | Program output: 21                 
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 11                 
Correct output: -90                 | Program output: -35                
Correct output: -88                 | Program output: 77                 
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -22                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: 45                 
Correct output: -73                 | Program output: -66                
Correct output: -19                 | Program output: -8                 
Correct output: -69                 | Program output: 2                  
Correct output: -39                 | Program output: 65                 
Correct output: -87                 | Program output: -84                
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: 36                 
Correct output: 1                   | Program output: 21                 
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: 88                 
Correct output: -96                 | Program output: -10                
Correct output: 43                  | Program output: 51                 
Correct output: -79                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -12                
Correct output: -54                 | Program output: -1                 
Correct output: -95                 | Program output: 25                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 46                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 63                 
Correct output: -21                 | Program output: 39                 
Correct output: -2                  | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -68                
Correct output: -92                 | Program output: 50                 
Correct output: -52                 | Program output: 81                 
Correct output: -38                 | Program output: 91                 
Correct output: -64                 | Program output: -2                 
Correct output: -77                 | Program output: 16                 
Correct output: -96                 | Program output: -96                
Correct output: 24                  | Program output: 46                 
Correct output: -99                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_971} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt})
Lexicase best program: (exec_do*range () in3 boolean_flush print_integer exec_swap (exec_y () tagged_971 boolean_yankdup boolean_invert_first_then_and) (in3 exec_if (boolean_rot integer_dup_items boolean_and) (print_integer) integer_gt integer_flush exec_swap (exec_dup_items exec_shove () exec_dup (integer_flush integer_yank integer_gte) exec_k_when_autoconstructing () () integer_rot exec_k () (integer_max integer_min print_integer integer_min integer_yank integer_max integer_dec exec_do*while (integer_lt))) ()))
Lexicase best errors: [1 0 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_971} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt})
Zero cases best program: (exec_do*range () in3 boolean_flush print_integer exec_swap (exec_y () tagged_971 boolean_yankdup boolean_invert_first_then_and) (in3 exec_if (boolean_rot integer_dup_items boolean_and) (print_integer) integer_gt integer_flush exec_swap (exec_dup_items exec_shove () exec_dup (integer_flush integer_yank integer_gte) exec_k_when_autoconstructing () () integer_rot exec_k () (integer_max integer_min print_integer integer_min integer_yank integer_max integer_dec exec_do*while (integer_lt))) ()))
Zero cases best errors: [1 0 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (72 294 184 293 294 282 279 293 281 74)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (72 294 184 293 294 282 279 293 281 74)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_971} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor})
Best program: (exec_do*range (in3) integer_dup_times exec_k (boolean_xor) (integer_yankdup integer_mult) integer_dup_times integer_mult exec_swap (exec_y () tagged_971 boolean_yankdup boolean_invert_first_then_and) (in3 exec_if (boolean_rot integer_dup_items boolean_and) (print_integer) integer_gt integer_flush exec_swap (exec_dup_items exec_shove () exec_dup (integer_flush integer_yank integer_gte) exec_k_when_autoconstructing () () integer_rot exec_k () (integer_max integer_min print_integer integer_min) integer_yank integer_max integer_dec exec_do*while (integer_lt exec_rot (exec_yankdup) (exec_dup () integer_div integer_shove exec_yankdup boolean_rot) (integer_lt) integer_eq exec_dup_items) boolean_yank boolean_xor) ()))
Errors: [1 0 1 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 53
Size: 75
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 7.654
Median total errors in population: 7
Error averages by case: (0.928 0.706 0.816 0.707 0.706 0.718 0.721 0.707 0.719 0.926)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.926
Average program size in population (points): 64.699
Average percent parens in population: 0.274
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.029
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1781759
--- Timings ---
Current time: 1559583796720 milliseconds
Total Time:           9.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.9 seconds, 52.3%
Fitness Testing:      3.3 seconds, 35.3%
Report:               1.1 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -59                
Correct output: -67                 | Program output: -60                
Correct output: -21                 | Program output: -21                
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: 41                  | Program output: 46                 
Correct output: -37                 | Program output: -37                
Correct output: 73                  | Program output: 89                 
Correct output: 61                  | Program output: 61                 
Correct output: -45                 | Program output: -45                
Correct output: -2                  | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: 15                  | Program output: 65                 
Correct output: 61                  | Program output: 69                 
Correct output: 1                   | Program output: 57                 
Correct output: 55                  | Program output: 79                 
Correct output: 21                  | Program output: 93                 
Correct output: 35                  | Program output: 59                 
Correct output: 32                  | Program output: 95                 
Correct output: 14                  | Program output: 57                 
Correct output: 9                   | Program output: 47                 
Correct output: 15                  | Program output: 52                 
Correct output: 3                   | Program output: 83                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 54                 
Correct output: 27                  | Program output: 44                 
Correct output: 72                  | Program output: 72                 
Correct output: 17                  | Program output: 52                 
Correct output: 47                  | Program output: 49                 
Correct output: 8                   | Program output: 47                 
Correct output: 45                  | Program output: 66                 
Correct output: 13                  | Program output: 74                 
Correct output: -54                 | Program output: -54                
Correct output: -93                 | Program output: -65                
Correct output: -82                 | Program output: -31                
Correct output: -22                 | Program output: -22                
Correct output: -38                 | Program output: 44                 
Correct output: -27                 | Program output: 48                 
Correct output: -99                 | Program output: 71                 
Correct output: -97                 | Program output: -29                
Correct output: -15                 | Program output: -15                
Correct output: -79                 | Program output: 88                 
Correct output: -7                  | Program output: 97                 
Correct output: -37                 | Program output: -3                 
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: -25                
Correct output: -93                 | Program output: -17                
Correct output: -28                 | Program output: 12                 
Correct output: -8                  | Program output: 91                 
Correct output: -96                 | Program output: -85                
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -51                
Correct output: -74                 | Program output: -24                
Correct output: -76                 | Program output: 89                 
Correct output: -93                 | Program output: 42                 
Correct output: -75                 | Program output: -40                
Correct output: -73                 | Program output: -26                
Correct output: -19                 | Program output: -19                
Correct output: -69                 | Program output: 13                 
Correct output: -39                 | Program output: -39                
Correct output: -87                 | Program output: 17                 
Correct output: -42                 | Program output: 44                 
Correct output: -44                 | Program output: 3                  
Correct output: 1                   | Program output: 3                  
Correct output: -67                 | Program output: 15                 
Correct output: -41                 | Program output: 92                 
Correct output: -96                 | Program output: -46                
Correct output: 43                  | Program output: 47                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -57                
Correct output: -53                 | Program output: 50                 
Correct output: -58                 | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: 96                 
Correct output: -95                 | Program output: -39                
Correct output: -77                 | Program output: 95                 
Correct output: -81                 | Program output: 96                 
Correct output: -97                 | Program output: -39                
Correct output: -5                  | Program output: 11                 
Correct output: -21                 | Program output: 4                  
Correct output: -2                  | Program output: 78                 
Correct output: -93                 | Program output: 28                 
Correct output: -87                 | Program output: 51                 
Correct output: -92                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -64                 | Program output: 73                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -76                
Correct output: 24                  | Program output: 59                 
Correct output: -99                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 2, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction -16} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_313} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_empty exec_dup () integer_dup in4 integer_mod boolean_frominteger exec_yankdup exec_do*range (integer_gte) integer_flush boolean_rot integer_div exec_yank boolean_invert_second_then_and in1 exec_do*while (exec_swap (print_integer boolean_swap in4 integer_stackdepth) (exec_k () (exec_shove (integer_stackdepth integer_eq -16 exec_pop (exec_rot () (boolean_xor exec_s_when_autoconstructing (boolean_yankdup integer_stackdepth exec_when () boolean_dup exec_yank) (boolean_eq) (boolean_dup_items integer_div exec_yank) integer_fromboolean integer_pop integer_gt exec_do*while (integer_rot exec_while () integer_dup_times tag_integer_313 boolean_yank integer_yankdup integer_lte) exec_shove (integer_inc exec_swap (integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))) ()))))))
Lexicase best errors: [0 1 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 86
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 2, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction -16} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_313} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_empty exec_dup () integer_dup in4 integer_mod boolean_frominteger exec_yankdup exec_do*range (integer_gte) integer_flush boolean_rot integer_div exec_yank boolean_invert_second_then_and in1 exec_do*while (exec_swap (print_integer boolean_swap in4 integer_stackdepth) (exec_k () (exec_shove (integer_stackdepth integer_eq -16 exec_pop (exec_rot () (boolean_xor exec_s_when_autoconstructing (boolean_yankdup integer_stackdepth exec_when () boolean_dup exec_yank) (boolean_eq) (boolean_dup_items integer_div exec_yank) integer_fromboolean integer_pop integer_gt exec_do*while (integer_rot exec_while () integer_dup_times tag_integer_313 boolean_yank integer_yankdup integer_lte) exec_shove (integer_inc exec_swap (integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))) ()))))))
Zero cases best errors: [0 1 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 86
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (156 79 266 870 156 78 367 366 154 264)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (156 79 266 870 156 78 367 366 154 264)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 2, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction -16} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_313} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and})
Best program: (integer_empty exec_dup () integer_dup in4 integer_mod boolean_frominteger exec_yankdup exec_do*range (integer_gte) integer_flush boolean_rot integer_div exec_yank boolean_invert_second_then_and in1 exec_do*while (exec_swap (print_integer exec_dup_items in4 integer_stackdepth) (exec_k () (exec_shove (integer_stackdepth integer_eq -16 exec_pop (exec_rot () (boolean_xor exec_s_when_autoconstructing (boolean_yankdup integer_stackdepth exec_when () boolean_dup exec_yank) (boolean_eq) (boolean_dup_items integer_div exec_yank) integer_fromboolean integer_pop integer_gt exec_do*while (integer_rot exec_while () integer_dup_times tag_integer_313 boolean_yank integer_yankdup integer_lte) exec_shove (integer_inc exec_swap (boolean_and) ())) ()))))))
Errors: [0 1 1 0 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 54
Size: 76
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 7.244
Median total errors in population: 7
Error averages by case: (0.844 0.921 0.734 0.13 0.844 0.922 0.633 0.634 0.846 0.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.039
Average program size in population (points): 63.225
Average percent parens in population: 0.287
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.56275
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2358337
--- Timings ---
Current time: 1559583799747 milliseconds
Total Time:          12.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.1 seconds, 55.8%
Fitness Testing:      3.9 seconds, 30.9%
Report:               1.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 623
Test mean error for best: 0.62300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -96                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -21                
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: 12                 
Correct output: 41                  | Program output: 46                 
Correct output: -37                 | Program output: 5                  
Correct output: 73                  | Program output: 89                 
Correct output: 61                  | Program output: 61                 
Correct output: -45                 | Program output: -45                
Correct output: -2                  | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: 15                  | Program output: 70                 
Correct output: 61                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 55                  | Program output: 69                 
Correct output: 21                  | Program output: 47                 
Correct output: 35                  | Program output: 35                 
Correct output: 32                  | Program output: 50                 
Correct output: 14                  | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 50                 
Correct output: 3                   | Program output: 16                 
Correct output: 30                  | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 96                 
Correct output: 17                  | Program output: 67                 
Correct output: 47                  | Program output: 47                 
Correct output: 8                   | Program output: 100                
Correct output: 45                  | Program output: 75                 
Correct output: 13                  | Program output: 49                 
Correct output: -54                 | Program output: 90                 
Correct output: -93                 | Program output: 44                 
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: 20                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 30                 
Correct output: -97                 | Program output: 2                  
Correct output: -15                 | Program output: 91                 
Correct output: -79                 | Program output: 16                 
Correct output: -7                  | Program output: 60                 
Correct output: -37                 | Program output: 24                 
Correct output: -45                 | Program output: 90                 
Correct output: -68                 | Program output: 100                
Correct output: -93                 | Program output: -59                
Correct output: -28                 | Program output: -28                
Correct output: -8                  | Program output: 77                 
Correct output: -96                 | Program output: -6                 
Correct output: -37                 | Program output: 77                 
Correct output: -90                 | Program output: 32                 
Correct output: -88                 | Program output: 41                 
Correct output: -74                 | Program output: -62                
Correct output: -76                 | Program output: 87                 
Correct output: -93                 | Program output: 19                 
Correct output: -75                 | Program output: 69                 
Correct output: -73                 | Program output: 42                 
Correct output: -19                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -39                 | Program output: 94                 
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: 82                 
Correct output: -44                 | Program output: -2                 
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: 43                  | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -2                 
Correct output: -53                 | Program output: -8                 
Correct output: -58                 | Program output: 72                 
Correct output: -40                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: 90                 
Correct output: -77                 | Program output: 23                 
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -25                
Correct output: -5                  | Program output: -1                 
Correct output: -21                 | Program output: -21                
Correct output: -2                  | Program output: 41                 
Correct output: -93                 | Program output: -85                
Correct output: -87                 | Program output: 27                 
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: -52                
Correct output: -38                 | Program output: -13                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -44                
Correct output: -96                 | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_315} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_empty boolean_swap boolean_xor exec_yankdup integer_dup_times boolean_yankdup exec_noop boolean_or exec_rot (boolean_or) (integer_sub) (integer_yankdup integer_dec integer_dec tagged_315) integer_mod integer_swap exec_noop exec_eq integer_flush print_integer in4 print_integer exec_do*count (boolean_invert_first_then_and) exec_dup (integer_yankdup boolean_pop integer_gt) boolean_pop exec_k () (boolean_pop exec_k_when_autoconstructing () (integer_dup_times print_integer) integer_dup))
Lexicase best errors: [1 0 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_315} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_empty boolean_swap boolean_xor exec_yankdup integer_dup_times boolean_yankdup exec_noop boolean_or exec_rot (boolean_or) (integer_sub) (integer_yankdup integer_dec integer_dec tagged_315) integer_mod integer_swap exec_noop exec_eq integer_flush print_integer in4 print_integer exec_do*count (boolean_invert_first_then_and) exec_dup (integer_yankdup boolean_pop integer_gt) boolean_pop exec_k () (boolean_pop exec_k_when_autoconstructing () (integer_dup_times print_integer) integer_dup))
Zero cases best errors: [1 0 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 200 170 198 845 668 170 195 200 195)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (170 200 170 198 845 668 170 195 200 195)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction -5} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_exec_355} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range})
Best program: (exec_swap (boolean_yankdup boolean_yankdup integer_mod print_integer exec_empty boolean_swap exec_noop boolean_or exec_noop boolean_empty) (integer_eq exec_while () exec_do*range (integer_inc integer_gte integer_lte boolean_or exec_empty exec_yankdup integer_empty) exec_do*while (boolean_swap exec_pop (integer_pop exec_dup_times (-5) boolean_pop) boolean_yankdup integer_rot boolean_and exec_dup () in4 integer_lte) integer_rot) exec_yankdup in2 boolean_frominteger integer_dec exec_k (boolean_not) (tag_exec_355 (integer_mult exec_k_when_autoconstructing (exec_k (integer_shove exec_s_when_autoconstructing () (in4 exec_yankdup boolean_dup_times boolean_eq) (exec_dup_times (exec_pop () boolean_rot exec_k_when_autoconstructing () (boolean_frominteger integer_max) integer_dec boolean_swap)) boolean_yank boolean_dup integer_sub) (integer_rot integer_dup_items exec_rot (integer_yankdup exec_rot (boolean_or integer_shove exec_do*range ()) () ()) () ())) ())))
Errors: [1 0 1 0 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 70
Size: 100
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.989
Median total errors in population: 7
Error averages by case: (0.83 0.8 0.83 0.802 0.155 0.332 0.83 0.805 0.8 0.805)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.375
Average program size in population (points): 62.37
Average percent parens in population: 0.270
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.121625
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2910922
--- Timings ---
Current time: 1559583802986 milliseconds
Total Time:          16.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.5 seconds, 59.8%
Fitness Testing:      4.5 seconds, 28.1%
Report:               1.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -7                 
Correct output: -37                 | Program output: 13                 
Correct output: -55                 | Program output: 12                 
Correct output: 41                  | Program output: 46                 
Correct output: -37                 | Program output: -37                
Correct output: 73                  | Program output: 73                 
Correct output: 61                  | Program output: 61                 
Correct output: -45                 | Program output: -45                
Correct output: -2                  | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: 15                  | Program output: 15                 
Correct output: 61                  | Program output: 94                 
Correct output: 1                   | Program output: 96                 
Correct output: 55                  | Program output: 82                 
Correct output: 21                  | Program output: 21                 
Correct output: 35                  | Program output: 76                 
Correct output: 32                  | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 84                 
Correct output: 15                  | Program output: 43                 
Correct output: 3                   | Program output: 9                  
Correct output: 30                  | Program output: 99                 
Correct output: 2                   | Program output: 53                 
Correct output: 27                  | Program output: 62                 
Correct output: 72                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 47                  | Program output: 80                 
Correct output: 8                   | Program output: 8                  
Correct output: 45                  | Program output: 55                 
Correct output: 13                  | Program output: 50                 
Correct output: -54                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -73                
Correct output: -22                 | Program output: 94                 
Correct output: -38                 | Program output: -1                 
Correct output: -27                 | Program output: 26                 
Correct output: -99                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -7                  | Program output: -7                 
Correct output: -37                 | Program output: -37                
Correct output: -45                 | Program output: 63                 
Correct output: -68                 | Program output: -42                
Correct output: -93                 | Program output: -78                
Correct output: -28                 | Program output: 21                 
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 11                 
Correct output: -90                 | Program output: -35                
Correct output: -88                 | Program output: 77                 
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -22                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: 45                 
Correct output: -73                 | Program output: -66                
Correct output: -19                 | Program output: -8                 
Correct output: -69                 | Program output: 2                  
Correct output: -39                 | Program output: 65                 
Correct output: -87                 | Program output: -84                
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: 36                 
Correct output: 1                   | Program output: 21                 
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: 88                 
Correct output: -96                 | Program output: -10                
Correct output: 43                  | Program output: 51                 
Correct output: -79                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -12                
Correct output: -54                 | Program output: -1                 
Correct output: -95                 | Program output: 25                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 46                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 63                 
Correct output: -21                 | Program output: 39                 
Correct output: -2                  | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -68                
Correct output: -92                 | Program output: 50                 
Correct output: -52                 | Program output: 81                 
Correct output: -38                 | Program output: 91                 
Correct output: -64                 | Program output: -2                 
Correct output: -77                 | Program output: 16                 
Correct output: -96                 | Program output: -96                
Correct output: 24                  | Program output: 46                 
Correct output: -99                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*range} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_715} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction integer_max} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_do*range () in3 boolean_flush print_integer boolean_stackdepth integer_mod tagged_715 integer_gt exec_s () (exec_eq) () exec_swap (exec_noop boolean_dup_times exec_s_when_autoconstructing (exec_swap (integer_gte integer_yankdup integer_flush exec_s_when_autoconstructing (in4) (integer_max) (integer_inc) boolean_swap exec_pop (exec_s_when_autoconstructing (boolean_pop) () ())) ()) () ()) ())
Lexicase best errors: [0 0 0 1 0 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.422
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*range} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_715} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction integer_max} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_do*range () in3 boolean_flush print_integer boolean_stackdepth integer_mod tagged_715 integer_gt exec_s () (exec_eq) () exec_swap (exec_noop boolean_dup_times exec_s_when_autoconstructing (exec_swap (integer_gte integer_yankdup integer_flush exec_s_when_autoconstructing (in4) (integer_max) (integer_inc) boolean_swap exec_pop (exec_s_when_autoconstructing (boolean_pop) () ())) ()) () ()) ())
Zero cases best errors: [0 0 0 1 0 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.422
--- Lexicase Population Statistics ---
Count of elite individuals by case: (342 343 343 210 868 310 1 310 311 210)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (342 343 343 210 868 310 1 310 311 210)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_971} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_boolean_942} {:close 0, :instruction exec_while} {:close 0, :instruction tag_exec_949} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction -25} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup})
Best program: (exec_do*range (in3) integer_dup_times exec_k (boolean_xor integer_yankdup integer_mult) (integer_dup_times integer_mult) exec_swap (exec_y () tagged_971 boolean_yankdup boolean_invert_first_then_and) (in3 exec_if (boolean_rot integer_dup_items boolean_and) (print_integer) integer_gt integer_flush exec_swap (integer_rot) (integer_flush exec_if () (integer_swap exec_eq boolean_stackdepth print_boolean tag_boolean_942 exec_while (tag_exec_949 (exec_pop (integer_empty) integer_dup integer_flush) exec_do*range (exec_do*while (in4 integer_dup_items integer_fromboolean boolean_dup_times integer_fromboolean integer_lte boolean_invert_first_then_and) boolean_xor -25 boolean_dup_times boolean_dup))))))
Errors: [0 0 0 1 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 50
Size: 68
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.752
Median total errors in population: 6
Error averages by case: (0.658 0.657 0.657 0.79 0.132 0.69 0.999 0.69 0.689 0.79)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.203
Average program size in population (points): 58.445
Average percent parens in population: 0.278
Minimum age in population: 5.25
Maximum age in population: 9.8125
Average age in population: 7.5546875
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3534337
--- Timings ---
Current time: 1559583806263 milliseconds
Total Time:          19.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.7 seconds, 61.6%
Fitness Testing:      5.1 seconds, 26.9%
Report:               2.1 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -96                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -21                
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: 12                 
Correct output: 41                  | Program output: 41                 
Correct output: -37                 | Program output: -37                
Correct output: 73                  | Program output: 89                 
Correct output: 61                  | Program output: 61                 
Correct output: -45                 | Program output: 25                 
Correct output: -2                  | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: 15                  | Program output: 28                 
Correct output: 61                  | Program output: 61                 
Correct output: 1                   | Program output: 31                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 56                 
Correct output: 35                  | Program output: 66                 
Correct output: 32                  | Program output: 50                 
Correct output: 14                  | Program output: 94                 
Correct output: 9                   | Program output: 77                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 93                 
Correct output: 2                   | Program output: 69                 
Correct output: 27                  | Program output: 62                 
Correct output: 72                  | Program output: 97                 
Correct output: 17                  | Program output: 20                 
Correct output: 47                  | Program output: 48                 
Correct output: 8                   | Program output: 74                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: -54                 | Program output: 74                 
Correct output: -93                 | Program output: 36                 
Correct output: -82                 | Program output: -72                
Correct output: -22                 | Program output: -9                 
Correct output: -38                 | Program output: 53                 
Correct output: -27                 | Program output: 50                 
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -51                
Correct output: -15                 | Program output: 42                 
Correct output: -79                 | Program output: 5                  
Correct output: -7                  | Program output: 31                 
Correct output: -37                 | Program output: 22                 
Correct output: -45                 | Program output: 93                 
Correct output: -68                 | Program output: -68                
Correct output: -93                 | Program output: -93                
Correct output: -28                 | Program output: 47                 
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: 54                 
Correct output: -37                 | Program output: -2                 
Correct output: -90                 | Program output: -16                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 64                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: 3                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -19                 | Program output: 83                 
Correct output: -69                 | Program output: -24                
Correct output: -39                 | Program output: 9                  
Correct output: -87                 | Program output: 16                 
Correct output: -42                 | Program output: 95                 
Correct output: -44                 | Program output: -44                
Correct output: 1                   | Program output: 31                 
Correct output: -67                 | Program output: 48                 
Correct output: -41                 | Program output: 19                 
Correct output: -96                 | Program output: 49                 
Correct output: 43                  | Program output: 98                 
Correct output: -79                 | Program output: 82                 
Correct output: -96                 | Program output: 93                 
Correct output: -53                 | Program output: -46                
Correct output: -58                 | Program output: 100                
Correct output: -40                 | Program output: 5                  
Correct output: -54                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -51                
Correct output: -81                 | Program output: -60                
Correct output: -97                 | Program output: 84                 
Correct output: -5                  | Program output: -5                 
Correct output: -21                 | Program output: 74                 
Correct output: -2                  | Program output: 30                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -13                
Correct output: -52                 | Program output: 14                 
Correct output: -38                 | Program output: 60                 
Correct output: -64                 | Program output: 92                 
Correct output: -77                 | Program output: 18                 
Correct output: -96                 | Program output: -30                
Correct output: 24                  | Program output: 40                 
Correct output: -99                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_sub} {:close 0, :instruction in4})
Lexicase best program: (in2 integer_lt boolean_empty boolean_or integer_mod integer_fromboolean boolean_or boolean_dup_times exec_dup_times () integer_yank print_integer exec_while (exec_if (exec_when () exec_if (exec_empty integer_dup exec_stackdepth boolean_dup integer_rot) (print_integer) integer_gte) (exec_yank boolean_dup_times exec_flush integer_inc boolean_swap exec_yank exec_k (boolean_swap integer_dup print_integer exec_y (boolean_not integer_sub) in4) ())))
Lexicase best errors: [0 1 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_sub} {:close 0, :instruction in4})
Zero cases best program: (in2 integer_lt boolean_empty boolean_or integer_mod integer_fromboolean boolean_or boolean_dup_times exec_dup_times () integer_yank print_integer exec_while (exec_if (exec_when () exec_if (exec_empty integer_dup exec_stackdepth boolean_dup integer_rot) (print_integer) integer_gte) (exec_yank boolean_dup_times exec_flush integer_inc boolean_swap exec_yank exec_k (boolean_swap integer_dup print_integer exec_y (boolean_not integer_sub) in4) ())))
Zero cases best errors: [0 1 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (883 280 86 278 606 190 86 886 189 191)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (883 280 86 278 606 190 86 886 189 191)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_279} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_799} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_and})
Best program: (integer_div exec_do*range (boolean_yank integer_flush boolean_invert_first_then_and boolean_frominteger exec_yankdup integer_yank boolean_frominteger exec_when (exec_k (integer_shove print_boolean integer_dup in2 exec_rot (print_integer in2 exec_rot (exec_do*times (exec_k_when_autoconstructing (boolean_and integer_rot boolean_and) (boolean_yank exec_rot (integer_mod integer_dup_times integer_yank tagged_279 boolean_dup) (tagged_799 integer_dup in1 boolean_and) ()))) () ()) () ()) ())))
Errors: [0 1 1 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 52
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 6.325
Median total errors in population: 6
Error averages by case: (0.117 0.72 0.914 0.722 0.394 0.81 0.914 0.114 0.811 0.809)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.016
Average program size in population (points): 56.957
Average percent parens in population: 0.260
Minimum age in population: 6.5
Maximum age in population: 11.09375
Average age in population: 9.0049375
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4118139
--- Timings ---
Current time: 1559583809607 milliseconds
Total Time:          22.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.0 seconds, 62.7%
Fitness Testing:      5.7 seconds, 25.3%
Report:               2.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 385
Test mean error for best: 0.38500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -21                
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: 12                 
Correct output: 41                  | Program output: 46                 
Correct output: -37                 | Program output: -37                
Correct output: 73                  | Program output: 73                 
Correct output: 61                  | Program output: 61                 
Correct output: -45                 | Program output: -45                
Correct output: -2                  | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: 15                  | Program output: 15                 
Correct output: 61                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 55                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 35                  | Program output: 35                 
Correct output: 32                  | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 43                 
Correct output: 3                   | Program output: 9                  
Correct output: 30                  | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 47                  | Program output: 47                 
Correct output: 8                   | Program output: 8                  
Correct output: 45                  | Program output: 55                 
Correct output: 13                  | Program output: 49                 
Correct output: -54                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: 20                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 30                 
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -7                  | Program output: -7                 
Correct output: -37                 | Program output: -37                
Correct output: -45                 | Program output: 63                 
Correct output: -68                 | Program output: -42                
Correct output: -93                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 11                 
Correct output: -90                 | Program output: -35                
Correct output: -88                 | Program output: 41                 
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -22                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: 45                 
Correct output: -73                 | Program output: -66                
Correct output: -19                 | Program output: -8                 
Correct output: -69                 | Program output: -69                
Correct output: -39                 | Program output: 65                 
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: -2                 
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: 43                  | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: 25                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: -1                 
Correct output: -21                 | Program output: -21                
Correct output: -2                  | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: -52                
Correct output: -38                 | Program output: -13                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -44                
Correct output: -96                 | Program output: -96                
Correct output: 24                  | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Lexicase best program: (exec_do*range (in3) integer_dup_times exec_k (boolean_xor) (integer_yankdup integer_mult integer_dup_times integer_min boolean_dup_times integer_fromboolean) in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty boolean_empty) boolean_dup integer_yank) () exec_dup (exec_y_when_autoconstructing (integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685 boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult integer_dec) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))
Lexicase best errors: [0 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 109
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Zero cases best program: (exec_do*range (in3) integer_dup_times exec_k (boolean_xor) (integer_yankdup integer_mult integer_dup_times integer_min boolean_dup_times integer_fromboolean) in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty boolean_empty) boolean_dup integer_yank) () exec_dup (exec_y_when_autoconstructing (integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685 boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult integer_dec) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))
Zero cases best errors: [0 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 109
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 267 204 204 321 393 396 157 157 56)
Population mean number of elite cases: 2.36
Count of perfect (error zero) individuals by case: (202 267 204 204 321 393 396 157 157 56)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Best program: (exec_do*range (in3) integer_dup_times exec_k (boolean_xor) (integer_yankdup integer_mult integer_dup_times integer_min boolean_dup_times integer_fromboolean) in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty boolean_empty) boolean_dup integer_yank) () exec_dup (exec_y_when_autoconstructing (integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685 boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult integer_dec) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))
Errors: [0 1 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 80
Size: 109
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 7.643
Median total errors in population: 8
Error averages by case: (0.798 0.733 0.796 0.796 0.679 0.607 0.604 0.843 0.843 0.944)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.873
Average program size in population (points): 58.915
Average percent parens in population: 0.251
Minimum age in population: 8.25
Maximum age in population: 12.328125
Average age in population: 10.35334375
Median age in population: 10.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4815968
--- Timings ---
Current time: 1559583812758 milliseconds
Total Time:          25.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.9 seconds, 62.7%
Fitness Testing:      6.3 seconds, 24.8%
Report:               3.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -21                
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: 41                  | Program output: 46                 
Correct output: -37                 | Program output: -37                
Correct output: 73                  | Program output: 73                 
Correct output: 61                  | Program output: 61                 
Correct output: -45                 | Program output: -45                
Correct output: -2                  | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: 15                  | Program output: 15                 
Correct output: 61                  | Program output: 69                 
Correct output: 1                   | Program output: 57                 
Correct output: 55                  | Program output: 79                 
Correct output: 21                  | Program output: 21                 
Correct output: 35                  | Program output: 59                 
Correct output: 32                  | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 47                 
Correct output: 15                  | Program output: 43                 
Correct output: 3                   | Program output: 9                  
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 53                 
Correct output: 27                  | Program output: 44                 
Correct output: 72                  | Program output: 72                 
Correct output: 17                  | Program output: 17                 
Correct output: 47                  | Program output: 49                 
Correct output: 8                   | Program output: 8                  
Correct output: 45                  | Program output: 55                 
Correct output: 13                  | Program output: 50                 
Correct output: -54                 | Program output: -54                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -38                 | Program output: -1                 
Correct output: -27                 | Program output: 26                 
Correct output: -99                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: -7                  | Program output: -7                 
Correct output: -37                 | Program output: -37                
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: -42                
Correct output: -93                 | Program output: -78                
Correct output: -28                 | Program output: 12                 
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -22                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -40                
Correct output: -73                 | Program output: -66                
Correct output: -19                 | Program output: -19                
Correct output: -69                 | Program output: 2                  
Correct output: -39                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: 3                  
Correct output: 1                   | Program output: 3                  
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: 88                 
Correct output: -96                 | Program output: -46                
Correct output: 43                  | Program output: 47                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -1                 
Correct output: -95                 | Program output: -39                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 46                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 11                 
Correct output: -21                 | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -68                
Correct output: -92                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -64                 | Program output: -2                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 24                  | Program output: 46                 
Correct output: -99                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_yank exec_dup_items integer_div boolean_swap exec_dup_items integer_div in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (exec_y_when_autoconstructing (integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685)) (boolean_shove integer_dec) integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult integer_dec) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
Lexicase best errors: [1 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 109
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Zero cases best program: (boolean_yank exec_dup_items integer_div boolean_swap exec_dup_items integer_div in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (exec_y_when_autoconstructing (integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685)) (boolean_shove integer_dec) integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult integer_dec) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
Zero cases best errors: [1 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 109
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 518 533 10 178 82 178 518 839 842)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (177 518 533 10 178 82 178 518 839 842)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Best program: (boolean_yank exec_dup_items integer_div boolean_swap exec_dup_items integer_div in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (exec_y_when_autoconstructing (integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685)) (boolean_shove integer_dec) integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult integer_dec) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
Errors: [1 0 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 80
Size: 109
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 6.125
Median total errors in population: 5
Error averages by case: (0.823 0.482 0.467 0.99 0.822 0.918 0.822 0.482 0.161 0.158)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.684
Average program size in population (points): 97.473
Average percent parens in population: 0.264
Minimum age in population: 9.5625
Maximum age in population: 13.4453125
Average age in population: 12.0248671875
Median age in population: 11.8984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 204
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5839419
--- Timings ---
Current time: 1559583816311 milliseconds
Total Time:          28.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.9 seconds, 62.0%
Fitness Testing:      7.2 seconds, 24.9%
Report:               3.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 194
Test mean error for best: 0.19400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -21                
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: 41                  | Program output: 46                 
Correct output: -37                 | Program output: -37                
Correct output: 73                  | Program output: 73                 
Correct output: 61                  | Program output: 61                 
Correct output: -45                 | Program output: -45                
Correct output: -2                  | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: 15                  | Program output: 15                 
Correct output: 61                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 55                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 35                  | Program output: 35                 
Correct output: 32                  | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 43                 
Correct output: 3                   | Program output: 9                  
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 72                 
Correct output: 17                  | Program output: 17                 
Correct output: 47                  | Program output: 47                 
Correct output: 8                   | Program output: 8                  
Correct output: 45                  | Program output: 55                 
Correct output: 13                  | Program output: 49                 
Correct output: -54                 | Program output: -54                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: -22                
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 30                 
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: -7                  | Program output: -7                 
Correct output: -37                 | Program output: -37                
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: -42                
Correct output: -93                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -22                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -40                
Correct output: -73                 | Program output: -66                
Correct output: -19                 | Program output: -19                
Correct output: -69                 | Program output: -69                
Correct output: -39                 | Program output: -39                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: -2                 
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: 43                  | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -39                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: -1                 
Correct output: -21                 | Program output: -21                
Correct output: -2                  | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: -52                
Correct output: -38                 | Program output: -38                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 24                  | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Lexicase best program: (exec_dup_items integer_div in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult integer_dec) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 103
Percent parens: 0.272
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Zero cases best program: (exec_dup_items integer_div in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult integer_dec) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 103
Percent parens: 0.272
--- Lexicase Population Statistics ---
Count of elite individuals by case: (30 321 798 465 30 807 321 473 452 29)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (30 321 798 465 30 807 321 473 452 29)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 1, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Best program: (boolean_yank exec_dup_items integer_div boolean_swap exec_dup_items integer_div in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (exec_y_when_autoconstructing (integer_min boolean_not)) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) (boolean_shove integer_dec) integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult integer_dec) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y (print_boolean) in1 print_exec (boolean_not)) ()))))))))
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 80
Size: 109
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 6.274
Median total errors in population: 6
Error averages by case: (0.97 0.679 0.202 0.535 0.97 0.193 0.679 0.527 0.548 0.971)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.822
Average program size in population (points): 89.917
Average percent parens in population: 0.268
Minimum age in population: 11.1875
Maximum age in population: 14.94921875
Average age in population: 13.49276171875
Median age in population: 13.484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6778167
--- Timings ---
Current time: 1559583819731 milliseconds
Total Time:          32.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.8 seconds, 61.4%
Fitness Testing:      8.0 seconds, 24.8%
Report:               4.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -21                
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: 41                  | Program output: 41                 
Correct output: -37                 | Program output: -37                
Correct output: 73                  | Program output: 73                 
Correct output: 61                  | Program output: 61                 
Correct output: -45                 | Program output: -45                
Correct output: -2                  | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: 15                  | Program output: 15                 
Correct output: 61                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 35                  | Program output: 35                 
Correct output: 32                  | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 72                 
Correct output: 17                  | Program output: 17                 
Correct output: 47                  | Program output: 47                 
Correct output: 8                   | Program output: 8                  
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: -54                 | Program output: -54                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: -22                
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: -7                  | Program output: -7                 
Correct output: -37                 | Program output: -37                
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: -68                
Correct output: -93                 | Program output: -93                
Correct output: -28                 | Program output: -28                
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -19                 | Program output: -19                
Correct output: -69                 | Program output: -69                
Correct output: -39                 | Program output: -39                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: -44                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: 43                  | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: -5                 
Correct output: -21                 | Program output: -21                
Correct output: -2                  | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: -52                
Correct output: -38                 | Program output: -38                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 24                  | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Lexicase best program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 104
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Zero cases best program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 104
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (675 671 395 668 388 392 871 871 394 393)
Population mean number of elite cases: 5.72
Count of perfect (error zero) individuals by case: (675 671 395 668 388 392 871 871 394 393)
Population mean number of perfect (error zero) cases: 5.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_685} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not})
Best program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 76
Size: 104
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 4.282
Median total errors in population: 4
Error averages by case: (0.325 0.329 0.605 0.332 0.612 0.608 0.129 0.129 0.606 0.607)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.849
Average program size in population (points): 92.903
Average percent parens in population: 0.254
Minimum age in population: 14.046875
Maximum age in population: 16.16796875
Average age in population: 15.099859375
Median age in population: 15.046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7696700
--- Timings ---
Current time: 1559583823190 milliseconds
Total Time:          35.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.8 seconds, 61.0%
Fitness Testing:      8.8 seconds, 24.7%
Report:               5.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 10
Successful program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 104


Auto-simplifying with starting size: 104
step: 0
program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 500
program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 1000
program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 1500
program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 2000
program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 2500
program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 3000
program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 3500
program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 4000
program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 4500
program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 5000
program: (in2 integer_lt in4 boolean_and in1 boolean_pop integer_fromboolean in4 exec_pop (boolean_swap) integer_swap boolean_not boolean_stackdepth exec_k (boolean_invert_first_then_and integer_yank exec_when (boolean_dup_times in3 integer_empty exec_dup (integer_min integer_min boolean_not) print_integer integer_eq) exec_while (integer_eq) integer_flush integer_add tagged_685) () boolean_shove integer_dec integer_stackdepth exec_yank boolean_shove boolean_stackdepth integer_rot integer_flush exec_do*count (exec_swap (integer_mult exec_eq) (exec_do*range (integer_mult integer_stackdepth exec_noop exec_k (in1 integer_add exec_y (exec_noop) exec_do*while () integer_div) (print_integer integer_inc) boolean_stackdepth exec_if () (exec_while (boolean_dup exec_if () (exec_while (boolean_dup boolean_yank) exec_s_when_autoconstructing () (integer_sub exec_dup (integer_max) integer_empty exec_empty exec_do*while () exec_y () print_boolean) (in1 print_exec (boolean_not)))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -21                
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: 41                  | Program output: 41                 
Correct output: -37                 | Program output: -37                
Correct output: 73                  | Program output: 73                 
Correct output: 61                  | Program output: 61                 
Correct output: -45                 | Program output: -45                
Correct output: -2                  | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: 15                  | Program output: 15                 
Correct output: 61                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 35                  | Program output: 35                 
Correct output: 32                  | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 72                 
Correct output: 17                  | Program output: 17                 
Correct output: 47                  | Program output: 47                 
Correct output: 8                   | Program output: 8                  
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: -54                 | Program output: -54                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -22                 | Program output: -22                
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: -7                  | Program output: -7                 
Correct output: -37                 | Program output: -37                
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: -68                
Correct output: -93                 | Program output: -93                
Correct output: -28                 | Program output: -28                
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -19                 | Program output: -19                
Correct output: -69                 | Program output: -69                
Correct output: -39                 | Program output: -39                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: -44                
Correct output: 1                   | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -96                 | Program output: -96                
Correct output: 43                  | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: -5                 
Correct output: -21                 | Program output: -21                
Correct output: -2                  | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -52                 | Program output: -52                
Correct output: -38                 | Program output: -38                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 24                  | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
