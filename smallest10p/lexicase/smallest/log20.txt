Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-74 -74 -74 -63] -74] [[7 -53 7 7] -53] [[94 94 47 94] 47] [[-96 -78 -96 -96] -96] [[29 -60 -60 -60] -60] [[4 4 71 4] 4] [[-10 -10 -10 49] -10] [[-63 -63 -63 -79] -79] [[-86 -32 -86 -86] -86] [[75 75 -51 75] -51] [(18 18 18 18) 18] [(42 42 42 42) 42] [(75 75 75 75) 75] [(-1 -1 -1 -1) -1] [(66 66 66 66) 66] [(21 58 71 37) 21] [(79 86 28 80) 28] [(62 100 52 12) 12] [(82 76 31 44) 31] [(61 32 65 99) 32] [(82 41 97 47) 41] [(41 59 22 46) 22] [(70 68 4 71) 4] [(21 22 2 100) 2] [(73 38 90 60) 38] [(46 22 32 13) 13] [(46 17 98 64) 17] [(4 76 15 85) 4] [(31 89 57 4) 4] [(63 38 83 2) 2] [(33 47 7 4) 4] [(52 75 13 90) 13] [(43 32 92 82) 32] [(3 62 55 77) 3] [(53 54 40 95) 40] [(68 56 34 -19) -19] [(93 -68 -37 -7) -68] [(-91 48 -87 -10) -91] [(47 -86 -71 -99) -99] [(6 59 18 -24) -24] [(9 46 3 -82) -82] [(62 -10 -80 -73) -80] [(55 79 53 37) 37] [(-88 4 75 -2) -88] [(-91 -42 77 -90) -91] [(6 45 -16 -57) -57] [(-35 -11 62 8) -35] [(-42 -100 90 92) -100] [(-10 0 -29 97) -29] [(-82 67 54 4) -82] [(-74 24 23 87) -74] [(-21 -11 -94 46) -94] [(49 6 -77 -7) -77] [(-79 -77 3 -17) -79] [(-49 35 -14 -98) -98] [(-79 42 93 91) -79] [(-61 24 41 32) -61] [(-5 -57 -99 -98) -99] [(-98 22 -81 35) -98] [(72 33 -68 80) -68] [(-36 6 -26 83) -36] [(81 -84 -1 12) -84] [(-87 95 -68 -3) -87] [(-21 -90 4 59) -90] [(50 -75 0 53) -75] [(30 13 -9 -36) -36] [(-84 99 85 -21) -84] [(79 19 45 -78) -78] [(42 96 71 79) 42] [(29 54 -44 -2) -44] [(83 98 -4 100) -4] [(13 -4 31 -52) -52] [(29 44 -35 -89) -89] [(-87 -75 -14 69) -87] [(36 -9 8 95) -9] [(-87 -6 59 -12) -87] [(-84 -36 -76 51) -84] [(54 47 48 74) 47] [(-85 -47 72 26) -85] [(24 38 29 -84) -84] [(75 71 -28 -68) -68] [(-20 50 -61 64) -61] [(27 21 84 7) 7] [(12 -44 81 -34) -44] [(18 40 -51 -38) -51] [(-91 59 -93 -65) -93] [(28 -67 88 -94) -94] [(11 -2 25 94) -2] [(53 -1 -38 33) -38] [(73 -81 -8 -90) -90] [(17 69 -81 61) -81] [(63 13 -69 7) -69] [(-18 70 15 71) -18] [(-25 63 -32 67) -32] [(44 21 2 -43) -43])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-74 -74 -74 -63] -74]
Train Case:   6 | Input/Output: [[7 -53 7 7] -53]
Train Case:   7 | Input/Output: [[94 94 47 94] 47]
Train Case:   8 | Input/Output: [[-96 -78 -96 -96] -96]
Train Case:   9 | Input/Output: [[29 -60 -60 -60] -60]
Train Case:  10 | Input/Output: [[4 4 71 4] 4]
Train Case:  11 | Input/Output: [[-10 -10 -10 49] -10]
Train Case:  12 | Input/Output: [[-63 -63 -63 -79] -79]
Train Case:  13 | Input/Output: [[-86 -32 -86 -86] -86]
Train Case:  14 | Input/Output: [[75 75 -51 75] -51]
Train Case:  15 | Input/Output: [(18 18 18 18) 18]
Train Case:  16 | Input/Output: [(42 42 42 42) 42]
Train Case:  17 | Input/Output: [(75 75 75 75) 75]
Train Case:  18 | Input/Output: [(-1 -1 -1 -1) -1]
Train Case:  19 | Input/Output: [(66 66 66 66) 66]
Train Case:  20 | Input/Output: [(21 58 71 37) 21]
Train Case:  21 | Input/Output: [(79 86 28 80) 28]
Train Case:  22 | Input/Output: [(62 100 52 12) 12]
Train Case:  23 | Input/Output: [(82 76 31 44) 31]
Train Case:  24 | Input/Output: [(61 32 65 99) 32]
Train Case:  25 | Input/Output: [(82 41 97 47) 41]
Train Case:  26 | Input/Output: [(41 59 22 46) 22]
Train Case:  27 | Input/Output: [(70 68 4 71) 4]
Train Case:  28 | Input/Output: [(21 22 2 100) 2]
Train Case:  29 | Input/Output: [(73 38 90 60) 38]
Train Case:  30 | Input/Output: [(46 22 32 13) 13]
Train Case:  31 | Input/Output: [(46 17 98 64) 17]
Train Case:  32 | Input/Output: [(4 76 15 85) 4]
Train Case:  33 | Input/Output: [(31 89 57 4) 4]
Train Case:  34 | Input/Output: [(63 38 83 2) 2]
Train Case:  35 | Input/Output: [(33 47 7 4) 4]
Train Case:  36 | Input/Output: [(52 75 13 90) 13]
Train Case:  37 | Input/Output: [(43 32 92 82) 32]
Train Case:  38 | Input/Output: [(3 62 55 77) 3]
Train Case:  39 | Input/Output: [(53 54 40 95) 40]
Train Case:  40 | Input/Output: [(68 56 34 -19) -19]
Train Case:  41 | Input/Output: [(93 -68 -37 -7) -68]
Train Case:  42 | Input/Output: [(-91 48 -87 -10) -91]
Train Case:  43 | Input/Output: [(47 -86 -71 -99) -99]
Train Case:  44 | Input/Output: [(6 59 18 -24) -24]
Train Case:  45 | Input/Output: [(9 46 3 -82) -82]
Train Case:  46 | Input/Output: [(62 -10 -80 -73) -80]
Train Case:  47 | Input/Output: [(55 79 53 37) 37]
Train Case:  48 | Input/Output: [(-88 4 75 -2) -88]
Train Case:  49 | Input/Output: [(-91 -42 77 -90) -91]
Train Case:  50 | Input/Output: [(6 45 -16 -57) -57]
Train Case:  51 | Input/Output: [(-35 -11 62 8) -35]
Train Case:  52 | Input/Output: [(-42 -100 90 92) -100]
Train Case:  53 | Input/Output: [(-10 0 -29 97) -29]
Train Case:  54 | Input/Output: [(-82 67 54 4) -82]
Train Case:  55 | Input/Output: [(-74 24 23 87) -74]
Train Case:  56 | Input/Output: [(-21 -11 -94 46) -94]
Train Case:  57 | Input/Output: [(49 6 -77 -7) -77]
Train Case:  58 | Input/Output: [(-79 -77 3 -17) -79]
Train Case:  59 | Input/Output: [(-49 35 -14 -98) -98]
Train Case:  60 | Input/Output: [(-79 42 93 91) -79]
Train Case:  61 | Input/Output: [(-61 24 41 32) -61]
Train Case:  62 | Input/Output: [(-5 -57 -99 -98) -99]
Train Case:  63 | Input/Output: [(-98 22 -81 35) -98]
Train Case:  64 | Input/Output: [(72 33 -68 80) -68]
Train Case:  65 | Input/Output: [(-36 6 -26 83) -36]
Train Case:  66 | Input/Output: [(81 -84 -1 12) -84]
Train Case:  67 | Input/Output: [(-87 95 -68 -3) -87]
Train Case:  68 | Input/Output: [(-21 -90 4 59) -90]
Train Case:  69 | Input/Output: [(50 -75 0 53) -75]
Train Case:  70 | Input/Output: [(30 13 -9 -36) -36]
Train Case:  71 | Input/Output: [(-84 99 85 -21) -84]
Train Case:  72 | Input/Output: [(79 19 45 -78) -78]
Train Case:  73 | Input/Output: [(42 96 71 79) 42]
Train Case:  74 | Input/Output: [(29 54 -44 -2) -44]
Train Case:  75 | Input/Output: [(83 98 -4 100) -4]
Train Case:  76 | Input/Output: [(13 -4 31 -52) -52]
Train Case:  77 | Input/Output: [(29 44 -35 -89) -89]
Train Case:  78 | Input/Output: [(-87 -75 -14 69) -87]
Train Case:  79 | Input/Output: [(36 -9 8 95) -9]
Train Case:  80 | Input/Output: [(-87 -6 59 -12) -87]
Train Case:  81 | Input/Output: [(-84 -36 -76 51) -84]
Train Case:  82 | Input/Output: [(54 47 48 74) 47]
Train Case:  83 | Input/Output: [(-85 -47 72 26) -85]
Train Case:  84 | Input/Output: [(24 38 29 -84) -84]
Train Case:  85 | Input/Output: [(75 71 -28 -68) -68]
Train Case:  86 | Input/Output: [(-20 50 -61 64) -61]
Train Case:  87 | Input/Output: [(27 21 84 7) 7]
Train Case:  88 | Input/Output: [(12 -44 81 -34) -44]
Train Case:  89 | Input/Output: [(18 40 -51 -38) -51]
Train Case:  90 | Input/Output: [(-91 59 -93 -65) -93]
Train Case:  91 | Input/Output: [(28 -67 88 -94) -94]
Train Case:  92 | Input/Output: [(11 -2 25 94) -2]
Train Case:  93 | Input/Output: [(53 -1 -38 33) -38]
Train Case:  94 | Input/Output: [(73 -81 -8 -90) -90]
Train Case:  95 | Input/Output: [(17 69 -81 61) -81]
Train Case:  96 | Input/Output: [(63 13 -69 7) -69]
Train Case:  97 | Input/Output: [(-18 70 15 71) -18]
Train Case:  98 | Input/Output: [(-25 63 -32 67) -32]
Train Case:  99 | Input/Output: [(44 21 2 -43) -43]
Test Case:   0 | Input/Output: [[68 68 68 -14] -14]
Test Case:   1 | Input/Output: [[-49 -49 -49 -55] -55]
Test Case:   2 | Input/Output: [[75 75 75 -18] -18]
Test Case:   3 | Input/Output: [[54 -45 -45 -45] -45]
Test Case:   4 | Input/Output: [[-43 -96 -43 -43] -96]
Test Case:   5 | Input/Output: [[90 90 90 -70] -70]
Test Case:   6 | Input/Output: [[-71 -85 -85 -85] -85]
Test Case:   7 | Input/Output: [[13 76 76 76] 13]
Test Case:   8 | Input/Output: [[-93 -93 -93 9] -93]
Test Case:   9 | Input/Output: [[10 19 10 10] 10]
Test Case:  10 | Input/Output: [[90 90 90 98] 90]
Test Case:  11 | Input/Output: [[-94 -94 -94 18] -94]
Test Case:  12 | Input/Output: [[-18 -18 -18 -45] -45]
Test Case:  13 | Input/Output: [[-72 -59 -72 -72] -72]
Test Case:  14 | Input/Output: [[-54 -59 -54 -54] -59]
Test Case:  15 | Input/Output: [[-96 43 43 43] -96]
Test Case:  16 | Input/Output: [[-80 48 48 48] -80]
Test Case:  17 | Input/Output: [[45 9 9 9] 9]
Test Case:  18 | Input/Output: [[-17 -17 33 -17] -17]
Test Case:  19 | Input/Output: [[-31 -31 -31 -31] -31]
Test Case:  20 | Input/Output: [[26 -26 26 26] -26]
Test Case:  21 | Input/Output: [[89 -4 -4 -4] -4]
Test Case:  22 | Input/Output: [[-69 -69 -69 -35] -69]
Test Case:  23 | Input/Output: [[-72 -72 -72 83] -72]
Test Case:  24 | Input/Output: [[-59 93 93 93] -59]
Test Case:  25 | Input/Output: [[30 -99 30 30] -99]
Test Case:  26 | Input/Output: [[-52 -52 -5 -52] -52]
Test Case:  27 | Input/Output: [[36 36 36 -16] -16]
Test Case:  28 | Input/Output: [[20 20 20 4] 4]
Test Case:  29 | Input/Output: [[54 4 4 4] 4]
Test Case:  30 | Input/Output: [[-8 -8 77 -8] -8]
Test Case:  31 | Input/Output: [[27 27 79 27] 27]
Test Case:  32 | Input/Output: [[-19 -4 -4 -4] -19]
Test Case:  33 | Input/Output: [[61 -2 61 61] -2]
Test Case:  34 | Input/Output: [[47 47 -48 47] -48]
Test Case:  35 | Input/Output: [[-83 -52 -52 -52] -83]
Test Case:  36 | Input/Output: [[-76 -76 -76 -77] -77]
Test Case:  37 | Input/Output: [[43 43 43 34] 34]
Test Case:  38 | Input/Output: [[-30 -28 -28 -28] -30]
Test Case:  39 | Input/Output: [[75 75 75 -7] -7]
Test Case:  40 | Input/Output: [[-30 38 38 38] -30]
Test Case:  41 | Input/Output: [[36 36 -41 36] -41]
Test Case:  42 | Input/Output: [[-23 -69 -69 -69] -69]
Test Case:  43 | Input/Output: [[-33 74 74 74] -33]
Test Case:  44 | Input/Output: [[62 62 92 62] 62]
Test Case:  45 | Input/Output: [[9 72 9 9] 9]
Test Case:  46 | Input/Output: [[5 5 5 39] 5]
Test Case:  47 | Input/Output: [[-32 -32 -80 -32] -80]
Test Case:  48 | Input/Output: [[84 84 -5 84] -5]
Test Case:  49 | Input/Output: [[58 9 9 9] 9]
Test Case:  50 | Input/Output: [[63 -48 -48 -48] -48]
Test Case:  51 | Input/Output: [[-75 -75 -75 26] -75]
Test Case:  52 | Input/Output: [[98 84 98 98] 84]
Test Case:  53 | Input/Output: [[-23 30 30 30] -23]
Test Case:  54 | Input/Output: [[78 98 78 78] 78]
Test Case:  55 | Input/Output: [[34 34 34 23] 23]
Test Case:  56 | Input/Output: [[-37 -99 -37 -37] -99]
Test Case:  57 | Input/Output: [[-12 76 -12 -12] -12]
Test Case:  58 | Input/Output: [[91 -22 91 91] -22]
Test Case:  59 | Input/Output: [[82 4 82 82] 4]
Test Case:  60 | Input/Output: [[83 83 83 87] 83]
Test Case:  61 | Input/Output: [[9 54 54 54] 9]
Test Case:  62 | Input/Output: [[-26 -18 -26 -26] -26]
Test Case:  63 | Input/Output: [[81 81 58 81] 58]
Test Case:  64 | Input/Output: [[-33 -70 -33 -33] -70]
Test Case:  65 | Input/Output: [[73 -91 -91 -91] -91]
Test Case:  66 | Input/Output: [[92 -14 92 92] -14]
Test Case:  67 | Input/Output: [[-47 -34 -47 -47] -47]
Test Case:  68 | Input/Output: [[-21 66 66 66] -21]
Test Case:  69 | Input/Output: [[73 73 -46 73] -46]
Test Case:  70 | Input/Output: [[41 -8 -8 -8] -8]
Test Case:  71 | Input/Output: [[19 19 19 18] 18]
Test Case:  72 | Input/Output: [[47 47 67 47] 47]
Test Case:  73 | Input/Output: [[77 77 -11 77] -11]
Test Case:  74 | Input/Output: [[45 -75 45 45] -75]
Test Case:  75 | Input/Output: [[7 70 7 7] 7]
Test Case:  76 | Input/Output: [[-94 -94 -94 -65] -94]
Test Case:  77 | Input/Output: [[37 37 97 37] 37]
Test Case:  78 | Input/Output: [[30 54 54 54] 30]
Test Case:  79 | Input/Output: [[-38 45 45 45] -38]
Test Case:  80 | Input/Output: [[-19 96 -19 -19] -19]
Test Case:  81 | Input/Output: [[12 12 -59 12] -59]
Test Case:  82 | Input/Output: [[-25 -25 -19 -25] -25]
Test Case:  83 | Input/Output: [[-83 -52 -52 -52] -83]
Test Case:  84 | Input/Output: [[-49 -49 -49 -45] -49]
Test Case:  85 | Input/Output: [[75 75 75 50] 50]
Test Case:  86 | Input/Output: [[74 74 -85 74] -85]
Test Case:  87 | Input/Output: [[18 18 18 -24] -24]
Test Case:  88 | Input/Output: [[-35 -52 -52 -52] -52]
Test Case:  89 | Input/Output: [[-21 -21 62 -21] -21]
Test Case:  90 | Input/Output: [[81 -72 81 81] -72]
Test Case:  91 | Input/Output: [[-58 -28 -58 -58] -58]
Test Case:  92 | Input/Output: [[-77 8 8 8] -77]
Test Case:  93 | Input/Output: [[77 -49 77 77] -49]
Test Case:  94 | Input/Output: [[-57 -1 -57 -57] -57]
Test Case:  95 | Input/Output: [[81 88 88 88] 81]
Test Case:  96 | Input/Output: [[-100 69 -100 -100] -100]
Test Case:  97 | Input/Output: [[4 4 -98 4] -98]
Test Case:  98 | Input/Output: [[31 31 91 31] 31]
Test Case:  99 | Input/Output: [[-83 -24 -24 -24] -83]
Test Case: 100 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 101 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 102 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 103 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 104 | Input/Output: [(67 67 67 67) 67]
Test Case: 105 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 106 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 107 | Input/Output: [(71 71 71 71) 71]
Test Case: 108 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 109 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 110 | Input/Output: [(10 10 10 10) 10]
Test Case: 111 | Input/Output: [(61 61 61 61) 61]
Test Case: 112 | Input/Output: [(60 60 60 60) 60]
Test Case: 113 | Input/Output: [(43 43 43 43) 43]
Test Case: 114 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 115 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 116 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 117 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 118 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 119 | Input/Output: [(28 28 28 28) 28]
Test Case: 120 | Input/Output: [(22 22 22 22) 22]
Test Case: 121 | Input/Output: [(54 54 54 54) 54]
Test Case: 122 | Input/Output: [(25 25 25 25) 25]
Test Case: 123 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 124 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 125 | Input/Output: [(92 92 92 92) 92]
Test Case: 126 | Input/Output: [(98 98 98 98) 98]
Test Case: 127 | Input/Output: [(39 39 39 39) 39]
Test Case: 128 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 129 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 130 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 131 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 132 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 133 | Input/Output: [(25 25 25 25) 25]
Test Case: 134 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 135 | Input/Output: [(18 18 18 18) 18]
Test Case: 136 | Input/Output: [(49 49 49 49) 49]
Test Case: 137 | Input/Output: [(46 46 46 46) 46]
Test Case: 138 | Input/Output: [(79 79 79 79) 79]
Test Case: 139 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 140 | Input/Output: [(82 82 82 82) 82]
Test Case: 141 | Input/Output: [(85 85 85 85) 85]
Test Case: 142 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 143 | Input/Output: [(23 23 23 23) 23]
Test Case: 144 | Input/Output: [(16 16 16 16) 16]
Test Case: 145 | Input/Output: [(95 95 95 95) 95]
Test Case: 146 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 147 | Input/Output: [(62 62 62 62) 62]
Test Case: 148 | Input/Output: [(35 35 35 35) 35]
Test Case: 149 | Input/Output: [(93 93 93 93) 93]
Test Case: 150 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 151 | Input/Output: [(34 34 34 34) 34]
Test Case: 152 | Input/Output: [(9 9 9 9) 9]
Test Case: 153 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 154 | Input/Output: [(12 12 12 12) 12]
Test Case: 155 | Input/Output: [(60 60 60 60) 60]
Test Case: 156 | Input/Output: [(38 38 38 38) 38]
Test Case: 157 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 158 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 159 | Input/Output: [(95 95 95 95) 95]
Test Case: 160 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 161 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 162 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 163 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 164 | Input/Output: [(53 53 53 53) 53]
Test Case: 165 | Input/Output: [(35 35 35 35) 35]
Test Case: 166 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 167 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 168 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 169 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 170 | Input/Output: [(53 53 53 53) 53]
Test Case: 171 | Input/Output: [(53 53 53 53) 53]
Test Case: 172 | Input/Output: [(91 91 91 91) 91]
Test Case: 173 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 174 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 175 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 176 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 177 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 178 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 179 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 180 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 181 | Input/Output: [(98 98 98 98) 98]
Test Case: 182 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 183 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 184 | Input/Output: [(87 87 87 87) 87]
Test Case: 185 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 186 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 187 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 188 | Input/Output: [(29 29 29 29) 29]
Test Case: 189 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 190 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 191 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 192 | Input/Output: [(17 17 17 17) 17]
Test Case: 193 | Input/Output: [(23 23 23 23) 23]
Test Case: 194 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 195 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 196 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 197 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 198 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 199 | Input/Output: [(39 39 39 39) 39]
Test Case: 200 | Input/Output: [(70 92 89 83) 70]
Test Case: 201 | Input/Output: [(15 77 0 63) 0]
Test Case: 202 | Input/Output: [(93 77 76 41) 41]
Test Case: 203 | Input/Output: [(29 28 4 32) 4]
Test Case: 204 | Input/Output: [(17 46 17 21) 17]
Test Case: 205 | Input/Output: [(49 19 60 68) 19]
Test Case: 206 | Input/Output: [(19 53 35 60) 19]
Test Case: 207 | Input/Output: [(46 39 1 16) 1]
Test Case: 208 | Input/Output: [(12 61 8 92) 8]
Test Case: 209 | Input/Output: [(31 7 48 34) 7]
Test Case: 210 | Input/Output: [(20 22 74 92) 20]
Test Case: 211 | Input/Output: [(92 76 54 51) 51]
Test Case: 212 | Input/Output: [(100 13 34 33) 13]
Test Case: 213 | Input/Output: [(16 56 100 85) 16]
Test Case: 214 | Input/Output: [(50 74 46 92) 46]
Test Case: 215 | Input/Output: [(49 50 52 87) 49]
Test Case: 216 | Input/Output: [(74 12 90 3) 3]
Test Case: 217 | Input/Output: [(8 7 93 70) 7]
Test Case: 218 | Input/Output: [(95 86 12 45) 12]
Test Case: 219 | Input/Output: [(2 61 63 66) 2]
Test Case: 220 | Input/Output: [(7 34 21 9) 7]
Test Case: 221 | Input/Output: [(31 81 64 62) 31]
Test Case: 222 | Input/Output: [(19 7 94 29) 7]
Test Case: 223 | Input/Output: [(45 32 49 100) 32]
Test Case: 224 | Input/Output: [(28 70 18 26) 18]
Test Case: 225 | Input/Output: [(66 63 51 62) 51]
Test Case: 226 | Input/Output: [(4 93 27 65) 4]
Test Case: 227 | Input/Output: [(35 26 32 86) 26]
Test Case: 228 | Input/Output: [(86 40 93 50) 40]
Test Case: 229 | Input/Output: [(84 55 54 15) 15]
Test Case: 230 | Input/Output: [(24 34 26 50) 24]
Test Case: 231 | Input/Output: [(87 99 74 37) 37]
Test Case: 232 | Input/Output: [(100 15 42 31) 15]
Test Case: 233 | Input/Output: [(69 82 91 15) 15]
Test Case: 234 | Input/Output: [(18 50 80 50) 18]
Test Case: 235 | Input/Output: [(81 86 48 70) 48]
Test Case: 236 | Input/Output: [(48 72 46 28) 28]
Test Case: 237 | Input/Output: [(91 22 70 77) 22]
Test Case: 238 | Input/Output: [(36 97 53 9) 9]
Test Case: 239 | Input/Output: [(3 84 3 62) 3]
Test Case: 240 | Input/Output: [(58 75 68 10) 10]
Test Case: 241 | Input/Output: [(86 93 1 40) 1]
Test Case: 242 | Input/Output: [(36 59 70 16) 16]
Test Case: 243 | Input/Output: [(80 14 27 27) 14]
Test Case: 244 | Input/Output: [(86 94 23 25) 23]
Test Case: 245 | Input/Output: [(41 6 27 77) 6]
Test Case: 246 | Input/Output: [(3 71 66 67) 3]
Test Case: 247 | Input/Output: [(37 23 34 100) 23]
Test Case: 248 | Input/Output: [(9 85 12 14) 9]
Test Case: 249 | Input/Output: [(3 58 56 51) 3]
Test Case: 250 | Input/Output: [(20 49 49 23) 20]
Test Case: 251 | Input/Output: [(43 33 57 54) 33]
Test Case: 252 | Input/Output: [(91 73 57 99) 57]
Test Case: 253 | Input/Output: [(70 12 78 77) 12]
Test Case: 254 | Input/Output: [(57 42 46 67) 42]
Test Case: 255 | Input/Output: [(48 1 20 71) 1]
Test Case: 256 | Input/Output: [(25 87 68 58) 25]
Test Case: 257 | Input/Output: [(70 25 53 93) 25]
Test Case: 258 | Input/Output: [(68 61 20 38) 20]
Test Case: 259 | Input/Output: [(99 69 95 85) 69]
Test Case: 260 | Input/Output: [(21 69 20 74) 20]
Test Case: 261 | Input/Output: [(23 61 90 39) 23]
Test Case: 262 | Input/Output: [(80 66 52 39) 39]
Test Case: 263 | Input/Output: [(91 24 61 25) 24]
Test Case: 264 | Input/Output: [(75 38 38 44) 38]
Test Case: 265 | Input/Output: [(15 68 65 47) 15]
Test Case: 266 | Input/Output: [(14 51 2 76) 2]
Test Case: 267 | Input/Output: [(70 69 90 68) 68]
Test Case: 268 | Input/Output: [(46 91 90 18) 18]
Test Case: 269 | Input/Output: [(33 97 10 49) 10]
Test Case: 270 | Input/Output: [(14 14 26 56) 14]
Test Case: 271 | Input/Output: [(35 75 67 93) 35]
Test Case: 272 | Input/Output: [(70 82 50 49) 49]
Test Case: 273 | Input/Output: [(98 63 26 63) 26]
Test Case: 274 | Input/Output: [(77 58 25 60) 25]
Test Case: 275 | Input/Output: [(48 19 4 4) 4]
Test Case: 276 | Input/Output: [(52 89 78 69) 52]
Test Case: 277 | Input/Output: [(30 67 89 14) 14]
Test Case: 278 | Input/Output: [(59 49 7 76) 7]
Test Case: 279 | Input/Output: [(18 69 52 38) 18]
Test Case: 280 | Input/Output: [(18 73 92 99) 18]
Test Case: 281 | Input/Output: [(72 78 38 46) 38]
Test Case: 282 | Input/Output: [(1 3 85 60) 1]
Test Case: 283 | Input/Output: [(82 87 70 89) 70]
Test Case: 284 | Input/Output: [(36 84 83 20) 20]
Test Case: 285 | Input/Output: [(27 72 97 19) 19]
Test Case: 286 | Input/Output: [(19 47 62 8) 8]
Test Case: 287 | Input/Output: [(62 80 55 90) 55]
Test Case: 288 | Input/Output: [(47 62 63 56) 47]
Test Case: 289 | Input/Output: [(56 85 55 50) 50]
Test Case: 290 | Input/Output: [(41 89 45 64) 41]
Test Case: 291 | Input/Output: [(25 33 15 78) 15]
Test Case: 292 | Input/Output: [(46 48 39 53) 39]
Test Case: 293 | Input/Output: [(53 20 55 90) 20]
Test Case: 294 | Input/Output: [(14 16 35 40) 14]
Test Case: 295 | Input/Output: [(74 37 90 96) 37]
Test Case: 296 | Input/Output: [(28 70 52 42) 28]
Test Case: 297 | Input/Output: [(61 80 4 29) 4]
Test Case: 298 | Input/Output: [(30 44 24 15) 15]
Test Case: 299 | Input/Output: [(22 100 83 5) 5]
Test Case: 300 | Input/Output: [(15 67 80 24) 15]
Test Case: 301 | Input/Output: [(28 100 85 59) 28]
Test Case: 302 | Input/Output: [(4 19 12 27) 4]
Test Case: 303 | Input/Output: [(42 78 72 69) 42]
Test Case: 304 | Input/Output: [(11 14 9 77) 9]
Test Case: 305 | Input/Output: [(82 41 83 14) 14]
Test Case: 306 | Input/Output: [(96 34 19 91) 19]
Test Case: 307 | Input/Output: [(78 11 22 95) 11]
Test Case: 308 | Input/Output: [(75 84 45 29) 29]
Test Case: 309 | Input/Output: [(27 4 7 41) 4]
Test Case: 310 | Input/Output: [(61 85 74 59) 59]
Test Case: 311 | Input/Output: [(11 99 3 25) 3]
Test Case: 312 | Input/Output: [(39 30 97 18) 18]
Test Case: 313 | Input/Output: [(22 83 25 50) 22]
Test Case: 314 | Input/Output: [(88 35 8 37) 8]
Test Case: 315 | Input/Output: [(79 91 67 66) 66]
Test Case: 316 | Input/Output: [(98 38 52 74) 38]
Test Case: 317 | Input/Output: [(84 4 17 47) 4]
Test Case: 318 | Input/Output: [(8 49 52 62) 8]
Test Case: 319 | Input/Output: [(35 36 66 38) 35]
Test Case: 320 | Input/Output: [(40 18 59 85) 18]
Test Case: 321 | Input/Output: [(42 85 75 82) 42]
Test Case: 322 | Input/Output: [(20 95 33 29) 20]
Test Case: 323 | Input/Output: [(87 4 23 44) 4]
Test Case: 324 | Input/Output: [(83 5 75 89) 5]
Test Case: 325 | Input/Output: [(5 80 63 98) 5]
Test Case: 326 | Input/Output: [(81 91 14 30) 14]
Test Case: 327 | Input/Output: [(48 32 13 100) 13]
Test Case: 328 | Input/Output: [(2 9 54 32) 2]
Test Case: 329 | Input/Output: [(1 93 8 53) 1]
Test Case: 330 | Input/Output: [(71 54 53 71) 53]
Test Case: 331 | Input/Output: [(46 95 10 65) 10]
Test Case: 332 | Input/Output: [(49 13 43 96) 13]
Test Case: 333 | Input/Output: [(16 85 99 92) 16]
Test Case: 334 | Input/Output: [(49 73 33 46) 33]
Test Case: 335 | Input/Output: [(56 59 33 71) 33]
Test Case: 336 | Input/Output: [(58 4 73 68) 4]
Test Case: 337 | Input/Output: [(44 75 16 24) 16]
Test Case: 338 | Input/Output: [(61 40 4 79) 4]
Test Case: 339 | Input/Output: [(31 21 31 73) 21]
Test Case: 340 | Input/Output: [(73 14 6 64) 6]
Test Case: 341 | Input/Output: [(1 33 35 15) 1]
Test Case: 342 | Input/Output: [(71 15 77 9) 9]
Test Case: 343 | Input/Output: [(79 73 3 99) 3]
Test Case: 344 | Input/Output: [(42 52 56 40) 40]
Test Case: 345 | Input/Output: [(97 43 72 60) 43]
Test Case: 346 | Input/Output: [(59 71 28 70) 28]
Test Case: 347 | Input/Output: [(55 13 24 63) 13]
Test Case: 348 | Input/Output: [(4 70 28 18) 4]
Test Case: 349 | Input/Output: [(77 68 16 97) 16]
Test Case: 350 | Input/Output: [(7 55 83 63) 7]
Test Case: 351 | Input/Output: [(13 28 56 0) 0]
Test Case: 352 | Input/Output: [(11 68 31 79) 11]
Test Case: 353 | Input/Output: [(43 96 75 10) 10]
Test Case: 354 | Input/Output: [(68 74 3 1) 1]
Test Case: 355 | Input/Output: [(42 13 36 76) 13]
Test Case: 356 | Input/Output: [(66 20 42 27) 20]
Test Case: 357 | Input/Output: [(33 13 14 68) 13]
Test Case: 358 | Input/Output: [(13 12 62 85) 12]
Test Case: 359 | Input/Output: [(94 0 88 47) 0]
Test Case: 360 | Input/Output: [(26 33 8 57) 8]
Test Case: 361 | Input/Output: [(20 2 3 86) 2]
Test Case: 362 | Input/Output: [(90 18 84 56) 18]
Test Case: 363 | Input/Output: [(36 15 76 83) 15]
Test Case: 364 | Input/Output: [(34 72 62 68) 34]
Test Case: 365 | Input/Output: [(33 77 51 33) 33]
Test Case: 366 | Input/Output: [(98 15 39 61) 15]
Test Case: 367 | Input/Output: [(54 65 22 24) 22]
Test Case: 368 | Input/Output: [(71 88 77 66) 66]
Test Case: 369 | Input/Output: [(84 70 56 94) 56]
Test Case: 370 | Input/Output: [(12 43 93 91) 12]
Test Case: 371 | Input/Output: [(85 82 71 80) 71]
Test Case: 372 | Input/Output: [(73 97 24 84) 24]
Test Case: 373 | Input/Output: [(97 85 13 32) 13]
Test Case: 374 | Input/Output: [(30 31 71 97) 30]
Test Case: 375 | Input/Output: [(9 63 19 52) 9]
Test Case: 376 | Input/Output: [(93 36 95 18) 18]
Test Case: 377 | Input/Output: [(84 1 6 18) 1]
Test Case: 378 | Input/Output: [(98 97 92 35) 35]
Test Case: 379 | Input/Output: [(83 82 49 91) 49]
Test Case: 380 | Input/Output: [(56 41 22 76) 22]
Test Case: 381 | Input/Output: [(94 50 34 77) 34]
Test Case: 382 | Input/Output: [(79 65 32 20) 20]
Test Case: 383 | Input/Output: [(22 73 7 26) 7]
Test Case: 384 | Input/Output: [(70 59 11 34) 11]
Test Case: 385 | Input/Output: [(10 42 16 41) 10]
Test Case: 386 | Input/Output: [(9 34 99 93) 9]
Test Case: 387 | Input/Output: [(95 97 59 19) 19]
Test Case: 388 | Input/Output: [(80 89 100 74) 74]
Test Case: 389 | Input/Output: [(11 67 42 42) 11]
Test Case: 390 | Input/Output: [(43 7 11 77) 7]
Test Case: 391 | Input/Output: [(95 70 32 70) 32]
Test Case: 392 | Input/Output: [(75 21 86 45) 21]
Test Case: 393 | Input/Output: [(74 81 28 90) 28]
Test Case: 394 | Input/Output: [(63 34 41 41) 34]
Test Case: 395 | Input/Output: [(69 3 45 76) 3]
Test Case: 396 | Input/Output: [(47 65 88 44) 44]
Test Case: 397 | Input/Output: [(18 19 36 12) 12]
Test Case: 398 | Input/Output: [(60 72 69 4) 4]
Test Case: 399 | Input/Output: [(63 68 61 19) 19]
Test Case: 400 | Input/Output: [(66 -84 5 -44) -84]
Test Case: 401 | Input/Output: [(62 -42 -17 -8) -42]
Test Case: 402 | Input/Output: [(-31 20 -69 48) -69]
Test Case: 403 | Input/Output: [(-32 12 65 -32) -32]
Test Case: 404 | Input/Output: [(-51 23 -84 -57) -84]
Test Case: 405 | Input/Output: [(15 -30 -26 -97) -97]
Test Case: 406 | Input/Output: [(60 70 -24 72) -24]
Test Case: 407 | Input/Output: [(15 56 68 -14) -14]
Test Case: 408 | Input/Output: [(-37 20 21 -74) -74]
Test Case: 409 | Input/Output: [(-98 -37 -21 69) -98]
Test Case: 410 | Input/Output: [(-27 -17 -22 -18) -27]
Test Case: 411 | Input/Output: [(-58 -97 74 -19) -97]
Test Case: 412 | Input/Output: [(-11 -67 18 -53) -67]
Test Case: 413 | Input/Output: [(65 57 38 1) 1]
Test Case: 414 | Input/Output: [(-39 -87 -12 -91) -91]
Test Case: 415 | Input/Output: [(-24 73 77 -2) -24]
Test Case: 416 | Input/Output: [(93 60 -73 29) -73]
Test Case: 417 | Input/Output: [(91 46 38 -91) -91]
Test Case: 418 | Input/Output: [(90 48 88 13) 13]
Test Case: 419 | Input/Output: [(-57 4 -56 -46) -57]
Test Case: 420 | Input/Output: [(53 82 -70 -96) -96]
Test Case: 421 | Input/Output: [(98 59 20 62) 20]
Test Case: 422 | Input/Output: [(79 -15 21 -49) -49]
Test Case: 423 | Input/Output: [(-64 0 -32 -25) -64]
Test Case: 424 | Input/Output: [(40 58 -55 69) -55]
Test Case: 425 | Input/Output: [(-50 80 85 53) -50]
Test Case: 426 | Input/Output: [(-25 70 59 -67) -67]
Test Case: 427 | Input/Output: [(-93 99 -92 67) -93]
Test Case: 428 | Input/Output: [(-20 -81 -8 32) -81]
Test Case: 429 | Input/Output: [(11 71 34 10) 10]
Test Case: 430 | Input/Output: [(-5 -18 -2 -56) -56]
Test Case: 431 | Input/Output: [(-87 76 -80 99) -87]
Test Case: 432 | Input/Output: [(-100 -63 1 -14) -100]
Test Case: 433 | Input/Output: [(73 -32 76 -9) -32]
Test Case: 434 | Input/Output: [(87 26 75 52) 26]
Test Case: 435 | Input/Output: [(11 -62 -62 16) -62]
Test Case: 436 | Input/Output: [(80 -63 24 9) -63]
Test Case: 437 | Input/Output: [(17 -15 -96 -68) -96]
Test Case: 438 | Input/Output: [(0 -92 -48 11) -92]
Test Case: 439 | Input/Output: [(19 -11 -3 -20) -20]
Test Case: 440 | Input/Output: [(-20 76 -63 9) -63]
Test Case: 441 | Input/Output: [(58 92 73 -17) -17]
Test Case: 442 | Input/Output: [(-46 -7 -6 -84) -84]
Test Case: 443 | Input/Output: [(24 -59 -81 89) -81]
Test Case: 444 | Input/Output: [(-41 57 68 18) -41]
Test Case: 445 | Input/Output: [(-84 33 97 -33) -84]
Test Case: 446 | Input/Output: [(-90 -50 60 63) -90]
Test Case: 447 | Input/Output: [(-58 29 24 -69) -69]
Test Case: 448 | Input/Output: [(-78 53 55 -100) -100]
Test Case: 449 | Input/Output: [(-21 57 -37 -58) -58]
Test Case: 450 | Input/Output: [(-36 -15 12 -73) -73]
Test Case: 451 | Input/Output: [(1 15 65 97) 1]
Test Case: 452 | Input/Output: [(70 -97 -23 94) -97]
Test Case: 453 | Input/Output: [(-80 -22 64 -72) -80]
Test Case: 454 | Input/Output: [(-38 7 79 90) -38]
Test Case: 455 | Input/Output: [(72 -49 -60 -52) -60]
Test Case: 456 | Input/Output: [(55 -72 -89 -28) -89]
Test Case: 457 | Input/Output: [(-86 -97 70 22) -97]
Test Case: 458 | Input/Output: [(89 90 -26 81) -26]
Test Case: 459 | Input/Output: [(-50 3 -41 83) -50]
Test Case: 460 | Input/Output: [(77 88 -69 -54) -69]
Test Case: 461 | Input/Output: [(-75 -61 -79 83) -79]
Test Case: 462 | Input/Output: [(-68 -55 59 -2) -68]
Test Case: 463 | Input/Output: [(25 35 29 5) 5]
Test Case: 464 | Input/Output: [(87 -87 91 28) -87]
Test Case: 465 | Input/Output: [(94 -69 66 -66) -69]
Test Case: 466 | Input/Output: [(81 -98 57 -31) -98]
Test Case: 467 | Input/Output: [(84 65 24 -32) -32]
Test Case: 468 | Input/Output: [(-25 -83 44 -69) -83]
Test Case: 469 | Input/Output: [(22 66 -42 85) -42]
Test Case: 470 | Input/Output: [(-59 -48 10 -41) -59]
Test Case: 471 | Input/Output: [(-74 64 6 -30) -74]
Test Case: 472 | Input/Output: [(-26 -28 -81 -24) -81]
Test Case: 473 | Input/Output: [(-74 -91 62 87) -91]
Test Case: 474 | Input/Output: [(-29 6 -24 -63) -63]
Test Case: 475 | Input/Output: [(77 55 9 -73) -73]
Test Case: 476 | Input/Output: [(97 -69 40 -13) -69]
Test Case: 477 | Input/Output: [(94 -86 95 -31) -86]
Test Case: 478 | Input/Output: [(-88 -40 75 -56) -88]
Test Case: 479 | Input/Output: [(32 -81 -78 45) -81]
Test Case: 480 | Input/Output: [(-91 -40 -73 44) -91]
Test Case: 481 | Input/Output: [(-80 6 71 14) -80]
Test Case: 482 | Input/Output: [(-2 33 -11 -49) -49]
Test Case: 483 | Input/Output: [(17 -1 -7 -48) -48]
Test Case: 484 | Input/Output: [(-94 -26 -32 -9) -94]
Test Case: 485 | Input/Output: [(23 -74 39 68) -74]
Test Case: 486 | Input/Output: [(-34 -52 30 97) -52]
Test Case: 487 | Input/Output: [(-61 73 -77 82) -77]
Test Case: 488 | Input/Output: [(98 0 35 28) 0]
Test Case: 489 | Input/Output: [(65 61 -96 78) -96]
Test Case: 490 | Input/Output: [(-50 -24 6 -64) -64]
Test Case: 491 | Input/Output: [(-36 -53 -51 64) -53]
Test Case: 492 | Input/Output: [(-35 -89 51 7) -89]
Test Case: 493 | Input/Output: [(75 -34 -23 -26) -34]
Test Case: 494 | Input/Output: [(29 69 4 13) 4]
Test Case: 495 | Input/Output: [(-25 -75 -56 -92) -92]
Test Case: 496 | Input/Output: [(76 -94 69 -42) -94]
Test Case: 497 | Input/Output: [(73 35 -53 -64) -64]
Test Case: 498 | Input/Output: [(89 -22 12 98) -22]
Test Case: 499 | Input/Output: [(-31 42 -19 51) -31]
Test Case: 500 | Input/Output: [(68 63 14 58) 14]
Test Case: 501 | Input/Output: [(-48 38 -34 69) -48]
Test Case: 502 | Input/Output: [(66 95 1 20) 1]
Test Case: 503 | Input/Output: [(-62 -11 -33 96) -62]
Test Case: 504 | Input/Output: [(94 -91 1 -48) -91]
Test Case: 505 | Input/Output: [(79 31 91 15) 15]
Test Case: 506 | Input/Output: [(-79 10 92 89) -79]
Test Case: 507 | Input/Output: [(-71 100 -55 80) -71]
Test Case: 508 | Input/Output: [(45 58 -88 -64) -88]
Test Case: 509 | Input/Output: [(-46 94 -33 -94) -94]
Test Case: 510 | Input/Output: [(47 62 84 -60) -60]
Test Case: 511 | Input/Output: [(25 -82 22 82) -82]
Test Case: 512 | Input/Output: [(10 -96 64 16) -96]
Test Case: 513 | Input/Output: [(21 -8 72 -58) -58]
Test Case: 514 | Input/Output: [(76 -52 39 34) -52]
Test Case: 515 | Input/Output: [(-63 -72 -94 -91) -94]
Test Case: 516 | Input/Output: [(78 -84 47 49) -84]
Test Case: 517 | Input/Output: [(69 63 -96 -64) -96]
Test Case: 518 | Input/Output: [(-83 -44 57 -61) -83]
Test Case: 519 | Input/Output: [(41 -23 0 71) -23]
Test Case: 520 | Input/Output: [(3 -7 -99 -69) -99]
Test Case: 521 | Input/Output: [(7 -39 -74 35) -74]
Test Case: 522 | Input/Output: [(89 -77 -36 -11) -77]
Test Case: 523 | Input/Output: [(-9 39 -3 54) -9]
Test Case: 524 | Input/Output: [(25 -33 -13 51) -33]
Test Case: 525 | Input/Output: [(78 -4 48 8) -4]
Test Case: 526 | Input/Output: [(81 71 -85 78) -85]
Test Case: 527 | Input/Output: [(-48 46 -84 2) -84]
Test Case: 528 | Input/Output: [(-87 -65 -22 -97) -97]
Test Case: 529 | Input/Output: [(15 28 26 94) 15]
Test Case: 530 | Input/Output: [(-57 74 -15 -55) -57]
Test Case: 531 | Input/Output: [(69 -99 -7 58) -99]
Test Case: 532 | Input/Output: [(-19 64 -26 -12) -26]
Test Case: 533 | Input/Output: [(-18 1 51 -71) -71]
Test Case: 534 | Input/Output: [(-70 -99 -46 56) -99]
Test Case: 535 | Input/Output: [(5 -6 67 50) -6]
Test Case: 536 | Input/Output: [(70 23 -73 100) -73]
Test Case: 537 | Input/Output: [(-43 -84 -71 42) -84]
Test Case: 538 | Input/Output: [(98 48 92 30) 30]
Test Case: 539 | Input/Output: [(-91 -49 -19 89) -91]
Test Case: 540 | Input/Output: [(-95 -51 66 72) -95]
Test Case: 541 | Input/Output: [(-49 -77 -24 -14) -77]
Test Case: 542 | Input/Output: [(34 -94 -15 9) -94]
Test Case: 543 | Input/Output: [(-46 83 -92 94) -92]
Test Case: 544 | Input/Output: [(-47 87 -33 -42) -47]
Test Case: 545 | Input/Output: [(-84 -74 3 -27) -84]
Test Case: 546 | Input/Output: [(68 -61 78 10) -61]
Test Case: 547 | Input/Output: [(17 -55 -58 67) -58]
Test Case: 548 | Input/Output: [(-20 44 51 91) -20]
Test Case: 549 | Input/Output: [(15 53 88 20) 15]
Test Case: 550 | Input/Output: [(50 92 -41 -34) -41]
Test Case: 551 | Input/Output: [(30 -5 -22 38) -22]
Test Case: 552 | Input/Output: [(-52 63 11 -44) -52]
Test Case: 553 | Input/Output: [(-86 80 52 -79) -86]
Test Case: 554 | Input/Output: [(-31 -16 -77 -4) -77]
Test Case: 555 | Input/Output: [(7 -99 -86 74) -99]
Test Case: 556 | Input/Output: [(5 -72 52 -93) -93]
Test Case: 557 | Input/Output: [(-25 -8 -10 60) -25]
Test Case: 558 | Input/Output: [(87 -62 -93 88) -93]
Test Case: 559 | Input/Output: [(54 -48 -88 -83) -88]
Test Case: 560 | Input/Output: [(61 -7 -59 77) -59]
Test Case: 561 | Input/Output: [(-48 -52 60 -18) -52]
Test Case: 562 | Input/Output: [(68 48 -5 67) -5]
Test Case: 563 | Input/Output: [(-51 71 -34 48) -51]
Test Case: 564 | Input/Output: [(61 13 -37 -2) -37]
Test Case: 565 | Input/Output: [(-32 -92 -51 33) -92]
Test Case: 566 | Input/Output: [(41 48 50 -77) -77]
Test Case: 567 | Input/Output: [(35 -27 -68 -76) -76]
Test Case: 568 | Input/Output: [(-69 -2 -96 -77) -96]
Test Case: 569 | Input/Output: [(-33 -59 -71 -16) -71]
Test Case: 570 | Input/Output: [(47 -2 0 -77) -77]
Test Case: 571 | Input/Output: [(57 73 12 -78) -78]
Test Case: 572 | Input/Output: [(11 -39 97 -13) -39]
Test Case: 573 | Input/Output: [(38 -73 92 32) -73]
Test Case: 574 | Input/Output: [(77 -91 -9 -58) -91]
Test Case: 575 | Input/Output: [(-97 -2 -9 -75) -97]
Test Case: 576 | Input/Output: [(55 -84 17 -11) -84]
Test Case: 577 | Input/Output: [(-96 -11 92 74) -96]
Test Case: 578 | Input/Output: [(-98 6 -60 -79) -98]
Test Case: 579 | Input/Output: [(22 79 59 93) 22]
Test Case: 580 | Input/Output: [(-53 -59 73 -32) -59]
Test Case: 581 | Input/Output: [(-30 3 28 79) -30]
Test Case: 582 | Input/Output: [(42 7 53 -31) -31]
Test Case: 583 | Input/Output: [(-54 -34 -57 -67) -67]
Test Case: 584 | Input/Output: [(-19 -75 19 -42) -75]
Test Case: 585 | Input/Output: [(-2 77 39 13) -2]
Test Case: 586 | Input/Output: [(-62 -47 13 -98) -98]
Test Case: 587 | Input/Output: [(-12 33 14 -10) -12]
Test Case: 588 | Input/Output: [(87 36 -71 -84) -84]
Test Case: 589 | Input/Output: [(99 60 48 -43) -43]
Test Case: 590 | Input/Output: [(55 30 31 71) 30]
Test Case: 591 | Input/Output: [(-29 34 94 99) -29]
Test Case: 592 | Input/Output: [(69 -95 89 38) -95]
Test Case: 593 | Input/Output: [(-44 31 79 96) -44]
Test Case: 594 | Input/Output: [(65 -77 -43 2) -77]
Test Case: 595 | Input/Output: [(-26 -50 -20 73) -50]
Test Case: 596 | Input/Output: [(-96 -54 -61 -40) -96]
Test Case: 597 | Input/Output: [(58 65 76 -66) -66]
Test Case: 598 | Input/Output: [(6 -83 -68 9) -83]
Test Case: 599 | Input/Output: [(34 73 87 99) 34]
Test Case: 600 | Input/Output: [(-27 76 21 29) -27]
Test Case: 601 | Input/Output: [(98 -36 -68 -75) -75]
Test Case: 602 | Input/Output: [(-8 -74 58 26) -74]
Test Case: 603 | Input/Output: [(8 13 -34 59) -34]
Test Case: 604 | Input/Output: [(91 13 -28 -83) -83]
Test Case: 605 | Input/Output: [(-54 -21 -10 -94) -94]
Test Case: 606 | Input/Output: [(-77 -25 -75 -33) -77]
Test Case: 607 | Input/Output: [(1 92 -82 38) -82]
Test Case: 608 | Input/Output: [(64 -60 -84 48) -84]
Test Case: 609 | Input/Output: [(-53 -84 -31 43) -84]
Test Case: 610 | Input/Output: [(57 -4 -96 -85) -96]
Test Case: 611 | Input/Output: [(-52 46 -92 99) -92]
Test Case: 612 | Input/Output: [(46 -86 86 -75) -86]
Test Case: 613 | Input/Output: [(82 84 89 -87) -87]
Test Case: 614 | Input/Output: [(-11 32 91 -41) -41]
Test Case: 615 | Input/Output: [(-91 97 64 74) -91]
Test Case: 616 | Input/Output: [(40 60 -24 -7) -24]
Test Case: 617 | Input/Output: [(11 -19 90 -86) -86]
Test Case: 618 | Input/Output: [(78 -51 6 48) -51]
Test Case: 619 | Input/Output: [(38 -51 94 62) -51]
Test Case: 620 | Input/Output: [(-12 -53 -89 -59) -89]
Test Case: 621 | Input/Output: [(93 6 -25 85) -25]
Test Case: 622 | Input/Output: [(-77 67 33 18) -77]
Test Case: 623 | Input/Output: [(80 -85 -2 59) -85]
Test Case: 624 | Input/Output: [(95 -93 12 28) -93]
Test Case: 625 | Input/Output: [(38 -58 -20 9) -58]
Test Case: 626 | Input/Output: [(22 88 -38 40) -38]
Test Case: 627 | Input/Output: [(-35 71 82 12) -35]
Test Case: 628 | Input/Output: [(-61 -21 15 92) -61]
Test Case: 629 | Input/Output: [(-58 -65 36 -24) -65]
Test Case: 630 | Input/Output: [(-86 8 8 51) -86]
Test Case: 631 | Input/Output: [(-53 -90 -48 74) -90]
Test Case: 632 | Input/Output: [(15 89 67 -20) -20]
Test Case: 633 | Input/Output: [(-91 7 0 31) -91]
Test Case: 634 | Input/Output: [(-63 32 -50 6) -63]
Test Case: 635 | Input/Output: [(44 -61 -79 -87) -87]
Test Case: 636 | Input/Output: [(12 -4 -16 86) -16]
Test Case: 637 | Input/Output: [(-11 -79 -6 -34) -79]
Test Case: 638 | Input/Output: [(-72 32 -85 12) -85]
Test Case: 639 | Input/Output: [(4 40 10 19) 4]
Test Case: 640 | Input/Output: [(11 8 73 8) 8]
Test Case: 641 | Input/Output: [(62 -73 -32 14) -73]
Test Case: 642 | Input/Output: [(-33 -96 -77 100) -96]
Test Case: 643 | Input/Output: [(26 43 72 -31) -31]
Test Case: 644 | Input/Output: [(-54 22 -38 56) -54]
Test Case: 645 | Input/Output: [(-13 -54 2 -54) -54]
Test Case: 646 | Input/Output: [(12 12 -70 -27) -70]
Test Case: 647 | Input/Output: [(-44 69 36 33) -44]
Test Case: 648 | Input/Output: [(-63 62 45 -98) -98]
Test Case: 649 | Input/Output: [(18 -94 -4 -58) -94]
Test Case: 650 | Input/Output: [(-83 -50 -14 -85) -85]
Test Case: 651 | Input/Output: [(-57 -98 -95 40) -98]
Test Case: 652 | Input/Output: [(74 -89 -92 16) -92]
Test Case: 653 | Input/Output: [(-87 23 15 81) -87]
Test Case: 654 | Input/Output: [(36 -77 17 81) -77]
Test Case: 655 | Input/Output: [(-33 -24 15 83) -33]
Test Case: 656 | Input/Output: [(-82 -98 15 -63) -98]
Test Case: 657 | Input/Output: [(-28 -28 89 -86) -86]
Test Case: 658 | Input/Output: [(0 -66 61 7) -66]
Test Case: 659 | Input/Output: [(-64 -83 87 32) -83]
Test Case: 660 | Input/Output: [(56 -93 -17 -21) -93]
Test Case: 661 | Input/Output: [(-46 40 67 52) -46]
Test Case: 662 | Input/Output: [(-70 -34 -43 70) -70]
Test Case: 663 | Input/Output: [(86 -8 3 77) -8]
Test Case: 664 | Input/Output: [(22 -42 88 72) -42]
Test Case: 665 | Input/Output: [(-63 94 -61 100) -63]
Test Case: 666 | Input/Output: [(90 100 52 91) 52]
Test Case: 667 | Input/Output: [(-92 82 -94 21) -94]
Test Case: 668 | Input/Output: [(23 -22 10 95) -22]
Test Case: 669 | Input/Output: [(-3 69 14 81) -3]
Test Case: 670 | Input/Output: [(60 -58 -92 97) -92]
Test Case: 671 | Input/Output: [(-27 -45 15 -12) -45]
Test Case: 672 | Input/Output: [(93 -69 -84 -83) -84]
Test Case: 673 | Input/Output: [(-72 -5 -37 -78) -78]
Test Case: 674 | Input/Output: [(-53 26 32 37) -53]
Test Case: 675 | Input/Output: [(92 -32 -66 12) -66]
Test Case: 676 | Input/Output: [(-85 -4 -38 38) -85]
Test Case: 677 | Input/Output: [(86 -14 -40 85) -40]
Test Case: 678 | Input/Output: [(21 98 -80 96) -80]
Test Case: 679 | Input/Output: [(-57 -50 -33 76) -57]
Test Case: 680 | Input/Output: [(27 -41 26 -98) -98]
Test Case: 681 | Input/Output: [(48 90 -14 -12) -14]
Test Case: 682 | Input/Output: [(-35 -6 -78 -6) -78]
Test Case: 683 | Input/Output: [(93 -75 -5 99) -75]
Test Case: 684 | Input/Output: [(-65 -13 -7 73) -65]
Test Case: 685 | Input/Output: [(70 -35 -82 55) -82]
Test Case: 686 | Input/Output: [(-76 -99 54 72) -99]
Test Case: 687 | Input/Output: [(41 28 -33 43) -33]
Test Case: 688 | Input/Output: [(41 -50 7 -14) -50]
Test Case: 689 | Input/Output: [(-1 0 -88 26) -88]
Test Case: 690 | Input/Output: [(51 -5 44 76) -5]
Test Case: 691 | Input/Output: [(25 -52 -8 34) -52]
Test Case: 692 | Input/Output: [(-61 -71 -5 8) -71]
Test Case: 693 | Input/Output: [(-64 -58 96 -11) -64]
Test Case: 694 | Input/Output: [(-8 46 -81 -94) -94]
Test Case: 695 | Input/Output: [(10 93 -55 -28) -55]
Test Case: 696 | Input/Output: [(-66 -93 -25 13) -93]
Test Case: 697 | Input/Output: [(-20 -20 -11 40) -20]
Test Case: 698 | Input/Output: [(-5 6 72 19) -5]
Test Case: 699 | Input/Output: [(21 60 -14 -59) -59]
Test Case: 700 | Input/Output: [(-20 -78 8 -66) -78]
Test Case: 701 | Input/Output: [(6 -2 -62 13) -62]
Test Case: 702 | Input/Output: [(-39 26 -27 -81) -81]
Test Case: 703 | Input/Output: [(89 2 77 24) 2]
Test Case: 704 | Input/Output: [(-10 -92 17 63) -92]
Test Case: 705 | Input/Output: [(-77 -100 -53 90) -100]
Test Case: 706 | Input/Output: [(72 53 21 89) 21]
Test Case: 707 | Input/Output: [(-80 91 96 52) -80]
Test Case: 708 | Input/Output: [(-100 -34 -24 -63) -100]
Test Case: 709 | Input/Output: [(93 74 100 -37) -37]
Test Case: 710 | Input/Output: [(57 -50 -72 -68) -72]
Test Case: 711 | Input/Output: [(16 -60 9 -78) -78]
Test Case: 712 | Input/Output: [(-100 63 -92 4) -100]
Test Case: 713 | Input/Output: [(36 -50 50 39) -50]
Test Case: 714 | Input/Output: [(0 46 54 -2) -2]
Test Case: 715 | Input/Output: [(39 -39 -26 -1) -39]
Test Case: 716 | Input/Output: [(9 23 77 34) 9]
Test Case: 717 | Input/Output: [(-95 53 58 -29) -95]
Test Case: 718 | Input/Output: [(28 -78 -83 -85) -85]
Test Case: 719 | Input/Output: [(17 -96 -24 6) -96]
Test Case: 720 | Input/Output: [(50 10 49 11) 10]
Test Case: 721 | Input/Output: [(40 -88 -66 -74) -88]
Test Case: 722 | Input/Output: [(-1 29 6 -16) -16]
Test Case: 723 | Input/Output: [(89 -56 -27 20) -56]
Test Case: 724 | Input/Output: [(85 -17 -73 97) -73]
Test Case: 725 | Input/Output: [(6 85 -66 72) -66]
Test Case: 726 | Input/Output: [(-33 -7 -81 77) -81]
Test Case: 727 | Input/Output: [(-42 -40 44 97) -42]
Test Case: 728 | Input/Output: [(66 1 97 -72) -72]
Test Case: 729 | Input/Output: [(-84 66 37 -50) -84]
Test Case: 730 | Input/Output: [(64 81 -85 97) -85]
Test Case: 731 | Input/Output: [(23 -7 80 4) -7]
Test Case: 732 | Input/Output: [(9 44 22 -45) -45]
Test Case: 733 | Input/Output: [(-77 -9 -7 -40) -77]
Test Case: 734 | Input/Output: [(-96 48 -95 33) -96]
Test Case: 735 | Input/Output: [(-67 28 64 42) -67]
Test Case: 736 | Input/Output: [(83 91 -49 -80) -80]
Test Case: 737 | Input/Output: [(-65 99 -53 99) -65]
Test Case: 738 | Input/Output: [(99 92 95 -30) -30]
Test Case: 739 | Input/Output: [(-90 -9 -50 30) -90]
Test Case: 740 | Input/Output: [(75 82 -16 32) -16]
Test Case: 741 | Input/Output: [(95 27 4 17) 4]
Test Case: 742 | Input/Output: [(-24 89 51 -22) -24]
Test Case: 743 | Input/Output: [(54 48 79 64) 48]
Test Case: 744 | Input/Output: [(-41 -80 23 -73) -80]
Test Case: 745 | Input/Output: [(60 50 93 -41) -41]
Test Case: 746 | Input/Output: [(-83 85 62 9) -83]
Test Case: 747 | Input/Output: [(-67 -43 9 56) -67]
Test Case: 748 | Input/Output: [(70 82 35 21) 21]
Test Case: 749 | Input/Output: [(-17 -61 -82 42) -82]
Test Case: 750 | Input/Output: [(-49 70 -21 -66) -66]
Test Case: 751 | Input/Output: [(34 -76 -37 -22) -76]
Test Case: 752 | Input/Output: [(-55 -62 41 -37) -62]
Test Case: 753 | Input/Output: [(-90 -4 -57 -25) -90]
Test Case: 754 | Input/Output: [(-21 -99 88 2) -99]
Test Case: 755 | Input/Output: [(72 -88 -73 -31) -88]
Test Case: 756 | Input/Output: [(-34 13 20 38) -34]
Test Case: 757 | Input/Output: [(-91 100 -46 -71) -91]
Test Case: 758 | Input/Output: [(35 53 76 52) 35]
Test Case: 759 | Input/Output: [(66 27 -82 17) -82]
Test Case: 760 | Input/Output: [(45 9 3 -85) -85]
Test Case: 761 | Input/Output: [(-30 37 14 13) -30]
Test Case: 762 | Input/Output: [(-15 -29 92 -85) -85]
Test Case: 763 | Input/Output: [(-30 50 5 72) -30]
Test Case: 764 | Input/Output: [(89 86 -79 76) -79]
Test Case: 765 | Input/Output: [(-48 -36 55 76) -48]
Test Case: 766 | Input/Output: [(36 -90 2 51) -90]
Test Case: 767 | Input/Output: [(12 49 -36 74) -36]
Test Case: 768 | Input/Output: [(-81 52 -98 -53) -98]
Test Case: 769 | Input/Output: [(-91 59 23 85) -91]
Test Case: 770 | Input/Output: [(-95 90 -28 -50) -95]
Test Case: 771 | Input/Output: [(22 73 68 -84) -84]
Test Case: 772 | Input/Output: [(-90 83 -52 16) -90]
Test Case: 773 | Input/Output: [(31 78 -90 65) -90]
Test Case: 774 | Input/Output: [(-72 27 -4 -13) -72]
Test Case: 775 | Input/Output: [(46 -43 100 -53) -53]
Test Case: 776 | Input/Output: [(-84 27 -66 -55) -84]
Test Case: 777 | Input/Output: [(90 -12 46 17) -12]
Test Case: 778 | Input/Output: [(31 -99 -87 -29) -99]
Test Case: 779 | Input/Output: [(-38 42 61 22) -38]
Test Case: 780 | Input/Output: [(39 84 -83 23) -83]
Test Case: 781 | Input/Output: [(-24 -98 -6 52) -98]
Test Case: 782 | Input/Output: [(-46 39 -74 -30) -74]
Test Case: 783 | Input/Output: [(95 -39 -96 38) -96]
Test Case: 784 | Input/Output: [(96 44 -27 42) -27]
Test Case: 785 | Input/Output: [(96 16 -87 66) -87]
Test Case: 786 | Input/Output: [(18 77 65 8) 8]
Test Case: 787 | Input/Output: [(81 -43 4 -5) -43]
Test Case: 788 | Input/Output: [(-60 -32 -88 92) -88]
Test Case: 789 | Input/Output: [(15 65 -57 -45) -57]
Test Case: 790 | Input/Output: [(60 -9 -70 65) -70]
Test Case: 791 | Input/Output: [(2 92 -51 94) -51]
Test Case: 792 | Input/Output: [(66 -20 100 6) -20]
Test Case: 793 | Input/Output: [(-70 24 21 -1) -70]
Test Case: 794 | Input/Output: [(73 -54 -75 35) -75]
Test Case: 795 | Input/Output: [(45 -76 2 67) -76]
Test Case: 796 | Input/Output: [(14 -41 13 -49) -49]
Test Case: 797 | Input/Output: [(3 78 -50 -63) -63]
Test Case: 798 | Input/Output: [(-20 -79 -88 32) -88]
Test Case: 799 | Input/Output: [(-11 93 93 -58) -58]
Test Case: 800 | Input/Output: [(-29 93 -13 9) -29]
Test Case: 801 | Input/Output: [(87 69 -65 -11) -65]
Test Case: 802 | Input/Output: [(-10 85 -72 -90) -90]
Test Case: 803 | Input/Output: [(67 -45 59 97) -45]
Test Case: 804 | Input/Output: [(11 -95 -90 78) -95]
Test Case: 805 | Input/Output: [(-8 -21 -53 12) -53]
Test Case: 806 | Input/Output: [(-50 89 41 -4) -50]
Test Case: 807 | Input/Output: [(-71 -99 72 -78) -99]
Test Case: 808 | Input/Output: [(8 6 -25 51) -25]
Test Case: 809 | Input/Output: [(22 97 -81 93) -81]
Test Case: 810 | Input/Output: [(98 18 7 4) 4]
Test Case: 811 | Input/Output: [(-51 16 -91 65) -91]
Test Case: 812 | Input/Output: [(-93 -99 26 45) -99]
Test Case: 813 | Input/Output: [(-50 57 -45 -2) -50]
Test Case: 814 | Input/Output: [(-81 -73 -40 -100) -100]
Test Case: 815 | Input/Output: [(52 82 22 37) 22]
Test Case: 816 | Input/Output: [(-40 -80 -2 86) -80]
Test Case: 817 | Input/Output: [(20 35 67 -92) -92]
Test Case: 818 | Input/Output: [(10 -38 -48 94) -48]
Test Case: 819 | Input/Output: [(-49 67 27 -83) -83]
Test Case: 820 | Input/Output: [(98 -80 -66 -68) -80]
Test Case: 821 | Input/Output: [(-10 -17 -19 45) -19]
Test Case: 822 | Input/Output: [(-93 95 73 -73) -93]
Test Case: 823 | Input/Output: [(-59 -88 99 -9) -88]
Test Case: 824 | Input/Output: [(-55 85 -85 38) -85]
Test Case: 825 | Input/Output: [(-76 -27 -52 -7) -76]
Test Case: 826 | Input/Output: [(41 80 -1 39) -1]
Test Case: 827 | Input/Output: [(67 2 10 62) 2]
Test Case: 828 | Input/Output: [(-1 -51 83 12) -51]
Test Case: 829 | Input/Output: [(-24 76 67 72) -24]
Test Case: 830 | Input/Output: [(-61 59 -92 52) -92]
Test Case: 831 | Input/Output: [(59 97 -15 -12) -15]
Test Case: 832 | Input/Output: [(-13 -88 -77 46) -88]
Test Case: 833 | Input/Output: [(91 -89 40 -62) -89]
Test Case: 834 | Input/Output: [(18 85 41 -88) -88]
Test Case: 835 | Input/Output: [(93 18 49 -55) -55]
Test Case: 836 | Input/Output: [(2 15 -89 -2) -89]
Test Case: 837 | Input/Output: [(18 -85 41 0) -85]
Test Case: 838 | Input/Output: [(64 3 -39 -83) -83]
Test Case: 839 | Input/Output: [(13 18 -61 17) -61]
Test Case: 840 | Input/Output: [(7 60 94 15) 7]
Test Case: 841 | Input/Output: [(-32 33 67 -42) -42]
Test Case: 842 | Input/Output: [(71 -17 -90 88) -90]
Test Case: 843 | Input/Output: [(-48 -43 94 64) -48]
Test Case: 844 | Input/Output: [(30 13 -58 95) -58]
Test Case: 845 | Input/Output: [(60 -40 -85 -77) -85]
Test Case: 846 | Input/Output: [(34 -67 0 -70) -70]
Test Case: 847 | Input/Output: [(63 93 -90 -98) -98]
Test Case: 848 | Input/Output: [(-57 -74 -1 66) -74]
Test Case: 849 | Input/Output: [(-72 72 -3 -99) -99]
Test Case: 850 | Input/Output: [(-32 -96 -43 23) -96]
Test Case: 851 | Input/Output: [(-48 -69 17 69) -69]
Test Case: 852 | Input/Output: [(-37 -67 -85 -12) -85]
Test Case: 853 | Input/Output: [(-71 -38 77 59) -71]
Test Case: 854 | Input/Output: [(-31 -24 -90 -84) -90]
Test Case: 855 | Input/Output: [(-94 4 2 -15) -94]
Test Case: 856 | Input/Output: [(-42 -23 -92 -93) -93]
Test Case: 857 | Input/Output: [(-60 -51 -50 73) -60]
Test Case: 858 | Input/Output: [(-39 72 -24 69) -39]
Test Case: 859 | Input/Output: [(-29 -60 71 -82) -82]
Test Case: 860 | Input/Output: [(-56 82 49 -93) -93]
Test Case: 861 | Input/Output: [(-91 -5 -74 -98) -98]
Test Case: 862 | Input/Output: [(36 77 2 97) 2]
Test Case: 863 | Input/Output: [(21 57 33 15) 15]
Test Case: 864 | Input/Output: [(-76 -68 -80 -84) -84]
Test Case: 865 | Input/Output: [(-60 20 95 53) -60]
Test Case: 866 | Input/Output: [(68 72 57 -12) -12]
Test Case: 867 | Input/Output: [(69 49 -9 83) -9]
Test Case: 868 | Input/Output: [(-82 36 -82 -3) -82]
Test Case: 869 | Input/Output: [(73 51 27 98) 27]
Test Case: 870 | Input/Output: [(26 76 -61 36) -61]
Test Case: 871 | Input/Output: [(-98 67 -41 27) -98]
Test Case: 872 | Input/Output: [(31 -58 31 100) -58]
Test Case: 873 | Input/Output: [(45 -6 33 0) -6]
Test Case: 874 | Input/Output: [(-68 -55 45 78) -68]
Test Case: 875 | Input/Output: [(83 21 25 77) 21]
Test Case: 876 | Input/Output: [(-78 -47 9 -89) -89]
Test Case: 877 | Input/Output: [(4 -72 68 100) -72]
Test Case: 878 | Input/Output: [(-100 -44 -91 -35) -100]
Test Case: 879 | Input/Output: [(-5 -59 -66 38) -66]
Test Case: 880 | Input/Output: [(76 -81 -55 -48) -81]
Test Case: 881 | Input/Output: [(-30 33 -60 -64) -64]
Test Case: 882 | Input/Output: [(87 38 -1 -46) -46]
Test Case: 883 | Input/Output: [(52 -28 37 62) -28]
Test Case: 884 | Input/Output: [(75 -68 -63 -54) -68]
Test Case: 885 | Input/Output: [(-31 -99 -59 55) -99]
Test Case: 886 | Input/Output: [(-36 -93 -31 -90) -93]
Test Case: 887 | Input/Output: [(8 -36 -55 85) -55]
Test Case: 888 | Input/Output: [(97 25 -43 79) -43]
Test Case: 889 | Input/Output: [(52 -48 -90 -48) -90]
Test Case: 890 | Input/Output: [(41 -43 -21 89) -43]
Test Case: 891 | Input/Output: [(-39 -13 37 -34) -39]
Test Case: 892 | Input/Output: [(54 -97 8 82) -97]
Test Case: 893 | Input/Output: [(22 -53 -14 4) -53]
Test Case: 894 | Input/Output: [(-5 -26 -93 -35) -93]
Test Case: 895 | Input/Output: [(-97 -54 -33 -14) -97]
Test Case: 896 | Input/Output: [(-64 12 78 20) -64]
Test Case: 897 | Input/Output: [(67 89 0 -2) -2]
Test Case: 898 | Input/Output: [(-8 16 -31 100) -31]
Test Case: 899 | Input/Output: [(74 74 -37 -59) -59]
Test Case: 900 | Input/Output: [(96 19 -72 35) -72]
Test Case: 901 | Input/Output: [(-55 -42 -30 73) -55]
Test Case: 902 | Input/Output: [(99 14 88 31) 14]
Test Case: 903 | Input/Output: [(-41 61 58 -100) -100]
Test Case: 904 | Input/Output: [(-93 -3 -36 -75) -93]
Test Case: 905 | Input/Output: [(32 -55 28 -95) -95]
Test Case: 906 | Input/Output: [(38 49 78 48) 38]
Test Case: 907 | Input/Output: [(-79 -17 25 -36) -79]
Test Case: 908 | Input/Output: [(-95 -33 23 1) -95]
Test Case: 909 | Input/Output: [(90 -77 -46 91) -77]
Test Case: 910 | Input/Output: [(-18 -41 -83 -91) -91]
Test Case: 911 | Input/Output: [(32 -91 66 -41) -91]
Test Case: 912 | Input/Output: [(-44 -22 59 -65) -65]
Test Case: 913 | Input/Output: [(-57 -77 87 58) -77]
Test Case: 914 | Input/Output: [(-74 -15 -57 -11) -74]
Test Case: 915 | Input/Output: [(64 79 75 78) 64]
Test Case: 916 | Input/Output: [(16 -38 13 -67) -67]
Test Case: 917 | Input/Output: [(18 47 -80 -50) -80]
Test Case: 918 | Input/Output: [(9 -91 21 -5) -91]
Test Case: 919 | Input/Output: [(-24 16 -25 -17) -25]
Test Case: 920 | Input/Output: [(-43 62 11 71) -43]
Test Case: 921 | Input/Output: [(53 99 -60 -45) -60]
Test Case: 922 | Input/Output: [(-81 20 44 -45) -81]
Test Case: 923 | Input/Output: [(-4 -93 -47 31) -93]
Test Case: 924 | Input/Output: [(0 90 16 99) 0]
Test Case: 925 | Input/Output: [(55 -58 26 8) -58]
Test Case: 926 | Input/Output: [(6 46 -52 -78) -78]
Test Case: 927 | Input/Output: [(-48 58 -78 4) -78]
Test Case: 928 | Input/Output: [(-44 3 -78 -65) -78]
Test Case: 929 | Input/Output: [(69 -42 -35 99) -42]
Test Case: 930 | Input/Output: [(94 -39 70 26) -39]
Test Case: 931 | Input/Output: [(-2 -51 53 -97) -97]
Test Case: 932 | Input/Output: [(-21 -25 -4 66) -25]
Test Case: 933 | Input/Output: [(-61 76 -38 81) -61]
Test Case: 934 | Input/Output: [(-94 -2 -100 -53) -100]
Test Case: 935 | Input/Output: [(-18 98 -13 71) -18]
Test Case: 936 | Input/Output: [(74 -66 -6 39) -66]
Test Case: 937 | Input/Output: [(-13 -40 -56 16) -56]
Test Case: 938 | Input/Output: [(-55 15 -20 44) -55]
Test Case: 939 | Input/Output: [(-55 -60 19 -57) -60]
Test Case: 940 | Input/Output: [(75 41 87 -49) -49]
Test Case: 941 | Input/Output: [(29 -60 85 51) -60]
Test Case: 942 | Input/Output: [(-100 6 64 100) -100]
Test Case: 943 | Input/Output: [(37 -54 -84 75) -84]
Test Case: 944 | Input/Output: [(73 -68 -60 -13) -68]
Test Case: 945 | Input/Output: [(51 65 -72 -30) -72]
Test Case: 946 | Input/Output: [(-5 61 -86 -92) -92]
Test Case: 947 | Input/Output: [(-23 -59 -90 -41) -90]
Test Case: 948 | Input/Output: [(-31 -69 -46 70) -69]
Test Case: 949 | Input/Output: [(-32 -92 -8 42) -92]
Test Case: 950 | Input/Output: [(-20 -81 -4 -89) -89]
Test Case: 951 | Input/Output: [(94 28 -70 -81) -81]
Test Case: 952 | Input/Output: [(-73 -83 58 -10) -83]
Test Case: 953 | Input/Output: [(25 85 58 -14) -14]
Test Case: 954 | Input/Output: [(24 51 -97 -3) -97]
Test Case: 955 | Input/Output: [(55 -96 95 -19) -96]
Test Case: 956 | Input/Output: [(-71 41 86 21) -71]
Test Case: 957 | Input/Output: [(-61 -85 58 23) -85]
Test Case: 958 | Input/Output: [(81 32 53 24) 24]
Test Case: 959 | Input/Output: [(-51 65 -49 -50) -51]
Test Case: 960 | Input/Output: [(45 -15 -85 -76) -85]
Test Case: 961 | Input/Output: [(-81 94 48 13) -81]
Test Case: 962 | Input/Output: [(-52 16 -85 53) -85]
Test Case: 963 | Input/Output: [(-97 18 -100 -81) -100]
Test Case: 964 | Input/Output: [(59 -94 -99 6) -99]
Test Case: 965 | Input/Output: [(-29 87 -68 62) -68]
Test Case: 966 | Input/Output: [(14 -23 -3 68) -23]
Test Case: 967 | Input/Output: [(-61 -88 -67 47) -88]
Test Case: 968 | Input/Output: [(-98 4 63 -36) -98]
Test Case: 969 | Input/Output: [(35 -17 82 3) -17]
Test Case: 970 | Input/Output: [(44 -96 9 -62) -96]
Test Case: 971 | Input/Output: [(23 -9 71 26) -9]
Test Case: 972 | Input/Output: [(35 17 54 3) 3]
Test Case: 973 | Input/Output: [(-28 70 43 -13) -28]
Test Case: 974 | Input/Output: [(-19 -89 52 70) -89]
Test Case: 975 | Input/Output: [(-58 -40 -79 -54) -79]
Test Case: 976 | Input/Output: [(36 53 56 -46) -46]
Test Case: 977 | Input/Output: [(-33 34 -7 12) -33]
Test Case: 978 | Input/Output: [(-1 -73 -67 97) -73]
Test Case: 979 | Input/Output: [(-67 -79 -2 -99) -99]
Test Case: 980 | Input/Output: [(-19 -42 -1 -47) -47]
Test Case: 981 | Input/Output: [(-80 4 72 7) -80]
Test Case: 982 | Input/Output: [(56 -8 -33 -27) -33]
Test Case: 983 | Input/Output: [(-12 -77 -55 -55) -77]
Test Case: 984 | Input/Output: [(26 54 95 90) 26]
Test Case: 985 | Input/Output: [(-57 -68 -95 -62) -95]
Test Case: 986 | Input/Output: [(-17 -37 -98 80) -98]
Test Case: 987 | Input/Output: [(69 4 16 -65) -65]
Test Case: 988 | Input/Output: [(16 89 -37 49) -37]
Test Case: 989 | Input/Output: [(89 -57 -17 -13) -57]
Test Case: 990 | Input/Output: [(66 -3 -89 56) -89]
Test Case: 991 | Input/Output: [(-74 -8 -79 -20) -79]
Test Case: 992 | Input/Output: [(-54 -66 -47 91) -66]
Test Case: 993 | Input/Output: [(-7 -35 -64 -52) -64]
Test Case: 994 | Input/Output: [(-59 -84 69 -88) -88]
Test Case: 995 | Input/Output: [(93 -76 25 90) -76]
Test Case: 996 | Input/Output: [(41 -78 -90 -67) -90]
Test Case: 997 | Input/Output: [(-46 -69 -40 63) -69]
Test Case: 998 | Input/Output: [(-100 -72 -64 11) -100]
Test Case: 999 | Input/Output: [(2 90 27 59) 2]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 62 -62 -109 -128 47 67 -37 32 -45 64 -33 48 48 116 -48 114
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-74 -74 -74 -63] -74] [[7 -53 7 7] -53] [[94 94 47 94] 47] [[-96 -78 -96 -96] -96] [[29 -60 -60 -60] -60] [[4 4 71 4] 4] [[-10 -10 -10 49] -10] [[-63 -63 -63 -79] -79] [[-86 -32 -86 -86] -86] [[75 75 -51 75] -51] [(18 18 18 18) 18] [(42 42 42 42) 42] [(75 75 75 75) 75] [(-1 -1 -1 -1) -1] [(66 66 66 66) 66] [(21 58 71 37) 21] [(79 86 28 80) 28] [(62 100 52 12) 12] [(82 76 31 44) 31] [(61 32 65 99) 32] [(82 41 97 47) 41] [(41 59 22 46) 22] [(70 68 4 71) 4] [(21 22 2 100) 2] [(73 38 90 60) 38] [(46 22 32 13) 13] [(46 17 98 64) 17] [(4 76 15 85) 4] [(31 89 57 4) 4] [(63 38 83 2) 2] [(33 47 7 4) 4] [(52 75 13 90) 13] [(43 32 92 82) 32] [(3 62 55 77) 3] [(53 54 40 95) 40] [(68 56 34 -19) -19] [(93 -68 -37 -7) -68] [(-91 48 -87 -10) -91] [(47 -86 -71 -99) -99] [(6 59 18 -24) -24] [(9 46 3 -82) -82] [(62 -10 -80 -73) -80] [(55 79 53 37) 37] [(-88 4 75 -2) -88] [(-91 -42 77 -90) -91] [(6 45 -16 -57) -57] [(-35 -11 62 8) -35] [(-42 -100 90 92) -100] [(-10 0 -29 97) -29] [(-82 67 54 4) -82] [(-74 24 23 87) -74] [(-21 -11 -94 46) -94] [(49 6 -77 -7) -77] [(-79 -77 3 -17) -79] [(-49 35 -14 -98) -98] [(-79 42 93 91) -79] [(-61 24 41 32) -61] [(-5 -57 -99 -98) -99] [(-98 22 -81 35) -98] [(72 33 -68 80) -68] [(-36 6 -26 83) -36] [(81 -84 -1 12) -84] [(-87 95 -68 -3) -87] [(-21 -90 4 59) -90] [(50 -75 0 53) -75] [(30 13 -9 -36) -36] [(-84 99 85 -21) -84] [(79 19 45 -78) -78] [(42 96 71 79) 42] [(29 54 -44 -2) -44] [(83 98 -4 100) -4] [(13 -4 31 -52) -52] [(29 44 -35 -89) -89] [(-87 -75 -14 69) -87] [(36 -9 8 95) -9] [(-87 -6 59 -12) -87] [(-84 -36 -76 51) -84] [(54 47 48 74) 47] [(-85 -47 72 26) -85] [(24 38 29 -84) -84] [(75 71 -28 -68) -68] [(-20 50 -61 64) -61] [(27 21 84 7) 7] [(12 -44 81 -34) -44] [(18 40 -51 -38) -51] [(-91 59 -93 -65) -93] [(28 -67 88 -94) -94] [(11 -2 25 94) -2] [(53 -1 -38 33) -38] [(73 -81 -8 -90) -90] [(17 69 -81 61) -81] [(63 13 -69 7) -69] [(-18 70 15 71) -18] [(-25 63 -32 67) -32] [(44 21 2 -43) -43])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 29                 
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 79                 
Correct output: 12                  | Program output: 62                 
Correct output: 31                  | Program output: 82                 
Correct output: 32                  | Program output: 61                 
Correct output: 41                  | Program output: 82                 
Correct output: 22                  | Program output: 41                 
Correct output: 4                   | Program output: 70                 
Correct output: 2                   | Program output: 21                 
Correct output: 38                  | Program output: 73                 
Correct output: 13                  | Program output: 46                 
Correct output: 17                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 2                   | Program output: 63                 
Correct output: 4                   | Program output: 33                 
Correct output: 13                  | Program output: 52                 
Correct output: 32                  | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 53                 
Correct output: -19                 | Program output: 68                 
Correct output: -68                 | Program output: 93                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 47                 
Correct output: -24                 | Program output: 6                  
Correct output: -82                 | Program output: 9                  
Correct output: -80                 | Program output: 62                 
Correct output: 37                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: 6                  
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -21                
Correct output: -77                 | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: 81                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 50                 
Correct output: -36                 | Program output: 30                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 79                 
Correct output: 42                  | Program output: 42                 
Correct output: -44                 | Program output: 29                 
Correct output: -4                  | Program output: 83                 
Correct output: -52                 | Program output: 13                 
Correct output: -89                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 36                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 24                 
Correct output: -68                 | Program output: 75                 
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 27                 
Correct output: -44                 | Program output: 12                 
Correct output: -51                 | Program output: 18                 
Correct output: -93                 | Program output: -91                
Correct output: -94                 | Program output: 28                 
Correct output: -2                  | Program output: 11                 
Correct output: -38                 | Program output: 53                 
Correct output: -90                 | Program output: 73                 
Correct output: -81                 | Program output: 17                 
Correct output: -69                 | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: 44                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_eq} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction tag_exec_677} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction in2} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_swap integer_rot in1 boolean_or boolean_yank integer_shove exec_y_when_autoconstructing (exec_do*count (boolean_and print_integer integer_dec exec_dup_items exec_do*times (boolean_not exec_shove (integer_stackdepth integer_dup integer_mult boolean_rot exec_y () boolean_or integer_add boolean_pop integer_eq integer_pop integer_swap print_boolean exec_y () exec_dup_times (integer_yankdup exec_flush exec_eq) exec_stackdepth)) integer_dup integer_add) boolean_yankdup exec_yankdup exec_dup_times (print_exec (boolean_yankdup integer_mod boolean_yankdup) tag_exec_677 () integer_dup boolean_dup_times boolean_flush boolean_shove integer_add boolean_swap integer_stackdepth integer_inc in2) boolean_xor) integer_lt exec_pop (boolean_dup exec_do*while (exec_y () boolean_frominteger) exec_dup_items) exec_y_when_autoconstructing (in1 exec_dup_items integer_div) integer_dec exec_y_when_autoconstructing (integer_pop boolean_swap))
Lexicase best errors: [0 1 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 84
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_eq} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction tag_exec_677} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction in2} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_swap integer_rot in1 boolean_or boolean_yank integer_shove exec_y_when_autoconstructing (exec_do*count (boolean_and print_integer integer_dec exec_dup_items exec_do*times (boolean_not exec_shove (integer_stackdepth integer_dup integer_mult boolean_rot exec_y () boolean_or integer_add boolean_pop integer_eq integer_pop integer_swap print_boolean exec_y () exec_dup_times (integer_yankdup exec_flush exec_eq) exec_stackdepth)) integer_dup integer_add) boolean_yankdup exec_yankdup exec_dup_times (print_exec (boolean_yankdup integer_mod boolean_yankdup) tag_exec_677 () integer_dup boolean_dup_times boolean_flush boolean_shove integer_add boolean_swap integer_stackdepth integer_inc in2) boolean_xor) integer_lt exec_pop (boolean_dup exec_do*while (exec_y () boolean_frominteger) exec_dup_items) exec_y_when_autoconstructing (in1 exec_dup_items integer_div) integer_dec exec_y_when_autoconstructing (integer_pop boolean_swap))
Zero cases best errors: [0 1 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 84
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 2 4 6 4 2 11 2 6 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (6 2 4 6 4 2 11 2 6 3)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction print_exec} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tagged_141} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction in4})
Best program: (exec_yankdup print_integer in1 print_integer exec_stackdepth print_boolean exec_dup_items integer_empty boolean_stackdepth exec_s_when_autoconstructing (integer_yankdup integer_pop) (integer_dup_times in1 exec_pop () integer_max) (in2) boolean_empty in4 boolean_dup_times exec_do*range (exec_y () integer_min boolean_and exec_pop (boolean_not print_exec (integer_sub exec_rot (integer_empty integer_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_times integer_dup_times boolean_invert_second_then_and integer_lte exec_do*times () exec_k_when_autoconstructing (exec_yank) (integer_dec) boolean_yankdup tagged_141) integer_yankdup) (integer_dec) (exec_pop (integer_add in3 integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (exec_k (boolean_rot integer_yankdup exec_y (integer_eq in4)) ()))))))
Errors: [0 1 1 0 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 63
Size: 85
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 9.954
Median total errors in population: 10
Error averages by case: (0.994 0.998 0.996 0.994 0.996 0.998 0.989 0.998 0.994 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.169
Average program size in population (points): 69.313
Average percent parens in population: 0.284
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 477570
--- Timings ---
Current time: 1559582798950 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.9 seconds, 32.5%
Fitness Testing:      1.8 seconds, 63.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -63                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 37                 
Correct output: 28                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 44                 
Correct output: 32                  | Program output: 99                 
Correct output: 41                  | Program output: 47                 
Correct output: 22                  | Program output: 46                 
Correct output: 4                   | Program output: 71                 
Correct output: 2                   | Program output: 100                
Correct output: 38                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 64                 
Correct output: 4                   | Program output: 85                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 90                 
Correct output: 32                  | Program output: 82                 
Correct output: 3                   | Program output: 77                 
Correct output: 40                  | Program output: 95                 
Correct output: -19                 | Program output: -19                
Correct output: -68                 | Program output: -7                 
Correct output: -91                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -73                
Correct output: 37                  | Program output: 37                 
Correct output: -88                 | Program output: -2                 
Correct output: -91                 | Program output: -90                
Correct output: -57                 | Program output: -57                
Correct output: -35                 | Program output: 8                  
Correct output: -100                | Program output: 92                 
Correct output: -29                 | Program output: 97                 
Correct output: -82                 | Program output: 4                  
Correct output: -74                 | Program output: 87                 
Correct output: -94                 | Program output: 46                 
Correct output: -77                 | Program output: -7                 
Correct output: -79                 | Program output: -17                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: 91                 
Correct output: -61                 | Program output: 32                 
Correct output: -99                 | Program output: -98                
Correct output: -98                 | Program output: 35                 
Correct output: -68                 | Program output: 80                 
Correct output: -36                 | Program output: 83                 
Correct output: -84                 | Program output: 12                 
Correct output: -87                 | Program output: -3                 
Correct output: -90                 | Program output: 59                 
Correct output: -75                 | Program output: 53                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: 42                  | Program output: 79                 
Correct output: -44                 | Program output: -2                 
Correct output: -4                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: 69                 
Correct output: -9                  | Program output: 95                 
Correct output: -87                 | Program output: -12                
Correct output: -84                 | Program output: 51                 
Correct output: 47                  | Program output: 74                 
Correct output: -85                 | Program output: 26                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: -44                 | Program output: -34                
Correct output: -51                 | Program output: -38                
Correct output: -93                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -2                  | Program output: 94                 
Correct output: -38                 | Program output: 33                 
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 61                 
Correct output: -69                 | Program output: 7                  
Correct output: -18                 | Program output: 71                 
Correct output: -32                 | Program output: 67                 
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_dec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 0, :instruction tagged_150} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_exec} {:close 1, :instruction tag_exec_984} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_gt in1 exec_swap (integer_dup_times boolean_shove integer_stackdepth integer_flush in1 print_newline integer_swap in1 print_newline exec_flush exec_shove (integer_yankdup)) (exec_do*range (exec_rot (exec_dup_items integer_gt exec_dup_times () exec_when () in4 integer_mult integer_mult) (exec_k_when_autoconstructing (boolean_yankdup boolean_dup_items exec_empty) (in4 exec_flush integer_mod exec_pop (boolean_shove integer_dec)) boolean_yankdup) (exec_s (exec_swap (integer_rot exec_dup_items exec_dup_times (exec_k_when_autoconstructing () (exec_noop exec_eq integer_max boolean_yank exec_dup (in3 integer_lt exec_empty) tagged_150 in4 exec_swap (print_integer exec_k (exec_when (in3 boolean_rot boolean_swap integer_min print_exec (tag_exec_984 () boolean_yankdup integer_gt integer_div integer_gte))) ()) ()))) ()) () ()))))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 94
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_dec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 0, :instruction tagged_150} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_exec} {:close 1, :instruction tag_exec_984} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_gt in1 exec_swap (integer_dup_times boolean_shove integer_stackdepth integer_flush in1 print_newline integer_swap in1 print_newline exec_flush exec_shove (integer_yankdup)) (exec_do*range (exec_rot (exec_dup_items integer_gt exec_dup_times () exec_when () in4 integer_mult integer_mult) (exec_k_when_autoconstructing (boolean_yankdup boolean_dup_items exec_empty) (in4 exec_flush integer_mod exec_pop (boolean_shove integer_dec)) boolean_yankdup) (exec_s (exec_swap (integer_rot exec_dup_items exec_dup_times (exec_k_when_autoconstructing () (exec_noop exec_eq integer_max boolean_yank exec_dup (in3 integer_lt exec_empty) tagged_150 in4 exec_swap (print_integer exec_k (exec_when (in3 boolean_rot boolean_swap integer_min print_exec (tag_exec_984 () boolean_yankdup integer_gt integer_div integer_gte))) ()) ()))) ()) () ()))))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 94
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 343 219 219 855 807 88 220 343 343)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (219 343 219 219 855 807 88 220 343 343)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction -19} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank})
Best program: (integer_mod exec_rot (exec_while (boolean_empty integer_swap) exec_yankdup) () (in4 print_integer exec_do*times ()) integer_shove exec_dup_items integer_swap boolean_empty boolean_empty boolean_yankdup exec_yankdup integer_yankdup integer_yank exec_y (in4 boolean_flush integer_lt) print_integer exec_do*while (integer_dup_times integer_fromboolean boolean_xor integer_fromboolean in1 exec_do*while ()) in1 integer_lte exec_when (print_exec (exec_do*count (integer_inc)) exec_yankdup) integer_inc integer_min integer_dec integer_yankdup integer_min boolean_pop exec_if (exec_noop integer_max) (boolean_xor in3 integer_min integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min -19 integer_gt exec_dup (boolean_swap integer_dup_items in2 exec_do*count (exec_k (boolean_xor boolean_frominteger integer_mod integer_div) (exec_y_when_autoconstructing (exec_empty) integer_mult integer_yank in1) exec_do*count (exec_while (boolean_stackdepth exec_s () (exec_dup (exec_yankdup exec_yankdup exec_do*count (exec_dup_items) exec_do*count () integer_gt exec_do*range (exec_yank))) ()))))) () ()))
Errors: [0 1 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 90
Size: 122
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.344
Median total errors in population: 5
Error averages by case: (0.781 0.657 0.781 0.781 0.145 0.193 0.912 0.78 0.657 0.657)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.397
Average program size in population (points): 86.179
Average percent parens in population: 0.283
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.464
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1185168
--- Timings ---
Current time: 1559582802481 milliseconds
Total Time:           6.3 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.6 seconds, 41.7%
Fitness Testing:      2.8 seconds, 44.2%
Report:               0.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 71                 
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 71                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 65                 
Correct output: 41                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 90                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 83                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 92                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: 75                 
Correct output: -91                 | Program output: 77                 
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: 62                 
Correct output: -100                | Program output: 90                 
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: 54                 
Correct output: -74                 | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 3                  
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: 93                 
Correct output: -61                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: 4                  
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: 85                 
Correct output: -78                 | Program output: 45                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: 59                 
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 48                 
Correct output: -85                 | Program output: 72                 
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 84                 
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_flush})
Lexicase best program: (exec_while (in1 integer_add integer_dup) exec_s (boolean_stackdepth) (integer_pop boolean_frominteger exec_yankdup integer_eq) (exec_y_when_autoconstructing () exec_when (exec_yank exec_do*count (exec_y_when_autoconstructing () integer_mod integer_mult) integer_dup_items exec_yankdup integer_gte) integer_lt integer_dup_times integer_max exec_s_when_autoconstructing (boolean_yankdup) (boolean_flush exec_dup_items in3) (boolean_empty print_integer integer_mod boolean_swap) exec_noop integer_sub exec_pop (boolean_rot integer_pop integer_gte) exec_yankdup boolean_pop integer_stackdepth integer_eq integer_yankdup in4 exec_do*count () exec_if () () exec_y (exec_yank) in2 exec_shove (exec_flush)))
Lexicase best errors: [1 0 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_flush})
Zero cases best program: (exec_while (in1 integer_add integer_dup) exec_s (boolean_stackdepth) (integer_pop boolean_frominteger exec_yankdup integer_eq) (exec_y_when_autoconstructing () exec_when (exec_yank exec_do*count (exec_y_when_autoconstructing () integer_mod integer_mult) integer_dup_items exec_yankdup integer_gte) integer_lt integer_dup_times integer_max exec_s_when_autoconstructing (boolean_yankdup) (boolean_flush exec_dup_items in3) (boolean_empty print_integer integer_mod boolean_swap) exec_noop integer_sub exec_pop (boolean_rot integer_pop integer_gte) exec_yankdup boolean_pop integer_stackdepth integer_eq integer_yankdup in4 exec_do*count () exec_if () () exec_y (exec_yank) in2 exec_shove (exec_flush)))
Zero cases best errors: [1 0 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 97 96 822 377 376 377 97 821 97)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (0 97 96 822 377 376 377 97 821 97)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction -38} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 0, :instruction tagged_150} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_exec} {:close 1, :instruction tag_exec_984} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte})
Best program: (exec_when (print_integer integer_min exec_do*times (boolean_dup_times) exec_yank exec_stackdepth exec_k (exec_yankdup integer_dec) (exec_yank exec_yankdup boolean_and) exec_swap (exec_do*count (-38 exec_dup_items integer_yankdup) integer_dup exec_dup_times () exec_do*while (boolean_dup in3 exec_s (print_integer integer_lt boolean_dup_times) (exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty) integer_div exec_stackdepth integer_dup_times integer_rot exec_do*times () integer_pop exec_dup_items in2 integer_lt exec_dup_items integer_yankdup integer_stackdepth exec_do*range (exec_noop integer_dup) boolean_swap integer_add exec_dup_items integer_rot integer_eq boolean_yank exec_dup (in3 integer_lt exec_empty) tagged_150 in4 exec_swap (print_integer exec_k (exec_when (in3 boolean_rot boolean_swap integer_min print_exec (tag_exec_984 () boolean_yankdup integer_gt integer_div integer_gte))) ()) ())) ()) ())) ()))
Errors: [1 0 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 74
Size: 101
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.84
Median total errors in population: 8
Error averages by case: (1.0 0.903 0.904 0.178 0.623 0.624 0.623 0.903 0.179 0.903)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.169
Average program size in population (points): 84.995
Average percent parens in population: 0.289
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.939
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1993465
--- Timings ---
Current time: 1559582806678 milliseconds
Total Time:          10.7 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.3 seconds, 49.6%
Fitness Testing:      3.6 seconds, 33.9%
Report:               1.7 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -63                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 37                 
Correct output: 28                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 44                 
Correct output: 32                  | Program output: 99                 
Correct output: 41                  | Program output: 47                 
Correct output: 22                  | Program output: 46                 
Correct output: 4                   | Program output: 71                 
Correct output: 2                   | Program output: 100                
Correct output: 38                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 64                 
Correct output: 4                   | Program output: 85                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 90                 
Correct output: 32                  | Program output: 82                 
Correct output: 3                   | Program output: 77                 
Correct output: 40                  | Program output: 95                 
Correct output: -19                 | Program output: -19                
Correct output: -68                 | Program output: -7                 
Correct output: -91                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -73                
Correct output: 37                  | Program output: 37                 
Correct output: -88                 | Program output: -2                 
Correct output: -91                 | Program output: -90                
Correct output: -57                 | Program output: -57                
Correct output: -35                 | Program output: 8                  
Correct output: -100                | Program output: 92                 
Correct output: -29                 | Program output: 97                 
Correct output: -82                 | Program output: 4                  
Correct output: -74                 | Program output: 87                 
Correct output: -94                 | Program output: 46                 
Correct output: -77                 | Program output: -7                 
Correct output: -79                 | Program output: -17                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: 91                 
Correct output: -61                 | Program output: 32                 
Correct output: -99                 | Program output: -98                
Correct output: -98                 | Program output: 35                 
Correct output: -68                 | Program output: 80                 
Correct output: -36                 | Program output: 83                 
Correct output: -84                 | Program output: 12                 
Correct output: -87                 | Program output: -3                 
Correct output: -90                 | Program output: 59                 
Correct output: -75                 | Program output: 53                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: 42                  | Program output: 79                 
Correct output: -44                 | Program output: -2                 
Correct output: -4                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: 69                 
Correct output: -9                  | Program output: 95                 
Correct output: -87                 | Program output: -12                
Correct output: -84                 | Program output: 51                 
Correct output: 47                  | Program output: 74                 
Correct output: -85                 | Program output: 26                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: -44                 | Program output: -34                
Correct output: -51                 | Program output: -38                
Correct output: -93                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -2                  | Program output: 94                 
Correct output: -38                 | Program output: 33                 
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 61                 
Correct output: -69                 | Program output: 7                  
Correct output: -18                 | Program output: 71                 
Correct output: -32                 | Program output: 67                 
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_890} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction -19} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 1, :instruction 25} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (integer_mod exec_rot (exec_while (boolean_empty integer_swap) exec_yankdup) () (in4 print_integer exec_do*times ()) integer_shove exec_dup_items integer_swap boolean_empty boolean_empty boolean_yankdup exec_yankdup integer_yankdup integer_yank exec_y (in4 boolean_flush boolean_empty) print_integer exec_do*while (integer_dup_times integer_fromboolean boolean_xor integer_fromboolean in1 exec_do*while ()) in1 integer_lte exec_when (tagged_890 exec_do*count (integer_inc)) exec_yankdup integer_inc integer_min integer_dec integer_yankdup integer_min boolean_pop exec_if (exec_noop integer_max) (boolean_xor in3 integer_min integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min -19 integer_gt exec_dup (boolean_swap integer_dup_items in2 exec_do*count (integer_lte boolean_xor boolean_frominteger integer_mod integer_div) exec_y_when_autoconstructing (exec_empty) integer_mult exec_dup_items 25) boolean_invert_second_then_and boolean_dup_times exec_dup (integer_fromboolean boolean_yankdup print_integer boolean_dup_items boolean_yankdup)) () ()))
Lexicase best errors: [0 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 106
Percent parens: 0.198
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_890} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction -19} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 1, :instruction 25} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (integer_mod exec_rot (exec_while (boolean_empty integer_swap) exec_yankdup) () (in4 print_integer exec_do*times ()) integer_shove exec_dup_items integer_swap boolean_empty boolean_empty boolean_yankdup exec_yankdup integer_yankdup integer_yank exec_y (in4 boolean_flush boolean_empty) print_integer exec_do*while (integer_dup_times integer_fromboolean boolean_xor integer_fromboolean in1 exec_do*while ()) in1 integer_lte exec_when (tagged_890 exec_do*count (integer_inc)) exec_yankdup integer_inc integer_min integer_dec integer_yankdup integer_min boolean_pop exec_if (exec_noop integer_max) (boolean_xor in3 integer_min integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min -19 integer_gt exec_dup (boolean_swap integer_dup_items in2 exec_do*count (integer_lte boolean_xor boolean_frominteger integer_mod integer_div) exec_y_when_autoconstructing (exec_empty) integer_mult exec_dup_items 25) boolean_invert_second_then_and boolean_dup_times exec_dup (integer_fromboolean boolean_yankdup print_integer boolean_dup_items boolean_yankdup)) () ()))
Zero cases best errors: [0 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 106
Percent parens: 0.198
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 355 1000 818 1000 355 355 1000 463 1000)
Population mean number of elite cases: 6.70
Count of perfect (error zero) individuals by case: (352 355 0 818 0 355 355 0 463 0)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction -19} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank})
Best program: (integer_mod exec_rot (exec_while (boolean_empty integer_swap) exec_yankdup) () (in4 print_integer exec_do*times ()) integer_shove exec_dup_items integer_swap boolean_empty boolean_empty boolean_yankdup exec_yankdup integer_yankdup integer_yank exec_y (in4 boolean_flush boolean_flush integer_lt) print_integer exec_do*while (integer_dup_times integer_div boolean_xor integer_fromboolean in1 exec_do*while ()) in1 integer_lte exec_when (integer_div exec_do*count (integer_inc)) exec_yankdup integer_inc integer_min integer_dec integer_yankdup integer_min boolean_pop exec_if (exec_noop integer_max) (boolean_xor in3 integer_min integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min -19 integer_gt integer_gte boolean_swap integer_dup_items in2 exec_do*count (exec_k (boolean_xor boolean_frominteger integer_mod integer_div) (exec_y_when_autoconstructing (exec_empty) integer_mult integer_yank in1) exec_do*count (exec_while (boolean_stackdepth exec_s () (exec_dup (exec_yankdup exec_yankdup exec_do*count (exec_dup_items) exec_do*count () integer_gt exec_do*range (exec_yank))) ())))) () ()))
Errors: [0 0 1 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 91
Size: 121
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 7.302
Median total errors in population: 8
Error averages by case: (0.648 0.645 1.0 0.182 1.0 0.645 0.645 1.0 0.537 1.0)
Error minima by case: (0 0 1 0 1 0 0 1 0 1)
Average genome size in population (length): 73.953
Average program size in population (points): 101.374
Average percent parens in population: 0.270
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4005
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2943709
--- Timings ---
Current time: 1559582810735 milliseconds
Total Time:          14.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.7 seconds, 52.5%
Fitness Testing:      4.5 seconds, 30.8%
Report:               2.3 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 71                 
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 71                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 65                 
Correct output: 41                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 90                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 83                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 92                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: 75                 
Correct output: -91                 | Program output: 77                 
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: 62                 
Correct output: -100                | Program output: 90                 
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: 54                 
Correct output: -74                 | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 3                  
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: 93                 
Correct output: -61                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: 4                  
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: 85                 
Correct output: -78                 | Program output: 45                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: 59                 
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 48                 
Correct output: -85                 | Program output: 72                 
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 84                 
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_346} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tagged_149} {:close 0, :instruction exec_flush} {:close 0, :instruction -13} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_when (integer_sub) integer_lte integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop boolean_flush) (integer_swap) (integer_lt boolean_rot exec_do*range () integer_stackdepth integer_eq exec_flush) boolean_rot) integer_div exec_empty integer_fromboolean integer_yankdup boolean_rot integer_swap exec_pop () exec_noop) boolean_yankdup boolean_invert_second_then_and exec_while (print_newline boolean_eq) exec_do*count (boolean_empty exec_stackdepth) exec_y (boolean_empty boolean_flush) integer_swap tag_integer_346 print_newline print_exec (exec_when () in2 exec_k (exec_noop exec_if (integer_fromboolean) (integer_mod integer_inc exec_k (exec_k_when_autoconstructing (exec_y_when_autoconstructing (tagged_149) exec_flush -13 boolean_shove boolean_yank) (exec_if (boolean_frominteger boolean_dup integer_shove exec_when (exec_k_when_autoconstructing (boolean_invert_second_then_and) ())) ())) ())) ()))
Lexicase best errors: [1 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 104
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_346} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tagged_149} {:close 0, :instruction exec_flush} {:close 0, :instruction -13} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_when (integer_sub) integer_lte integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop boolean_flush) (integer_swap) (integer_lt boolean_rot exec_do*range () integer_stackdepth integer_eq exec_flush) boolean_rot) integer_div exec_empty integer_fromboolean integer_yankdup boolean_rot integer_swap exec_pop () exec_noop) boolean_yankdup boolean_invert_second_then_and exec_while (print_newline boolean_eq) exec_do*count (boolean_empty exec_stackdepth) exec_y (boolean_empty boolean_flush) integer_swap tag_integer_346 print_newline print_exec (exec_when () in2 exec_k (exec_noop exec_if (integer_fromboolean) (integer_mod integer_inc exec_k (exec_k_when_autoconstructing (exec_y_when_autoconstructing (tagged_149) exec_flush -13 boolean_shove boolean_yank) (exec_if (boolean_frominteger boolean_dup integer_shove exec_when (exec_k_when_autoconstructing (boolean_invert_second_then_and) ())) ())) ())) ()))
Zero cases best errors: [1 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 104
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (668 667 178 179 1000 669 177 1000 179 174)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (668 667 178 179 0 669 177 0 179 174)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_346} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tagged_149} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction 20} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times})
Best program: (exec_when () integer_sub integer_lte integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop boolean_flush) (integer_swap) (integer_lt boolean_rot exec_do*range () integer_stackdepth integer_eq exec_flush)) boolean_rot) (integer_div exec_empty integer_fromboolean integer_yankdup boolean_rot integer_swap exec_pop () exec_noop) boolean_yankdup boolean_invert_second_then_and exec_while (print_newline boolean_eq exec_do*count (boolean_empty exec_stackdepth) exec_y (boolean_empty boolean_flush) integer_swap tag_integer_346 print_newline print_exec (exec_when () in2 exec_k (exec_noop exec_if (integer_fromboolean) (integer_mod integer_inc exec_k (exec_k_when_autoconstructing (exec_y_when_autoconstructing (tagged_149) exec_dup (integer_shove exec_y (exec_do*times () print_newline) exec_while (integer_empty integer_dec) exec_s_when_autoconstructing (boolean_invert_second_then_and integer_max) (integer_yankdup exec_do*count (boolean_rot print_newline boolean_frominteger) boolean_swap integer_empty exec_do*count (exec_do*while (exec_yank boolean_yankdup exec_while (exec_do*range (boolean_not integer_swap integer_dec integer_gte integer_rot print_boolean exec_rot (integer_add integer_inc boolean_yank) (20 integer_div integer_dup_times) ()))))) ())) ()) ())) ())))
Errors: [1 1 0 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 100
Size: 140
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.109
Median total errors in population: 7
Error averages by case: (0.332 0.333 0.822 0.821 1.0 0.331 0.823 1.0 0.821 0.826)
Error minima by case: (0 0 0 0 1 0 0 1 0 0)
Average genome size in population (length): 72.442
Average program size in population (points): 98.373
Average percent parens in population: 0.264
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.880125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4004978
--- Timings ---
Current time: 1559582814245 milliseconds
Total Time:          18.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.9 seconds, 53.1%
Fitness Testing:      5.5 seconds, 29.4%
Report:               3.1 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 71                 
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 71                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 65                 
Correct output: 41                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 90                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 83                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 92                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: 75                 
Correct output: -91                 | Program output: 77                 
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: 62                 
Correct output: -100                | Program output: 90                 
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: 54                 
Correct output: -74                 | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 3                  
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: 93                 
Correct output: -61                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: 4                  
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: 85                 
Correct output: -78                 | Program output: 45                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: 59                 
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 48                 
Correct output: -85                 | Program output: 72                 
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 84                 
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_flush} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_346} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tagged_149} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction 20} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_when (integer_sub integer_lte) integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop boolean_flush integer_swap) (integer_lt boolean_rot exec_do*range () integer_stackdepth integer_eq exec_flush) (boolean_rot)) integer_div exec_empty integer_fromboolean) (in3 boolean_rot integer_swap exec_pop () exec_noop) boolean_yankdup boolean_invert_second_then_and exec_while (print_newline boolean_eq) exec_do*count (boolean_empty exec_stackdepth) exec_y (boolean_empty boolean_flush) integer_swap tag_integer_346 print_newline print_exec (exec_when () in2 exec_k (exec_noop exec_if (integer_fromboolean) (integer_mod exec_k (exec_k_when_autoconstructing (exec_y_when_autoconstructing (tagged_149) exec_flush integer_shove exec_y (exec_do*times (print_newline) exec_while (integer_empty) integer_dec) exec_s_when_autoconstructing (boolean_invert_second_then_and integer_max) (integer_yankdup exec_do*count (boolean_rot print_newline boolean_frominteger) boolean_swap integer_empty exec_do*count (exec_do*while (exec_yank boolean_yankdup exec_while (exec_do*range (boolean_not integer_swap integer_dec integer_gte integer_rot print_boolean exec_rot (integer_add integer_inc boolean_yank 20 integer_div integer_dup_times) () ()))))) ()) ()) ())) ()))
Lexicase best errors: [1 0 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 138
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_flush} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_346} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tagged_149} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction 20} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_when (integer_sub integer_lte) integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop boolean_flush integer_swap) (integer_lt boolean_rot exec_do*range () integer_stackdepth integer_eq exec_flush) (boolean_rot)) integer_div exec_empty integer_fromboolean) (in3 boolean_rot integer_swap exec_pop () exec_noop) boolean_yankdup boolean_invert_second_then_and exec_while (print_newline boolean_eq) exec_do*count (boolean_empty exec_stackdepth) exec_y (boolean_empty boolean_flush) integer_swap tag_integer_346 print_newline print_exec (exec_when () in2 exec_k (exec_noop exec_if (integer_fromboolean) (integer_mod exec_k (exec_k_when_autoconstructing (exec_y_when_autoconstructing (tagged_149) exec_flush integer_shove exec_y (exec_do*times (print_newline) exec_while (integer_empty) integer_dec) exec_s_when_autoconstructing (boolean_invert_second_then_and integer_max) (integer_yankdup exec_do*count (boolean_rot print_newline boolean_frominteger) boolean_swap integer_empty exec_do*count (exec_do*while (exec_yank boolean_yankdup exec_while (exec_do*range (boolean_not integer_swap integer_dec integer_gte integer_rot print_boolean exec_rot (integer_add integer_inc boolean_yank 20 integer_div integer_dup_times) () ()))))) ()) ()) ())) ()))
Zero cases best errors: [1 0 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 138
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (309 507 820 1000 1000 509 1000 309 508 509)
Population mean number of elite cases: 6.47
Count of perfect (error zero) individuals by case: (309 507 820 0 0 509 0 309 508 509)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction -38} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction print_integer})
Best program: (exec_when (print_integer integer_min exec_do*times (boolean_dup_times) exec_yank exec_stackdepth exec_k (integer_add integer_dec) (exec_yank exec_yankdup boolean_and) exec_swap (exec_do*count (-38 exec_dup_items integer_yankdup) integer_dup exec_dup_times () exec_do*while (boolean_dup in3 exec_s (print_integer integer_lt boolean_dup_times) (exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty) integer_div integer_div exec_stackdepth integer_dup_times boolean_flush exec_do*times () integer_pop exec_dup_items in2 boolean_rot exec_dup_items integer_yankdup integer_stackdepth exec_do*range (exec_noop integer_dup) boolean_swap integer_add exec_dup_items integer_rot integer_eq integer_dup_items exec_if (boolean_empty exec_do*range (boolean_yankdup integer_inc) print_integer) ())) ()) ())) ()))
Errors: [1 0 0 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 83
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.529
Median total errors in population: 5
Error averages by case: (0.691 0.493 0.18 1.0 1.0 0.491 1.0 0.691 0.492 0.491)
Error minima by case: (0 0 0 1 1 0 1 0 0 0)
Average genome size in population (length): 70.609
Average program size in population (points): 96.34
Average percent parens in population: 0.266
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.245375
Median age in population: 7.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4972360
--- Timings ---
Current time: 1559582817804 milliseconds
Total Time:          21.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.8 seconds, 54.4%
Fitness Testing:      6.3 seconds, 29.1%
Report:               3.5 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 71                 
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 71                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 65                 
Correct output: 41                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 90                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 83                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 92                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: 75                 
Correct output: -91                 | Program output: 77                 
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: 62                 
Correct output: -100                | Program output: 90                 
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: 54                 
Correct output: -74                 | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 3                  
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: 93                 
Correct output: -61                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: 4                  
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: 85                 
Correct output: -78                 | Program output: 45                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: 59                 
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 48                 
Correct output: -85                 | Program output: 72                 
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 84                 
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_max})
Lexicase best program: (exec_when (integer_sub integer_lte) integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_y (integer_yankdup) integer_dup exec_dup_times () exec_do*while (boolean_dup in3 exec_s_when_autoconstructing (boolean_yankdup) (boolean_flush exec_dup_items in3) (boolean_empty print_integer integer_mod boolean_swap) exec_noop integer_dec exec_pop (boolean_rot integer_pop integer_gte) exec_yankdup boolean_pop integer_stackdepth) integer_max) ())
Lexicase best errors: [0 1 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_max})
Zero cases best program: (exec_when (integer_sub integer_lte) integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_y (integer_yankdup) integer_dup exec_dup_times () exec_do*while (boolean_dup in3 exec_s_when_autoconstructing (boolean_yankdup) (boolean_flush exec_dup_items in3) (boolean_empty print_integer integer_mod boolean_swap) exec_noop integer_dec exec_pop (boolean_rot integer_pop integer_gte) exec_yankdup boolean_pop integer_stackdepth) integer_max) ())
Zero cases best errors: [0 1 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (527 1 532 854 531 1000 1000 1000 314 532)
Population mean number of elite cases: 6.29
Count of perfect (error zero) individuals by case: (527 1 532 854 531 0 0 0 314 532)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction -19} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count})
Best program: (exec_when (integer_sub integer_lte) integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_shove (exec_s_when_autoconstructing (exec_noop boolean_flush) (integer_yank) (integer_lt boolean_rot exec_do*range () integer_stackdepth integer_eq exec_flush) boolean_rot) integer_div exec_empty integer_fromboolean integer_yankdup boolean_rot integer_swap exec_pop () exec_noop) (boolean_yankdup) boolean_invert_second_then_and exec_while (exec_do*range (boolean_eq) exec_do*count (boolean_empty exec_stackdepth) integer_dec integer_yankdup integer_min boolean_pop exec_if (exec_noop integer_max) (boolean_xor in3 integer_min integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_shove) boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min -19 integer_gt exec_dup (boolean_swap integer_dup_items in2 exec_do*count ())) () ()) () ())))
Errors: [0 1 0 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 76
Size: 102
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.709
Median total errors in population: 5
Error averages by case: (0.473 0.999 0.468 0.146 0.469 1.0 1.0 1.0 0.686 0.468)
Error minima by case: (0 0 0 0 0 1 1 1 0 0)
Average genome size in population (length): 69.246
Average program size in population (points): 94.143
Average percent parens in population: 0.263
Minimum age in population: 6.0
Maximum age in population: 10.65625
Average age in population: 8.72965625
Median age in population: 8.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5947385
--- Timings ---
Current time: 1559582820989 milliseconds
Total Time:          25.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.8 seconds, 54.3%
Fitness Testing:      7.2 seconds, 28.5%
Report:               4.2 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 71                 
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 71                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 65                 
Correct output: 41                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 90                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 83                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 92                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: 75                 
Correct output: -91                 | Program output: 77                 
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: 62                 
Correct output: -100                | Program output: 90                 
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: 54                 
Correct output: -74                 | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 3                  
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: 93                 
Correct output: -61                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: 4                  
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: 85                 
Correct output: -78                 | Program output: 45                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: 59                 
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 48                 
Correct output: -85                 | Program output: 72                 
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 84                 
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction -19} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_224} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction 20} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_when () integer_sub integer_lte integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop boolean_flush integer_swap) (integer_lt boolean_rot exec_do*range () integer_stackdepth integer_eq exec_flush) (boolean_rot) integer_div exec_empty integer_fromboolean in3 boolean_rot integer_swap) exec_pop () exec_noop) (boolean_yankdup boolean_invert_second_then_and) exec_while (print_newline boolean_eq) exec_do*count (boolean_empty exec_stackdepth) exec_y (boolean_empty integer_min integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min -19 integer_gt exec_dup (boolean_swap integer_dup_items in2 integer_shove exec_y (exec_do*times (print_newline) exec_while (integer_empty) integer_dec) exec_s_when_autoconstructing (boolean_invert_second_then_and tagged_224) (integer_yankdup exec_do*count (boolean_not print_newline boolean_frominteger) boolean_swap integer_empty exec_do*count (exec_do*while (exec_yank boolean_yankdup exec_while (exec_do*range (boolean_not integer_swap integer_dec integer_gte integer_rot print_boolean exec_rot (integer_add integer_inc boolean_yank 20 integer_div integer_dup_times) () ()))))) ())) () ()))
Lexicase best errors: [0 0 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 133
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction -19} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_224} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction 20} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_when () integer_sub integer_lte integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop boolean_flush integer_swap) (integer_lt boolean_rot exec_do*range () integer_stackdepth integer_eq exec_flush) (boolean_rot) integer_div exec_empty integer_fromboolean in3 boolean_rot integer_swap) exec_pop () exec_noop) (boolean_yankdup boolean_invert_second_then_and) exec_while (print_newline boolean_eq) exec_do*count (boolean_empty exec_stackdepth) exec_y (boolean_empty integer_min integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min -19 integer_gt exec_dup (boolean_swap integer_dup_items in2 integer_shove exec_y (exec_do*times (print_newline) exec_while (integer_empty) integer_dec) exec_s_when_autoconstructing (boolean_invert_second_then_and tagged_224) (integer_yankdup exec_do*count (boolean_not print_newline boolean_frominteger) boolean_swap integer_empty exec_do*count (exec_do*while (exec_yank boolean_yankdup exec_while (exec_do*range (boolean_not integer_swap integer_dec integer_gte integer_rot print_boolean exec_rot (integer_add integer_inc boolean_yank 20 integer_div integer_dup_times) () ()))))) ())) () ()))
Zero cases best errors: [0 0 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 133
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (553 891 891 1000 1000 1000 553 1000 159 555)
Population mean number of elite cases: 7.60
Count of perfect (error zero) individuals by case: (553 891 891 0 0 0 553 0 159 555)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction -38} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_346} {:close 0, :instruction print_newline} {:close 0, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mod})
Best program: (exec_when (print_integer integer_min exec_do*times (boolean_dup_times exec_yank integer_mod exec_k (exec_yankdup integer_dec) (exec_yank exec_yankdup boolean_and) exec_swap (exec_do*count (-38 exec_dup_items integer_yankdup) integer_dup exec_dup_times () exec_do*while (boolean_dup in3 exec_s (print_integer integer_lt boolean_dup_times) (exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty) integer_div exec_stackdepth integer_dup_times integer_rot exec_do*times () integer_pop exec_dup_items in2 exec_do*while (exec_dup_items integer_yankdup integer_stackdepth exec_do*count (boolean_empty exec_stackdepth) exec_y (boolean_empty boolean_flush) integer_swap tag_integer_346 print_newline print_exec (exec_when () in2 exec_k (exec_noop exec_if (integer_fromboolean) (integer_mod)) ())))) ()) ())) ())))
Errors: [0 0 0 1 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 89
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 6.398
Median total errors in population: 5
Error averages by case: (0.447 0.109 0.109 1.0 1.0 1.0 0.447 1.0 0.841 0.445)
Error minima by case: (0 0 0 1 1 1 0 1 0 0)
Average genome size in population (length): 61.254
Average program size in population (points): 83.679
Average percent parens in population: 0.268
Minimum age in population: 7.625
Maximum age in population: 12.171875
Average age in population: 10.093109375
Median age in population: 10.1171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6958208
--- Timings ---
Current time: 1559582824498 milliseconds
Total Time:          28.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.7 seconds, 55.0%
Fitness Testing:      8.1 seconds, 28.6%
Report:               4.6 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 71                 
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 71                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 65                 
Correct output: 41                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 90                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 83                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 92                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: 75                 
Correct output: -91                 | Program output: 77                 
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: 62                 
Correct output: -100                | Program output: 90                 
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: 54                 
Correct output: -74                 | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 3                  
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: 93                 
Correct output: -61                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: 4                  
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: 85                 
Correct output: -78                 | Program output: 45                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: 59                 
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 48                 
Correct output: -85                 | Program output: 72                 
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 84                 
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_while})
Lexicase best program: (exec_while (in1 integer_add integer_dup) exec_s (boolean_stackdepth) (integer_pop boolean_frominteger exec_yankdup integer_eq) (exec_y_when_autoconstructing () exec_when (exec_yank exec_do*count (exec_y_when_autoconstructing () integer_mod integer_mult) integer_dup_items exec_yankdup) integer_gte) integer_lt integer_dup_times integer_max exec_s_when_autoconstructing (boolean_yankdup) (boolean_flush exec_dup_items in3) (boolean_empty print_integer integer_mod boolean_swap) exec_noop integer_sub exec_pop (boolean_rot integer_pop integer_gte) exec_yankdup boolean_pop integer_stackdepth integer_eq integer_yankdup in4 exec_do*count () exec_if () () exec_y (exec_yank) in2 exec_shove (exec_while ()))
Lexicase best errors: [1 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_while})
Zero cases best program: (exec_while (in1 integer_add integer_dup) exec_s (boolean_stackdepth) (integer_pop boolean_frominteger exec_yankdup integer_eq) (exec_y_when_autoconstructing () exec_when (exec_yank exec_do*count (exec_y_when_autoconstructing () integer_mod integer_mult) integer_dup_items exec_yankdup) integer_gte) integer_lt integer_dup_times integer_max exec_s_when_autoconstructing (boolean_yankdup) (boolean_flush exec_dup_items in3) (boolean_empty print_integer integer_mod boolean_swap) exec_noop integer_sub exec_pop (boolean_rot integer_pop integer_gte) exec_yankdup boolean_pop integer_stackdepth integer_eq integer_yankdup in4 exec_do*count () exec_if () () exec_y (exec_yank) in2 exec_shove (exec_while ()))
Zero cases best errors: [1 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 645 644 645 886 233 1000 879 1000 652)
Population mean number of elite cases: 6.82
Count of perfect (error zero) individuals by case: (233 645 644 645 886 233 0 879 0 652)
Population mean number of perfect (error zero) cases: 4.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_346} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction -19} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yank})
Best program: (exec_when (integer_sub integer_lte) integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop boolean_flush) (integer_swap) (integer_lt boolean_rot integer_mod boolean_swap) exec_noop integer_sub exec_pop (boolean_rot integer_pop integer_gte)) exec_yankdup integer_fromboolean integer_yankdup boolean_rot integer_swap exec_pop () exec_noop) (boolean_yankdup) boolean_invert_second_then_and exec_while (print_newline boolean_eq exec_do*count (boolean_empty exec_stackdepth exec_y (boolean_empty boolean_flush) integer_swap tag_integer_346 print_newline in3 integer_min integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add integer_add boolean_rot integer_min -19 integer_gt exec_dup (boolean_swap integer_dup_items in2 exec_do*count (exec_k (boolean_xor boolean_frominteger integer_mod integer_div) (exec_y_when_autoconstructing (exec_empty) integer_mult integer_yank in1) exec_do*count (exec_while (boolean_stackdepth exec_s () (exec_dup (exec_yankdup exec_yankdup exec_do*count (exec_dup_items) exec_yank)) ()))))) () ())))
Errors: [1 0 0 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 93
Size: 123
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 5.183
Median total errors in population: 4
Error averages by case: (0.767 0.355 0.356 0.355 0.114 0.767 1.0 0.121 1.0 0.348)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 64.899
Average program size in population (points): 88.14
Average percent parens in population: 0.262
Minimum age in population: 9.0
Maximum age in population: 13.8671875
Average age in population: 11.6194296875
Median age in population: 11.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7895264
--- Timings ---
Current time: 1559582828124 milliseconds
Total Time:          32.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.7 seconds, 55.1%
Fitness Testing:      9.0 seconds, 28.1%
Report:               5.3 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 71                 
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 71                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 65                 
Correct output: 41                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 90                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 83                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 92                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: 75                 
Correct output: -91                 | Program output: 77                 
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: 62                 
Correct output: -100                | Program output: 90                 
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: 54                 
Correct output: -74                 | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 3                  
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: 93                 
Correct output: -61                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: 4                  
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: 85                 
Correct output: -78                 | Program output: 45                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: 59                 
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 48                 
Correct output: -85                 | Program output: 72                 
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 84                 
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction -38} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup})
Lexicase best program: (exec_when (print_integer integer_add exec_do*times (boolean_dup_times) exec_yank exec_stackdepth exec_k (exec_yankdup integer_dec) (exec_yank exec_yankdup boolean_and) exec_swap (exec_do*count (-38 exec_dup_items integer_yankdup) integer_dup exec_dup_times () exec_do*while (boolean_dup in3 integer_lt print_integer integer_lt boolean_dup_times) exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty) integer_div exec_stackdepth integer_dup_times integer_rot exec_do*times () integer_pop exec_dup_items in2 integer_lt exec_dup_items integer_yankdup integer_stackdepth exec_do*range (exec_noop integer_dup))) ()) ()))
Lexicase best errors: [1 0 1 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 64
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction -38} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup})
Zero cases best program: (exec_when (print_integer integer_add exec_do*times (boolean_dup_times) exec_yank exec_stackdepth exec_k (exec_yankdup integer_dec) (exec_yank exec_yankdup boolean_and) exec_swap (exec_do*count (-38 exec_dup_items integer_yankdup) integer_dup exec_dup_times () exec_do*while (boolean_dup in3 integer_lt print_integer integer_lt boolean_dup_times) exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty) integer_div exec_stackdepth integer_dup_times integer_rot exec_do*times () integer_pop exec_dup_items in2 integer_lt exec_dup_items integer_yankdup integer_stackdepth exec_do*range (exec_noop integer_dup))) ()) ()))
Zero cases best errors: [1 0 1 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 558 2 561 2 558 303 1000 304 304)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (0 558 2 561 2 558 303 0 304 304)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction -19} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank})
Best program: (exec_do*while (integer_sub integer_inc) integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (in3 print_integer exec_yankdup integer_yankdup integer_lte boolean_frominteger in1 integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop boolean_flush) (in4 integer_eq exec_flush) (boolean_rot integer_div exec_empty integer_fromboolean integer_yankdup boolean_rot integer_swap exec_pop () integer_mod integer_dup_times integer_rot boolean_xor in3 integer_shove integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_fromboolean)) (integer_add boolean_rot integer_min -19) (integer_gt exec_dup (boolean_swap integer_dup_items in2 exec_do*count (integer_lte boolean_xor boolean_frominteger integer_mod integer_div) exec_y_when_autoconstructing (exec_empty) integer_mult integer_yank in1 exec_do*count (exec_while (boolean_stackdepth exec_s () (exec_dup (exec_yankdup exec_yankdup exec_do*count (exec_dup_items) exec_do*count (integer_gt exec_do*range (exec_yank)))) ()))))))) ())
Errors: [1 0 1 0 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 80
Size: 106
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 7.408
Median total errors in population: 7
Error averages by case: (1.0 0.442 0.998 0.439 0.998 0.442 0.697 1.0 0.696 0.696)
Error minima by case: (1 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 63.648
Average program size in population (points): 86.319
Average percent parens in population: 0.261
Minimum age in population: 10.125
Maximum age in population: 15.1640625
Average age in population: 13.06836328125
Median age in population: 13.1328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8859677
--- Timings ---
Current time: 1559582831400 milliseconds
Total Time:          35.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.7 seconds, 55.1%
Fitness Testing:      9.9 seconds, 27.8%
Report:               6.0 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 71                 
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 71                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 65                 
Correct output: 41                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 90                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 83                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 92                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: 75                 
Correct output: -91                 | Program output: 77                 
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: 62                 
Correct output: -100                | Program output: 90                 
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: 54                 
Correct output: -74                 | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 3                  
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: 93                 
Correct output: -61                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: 4                  
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: 85                 
Correct output: -78                 | Program output: 45                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: 59                 
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 48                 
Correct output: -85                 | Program output: 72                 
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 84                 
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction -38} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_exec_752} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction 20} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_stackdepth exec_k (exec_yankdup integer_dec) (exec_yank exec_yankdup boolean_and) exec_swap (exec_do*count (-38 exec_dup_items integer_yankdup) integer_dup exec_dup_times () exec_do*while (boolean_dup in3 exec_s (print_integer integer_lt boolean_dup_times) (exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty) integer_div exec_stackdepth integer_dup_times boolean_swap exec_do*times () integer_pop exec_dup_items in2 integer_lt exec_dup_items integer_yankdup integer_stackdepth exec_do*range (exec_noop integer_dup) boolean_swap integer_add exec_dup_items integer_rot integer_eq integer_dup_items exec_if (exec_do*times (exec_do*range (boolean_yankdup integer_inc) print_integer) boolean_invert_second_then_and boolean_eq boolean_yank integer_yankdup integer_stackdepth in1 integer_inc integer_swap integer_pop) (integer_gte exec_s_when_autoconstructing (tag_exec_752 (in2 integer_empty integer_dec) exec_s_when_autoconstructing (boolean_invert_second_then_and integer_max) (integer_yankdup exec_do*count (boolean_rot print_newline print_exec () boolean_swap integer_empty exec_do*count (exec_do*while (exec_yank boolean_yankdup exec_while (exec_do*range (boolean_not integer_swap integer_dec integer_gte integer_rot print_boolean exec_rot (integer_add integer_inc boolean_yank) (20 integer_div integer_dup_times) ())))))) ()) () ()))) ()) ())) ())
Lexicase best errors: [1 0 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 135
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction -38} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_exec_752} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction 20} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_stackdepth exec_k (exec_yankdup integer_dec) (exec_yank exec_yankdup boolean_and) exec_swap (exec_do*count (-38 exec_dup_items integer_yankdup) integer_dup exec_dup_times () exec_do*while (boolean_dup in3 exec_s (print_integer integer_lt boolean_dup_times) (exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty) integer_div exec_stackdepth integer_dup_times boolean_swap exec_do*times () integer_pop exec_dup_items in2 integer_lt exec_dup_items integer_yankdup integer_stackdepth exec_do*range (exec_noop integer_dup) boolean_swap integer_add exec_dup_items integer_rot integer_eq integer_dup_items exec_if (exec_do*times (exec_do*range (boolean_yankdup integer_inc) print_integer) boolean_invert_second_then_and boolean_eq boolean_yank integer_yankdup integer_stackdepth in1 integer_inc integer_swap integer_pop) (integer_gte exec_s_when_autoconstructing (tag_exec_752 (in2 integer_empty integer_dec) exec_s_when_autoconstructing (boolean_invert_second_then_and integer_max) (integer_yankdup exec_do*count (boolean_rot print_newline print_exec () boolean_swap integer_empty exec_do*count (exec_do*while (exec_yank boolean_yankdup exec_while (exec_do*range (boolean_not integer_swap integer_dec integer_gte integer_rot print_boolean exec_rot (integer_add integer_inc boolean_yank) (20 integer_div integer_dup_times) ())))))) ()) () ()))) ()) ())) ())
Zero cases best errors: [1 0 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 135
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 349 333 349 349 333 348 348 876 1000)
Population mean number of elite cases: 5.28
Count of perfect (error zero) individuals by case: (0 349 333 349 349 333 348 348 876 0)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction -38} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times})
Best program: (exec_when (print_integer integer_min exec_shove (boolean_dup_times) exec_yank exec_if (exec_k (exec_yankdup integer_dec) (exec_yank exec_yankdup boolean_and) exec_swap (exec_do*count (-38 exec_dup_items integer_yankdup) integer_dup exec_dup_times () exec_do*while (boolean_dup in3 exec_s (print_integer integer_lt boolean_dup_times) () ())) ()) ()))
Errors: [1 0 1 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 27
Size: 42
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 6.715
Median total errors in population: 7
Error averages by case: (1.0 0.651 0.667 0.651 0.651 0.667 0.652 0.652 0.124 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 58.57
Average program size in population (points): 79.356
Average percent parens in population: 0.262
Minimum age in population: 11.5
Maximum age in population: 16.42578125
Average age in population: 14.623400390625
Median age in population: 14.6591796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9911594
--- Timings ---
Current time: 1559582834405 milliseconds
Total Time:          38.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.5 seconds, 55.4%
Fitness Testing:     10.8 seconds, 27.9%
Report:               6.4 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 71                 
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 71                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 65                 
Correct output: 41                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 90                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 83                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 92                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: 75                 
Correct output: -91                 | Program output: 77                 
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: 62                 
Correct output: -100                | Program output: 90                 
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: 54                 
Correct output: -74                 | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 3                  
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: 93                 
Correct output: -61                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: 4                  
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: 85                 
Correct output: -78                 | Program output: 45                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: 59                 
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 48                 
Correct output: -85                 | Program output: 72                 
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 84                 
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_while (in1 integer_add integer_dup) exec_s (boolean_stackdepth) (integer_sub boolean_frominteger exec_yankdup integer_eq exec_y_when_autoconstructing () exec_when (exec_yank print_integer exec_y_when_autoconstructing () integer_mod) integer_mult) (integer_dup_items exec_yankdup) integer_gte integer_lt integer_dup_times integer_max exec_s_when_autoconstructing (boolean_yankdup) (integer_fromboolean exec_dup_items in3) (exec_y (print_integer integer_mod boolean_invert_first_then_and) exec_noop integer_sub exec_pop (boolean_rot integer_pop integer_gte)) exec_yankdup boolean_pop integer_flush integer_eq integer_yankdup in4 exec_do*count () exec_dup () exec_y (exec_yank in2 exec_shove (exec_flush)))
Lexicase best errors: [0 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_while (in1 integer_add integer_dup) exec_s (boolean_stackdepth) (integer_sub boolean_frominteger exec_yankdup integer_eq exec_y_when_autoconstructing () exec_when (exec_yank print_integer exec_y_when_autoconstructing () integer_mod) integer_mult) (integer_dup_items exec_yankdup) integer_gte integer_lt integer_dup_times integer_max exec_s_when_autoconstructing (boolean_yankdup) (integer_fromboolean exec_dup_items in3) (exec_y (print_integer integer_mod boolean_invert_first_then_and) exec_noop integer_sub exec_pop (boolean_rot integer_pop integer_gte)) exec_yankdup boolean_pop integer_flush integer_eq integer_yankdup in4 exec_do*count () exec_dup () exec_y (exec_yank in2 exec_shove (exec_flush)))
Zero cases best errors: [0 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (593 2 592 283 283 592 879 285 591 2)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (593 2 592 283 283 592 879 285 591 2)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction -38} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction -19} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count})
Best program: (exec_when (print_integer integer_min exec_do*times (boolean_dup_times) exec_yank exec_stackdepth exec_k (exec_yankdup integer_dec) () exec_yank exec_yankdup boolean_and) exec_swap (exec_do*count (-38 exec_dup_items integer_yankdup) integer_dup exec_dup_times (exec_do*while (boolean_dup in3 exec_s (print_integer integer_lt boolean_dup_times) (integer_gte integer_inc exec_y (exec_dup_times (-19 integer_empty) integer_div exec_stackdepth integer_dup_times integer_rot exec_do*times (integer_pop exec_dup_items in2 integer_lt exec_dup_items integer_yankdup integer_stackdepth integer_yankdup integer_min boolean_pop exec_if (exec_noop integer_max) (boolean_xor in3 integer_min integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add integer_rot integer_min -19 integer_gt exec_dup (boolean_swap integer_dup_items in2 exec_do*count ())) () ())))) ()))) ())
Errors: [0 1 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 72
Size: 96
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.898
Median total errors in population: 5
Error averages by case: (0.407 0.998 0.408 0.717 0.717 0.408 0.121 0.715 0.409 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.328
Average program size in population (points): 81.655
Average percent parens in population: 0.260
Minimum age in population: 13.21875
Maximum age in population: 17.9443359375
Average age in population: 16.1146337890625
Median age in population: 16.19921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 10867430
--- Timings ---
Current time: 1559582838129 milliseconds
Total Time:          42.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.6 seconds, 56.2%
Fitness Testing:     11.7 seconds, 27.8%
Report:               6.6 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 29                 
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 79                 
Correct output: 12                  | Program output: 62                 
Correct output: 31                  | Program output: 82                 
Correct output: 32                  | Program output: 61                 
Correct output: 41                  | Program output: 82                 
Correct output: 22                  | Program output: 41                 
Correct output: 4                   | Program output: 70                 
Correct output: 2                   | Program output: 21                 
Correct output: 38                  | Program output: 73                 
Correct output: 13                  | Program output: 46                 
Correct output: 17                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 2                   | Program output: 63                 
Correct output: 4                   | Program output: 33                 
Correct output: 13                  | Program output: 52                 
Correct output: 32                  | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 53                 
Correct output: -19                 | Program output: 68                 
Correct output: -68                 | Program output: 93                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 47                 
Correct output: -24                 | Program output: 6                  
Correct output: -82                 | Program output: 9                  
Correct output: -80                 | Program output: 62                 
Correct output: 37                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: 6                  
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -21                
Correct output: -77                 | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: 81                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 50                 
Correct output: -36                 | Program output: 30                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 79                 
Correct output: 42                  | Program output: 42                 
Correct output: -44                 | Program output: 29                 
Correct output: -4                  | Program output: 83                 
Correct output: -52                 | Program output: 13                 
Correct output: -89                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 36                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 24                 
Correct output: -68                 | Program output: 75                 
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 27                 
Correct output: -44                 | Program output: 12                 
Correct output: -51                 | Program output: 18                 
Correct output: -93                 | Program output: -91                
Correct output: -94                 | Program output: 28                 
Correct output: -2                  | Program output: 11                 
Correct output: -38                 | Program output: 53                 
Correct output: -90                 | Program output: 73                 
Correct output: -81                 | Program output: 17                 
Correct output: -69                 | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: 44                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_exec_752} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_mod exec_rot (exec_while (boolean_empty integer_swap) exec_yankdup) () (in1 print_integer exec_do*times ()) integer_shove exec_dup_items integer_swap boolean_empty boolean_empty boolean_yankdup exec_yankdup integer_yankdup integer_yank exec_y (in4 boolean_flush integer_lt) print_integer exec_do*while (integer_dup_times integer_fromboolean boolean_xor integer_fromboolean in1 exec_do*while ()) in1 integer_lte exec_when (print_exec (exec_do*count (integer_inc) boolean_xor) integer_add boolean_pop integer_rot integer_eq integer_dup_items exec_if (integer_gt exec_do*range (boolean_yankdup integer_inc) print_integer) (boolean_invert_second_then_and boolean_eq boolean_yank integer_yankdup integer_stackdepth in1) integer_inc integer_swap integer_pop integer_gte exec_s_when_autoconstructing (tag_exec_752 (integer_rot print_boolean integer_dup exec_do*while (exec_do*while (exec_s (integer_div integer_gte) () ())))) () ()))
Lexicase best errors: [1 1 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 92
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_exec_752} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_mod exec_rot (exec_while (boolean_empty integer_swap) exec_yankdup) () (in1 print_integer exec_do*times ()) integer_shove exec_dup_items integer_swap boolean_empty boolean_empty boolean_yankdup exec_yankdup integer_yankdup integer_yank exec_y (in4 boolean_flush integer_lt) print_integer exec_do*while (integer_dup_times integer_fromboolean boolean_xor integer_fromboolean in1 exec_do*while ()) in1 integer_lte exec_when (print_exec (exec_do*count (integer_inc) boolean_xor) integer_add boolean_pop integer_rot integer_eq integer_dup_items exec_if (integer_gt exec_do*range (boolean_yankdup integer_inc) print_integer) (boolean_invert_second_then_and boolean_eq boolean_yank integer_yankdup integer_stackdepth in1) integer_inc integer_swap integer_pop integer_gte exec_s_when_autoconstructing (tag_exec_752 (integer_rot print_boolean integer_dup exec_do*while (exec_do*while (exec_s (integer_div integer_gte) () ())))) () ()))
Zero cases best errors: [1 1 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 92
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 381 241 1 1000 259 381 259 241 241)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (383 381 241 1 0 259 381 259 241 241)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (exec_when (integer_sub integer_lte integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte) (integer_dec exec_pop () integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (boolean_dup in3 integer_lt print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty integer_div exec_stackdepth integer_dup_times boolean_rot integer_sub integer_min boolean_pop exec_if (exec_noop integer_max) (boolean_xor in3 integer_min integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ())))) ()))))))
Errors: [1 1 0 1 1 1 1 1 0 0]
Total: 7
Mean: 0.7
Genome size: 60
Size: 82
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.613
Median total errors in population: 7
Error averages by case: (0.617 0.619 0.759 0.999 1.0 0.741 0.619 0.741 0.759 0.759)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 60.091
Average program size in population (points): 81.281
Average percent parens in population: 0.260
Minimum age in population: 14.90625
Maximum age in population: 19.599609375
Average age in population: 17.79929443359375
Median age in population: 17.85498046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 11917192
--- Timings ---
Current time: 1559582842327 milliseconds
Total Time:          46.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.9 seconds, 56.2%
Fitness Testing:     12.7 seconds, 27.5%
Report:               7.4 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 71                 
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 71                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 65                 
Correct output: 41                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 90                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 83                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 92                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: 75                 
Correct output: -91                 | Program output: 77                 
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: 62                 
Correct output: -100                | Program output: 90                 
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: 54                 
Correct output: -74                 | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 3                  
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: 93                 
Correct output: -61                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: 4                  
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: 85                 
Correct output: -78                 | Program output: 45                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: 59                 
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 48                 
Correct output: -85                 | Program output: 72                 
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 84                 
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush})
Lexicase best program: (exec_when (integer_sub integer_lte integer_dec exec_noop boolean_dup_times exec_when (integer_sub integer_lte) integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items) exec_s () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop boolean_flush) (boolean_not) (boolean_flush) integer_eq exec_do*range () integer_stackdepth boolean_not) boolean_flush) (integer_eq boolean_dup integer_min) boolean_swap boolean_dup_items exec_rot (boolean_invert_first_then_and exec_empty integer_fromboolean integer_yankdup exec_do*range (integer_swap exec_pop () exec_noop) boolean_yankdup) (boolean_dup integer_min) (boolean_swap) boolean_dup_items exec_rot (boolean_invert_first_then_and exec_s (integer_sub boolean_yankdup) (integer_stackdepth exec_empty integer_fromboolean integer_yankdup boolean_rot integer_swap exec_pop () exec_noop) (integer_max boolean_yank exec_y (exec_yank) in2 exec_shove (exec_flush))) () ())
Lexicase best errors: [1 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 97
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush})
Zero cases best program: (exec_when (integer_sub integer_lte integer_dec exec_noop boolean_dup_times exec_when (integer_sub integer_lte) integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items) exec_s () (in3 print_integer integer_gte boolean_frominteger in1 integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop boolean_flush) (boolean_not) (boolean_flush) integer_eq exec_do*range () integer_stackdepth boolean_not) boolean_flush) (integer_eq boolean_dup integer_min) boolean_swap boolean_dup_items exec_rot (boolean_invert_first_then_and exec_empty integer_fromboolean integer_yankdup exec_do*range (integer_swap exec_pop () exec_noop) boolean_yankdup) (boolean_dup integer_min) (boolean_swap) boolean_dup_items exec_rot (boolean_invert_first_then_and exec_s (integer_sub boolean_yankdup) (integer_stackdepth exec_empty integer_fromboolean integer_yankdup boolean_rot integer_swap exec_pop () exec_noop) (integer_max boolean_yank exec_y (exec_yank) in2 exec_shove (exec_flush))) () ())
Zero cases best errors: [1 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 97
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 785 784 296 188 296 297 190 298 298)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (296 785 784 296 188 296 297 190 298 298)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_980} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc})
Best program: (exec_when (print_integer integer_min exec_do*times (boolean_dup_times) exec_yank exec_when (integer_sub integer_lte) integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (in3 print_integer integer_gte exec_do*times ()) (integer_shove exec_dup_items integer_swap boolean_empty) boolean_empty boolean_yankdup exec_yankdup exec_when (integer_yank exec_y (in4 boolean_flush integer_lt) print_integer boolean_stackdepth integer_dup_times exec_dup_items boolean_xor integer_fromboolean boolean_invert_second_then_and) print_integer exec_do*while (integer_dup_times integer_fromboolean boolean_xor integer_fromboolean in1 exec_do*while ()) exec_noop exec_rot () (boolean_swap integer_add exec_dup_items tagged_980 boolean_swap integer_min integer_min integer_gte integer_inc) ()))
Errors: [1 0 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 58
Size: 73
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.272
Median total errors in population: 7
Error averages by case: (0.704 0.215 0.216 0.704 0.812 0.704 0.703 0.81 0.702 0.702)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.432
Average program size in population (points): 82.247
Average percent parens in population: 0.264
Minimum age in population: 15.90625
Maximum age in population: 21.0869140625
Average age in population: 19.29733032226562
Median age in population: 19.368408203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 12975900
--- Timings ---
Current time: 1559582846248 milliseconds
Total Time:          50.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.5 seconds, 56.3%
Fitness Testing:     13.6 seconds, 27.0%
Report:               8.3 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 29                 
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 79                 
Correct output: 12                  | Program output: 62                 
Correct output: 31                  | Program output: 82                 
Correct output: 32                  | Program output: 61                 
Correct output: 41                  | Program output: 82                 
Correct output: 22                  | Program output: 41                 
Correct output: 4                   | Program output: 70                 
Correct output: 2                   | Program output: 21                 
Correct output: 38                  | Program output: 73                 
Correct output: 13                  | Program output: 46                 
Correct output: 17                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 2                   | Program output: 63                 
Correct output: 4                   | Program output: 33                 
Correct output: 13                  | Program output: 52                 
Correct output: 32                  | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 53                 
Correct output: -19                 | Program output: 68                 
Correct output: -68                 | Program output: 93                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 47                 
Correct output: -24                 | Program output: 6                  
Correct output: -82                 | Program output: 9                  
Correct output: -80                 | Program output: 62                 
Correct output: 37                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: 6                  
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -21                
Correct output: -77                 | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: 81                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 50                 
Correct output: -36                 | Program output: 30                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 79                 
Correct output: 42                  | Program output: 42                 
Correct output: -44                 | Program output: 29                 
Correct output: -4                  | Program output: 83                 
Correct output: -52                 | Program output: 13                 
Correct output: -89                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 36                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 24                 
Correct output: -68                 | Program output: 75                 
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 27                 
Correct output: -44                 | Program output: 12                 
Correct output: -51                 | Program output: 18                 
Correct output: -93                 | Program output: -91                
Correct output: -94                 | Program output: 28                 
Correct output: -2                  | Program output: 11                 
Correct output: -38                 | Program output: 53                 
Correct output: -90                 | Program output: 73                 
Correct output: -81                 | Program output: 17                 
Correct output: -69                 | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: 44                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_exec_752} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_335} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_mod exec_rot (exec_while (boolean_empty integer_swap) exec_yankdup) () (in1 print_integer exec_do*times ()) integer_shove exec_dup_items integer_swap boolean_empty boolean_empty boolean_yankdup exec_yankdup integer_yankdup integer_yank exec_y (in4 boolean_flush integer_lt) print_integer exec_do*while (integer_dup_times integer_fromboolean boolean_xor integer_fromboolean in1 exec_do*while ()) in1 integer_lte exec_when (print_exec (exec_do*count (integer_inc)) boolean_xor) integer_add boolean_pop integer_rot integer_eq integer_dup_items exec_if (integer_gt exec_do*range (boolean_yankdup integer_inc) print_integer) (boolean_invert_second_then_and integer_swap integer_pop) integer_gte exec_s_when_autoconstructing (tag_exec_752 (exec_do*times (exec_do*range (boolean_yankdup integer_inc) print_integer) tag_exec_335 (boolean_eq boolean_yank integer_yankdup integer_stackdepth exec_s (exec_dup_times (integer_swap integer_pop) integer_gte) () ()))) () ())
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 95
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_exec_752} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_335} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_mod exec_rot (exec_while (boolean_empty integer_swap) exec_yankdup) () (in1 print_integer exec_do*times ()) integer_shove exec_dup_items integer_swap boolean_empty boolean_empty boolean_yankdup exec_yankdup integer_yankdup integer_yank exec_y (in4 boolean_flush integer_lt) print_integer exec_do*while (integer_dup_times integer_fromboolean boolean_xor integer_fromboolean in1 exec_do*while ()) in1 integer_lte exec_when (print_exec (exec_do*count (integer_inc)) boolean_xor) integer_add boolean_pop integer_rot integer_eq integer_dup_items exec_if (integer_gt exec_do*range (boolean_yankdup integer_inc) print_integer) (boolean_invert_second_then_and integer_swap integer_pop) integer_gte exec_s_when_autoconstructing (tag_exec_752 (exec_do*times (exec_do*range (boolean_yankdup integer_inc) print_integer) tag_exec_335 (boolean_eq boolean_yank integer_yankdup integer_stackdepth exec_s (exec_dup_times (integer_swap integer_pop) integer_gte) () ()))) () ())
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 95
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (548 101 869 648 1000 101 101 101 101 869)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (548 101 869 648 0 101 101 101 101 869)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (exec_when (exec_when (integer_sub integer_lte integer_dec exec_noop boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (boolean_dup in3 integer_lt print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty integer_div exec_stackdepth integer_dup_times boolean_rot integer_sub integer_min boolean_pop exec_if (exec_noop integer_max) (boolean_xor in3 integer_min integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing () () ())))) ())))) ())))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 56
Size: 78
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.561
Median total errors in population: 6
Error averages by case: (0.452 0.899 0.131 0.352 1.0 0.899 0.899 0.899 0.899 0.131)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 59.037
Average program size in population (points): 79.727
Average percent parens in population: 0.257
Minimum age in population: 16.90625
Maximum age in population: 22.7958984375
Average age in population: 20.72269836425781
Median age in population: 20.85107421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 13941308
--- Timings ---
Current time: 1559582850108 milliseconds
Total Time:          53.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.5 seconds, 56.7%
Fitness Testing:     14.5 seconds, 26.9%
Report:               8.7 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 79                 
Correct output: 12                  | Program output: 62                 
Correct output: 31                  | Program output: 82                 
Correct output: 32                  | Program output: 61                 
Correct output: 41                  | Program output: 82                 
Correct output: 22                  | Program output: 41                 
Correct output: 4                   | Program output: 70                 
Correct output: 2                   | Program output: 21                 
Correct output: 38                  | Program output: 73                 
Correct output: 13                  | Program output: 46                 
Correct output: 17                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 2                   | Program output: 63                 
Correct output: 4                   | Program output: 33                 
Correct output: 13                  | Program output: 52                 
Correct output: 32                  | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 53                 
Correct output: -19                 | Program output: 68                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 6                  
Correct output: -82                 | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 79                 
Correct output: 42                  | Program output: 42                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 13                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 36                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 24                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 27                 
Correct output: -44                 | Program output: 12                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 28                 
Correct output: -2                  | Program output: 11                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 44                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (boolean_dup in3 in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ())))) ()))
Lexicase best errors: [1 0 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 92
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (boolean_dup in3 in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ())))) ()))
Zero cases best errors: [1 0 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 92
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 869 1000 1000 736 1000 135 737 1000 1000)
Population mean number of elite cases: 8.48
Count of perfect (error zero) individuals by case: (0 869 0 0 736 0 135 737 0 0)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (boolean_dup in3 in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ())))) ()))
Errors: [1 0 1 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 66
Size: 92
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.523
Median total errors in population: 7
Error averages by case: (1.0 0.131 1.0 1.0 0.264 1.0 0.865 0.263 1.0 1.0)
Error minima by case: (1 0 1 1 0 1 0 0 1 1)
Average genome size in population (length): 62.651
Average program size in population (points): 84.288
Average percent parens in population: 0.256
Minimum age in population: 19.671875
Maximum age in population: 24.36981201171875
Average age in population: 22.43639282226562
Median age in population: 22.51138305664062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 15103563
--- Timings ---
Current time: 1559582854349 milliseconds
Total Time:          58.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.8 seconds, 56.5%
Fitness Testing:     15.6 seconds, 26.8%
Report:               9.6 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 79                 
Correct output: 12                  | Program output: 62                 
Correct output: 31                  | Program output: 82                 
Correct output: 32                  | Program output: 61                 
Correct output: 41                  | Program output: 82                 
Correct output: 22                  | Program output: 41                 
Correct output: 4                   | Program output: 70                 
Correct output: 2                   | Program output: 21                 
Correct output: 38                  | Program output: 73                 
Correct output: 13                  | Program output: 46                 
Correct output: 17                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 2                   | Program output: 63                 
Correct output: 4                   | Program output: 33                 
Correct output: 13                  | Program output: 52                 
Correct output: 32                  | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 53                 
Correct output: -19                 | Program output: 68                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 6                  
Correct output: -82                 | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 79                 
Correct output: 42                  | Program output: 42                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 13                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 36                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 24                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 27                 
Correct output: -44                 | Program output: 12                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 28                 
Correct output: -2                  | Program output: 11                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 44                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (boolean_dup in3 in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ())))) ()))
Lexicase best errors: [1 0 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 90
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (boolean_dup in3 in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ())))) ()))
Zero cases best errors: [1 0 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 90
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 859 859 42 14 906 1000 854 854 1000)
Population mean number of elite cases: 7.39
Count of perfect (error zero) individuals by case: (0 859 859 42 14 906 0 854 854 0)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (boolean_dup in3 in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_rot integer_min))))) ())))) ()))
Errors: [1 0 0 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 61
Size: 83
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 5.612
Median total errors in population: 5
Error averages by case: (1.0 0.141 0.141 0.958 0.986 0.094 1.0 0.146 0.146 1.0)
Error minima by case: (1 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 65.947
Average program size in population (points): 91.946
Average percent parens in population: 0.283
Minimum age in population: 23.23089599609375
Maximum age in population: 24.23089599609375
Average age in population: 23.73689599609375
Median age in population: 24.23089599609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 354
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 356
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 16249833
--- Timings ---
Current time: 1559582858336 milliseconds
Total Time:          62.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.7 seconds, 55.8%
Fitness Testing:     16.9 seconds, 27.1%
Report:              10.5 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 29                 
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 79                 
Correct output: 12                  | Program output: 62                 
Correct output: 31                  | Program output: 82                 
Correct output: 32                  | Program output: 61                 
Correct output: 41                  | Program output: 82                 
Correct output: 22                  | Program output: 41                 
Correct output: 4                   | Program output: 70                 
Correct output: 2                   | Program output: 21                 
Correct output: 38                  | Program output: 73                 
Correct output: 13                  | Program output: 46                 
Correct output: 17                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 2                   | Program output: 63                 
Correct output: 4                   | Program output: 33                 
Correct output: 13                  | Program output: 52                 
Correct output: 32                  | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 53                 
Correct output: -19                 | Program output: 68                 
Correct output: -68                 | Program output: 93                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 47                 
Correct output: -24                 | Program output: 6                  
Correct output: -82                 | Program output: 9                  
Correct output: -80                 | Program output: 62                 
Correct output: 37                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: 6                  
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -21                
Correct output: -77                 | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: 81                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 50                 
Correct output: -36                 | Program output: 30                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 79                 
Correct output: 42                  | Program output: 42                 
Correct output: -44                 | Program output: 29                 
Correct output: -4                  | Program output: 83                 
Correct output: -52                 | Program output: 13                 
Correct output: -89                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 36                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 24                 
Correct output: -68                 | Program output: 75                 
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 27                 
Correct output: -44                 | Program output: 12                 
Correct output: -51                 | Program output: 18                 
Correct output: -93                 | Program output: -91                
Correct output: -94                 | Program output: 28                 
Correct output: -2                  | Program output: 11                 
Correct output: -38                 | Program output: 53                 
Correct output: -90                 | Program output: 73                 
Correct output: -81                 | Program output: 17                 
Correct output: -69                 | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: 44                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ())))) ()))
Lexicase best errors: [0 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 88
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ())))) ()))
Zero cases best errors: [0 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 88
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (363 656 363 1000 1000 1000 1000 241 1000 872)
Population mean number of elite cases: 7.49
Count of perfect (error zero) individuals by case: (363 656 363 0 0 0 0 241 0 872)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction tag_integer_306} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank in1 exec_y (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (boolean_dup in3 tag_integer_306 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ())))) ()))
Errors: [0 0 0 1 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 66
Size: 92
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.505
Median total errors in population: 8
Error averages by case: (0.637 0.344 0.637 1.0 1.0 1.0 1.0 0.759 1.0 0.128)
Error minima by case: (0 0 0 1 1 1 1 0 1 0)
Average genome size in population (length): 65.853
Average program size in population (points): 92.403
Average percent parens in population: 0.287
Minimum age in population: 24.23089599609375
Maximum age in population: 26.23089599609375
Average age in population: 25.42339599609375
Median age in population: 25.23089599609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 17486199
--- Timings ---
Current time: 1559582862625 milliseconds
Total Time:          66.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.9 seconds, 55.5%
Fitness Testing:     18.2 seconds, 27.3%
Report:              11.3 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 71                 
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 71                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 65                 
Correct output: 41                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 90                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 83                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 92                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -21                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 45                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 84                 
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -91                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_add integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (boolean_dup in3 boolean_or integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (boolean_invert_second_then_and) integer_add boolean_rot integer_min) () ())))))) ()))))) ()))
Lexicase best errors: [1 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 96
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_add integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (boolean_dup in3 boolean_or integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (boolean_invert_second_then_and) integer_add boolean_rot integer_min) () ())))))) ()))))) ()))
Zero cases best errors: [1 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 96
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 843 440 843 2 843 875 2 2 440)
Population mean number of elite cases: 4.29
Count of perfect (error zero) individuals by case: (2 843 440 843 2 843 875 2 2 440)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup exec_dup_times () exec_do*while (boolean_dup in3 boolean_flush integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ()))))) ()))
Errors: [1 0 0 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 62
Size: 89
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 5.708
Median total errors in population: 6
Error averages by case: (0.998 0.157 0.56 0.157 0.998 0.157 0.125 0.998 0.998 0.56)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.63
Average program size in population (points): 92.552
Average percent parens in population: 0.291
Minimum age in population: 25.23089599609375
Maximum age in population: 28.23089599609375
Average age in population: 27.14864599609375
Median age in population: 27.23089599609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 18697432
--- Timings ---
Current time: 1559582866964 milliseconds
Total Time:          70.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.1 seconds, 55.2%
Fitness Testing:     19.4 seconds, 27.5%
Report:              12.2 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 580
Test mean error for best: 0.58000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 37                 
Correct output: 28                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 44                 
Correct output: 32                  | Program output: 99                 
Correct output: 41                  | Program output: 47                 
Correct output: 22                  | Program output: 46                 
Correct output: 4                   | Program output: 71                 
Correct output: 2                   | Program output: 100                
Correct output: 38                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 64                 
Correct output: 4                   | Program output: 85                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 90                 
Correct output: 32                  | Program output: 82                 
Correct output: 3                   | Program output: 77                 
Correct output: 40                  | Program output: 95                 
Correct output: -19                 | Program output: -19                
Correct output: -68                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -99                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -73                
Correct output: 37                  | Program output: 37                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -57                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -21                
Correct output: -77                 | Program output: -7                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: 80                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 53                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: -78                
Correct output: 42                  | Program output: 79                 
Correct output: -44                 | Program output: -2                 
Correct output: -4                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 95                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 74                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 7                  
Correct output: -44                 | Program output: -34                
Correct output: -51                 | Program output: -38                
Correct output: -93                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -2                  | Program output: 94                 
Correct output: -38                 | Program output: 33                 
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 61                 
Correct output: -69                 | Program output: 7                  
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 integer_max exec_y (in3 boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ())))))) ()))) ()))
Lexicase best errors: [1 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 84
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 integer_max exec_y (in3 boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ())))))) ()))) ()))
Zero cases best errors: [1 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 84
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (270 6 29 624 851 895 595 273 6 274)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (270 6 29 624 851 895 595 273 6 274)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup exec_dup_times () exec_do*while (boolean_dup exec_y (exec_y_when_autoconstructing (integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_empty exec_stackdepth integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) exec_dup_times (integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (boolean_rot integer_dup) (integer_dup_items boolean_rot integer_min) ()))))))) ())))) ()))) ()))
Errors: [0 1 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 68
Size: 98
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.177
Median total errors in population: 6
Error averages by case: (0.73 0.994 0.971 0.376 0.149 0.105 0.405 0.727 0.994 0.726)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.768
Average program size in population (points): 95.686
Average percent parens in population: 0.292
Minimum age in population: 26.98089599609375
Maximum age in population: 30.23089599609375
Average age in population: 29.11414599609375
Median age in population: 29.23089599609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 19967205
--- Timings ---
Current time: 1559582871088 milliseconds
Total Time:          75.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.1 seconds, 54.9%
Fitness Testing:     20.7 seconds, 27.7%
Report:              13.0 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 577
Test mean error for best: 0.57700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: -53                
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -32                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 58                 
Correct output: 28                  | Program output: 86                 
Correct output: 12                  | Program output: 100                
Correct output: 31                  | Program output: 76                 
Correct output: 32                  | Program output: 32                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 59                 
Correct output: 4                   | Program output: 68                 
Correct output: 2                   | Program output: 22                 
Correct output: 38                  | Program output: 38                 
Correct output: 13                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 76                 
Correct output: 4                   | Program output: 89                 
Correct output: 2                   | Program output: 38                 
Correct output: 4                   | Program output: 47                 
Correct output: 13                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 62                 
Correct output: 40                  | Program output: 54                 
Correct output: -19                 | Program output: 56                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: 48                 
Correct output: -99                 | Program output: -86                
Correct output: -24                 | Program output: 59                 
Correct output: -82                 | Program output: 46                 
Correct output: -80                 | Program output: -10                
Correct output: 37                  | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: 45                 
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -11                
Correct output: -77                 | Program output: 6                  
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: 35                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -57                
Correct output: -98                 | Program output: 22                 
Correct output: -68                 | Program output: 33                 
Correct output: -36                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 95                 
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -36                 | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 19                 
Correct output: 42                  | Program output: 96                 
Correct output: -44                 | Program output: 54                 
Correct output: -4                  | Program output: 98                 
Correct output: -52                 | Program output: -4                 
Correct output: -89                 | Program output: 44                 
Correct output: -87                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -36                
Correct output: 47                  | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 38                 
Correct output: -68                 | Program output: 71                 
Correct output: -61                 | Program output: 50                 
Correct output: 7                   | Program output: 21                 
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 40                 
Correct output: -93                 | Program output: 59                 
Correct output: -94                 | Program output: -67                
Correct output: -2                  | Program output: -2                 
Correct output: -38                 | Program output: -1                 
Correct output: -90                 | Program output: -81                
Correct output: -81                 | Program output: 69                 
Correct output: -69                 | Program output: 13                 
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: 63                 
Correct output: -43                 | Program output: 21                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup in2) exec_do*while (boolean_dup in4 integer_dup exec_dup_times () exec_do*while (boolean_dup exec_y (in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth integer_dup) integer_add boolean_rot integer_min))) ()))) ())))))) ()))
Lexicase best errors: [1 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 84
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup in2) exec_do*while (boolean_dup in4 integer_dup exec_dup_times () exec_do*while (boolean_dup exec_y (in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth integer_dup) integer_add boolean_rot integer_min))) ()))) ())))))) ()))
Zero cases best errors: [1 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 84
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 382 267 268 211 853 214 210 318 853)
Population mean number of elite cases: 3.75
Count of perfect (error zero) individuals by case: (176 382 267 268 211 853 214 210 318 853)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup in2) exec_do*while (boolean_dup in3 boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ())))))) ())))) ()))
Errors: [0 1 1 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 68
Size: 95
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 6.248
Median total errors in population: 6
Error averages by case: (0.824 0.618 0.733 0.732 0.789 0.147 0.786 0.79 0.682 0.147)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.509
Average program size in population (points): 96.362
Average percent parens in population: 0.289
Minimum age in population: 28.23089599609375
Maximum age in population: 32.04339599609375
Average age in population: 30.46177099609375
Median age in population: 30.54339599609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 21210045
--- Timings ---
Current time: 1559582875269 milliseconds
Total Time:          79.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.2 seconds, 54.6%
Fitness Testing:     22.0 seconds, 27.8%
Report:              13.8 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 499
Test mean error for best: 0.49900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: -53                
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 58                 
Correct output: 28                  | Program output: 86                 
Correct output: 12                  | Program output: 100                
Correct output: 31                  | Program output: 76                 
Correct output: 32                  | Program output: 32                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 59                 
Correct output: 4                   | Program output: 68                 
Correct output: 2                   | Program output: 22                 
Correct output: 38                  | Program output: 38                 
Correct output: 13                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 76                 
Correct output: 4                   | Program output: 89                 
Correct output: 2                   | Program output: 38                 
Correct output: 4                   | Program output: 47                 
Correct output: 13                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 62                 
Correct output: 40                  | Program output: 54                 
Correct output: -19                 | Program output: 56                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 59                 
Correct output: -82                 | Program output: 46                 
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 19                 
Correct output: 42                  | Program output: 96                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -4                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 38                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 21                 
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -67                
Correct output: -2                  | Program output: -2                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 21                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup in2) exec_do*while (boolean_dup in3 boolean_dup in3 boolean_flush integer_yankdup print_integer integer_lt integer_gte exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ())))) ()))
Lexicase best errors: [1 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 91
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup in2) exec_do*while (boolean_dup in3 boolean_dup in3 boolean_flush integer_yankdup print_integer integer_lt integer_gte exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ())))) ()))
Zero cases best errors: [1 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 91
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 379 811 803 16 284 149 13 425 379)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (290 379 811 803 16 284 149 13 425 379)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod in3 exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (integer_lt exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup in2) exec_do*while (boolean_dup in4 integer_dup exec_dup_times () exec_do*while (boolean_dup exec_y (in3 in3 boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ())) () ())))))) ())))))) ()))
Errors: [1 0 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 78
Size: 112
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.451
Median total errors in population: 6
Error averages by case: (0.71 0.621 0.189 0.197 0.984 0.716 0.851 0.987 0.575 0.621)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.281
Average program size in population (points): 100.661
Average percent parens in population: 0.291
Minimum age in population: 30.04339599609375
Maximum age in population: 33.85589599609375
Average age in population: 32.31692724609375
Median age in population: 32.35589599609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.008
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 22401681
--- Timings ---
Current time: 1559582879408 milliseconds
Total Time:          83.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.2 seconds, 54.3%
Fitness Testing:     23.2 seconds, 27.9%
Report:              14.7 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 519
Test mean error for best: 0.51900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 37                 
Correct output: 28                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 44                 
Correct output: 32                  | Program output: 99                 
Correct output: 41                  | Program output: 47                 
Correct output: 22                  | Program output: 46                 
Correct output: 4                   | Program output: 71                 
Correct output: 2                   | Program output: 100                
Correct output: 38                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 64                 
Correct output: 4                   | Program output: 85                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 90                 
Correct output: 32                  | Program output: 82                 
Correct output: 3                   | Program output: 77                 
Correct output: 40                  | Program output: 95                 
Correct output: -19                 | Program output: -19                
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 37                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -17                
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: 59                 
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: -78                
Correct output: 42                  | Program output: 79                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 95                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 74                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 7                  
Correct output: -44                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -2                  | Program output: 94                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_s (integer_mult exec_noop integer_gte integer_yank integer_max integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup in2) exec_do*while (boolean_dup in3 boolean_dup in3 boolean_flush integer_yankdup print_integer integer_lt integer_gte exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) exec_dup_times (integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger integer_lt boolean_rot integer_dup) integer_dup_items boolean_rot integer_min))))) ())))) () ()))
Lexicase best errors: [0 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_s (integer_mult exec_noop integer_gte integer_yank integer_max integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup in2) exec_do*while (boolean_dup in3 boolean_dup in3 boolean_flush integer_yankdup print_integer integer_lt integer_gte exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap integer_dup_times) exec_dup_times (integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger integer_lt boolean_rot integer_dup) integer_dup_items boolean_rot integer_min))))) ())))) () ()))
Zero cases best errors: [0 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (852 333 17 579 590 484 893 490 327 593)
Population mean number of elite cases: 5.16
Count of perfect (error zero) individuals by case: (852 333 17 579 590 484 893 490 327 593)
Population mean number of perfect (error zero) cases: 5.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) exec_do*while (boolean_dup in3 boolean_not exec_do*while (boolean_dup in3 boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove integer_dup) integer_min boolean_rot integer_min))))) ()))))) ()))
Errors: [0 0 1 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 71
Size: 96
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 4.842
Median total errors in population: 4
Error averages by case: (0.148 0.667 0.983 0.421 0.41 0.516 0.107 0.51 0.673 0.407)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.709
Average program size in population (points): 97.745
Average percent parens in population: 0.286
Minimum age in population: 32.16839599609375
Maximum age in population: 35.16839599609375
Average age in population: 33.82202099609375
Median age in population: 33.79339599609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.008
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 23612858
--- Timings ---
Current time: 1559582883437 milliseconds
Total Time:          87.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.2 seconds, 54.0%
Fitness Testing:     24.4 seconds, 27.9%
Report:              15.6 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 498
Test mean error for best: 0.49800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: -53                
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 58                 
Correct output: 28                  | Program output: 86                 
Correct output: 12                  | Program output: 100                
Correct output: 31                  | Program output: 76                 
Correct output: 32                  | Program output: 32                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 59                 
Correct output: 4                   | Program output: 68                 
Correct output: 2                   | Program output: 22                 
Correct output: 38                  | Program output: 38                 
Correct output: 13                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 76                 
Correct output: 4                   | Program output: 89                 
Correct output: 2                   | Program output: 38                 
Correct output: 4                   | Program output: 47                 
Correct output: 13                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 62                 
Correct output: 40                  | Program output: 54                 
Correct output: -19                 | Program output: 56                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 59                 
Correct output: -82                 | Program output: 46                 
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 19                 
Correct output: 42                  | Program output: 96                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -4                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 38                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 21                 
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -67                
Correct output: -2                  | Program output: -2                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 21                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_s () (integer_mult exec_noop exec_s (integer_dec exec_pop () integer_yank integer_max integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup in2) exec_do*while (boolean_dup in3 boolean_dup in3 boolean_flush integer_yankdup print_integer integer_lt integer_gte exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ())))) () ()) ()))
Lexicase best errors: [0 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 94
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_dup_times exec_s () (integer_mult exec_noop exec_s (integer_dec exec_pop () integer_yank integer_max integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup in2) exec_do*while (boolean_dup in3 boolean_dup in3 boolean_flush integer_yankdup print_integer integer_lt integer_gte exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ())))) () ()) ()))
Zero cases best errors: [0 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 94
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (725 446 19 836 240 856 7 156 818 452)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (725 446 19 836 240 856 7 156 818 452)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod in3 boolean_empty integer_swap exec_yankdup exec_do*count (boolean_dup_times exec_s () (integer_mult exec_do*times (integer_gte integer_dec exec_pop () integer_yank integer_max integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup integer_yankdup) (integer_dup in2) exec_do*while (boolean_dup in3 boolean_dup in3 boolean_flush integer_yankdup print_integer integer_lt integer_gte exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_yank exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (boolean_or integer_shove integer_dup) integer_min boolean_rot integer_min) () ()))))) ()))))) ()))
Errors: [0 0 1 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 65
Size: 91
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.445
Median total errors in population: 5
Error averages by case: (0.275 0.554 0.981 0.164 0.76 0.144 0.993 0.844 0.182 0.548)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.145
Average program size in population (points): 105.059
Average percent parens in population: 0.291
Minimum age in population: 33.60589599609375
Maximum age in population: 36.70745849609375
Average age in population: 35.37007568359375
Median age in population: 35.40277099609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.007
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 24816423
--- Timings ---
Current time: 1559582887538 milliseconds
Total Time:          91.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.1 seconds, 53.8%
Fitness Testing:     25.6 seconds, 28.1%
Report:              16.5 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 594
Test mean error for best: 0.59400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 37                 
Correct output: 28                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 44                 
Correct output: 32                  | Program output: 99                 
Correct output: 41                  | Program output: 47                 
Correct output: 22                  | Program output: 46                 
Correct output: 4                   | Program output: 71                 
Correct output: 2                   | Program output: 100                
Correct output: 38                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 64                 
Correct output: 4                   | Program output: 85                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 90                 
Correct output: 32                  | Program output: 82                 
Correct output: 3                   | Program output: 77                 
Correct output: 40                  | Program output: 95                 
Correct output: -19                 | Program output: -19                
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 37                 
Correct output: -88                 | Program output: -2                 
Correct output: -91                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -35                 | Program output: 62                 
Correct output: -100                | Program output: 90                 
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -7                 
Correct output: -79                 | Program output: 3                  
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: 80                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 4                  
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: -78                
Correct output: 42                  | Program output: 79                 
Correct output: -44                 | Program output: -2                 
Correct output: -4                  | Program output: 100                
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: 59                 
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 74                 
Correct output: -85                 | Program output: 72                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 7                  
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -38                
Correct output: -93                 | Program output: -91                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: 61                 
Correct output: -69                 | Program output: 7                  
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) integer_pop exec_dup_items boolean_swap exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup exec_dup_times () integer_dup exec_swap () (integer_dup in2) exec_do*while (boolean_dup in3 boolean_not exec_do*while (boolean_dup in3 in2 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove integer_dup) integer_min boolean_rot integer_min))))) ()))) ()))) ())
Lexicase best errors: [0 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 97
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) integer_pop exec_dup_items boolean_swap exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup exec_dup_times () integer_dup exec_swap () (integer_dup in2) exec_do*while (boolean_dup in3 boolean_not exec_do*while (boolean_dup in3 in2 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove integer_dup) integer_min boolean_rot integer_min))))) ()))) ()))) ())
Zero cases best errors: [0 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 97
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (399 796 294 225 408 408 399 427 174 440)
Population mean number of elite cases: 3.97
Count of perfect (error zero) individuals by case: (399 796 294 225 408 408 399 427 174 440)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) integer_pop exec_do*count (boolean_swap exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup exec_dup_times () integer_dup exec_swap () (integer_dup in2) exec_do*while (boolean_dup in3 boolean_not exec_do*while (boolean_dup in3 in2 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove integer_dup) integer_min boolean_rot integer_min))))) ()))) ()))) ()))
Errors: [0 0 0 1 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 71
Size: 98
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.03
Median total errors in population: 5
Error averages by case: (0.601 0.204 0.706 0.775 0.592 0.592 0.601 0.573 0.826 0.56)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.611
Average program size in population (points): 101.928
Average percent parens in population: 0.297
Minimum age in population: 34.60589599609375
Maximum age in population: 38.52777099609375
Average age in population: 37.02688818359375
Median age in population: 36.99652099609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 26126443
--- Timings ---
Current time: 1559582891667 milliseconds
Total Time:          95.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.1 seconds, 53.5%
Fitness Testing:     27.0 seconds, 28.2%
Report:              17.3 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 71                 
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 71                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 65                 
Correct output: 41                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 90                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 83                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 92                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 45                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 31                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 8                  
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 84                 
Correct output: -44                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 88                 
Correct output: -2                  | Program output: 25                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) integer_pop exec_do*count (boolean_swap exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (in3 boolean_dup in3 boolean_flush integer_yankdup print_integer integer_lt integer_gte exec_swap (integer_fromboolean exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) exec_k_when_autoconstructing (integer_max boolean_and exec_pop (integer_dup) integer_min boolean_rot integer_min) ()))) ())))) ()) () ()))) ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 87
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) integer_pop exec_do*count (boolean_swap exec_s () (integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (in3 boolean_dup in3 boolean_flush integer_yankdup print_integer integer_lt integer_gte exec_swap (integer_fromboolean exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) exec_k_when_autoconstructing (integer_max boolean_and exec_pop (integer_dup) integer_min boolean_rot integer_min) ()))) ())))) ()) () ()))) ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 87
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (366 770 10 500 864 860 863 827 296 10)
Population mean number of elite cases: 5.37
Count of perfect (error zero) individuals by case: (366 770 10 500 864 860 863 827 296 10)
Population mean number of perfect (error zero) cases: 5.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod in3 exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (integer_lt exec_yankdup integer_dup_items exec_s () (integer_mult exec_noop integer_gte integer_dec boolean_stackdepth) (integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (integer_dup boolean_dup in3 boolean_dup in3 boolean_flush integer_yankdup print_integer integer_lt integer_gte exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add boolean_rot integer_min) () ()))))) ()) ())))))
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 60
Size: 84
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 4.634
Median total errors in population: 4
Error averages by case: (0.634 0.23 0.99 0.5 0.136 0.14 0.137 0.173 0.704 0.99)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.48
Average program size in population (points): 100.181
Average percent parens in population: 0.286
Minimum age in population: 35.60589599609375
Maximum age in population: 40.24066162109375
Average age in population: 38.53281787109375
Median age in population: 38.62738037109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.009
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 27372118
--- Timings ---
Current time: 1559582895731 milliseconds
Total Time:          99.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.1 seconds, 53.3%
Fitness Testing:     28.2 seconds, 28.3%
Report:              18.1 seconds, 18.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: -53                
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 58                 
Correct output: 28                  | Program output: 86                 
Correct output: 12                  | Program output: 100                
Correct output: 31                  | Program output: 76                 
Correct output: 32                  | Program output: 32                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 59                 
Correct output: 4                   | Program output: 68                 
Correct output: 2                   | Program output: 22                 
Correct output: 38                  | Program output: 38                 
Correct output: 13                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 76                 
Correct output: 4                   | Program output: 89                 
Correct output: 2                   | Program output: 38                 
Correct output: 4                   | Program output: 47                 
Correct output: 13                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 62                 
Correct output: 40                  | Program output: 54                 
Correct output: -19                 | Program output: 56                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -86                
Correct output: -24                 | Program output: 59                 
Correct output: -82                 | Program output: 46                 
Correct output: -80                 | Program output: -10                
Correct output: 37                  | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: 45                 
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -21                
Correct output: -77                 | Program output: 6                  
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: 33                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -36                 | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 19                 
Correct output: 42                  | Program output: 96                 
Correct output: -44                 | Program output: 54                 
Correct output: -4                  | Program output: 98                 
Correct output: -52                 | Program output: -4                 
Correct output: -89                 | Program output: 44                 
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 38                 
Correct output: -68                 | Program output: 71                 
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 21                 
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 40                 
Correct output: -93                 | Program output: -91                
Correct output: -94                 | Program output: -67                
Correct output: -2                  | Program output: -2                 
Correct output: -38                 | Program output: -1                 
Correct output: -90                 | Program output: -81                
Correct output: -81                 | Program output: 69                 
Correct output: -69                 | Program output: 13                 
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: 21                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod in3 exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (integer_lt exec_yankdup integer_dup_items exec_noop) in4 integer_dup exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in2 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove integer_dup) integer_min boolean_rot integer_min))))) ()) ())))
Lexicase best errors: [0 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 71
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod in3 exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (integer_lt exec_yankdup integer_dup_items exec_noop) in4 integer_dup exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in2 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove integer_dup) integer_min boolean_rot integer_min))))) ()) ())))
Zero cases best errors: [0 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 71
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 575 11 848 320 839 366 109 737 5)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (9 575 11 848 320 839 366 109 737 5)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))))) ()) ())))) () ())
Errors: [0 1 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 66
Size: 93
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 6.181
Median total errors in population: 6
Error averages by case: (0.991 0.425 0.989 0.152 0.68 0.161 0.634 0.891 0.263 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.371
Average program size in population (points): 92.228
Average percent parens in population: 0.280
Minimum age in population: 38.07073974609375
Maximum age in population: 41.90667724609375
Average age in population: 40.02687744140625
Median age in population: 40.19818115234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 28652276
--- Timings ---
Current time: 1559582899682 milliseconds
Total Time:         103.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.1 seconds, 53.2%
Fitness Testing:     29.4 seconds, 28.4%
Report:              19.0 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: -53                
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 58                 
Correct output: 28                  | Program output: 86                 
Correct output: 12                  | Program output: 100                
Correct output: 31                  | Program output: 76                 
Correct output: 32                  | Program output: 32                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 59                 
Correct output: 4                   | Program output: 68                 
Correct output: 2                   | Program output: 22                 
Correct output: 38                  | Program output: 38                 
Correct output: 13                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 76                 
Correct output: 4                   | Program output: 89                 
Correct output: 2                   | Program output: 38                 
Correct output: 4                   | Program output: 47                 
Correct output: 13                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 62                 
Correct output: 40                  | Program output: 54                 
Correct output: -19                 | Program output: 56                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -86                
Correct output: -24                 | Program output: 59                 
Correct output: -82                 | Program output: 46                 
Correct output: -80                 | Program output: -10                
Correct output: 37                  | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: 45                 
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -21                
Correct output: -77                 | Program output: 6                  
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: 33                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -36                 | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 19                 
Correct output: 42                  | Program output: 96                 
Correct output: -44                 | Program output: 54                 
Correct output: -4                  | Program output: 98                 
Correct output: -52                 | Program output: -4                 
Correct output: -89                 | Program output: 44                 
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 38                 
Correct output: -68                 | Program output: 71                 
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 21                 
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 40                 
Correct output: -93                 | Program output: -91                
Correct output: -94                 | Program output: -67                
Correct output: -2                  | Program output: -2                 
Correct output: -38                 | Program output: -1                 
Correct output: -90                 | Program output: -81                
Correct output: -81                 | Program output: 69                 
Correct output: -69                 | Program output: 13                 
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: 21                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_mod in3 exec_while (integer_dup boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add in2 exec_flush) () ()))))) ())))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 93
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_mod in3 exec_while (integer_dup boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (integer_swap integer_dup_times) integer_shove integer_max boolean_and exec_pop (integer_gte integer_inc boolean_or integer_shove boolean_frominteger exec_s_when_autoconstructing (exec_while (integer_dup) integer_add in2 exec_flush) () ()))))) ())))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 93
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (462 661 503 264 465 674 817 672 4 674)
Population mean number of elite cases: 5.20
Count of perfect (error zero) individuals by case: (462 661 503 264 465 674 817 672 4 674)
Population mean number of perfect (error zero) cases: 5.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))))) ()) ())))) () ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 66
Size: 93
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 4.804
Median total errors in population: 4
Error averages by case: (0.538 0.339 0.497 0.736 0.535 0.326 0.183 0.328 0.996 0.326)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.106
Average program size in population (points): 88.084
Average percent parens in population: 0.282
Minimum age in population: 39.12933349609375
Maximum age in population: 43.29779052734375
Average age in population: 41.77788916015625
Median age in population: 41.72552490234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.01
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 29894538
--- Timings ---
Current time: 1559582903658 milliseconds
Total Time:         107.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.1 seconds, 53.1%
Fitness Testing:     30.7 seconds, 28.5%
Report:              19.7 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 79                 
Correct output: 12                  | Program output: 62                 
Correct output: 31                  | Program output: 82                 
Correct output: 32                  | Program output: 61                 
Correct output: 41                  | Program output: 82                 
Correct output: 22                  | Program output: 41                 
Correct output: 4                   | Program output: 70                 
Correct output: 2                   | Program output: 21                 
Correct output: 38                  | Program output: 73                 
Correct output: 13                  | Program output: 46                 
Correct output: 17                  | Program output: 46                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 31                 
Correct output: 2                   | Program output: 63                 
Correct output: 4                   | Program output: 33                 
Correct output: 13                  | Program output: 52                 
Correct output: 32                  | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 53                 
Correct output: -19                 | Program output: 68                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 6                  
Correct output: -82                 | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 79                 
Correct output: 42                  | Program output: 42                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 13                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 36                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 24                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 27                 
Correct output: -44                 | Program output: 12                 
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 28                 
Correct output: -2                  | Program output: 11                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 44                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (in1) (in4 boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))))) ())))) ()) ())) ())))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 112
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (in1) (in4 boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))))) ())))) ()) ())) ())))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 112
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (753 35 833 274 273 859 273 35 16 855)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (753 35 833 274 273 859 273 35 16 855)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (in1) (in4 boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))))) ())))) ()) ())) ())))) () ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 77
Size: 112
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 5.794
Median total errors in population: 6
Error averages by case: (0.247 0.965 0.167 0.726 0.727 0.141 0.727 0.965 0.984 0.145)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.758
Average program size in population (points): 90.862
Average percent parens in population: 0.286
Minimum age in population: 41.78070068359375
Maximum age in population: 44.80755615234375
Average age in population: 43.49802905273438
Median age in population: 43.52484130859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.01
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 30940532
--- Timings ---
Current time: 1559582907461 milliseconds
Total Time:         111.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.1 seconds, 53.1%
Fitness Testing:     31.7 seconds, 28.4%
Report:              20.5 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 519
Test mean error for best: 0.51900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 37                 
Correct output: 28                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 44                 
Correct output: 32                  | Program output: 99                 
Correct output: 41                  | Program output: 47                 
Correct output: 22                  | Program output: 46                 
Correct output: 4                   | Program output: 71                 
Correct output: 2                   | Program output: 100                
Correct output: 38                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 64                 
Correct output: 4                   | Program output: 85                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 90                 
Correct output: 32                  | Program output: 82                 
Correct output: 3                   | Program output: 77                 
Correct output: 40                  | Program output: 95                 
Correct output: -19                 | Program output: -19                
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 37                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: -78                
Correct output: 42                  | Program output: 79                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: 95                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 74                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 7                  
Correct output: -44                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -2                  | Program output: 94                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction -19} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_when (-19 exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_inc exec_pop (exec_pop (integer_gte boolean_rot integer_min)))))) ()) ())) ())))))) () ())
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 99
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction -19} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_when (-19 exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_inc exec_pop (exec_pop (integer_gte boolean_rot integer_min)))))) ()) ())) ())))))) () ())
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 99
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (688 686 144 858 855 22 21 851 143 856)
Population mean number of elite cases: 5.12
Count of perfect (error zero) individuals by case: (688 686 144 858 855 22 21 851 143 856)
Population mean number of perfect (error zero) cases: 5.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup in2) (integer_lte boolean_dup in3 boolean_not boolean_not exec_do*while (boolean_dup exec_swap (in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq)))))) ())))) ()) ())) ()))))) () ())
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 64
Size: 96
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.876
Median total errors in population: 4
Error averages by case: (0.312 0.314 0.856 0.142 0.145 0.978 0.979 0.149 0.857 0.144)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.997
Average program size in population (points): 107.016
Average percent parens in population: 0.307
Minimum age in population: 43.94647216796875
Maximum age in population: 46.10638427734375
Average age in population: 44.53719116210938
Median age in population: 44.90545654296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 246
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 249
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.009
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 32110184
--- Timings ---
Current time: 1559582911362 milliseconds
Total Time:         115.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.0 seconds, 53.0%
Fitness Testing:     32.8 seconds, 28.5%
Report:              21.3 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 497
Test mean error for best: 0.49700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: -53                
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 58                 
Correct output: 28                  | Program output: 86                 
Correct output: 12                  | Program output: 100                
Correct output: 31                  | Program output: 76                 
Correct output: 32                  | Program output: 32                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 59                 
Correct output: 4                   | Program output: 68                 
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 38                 
Correct output: 13                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 76                 
Correct output: 4                   | Program output: 89                 
Correct output: 2                   | Program output: 38                 
Correct output: 4                   | Program output: 47                 
Correct output: 13                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 62                 
Correct output: 40                  | Program output: 54                 
Correct output: -19                 | Program output: 56                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 59                 
Correct output: -82                 | Program output: 46                 
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 19                 
Correct output: 42                  | Program output: 96                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -4                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 38                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 21                 
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -67                
Correct output: -2                  | Program output: -2                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (in1) (integer_rot boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (in3 boolean_not in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ()) ())) ())) ())))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 113
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (in1) (integer_rot boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (in3 boolean_not in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ()) ())) ())) ())))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 113
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (823 249 820 252 807 250 189 820 250 24)
Population mean number of elite cases: 4.48
Count of perfect (error zero) individuals by case: (823 249 820 252 807 250 189 820 250 24)
Population mean number of perfect (error zero) cases: 4.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (in1) (integer_rot boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (in3 boolean_not in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ()) ())) ())) ())))) () ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 79
Size: 113
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 5.516
Median total errors in population: 6
Error averages by case: (0.177 0.751 0.18 0.748 0.193 0.75 0.811 0.18 0.75 0.976)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.372
Average program size in population (points): 103.116
Average percent parens in population: 0.317
Minimum age in population: 44.94647216796875
Maximum age in population: 47.330810546875
Average age in population: 46.22924694824219
Median age in population: 46.15655517578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.01
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 33277519
--- Timings ---
Current time: 1559582915372 milliseconds
Total Time:         119.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.0 seconds, 52.9%
Fitness Testing:     34.0 seconds, 28.5%
Report:              22.1 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 497
Test mean error for best: 0.49700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: -53                
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 58                 
Correct output: 28                  | Program output: 86                 
Correct output: 12                  | Program output: 100                
Correct output: 31                  | Program output: 76                 
Correct output: 32                  | Program output: 32                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 59                 
Correct output: 4                   | Program output: 68                 
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 38                 
Correct output: 13                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 76                 
Correct output: 4                   | Program output: 89                 
Correct output: 2                   | Program output: 38                 
Correct output: 4                   | Program output: 47                 
Correct output: 13                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 62                 
Correct output: 40                  | Program output: 54                 
Correct output: -19                 | Program output: 56                 
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: 59                 
Correct output: -82                 | Program output: 46                 
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 19                 
Correct output: 42                  | Program output: 96                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -4                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -14                
Correct output: -9                  | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 38                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 21                 
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -67                
Correct output: -2                  | Program output: -2                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (in1) (integer_rot boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (in3 boolean_not in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ()) ())) ())) ())))) () ())
Lexicase best errors: [0 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 113
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (in1) (integer_rot boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (in3 boolean_not in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ()) ())) ())) ())))) () ())
Zero cases best errors: [0 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 113
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (760 41 677 742 769 44 870 678 29 89)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (760 41 677 742 769 44 870 678 29 89)
Population mean number of perfect (error zero) cases: 4.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (in1) (integer_rot boolean_dup exec_dup_times () integer_dup boolean_swap) (integer_dup in2) integer_lte boolean_dup in3 boolean_not exec_do*while (boolean_dup exec_swap (in3 boolean_not in3 boolean_not exec_do*while (boolean_dup exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ()) ())) ())) ())) ())))) () ())
Errors: [0 1 0 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 83
Size: 120
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 5.301
Median total errors in population: 4
Error averages by case: (0.24 0.959 0.323 0.258 0.231 0.956 0.13 0.322 0.971 0.911)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 77.306
Average program size in population (points): 110.905
Average percent parens in population: 0.303
Minimum age in population: 45.94647216796875
Maximum age in population: 49.11383056640625
Average age in population: 47.96120825195312
Median age in population: 47.98843383789062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 271
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 279
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.007
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 34470351
--- Timings ---
Current time: 1559582919381 milliseconds
Total Time:         123.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.0 seconds, 52.8%
Fitness Testing:     35.1 seconds, 28.5%
Report:              23.0 seconds, 18.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 583
Test mean error for best: 0.58300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 37                 
Correct output: 28                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 44                 
Correct output: 32                  | Program output: 99                 
Correct output: 41                  | Program output: 47                 
Correct output: 22                  | Program output: 46                 
Correct output: 4                   | Program output: 71                 
Correct output: 2                   | Program output: 100                
Correct output: 38                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 64                 
Correct output: 4                   | Program output: 85                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 90                 
Correct output: 32                  | Program output: 82                 
Correct output: 3                   | Program output: 77                 
Correct output: 40                  | Program output: 95                 
Correct output: -19                 | Program output: -19                
Correct output: -68                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -99                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -73                
Correct output: 37                  | Program output: 37                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -57                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -21                
Correct output: -77                 | Program output: -7                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: 80                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: -78                
Correct output: 42                  | Program output: 79                 
Correct output: -44                 | Program output: -2                 
Correct output: -4                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 95                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 74                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 7                  
Correct output: -44                 | Program output: -34                
Correct output: -51                 | Program output: -38                
Correct output: -93                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -2                  | Program output: 94                 
Correct output: -38                 | Program output: 33                 
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 61                 
Correct output: -69                 | Program output: 7                  
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup in2) (integer_lte boolean_dup in3 boolean_not boolean_not exec_do*while (boolean_dup exec_swap (in3 integer_div exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_pop exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove integer_dup_times)))))) ())))) ()) ())) ()))))) () ()))) () ())
Lexicase best errors: [1 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 105
Percent parens: 0.352
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup in2) (integer_lte boolean_dup in3 boolean_not boolean_not exec_do*while (boolean_dup exec_swap (in3 integer_div exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_pop exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove integer_dup_times)))))) ())))) ()) ())) ()))))) () ()))) () ())
Zero cases best errors: [1 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 105
Percent parens: 0.352
--- Lexicase Population Statistics ---
Count of elite individuals by case: (537 56 311 151 330 150 800 9 20 284)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (537 56 311 151 330 150 800 9 20 284)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup in2) (integer_lte boolean_dup in3 boolean_not boolean_not exec_do*while (boolean_dup exec_swap (in3 integer_div exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_pop exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())))) ()) ())) ()))))) () ())
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 77
Size: 112
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.352
Median total errors in population: 7
Error averages by case: (0.463 0.944 0.689 0.849 0.67 0.85 0.2 0.991 0.98 0.716)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.662
Average program size in population (points): 104.03
Average percent parens in population: 0.322
Minimum age in population: 47.966064453125
Maximum age in population: 50.81130981445312
Average age in population: 49.64271269226074
Median age in population: 49.57373809814453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.006
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 35741887
--- Timings ---
Current time: 1559582923444 milliseconds
Total Time:         127.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.0 seconds, 52.7%
Fitness Testing:     36.3 seconds, 28.5%
Report:              23.8 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 580
Test mean error for best: 0.58000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -63                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 37                 
Correct output: 28                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 44                 
Correct output: 32                  | Program output: 99                 
Correct output: 41                  | Program output: 47                 
Correct output: 22                  | Program output: 46                 
Correct output: 4                   | Program output: 71                 
Correct output: 2                   | Program output: 100                
Correct output: 38                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 64                 
Correct output: 4                   | Program output: 85                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 90                 
Correct output: 32                  | Program output: 82                 
Correct output: 3                   | Program output: 77                 
Correct output: 40                  | Program output: 95                 
Correct output: -19                 | Program output: -19                
Correct output: -68                 | Program output: -7                 
Correct output: -91                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -73                
Correct output: 37                  | Program output: 37                 
Correct output: -88                 | Program output: -2                 
Correct output: -91                 | Program output: -90                
Correct output: -57                 | Program output: -57                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -21                
Correct output: -77                 | Program output: -7                 
Correct output: -79                 | Program output: -17                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: 80                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: 12                 
Correct output: -87                 | Program output: -3                 
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 53                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: 42                  | Program output: 79                 
Correct output: -44                 | Program output: -2                 
Correct output: -4                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 95                 
Correct output: -87                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 74                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 7                  
Correct output: -44                 | Program output: -34                
Correct output: -51                 | Program output: -38                
Correct output: -93                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -2                  | Program output: 94                 
Correct output: -38                 | Program output: 33                 
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 61                 
Correct output: -69                 | Program output: 7                  
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (boolean_flush) (in4 integer_dup boolean_swap) (integer_dup in2) integer_lte integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth)))) ())))) ()))) () ())) () ())
Lexicase best errors: [0 0 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 74
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (boolean_flush) (in4 integer_dup boolean_swap) (integer_dup in2) integer_lte integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth)))) ())))) ()))) () ())) () ())
Zero cases best errors: [0 0 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 74
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 16 398 449 613 426 398 449 305 137)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (350 16 398 449 613 426 398 449 305 137)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (boolean_flush) (in4 integer_dup boolean_swap) (integer_dup in2) integer_lte integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth)))) ())))) ()))) () ())) () ())
Errors: [0 0 0 1 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 48
Size: 74
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 6.459
Median total errors in population: 6
Error averages by case: (0.65 0.984 0.602 0.551 0.387 0.574 0.602 0.551 0.695 0.863)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.908
Average program size in population (points): 101.979
Average percent parens in population: 0.326
Minimum age in population: 48.966064453125
Maximum age in population: 52.56305694580078
Average age in population: 51.07906182861328
Median age in population: 51.22699737548828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.007
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 37054107
--- Timings ---
Current time: 1559582927465 milliseconds
Total Time:         131.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.0 seconds, 52.5%
Fitness Testing:     37.5 seconds, 28.6%
Report:              24.8 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 503
Test mean error for best: 0.50300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 37                 
Correct output: 28                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 44                 
Correct output: 32                  | Program output: 99                 
Correct output: 41                  | Program output: 47                 
Correct output: 22                  | Program output: 46                 
Correct output: 4                   | Program output: 71                 
Correct output: 2                   | Program output: 100                
Correct output: 38                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 64                 
Correct output: 4                   | Program output: 85                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 90                 
Correct output: 32                  | Program output: 82                 
Correct output: 3                   | Program output: 77                 
Correct output: 40                  | Program output: 95                 
Correct output: -19                 | Program output: -19                
Correct output: -68                 | Program output: -37                
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -71                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 37                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -21                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -1                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 0                  
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: -78                
Correct output: 42                  | Program output: 79                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 95                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 74                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 7                  
Correct output: -44                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -2                  | Program output: 94                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup in2) (integer_lte boolean_dup in3 integer_dup_times boolean_not exec_do*while (boolean_dup exec_swap (boolean_pop boolean_not exec_do*while (in3 exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq)))))) ())))) ()) ())) ()))))) () ())) () ())
Lexicase best errors: [0 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 106
Percent parens: 0.349
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup in2) (integer_lte boolean_dup in3 integer_dup_times boolean_not exec_do*while (boolean_dup exec_swap (boolean_pop boolean_not exec_do*while (in3 exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq)))))) ())))) ()) ())) ()))))) () ())) () ())
Zero cases best errors: [0 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 106
Percent parens: 0.349
--- Lexicase Population Statistics ---
Count of elite individuals by case: (562 373 375 555 8 258 752 387 16 184)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (562 373 375 555 8 258 752 387 16 184)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup in2) (integer_lte boolean_dup in3 integer_dup_times boolean_not exec_do*while (boolean_dup exec_swap (boolean_pop boolean_not exec_do*while (in3 exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq)))))) ())))) ()) ())) ()))))) () ())) () ())
Errors: [0 0 0 0 1 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 69
Size: 106
Percent parens: 0.349
--- Population Statistics ---
Average total errors in population: 6.53
Median total errors in population: 6
Error averages by case: (0.438 0.627 0.625 0.445 0.992 0.742 0.248 0.613 0.984 0.816)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.784
Average program size in population (points): 91.436
Average percent parens in population: 0.337
Minimum age in population: 50.94672012329102
Maximum age in population: 54.22235107421875
Average age in population: 52.89786996459961
Median age in population: 52.94861221313477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.007
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 38377749
--- Timings ---
Current time: 1559582931624 milliseconds
Total Time:         135.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.0 seconds, 52.4%
Fitness Testing:     38.7 seconds, 28.6%
Report:              25.6 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 580
Test mean error for best: 0.58000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: 7                  
Correct output: 47                  | Program output: 94                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 37                 
Correct output: 28                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 44                 
Correct output: 32                  | Program output: 99                 
Correct output: 41                  | Program output: 47                 
Correct output: 22                  | Program output: 46                 
Correct output: 4                   | Program output: 71                 
Correct output: 2                   | Program output: 100                
Correct output: 38                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 64                 
Correct output: 4                   | Program output: 85                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 90                 
Correct output: 32                  | Program output: 82                 
Correct output: 3                   | Program output: 77                 
Correct output: 40                  | Program output: 95                 
Correct output: -19                 | Program output: -19                
Correct output: -68                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -99                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -73                
Correct output: 37                  | Program output: 37                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -57                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -21                
Correct output: -77                 | Program output: -7                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: 80                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: 53                 
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: -78                
Correct output: 42                  | Program output: 79                 
Correct output: -44                 | Program output: -2                 
Correct output: -4                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 95                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 74                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -20                
Correct output: 7                   | Program output: 7                  
Correct output: -44                 | Program output: -34                
Correct output: -51                 | Program output: -38                
Correct output: -93                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -2                  | Program output: 94                 
Correct output: -38                 | Program output: 33                 
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 61                 
Correct output: -69                 | Program output: 7                  
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -25                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) integer_mod integer_mod integer_mult exec_shove (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte exec_do*range (exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop in4 integer_dup in2) (exec_do*range (exec_do*while (boolean_dup exec_swap (integer_stackdepth boolean_not exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_k (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_if (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_min)))) ())) ())) ())) ()) ())) ()))) ()))) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 102
Percent parens: 0.363
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) integer_mod integer_mod integer_mult exec_shove (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult exec_noop integer_gte exec_do*range (exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop in4 integer_dup in2) (exec_do*range (exec_do*while (boolean_dup exec_swap (integer_stackdepth boolean_not exec_do*while (boolean_dup exec_swap (boolean_not integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_k (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_if (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_min)))) ())) ())) ())) ()) ())) ()))) ()))) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 102
Percent parens: 0.363
--- Lexicase Population Statistics ---
Count of elite individuals by case: (371 479 375 541 467 655 213 276 477 313)
Population mean number of elite cases: 4.17
Count of perfect (error zero) individuals by case: (371 479 375 541 467 655 213 276 477 313)
Population mean number of perfect (error zero) cases: 4.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq})
Best program: (integer_mod integer_mod integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 integer_dup in2) (integer_lte boolean_dup integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div exec_stackdepth exec_s_when_autoconstructing () (integer_dec) (exec_pop (integer_add integer_eq integer_shove boolean_eq)))))) ())))) ())))) () ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 45
Size: 69
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 5.833
Median total errors in population: 6
Error averages by case: (0.629 0.521 0.625 0.459 0.533 0.345 0.787 0.724 0.523 0.687)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.647
Average program size in population (points): 91.857
Average percent parens in population: 0.340
Minimum age in population: 51.9912109375
Maximum age in population: 55.89072608947754
Average age in population: 54.45514619636536
Median age in population: 54.52908325195312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.01
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 39702552
--- Timings ---
Current time: 1559582935618 milliseconds
Total Time:         139.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 52.4%
Fitness Testing:     39.9 seconds, 28.6%
Report:              26.5 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 348
Test mean error for best: 0.34800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: -53                
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 58                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 38                 
Correct output: 13                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 38                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -87                
Correct output: -99                 | Program output: -86                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -81                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -26                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -68                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 19                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -4                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -76                
Correct output: 47                  | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 21                 
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -67                
Correct output: -2                  | Program output: -2                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -81                
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_add integer_mult exec_while (integer_lte integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min)))))) ())))) ())) ())) ()) ()))))) () ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 118
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_add integer_mult exec_while (integer_lte integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min)))))) ())))) ())) ())) ()) ()))))) () ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 118
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (697 91 758 218 754 132 817 222 759 702)
Population mean number of elite cases: 5.15
Count of perfect (error zero) individuals by case: (697 91 758 218 754 132 817 222 759 702)
Population mean number of perfect (error zero) cases: 5.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_442} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (tag_boolean_442 boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min)))))) ())))) ())) ())) ()) ()))))) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 80
Size: 118
Percent parens: 0.322
--- Population Statistics ---
Average total errors in population: 4.85
Median total errors in population: 4
Error averages by case: (0.303 0.909 0.242 0.782 0.246 0.868 0.183 0.778 0.241 0.298)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.195
Average program size in population (points): 90.641
Average percent parens in population: 0.348
Minimum age in population: 54.21098899841309
Maximum age in population: 57.71818161010742
Average age in population: 56.03473663902283
Median age in population: 56.11633062362671
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.01
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 40948682
--- Timings ---
Current time: 1559582939667 milliseconds
Total Time:         143.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.2 seconds, 52.4%
Fitness Testing:     41.1 seconds, 28.6%
Report:              27.2 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 319
Test mean error for best: 0.31900
Test Case    0 | Error: 1
Test Case    1 | Error: 1
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: -53                
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 58                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 38                 
Correct output: 13                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 38                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -86                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 19                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -4                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 21                 
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -67                
Correct output: -2                  | Program output: -2                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -81                
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_mod integer_mod integer_mult integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult integer_swap exec_yankdup exec_do*count (boolean_swap integer_max) exec_k (exec_noop integer_gte integer_dec exec_pop () integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div integer_add integer_eq integer_gte boolean_rot integer_min)))) ())))) ())) ())) ())))))) () ())) () ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 119
Percent parens: 0.336
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_mod integer_mod integer_mult integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_do*count (boolean_swap integer_max) integer_mult integer_swap exec_yankdup exec_do*count (boolean_swap integer_max) exec_k (exec_noop integer_gte integer_dec exec_pop () integer_gte integer_dec exec_pop () integer_yank exec_s (exec_y (integer_dec exec_pop () integer_yank exec_s (exec_y (in1 exec_do*times (exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (integer_div integer_add integer_eq integer_gte boolean_rot integer_min)))) ())))) ())) ())) ())))))) () ())) () ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 119
Percent parens: 0.336
--- Lexicase Population Statistics ---
Count of elite individuals by case: (395 391 786 387 390 403 828 828 823 381)
Population mean number of elite cases: 5.61
Count of perfect (error zero) individuals by case: (395 391 786 387 390 403 828 828 823 381)
Population mean number of perfect (error zero) cases: 5.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction -19} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_259} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min})
Best program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 77
Size: 110
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 4.388
Median total errors in population: 6
Error averages by case: (0.605 0.609 0.214 0.613 0.61 0.597 0.172 0.172 0.177 0.619)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.533
Average program size in population (points): 109.05
Average percent parens in population: 0.337
Minimum age in population: 55.84458923339844
Maximum age in population: 58.82302379608154
Average age in population: 57.50519696807861
Median age in population: 57.58030033111572
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.011
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 42053563
--- Timings ---
Current time: 1559582943392 milliseconds
Total Time:         147.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.3 seconds, 52.4%
Fitness Testing:     42.2 seconds, 28.6%
Report:              28.0 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 37
Successful program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 110


Auto-simplifying with starting size: 110
step: 0
program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 500
program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 1000
program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 1500
program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 2000
program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 2500
program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 3000
program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 3500
program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 4000
program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 4500
program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

step: 5000
program: (integer_mod integer_mod integer_mult exec_while (boolean_empty integer_swap) exec_yankdup exec_k (exec_noop integer_gte integer_dec exec_pop () integer_yank integer_max exec_y (in1 exec_do*times (exec_s_when_autoconstructing (exec_noop) (in4 exec_dup_times () integer_dup in2) (integer_lte boolean_dup in3 boolean_not exec_do*while (exec_k_when_autoconstructing (exec_swap (boolean_not exec_do*while (boolean_dup exec_swap (exec_do*while (boolean_dup integer_min in3 integer_yankdup print_integer integer_lt boolean_dup_times exec_swap (integer_inc exec_y (exec_dup_times (-19 exec_do*while (exec_swap (integer_inc exec_y (exec_flush -19 exec_do*while (integer_div integer_add integer_eq integer_shove boolean_eq integer_sub integer_swap boolean_xor) integer_shove integer_max exec_pop (exec_pop (integer_gte boolean_rot exec_empty boolean_xor) tagged_259 integer_max exec_pop (exec_pop (integer_gte boolean_rot integer_min))))) ())))) ())) ())) ()) ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 110

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 319
Test mean error for best: 0.31900
Test Case    0 | Error: 1
Test Case    1 | Error: 1
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -53                 | Program output: -53                
Correct output: 47                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -10                 | Program output: -10                
Correct output: -79                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: 18                  | Program output: 18                 
Correct output: 42                  | Program output: 42                 
Correct output: 75                  | Program output: 75                 
Correct output: -1                  | Program output: -1                 
Correct output: 66                  | Program output: 66                 
Correct output: 21                  | Program output: 58                 
Correct output: 28                  | Program output: 28                 
Correct output: 12                  | Program output: 52                 
Correct output: 31                  | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 38                  | Program output: 38                 
Correct output: 13                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 15                 
Correct output: 4                   | Program output: 57                 
Correct output: 2                   | Program output: 38                 
Correct output: 4                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 55                 
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: 34                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -86                
Correct output: -24                 | Program output: 18                 
Correct output: -82                 | Program output: 3                  
Correct output: -80                 | Program output: -80                
Correct output: 37                  | Program output: 53                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -100                | Program output: -42                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -36                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -78                 | Program output: 19                 
Correct output: 42                  | Program output: 71                 
Correct output: -44                 | Program output: -44                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -4                 
Correct output: -89                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 47                  | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -84                 | Program output: 29                 
Correct output: -68                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: 7                   | Program output: 21                 
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -67                
Correct output: -2                  | Program output: -2                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -81                
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -43                 | Program output: 2                  
;;******************************
