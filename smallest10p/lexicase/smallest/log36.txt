Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[63 63 63 4] 4] [[15 15 15 50] 15] [[-86 -86 -3 -86] -86] [[-8 47 -8 -8] -8] [[56 56 38 56] 38] [[-50 -50 -66 -50] -66] [[79 8 79 79] 8] [[-79 -79 -79 95] -79] [[16 55 16 16] 16] [[28 39 39 39] 28] [(83 83 83 83) 83] [(74 74 74 74) 74] [(5 5 5 5) 5] [(-25 -25 -25 -25) -25] [(-14 -14 -14 -14) -14] [(96 16 76 49) 16] [(21 4 53 50) 4] [(52 29 77 21) 21] [(11 50 85 2) 2] [(98 22 100 16) 16] [(67 86 21 84) 21] [(91 36 59 8) 8] [(91 33 75 13) 13] [(49 41 12 21) 12] [(48 46 67 88) 46] [(47 97 97 49) 47] [(5 8 77 75) 5] [(11 5 86 80) 5] [(90 60 61 44) 44] [(33 70 86 87) 33] [(66 92 87 44) 44] [(71 78 34 19) 19] [(83 12 23 61) 12] [(97 14 94 99) 14] [(68 36 39 91) 36] [(93 79 -6 -81) -81] [(-95 28 -17 -23) -95] [(-63 -81 71 38) -81] [(-79 4 -63 -79) -79] [(54 -28 83 85) -28] [(-3 -78 -98 -62) -98] [(-39 -78 2 1) -78] [(-33 -86 -78 -59) -86] [(64 30 37 -99) -99] [(26 40 30 83) 26] [(38 45 83 96) 38] [(-70 0 -97 38) -97] [(61 -81 30 16) -81] [(-84 -61 21 -75) -84] [(87 77 -24 6) -24] [(-24 24 63 -8) -24] [(-62 42 -38 33) -62] [(50 28 10 -32) -32] [(-85 -98 86 17) -98] [(39 -21 -5 -35) -35] [(99 -67 -8 43) -67] [(96 34 -90 -75) -90] [(-23 -84 53 13) -84] [(-95 63 -45 30) -95] [(6 -1 -68 -57) -68] [(-8 19 -86 -30) -86] [(-44 84 95 -96) -96] [(-44 29 -93 -29) -93] [(92 -87 -20 -13) -87] [(17 -16 -71 -30) -71] [(83 94 48 2) 2] [(-68 -19 27 18) -68] [(-83 -62 75 -37) -83] [(-60 -10 98 61) -60] [(-17 -25 88 64) -25] [(73 54 -12 79) -12] [(60 -85 33 -33) -85] [(-60 15 51 -7) -60] [(-97 25 -81 -30) -97] [(33 41 59 -45) -45] [(-85 13 88 83) -85] [(56 75 -31 -100) -100] [(36 73 9 21) 9] [(38 93 -14 -100) -100] [(55 46 -58 81) -58] [(48 -66 26 70) -66] [(7 51 -46 77) -46] [(71 -93 42 -2) -93] [(95 92 100 97) 92] [(52 92 16 54) 16] [(-63 46 29 75) -63] [(18 -75 90 22) -75] [(1 -62 0 -52) -62] [(24 37 71 -66) -66] [(49 7 -36 -80) -80] [(91 11 91 -23) -23] [(17 5 -98 -30) -98] [(-12 59 78 85) -12] [(-32 0 -59 -12) -59] [(-18 -81 -88 -10) -88])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[63 63 63 4] 4]
Train Case:   6 | Input/Output: [[15 15 15 50] 15]
Train Case:   7 | Input/Output: [[-86 -86 -3 -86] -86]
Train Case:   8 | Input/Output: [[-8 47 -8 -8] -8]
Train Case:   9 | Input/Output: [[56 56 38 56] 38]
Train Case:  10 | Input/Output: [[-50 -50 -66 -50] -66]
Train Case:  11 | Input/Output: [[79 8 79 79] 8]
Train Case:  12 | Input/Output: [[-79 -79 -79 95] -79]
Train Case:  13 | Input/Output: [[16 55 16 16] 16]
Train Case:  14 | Input/Output: [[28 39 39 39] 28]
Train Case:  15 | Input/Output: [(83 83 83 83) 83]
Train Case:  16 | Input/Output: [(74 74 74 74) 74]
Train Case:  17 | Input/Output: [(5 5 5 5) 5]
Train Case:  18 | Input/Output: [(-25 -25 -25 -25) -25]
Train Case:  19 | Input/Output: [(-14 -14 -14 -14) -14]
Train Case:  20 | Input/Output: [(96 16 76 49) 16]
Train Case:  21 | Input/Output: [(21 4 53 50) 4]
Train Case:  22 | Input/Output: [(52 29 77 21) 21]
Train Case:  23 | Input/Output: [(11 50 85 2) 2]
Train Case:  24 | Input/Output: [(98 22 100 16) 16]
Train Case:  25 | Input/Output: [(67 86 21 84) 21]
Train Case:  26 | Input/Output: [(91 36 59 8) 8]
Train Case:  27 | Input/Output: [(91 33 75 13) 13]
Train Case:  28 | Input/Output: [(49 41 12 21) 12]
Train Case:  29 | Input/Output: [(48 46 67 88) 46]
Train Case:  30 | Input/Output: [(47 97 97 49) 47]
Train Case:  31 | Input/Output: [(5 8 77 75) 5]
Train Case:  32 | Input/Output: [(11 5 86 80) 5]
Train Case:  33 | Input/Output: [(90 60 61 44) 44]
Train Case:  34 | Input/Output: [(33 70 86 87) 33]
Train Case:  35 | Input/Output: [(66 92 87 44) 44]
Train Case:  36 | Input/Output: [(71 78 34 19) 19]
Train Case:  37 | Input/Output: [(83 12 23 61) 12]
Train Case:  38 | Input/Output: [(97 14 94 99) 14]
Train Case:  39 | Input/Output: [(68 36 39 91) 36]
Train Case:  40 | Input/Output: [(93 79 -6 -81) -81]
Train Case:  41 | Input/Output: [(-95 28 -17 -23) -95]
Train Case:  42 | Input/Output: [(-63 -81 71 38) -81]
Train Case:  43 | Input/Output: [(-79 4 -63 -79) -79]
Train Case:  44 | Input/Output: [(54 -28 83 85) -28]
Train Case:  45 | Input/Output: [(-3 -78 -98 -62) -98]
Train Case:  46 | Input/Output: [(-39 -78 2 1) -78]
Train Case:  47 | Input/Output: [(-33 -86 -78 -59) -86]
Train Case:  48 | Input/Output: [(64 30 37 -99) -99]
Train Case:  49 | Input/Output: [(26 40 30 83) 26]
Train Case:  50 | Input/Output: [(38 45 83 96) 38]
Train Case:  51 | Input/Output: [(-70 0 -97 38) -97]
Train Case:  52 | Input/Output: [(61 -81 30 16) -81]
Train Case:  53 | Input/Output: [(-84 -61 21 -75) -84]
Train Case:  54 | Input/Output: [(87 77 -24 6) -24]
Train Case:  55 | Input/Output: [(-24 24 63 -8) -24]
Train Case:  56 | Input/Output: [(-62 42 -38 33) -62]
Train Case:  57 | Input/Output: [(50 28 10 -32) -32]
Train Case:  58 | Input/Output: [(-85 -98 86 17) -98]
Train Case:  59 | Input/Output: [(39 -21 -5 -35) -35]
Train Case:  60 | Input/Output: [(99 -67 -8 43) -67]
Train Case:  61 | Input/Output: [(96 34 -90 -75) -90]
Train Case:  62 | Input/Output: [(-23 -84 53 13) -84]
Train Case:  63 | Input/Output: [(-95 63 -45 30) -95]
Train Case:  64 | Input/Output: [(6 -1 -68 -57) -68]
Train Case:  65 | Input/Output: [(-8 19 -86 -30) -86]
Train Case:  66 | Input/Output: [(-44 84 95 -96) -96]
Train Case:  67 | Input/Output: [(-44 29 -93 -29) -93]
Train Case:  68 | Input/Output: [(92 -87 -20 -13) -87]
Train Case:  69 | Input/Output: [(17 -16 -71 -30) -71]
Train Case:  70 | Input/Output: [(83 94 48 2) 2]
Train Case:  71 | Input/Output: [(-68 -19 27 18) -68]
Train Case:  72 | Input/Output: [(-83 -62 75 -37) -83]
Train Case:  73 | Input/Output: [(-60 -10 98 61) -60]
Train Case:  74 | Input/Output: [(-17 -25 88 64) -25]
Train Case:  75 | Input/Output: [(73 54 -12 79) -12]
Train Case:  76 | Input/Output: [(60 -85 33 -33) -85]
Train Case:  77 | Input/Output: [(-60 15 51 -7) -60]
Train Case:  78 | Input/Output: [(-97 25 -81 -30) -97]
Train Case:  79 | Input/Output: [(33 41 59 -45) -45]
Train Case:  80 | Input/Output: [(-85 13 88 83) -85]
Train Case:  81 | Input/Output: [(56 75 -31 -100) -100]
Train Case:  82 | Input/Output: [(36 73 9 21) 9]
Train Case:  83 | Input/Output: [(38 93 -14 -100) -100]
Train Case:  84 | Input/Output: [(55 46 -58 81) -58]
Train Case:  85 | Input/Output: [(48 -66 26 70) -66]
Train Case:  86 | Input/Output: [(7 51 -46 77) -46]
Train Case:  87 | Input/Output: [(71 -93 42 -2) -93]
Train Case:  88 | Input/Output: [(95 92 100 97) 92]
Train Case:  89 | Input/Output: [(52 92 16 54) 16]
Train Case:  90 | Input/Output: [(-63 46 29 75) -63]
Train Case:  91 | Input/Output: [(18 -75 90 22) -75]
Train Case:  92 | Input/Output: [(1 -62 0 -52) -62]
Train Case:  93 | Input/Output: [(24 37 71 -66) -66]
Train Case:  94 | Input/Output: [(49 7 -36 -80) -80]
Train Case:  95 | Input/Output: [(91 11 91 -23) -23]
Train Case:  96 | Input/Output: [(17 5 -98 -30) -98]
Train Case:  97 | Input/Output: [(-12 59 78 85) -12]
Train Case:  98 | Input/Output: [(-32 0 -59 -12) -59]
Train Case:  99 | Input/Output: [(-18 -81 -88 -10) -88]
Test Case:   0 | Input/Output: [[66 66 3 66] 3]
Test Case:   1 | Input/Output: [[40 72 40 40] 40]
Test Case:   2 | Input/Output: [[4 41 4 4] 4]
Test Case:   3 | Input/Output: [[-4 -4 5 -4] -4]
Test Case:   4 | Input/Output: [[85 85 85 -48] -48]
Test Case:   5 | Input/Output: [[59 59 -10 59] -10]
Test Case:   6 | Input/Output: [[-64 -91 -91 -91] -91]
Test Case:   7 | Input/Output: [[51 51 51 -58] -58]
Test Case:   8 | Input/Output: [[-6 27 27 27] -6]
Test Case:   9 | Input/Output: [[-50 84 -50 -50] -50]
Test Case:  10 | Input/Output: [[-93 98 98 98] -93]
Test Case:  11 | Input/Output: [[35 -87 -87 -87] -87]
Test Case:  12 | Input/Output: [[-83 -83 -83 67] -83]
Test Case:  13 | Input/Output: [[31 31 31 67] 31]
Test Case:  14 | Input/Output: [[97 -27 97 97] -27]
Test Case:  15 | Input/Output: [[-100 -100 -100 -100] -100]
Test Case:  16 | Input/Output: [[24 24 24 35] 24]
Test Case:  17 | Input/Output: [[93 39 39 39] 39]
Test Case:  18 | Input/Output: [[88 -34 -34 -34] -34]
Test Case:  19 | Input/Output: [[7 7 -96 7] -96]
Test Case:  20 | Input/Output: [[65 65 65 26] 26]
Test Case:  21 | Input/Output: [[80 -15 80 80] -15]
Test Case:  22 | Input/Output: [[-54 -54 18 -54] -54]
Test Case:  23 | Input/Output: [[22 -45 -45 -45] -45]
Test Case:  24 | Input/Output: [[75 52 52 52] 52]
Test Case:  25 | Input/Output: [[-42 66 66 66] -42]
Test Case:  26 | Input/Output: [[-47 -47 -47 48] -47]
Test Case:  27 | Input/Output: [[6 -35 6 6] -35]
Test Case:  28 | Input/Output: [[56 -25 -25 -25] -25]
Test Case:  29 | Input/Output: [[70 -92 70 70] -92]
Test Case:  30 | Input/Output: [[64 31 31 31] 31]
Test Case:  31 | Input/Output: [[-54 -54 -54 39] -54]
Test Case:  32 | Input/Output: [[-85 -85 -85 -50] -85]
Test Case:  33 | Input/Output: [[3 3 3 -38] -38]
Test Case:  34 | Input/Output: [[-58 12 -58 -58] -58]
Test Case:  35 | Input/Output: [[-53 -53 -53 -78] -78]
Test Case:  36 | Input/Output: [[-57 55 55 55] -57]
Test Case:  37 | Input/Output: [[-16 -11 -11 -11] -16]
Test Case:  38 | Input/Output: [[-78 -89 -89 -89] -89]
Test Case:  39 | Input/Output: [[-97 39 39 39] -97]
Test Case:  40 | Input/Output: [[38 38 38 -91] -91]
Test Case:  41 | Input/Output: [[0 0 90 0] 0]
Test Case:  42 | Input/Output: [[-60 78 78 78] -60]
Test Case:  43 | Input/Output: [[92 83 83 83] 83]
Test Case:  44 | Input/Output: [[-100 -100 72 -100] -100]
Test Case:  45 | Input/Output: [[32 80 80 80] 32]
Test Case:  46 | Input/Output: [[-59 -17 -59 -59] -59]
Test Case:  47 | Input/Output: [[99 -11 99 99] -11]
Test Case:  48 | Input/Output: [[2 -99 -99 -99] -99]
Test Case:  49 | Input/Output: [[-85 -85 -85 34] -85]
Test Case:  50 | Input/Output: [[-88 -54 -88 -88] -88]
Test Case:  51 | Input/Output: [[19 19 -93 19] -93]
Test Case:  52 | Input/Output: [[1 1 94 1] 1]
Test Case:  53 | Input/Output: [[98 98 98 -20] -20]
Test Case:  54 | Input/Output: [[94 94 94 -74] -74]
Test Case:  55 | Input/Output: [[-50 56 -50 -50] -50]
Test Case:  56 | Input/Output: [[-93 18 18 18] -93]
Test Case:  57 | Input/Output: [[-53 35 35 35] -53]
Test Case:  58 | Input/Output: [[53 53 53 98] 53]
Test Case:  59 | Input/Output: [[-85 -85 -85 -48] -85]
Test Case:  60 | Input/Output: [[-57 -57 -1 -57] -57]
Test Case:  61 | Input/Output: [[-69 1 1 1] -69]
Test Case:  62 | Input/Output: [[30 -100 30 30] -100]
Test Case:  63 | Input/Output: [[-6 -6 -4 -6] -6]
Test Case:  64 | Input/Output: [[-75 52 -75 -75] -75]
Test Case:  65 | Input/Output: [[36 -8 36 36] -8]
Test Case:  66 | Input/Output: [[-71 -40 -71 -71] -71]
Test Case:  67 | Input/Output: [[28 28 28 65] 28]
Test Case:  68 | Input/Output: [[59 59 59 59] 59]
Test Case:  69 | Input/Output: [[93 81 81 81] 81]
Test Case:  70 | Input/Output: [[37 37 37 83] 37]
Test Case:  71 | Input/Output: [[-40 -45 -40 -40] -45]
Test Case:  72 | Input/Output: [[94 -1 -1 -1] -1]
Test Case:  73 | Input/Output: [[-54 -54 92 -54] -54]
Test Case:  74 | Input/Output: [[-4 78 -4 -4] -4]
Test Case:  75 | Input/Output: [[59 55 55 55] 55]
Test Case:  76 | Input/Output: [[6 -9 -9 -9] -9]
Test Case:  77 | Input/Output: [[34 34 -50 34] -50]
Test Case:  78 | Input/Output: [[-32 -32 -32 83] -32]
Test Case:  79 | Input/Output: [[-66 -80 -66 -66] -80]
Test Case:  80 | Input/Output: [[11 11 -81 11] -81]
Test Case:  81 | Input/Output: [[28 28 -66 28] -66]
Test Case:  82 | Input/Output: [[-70 -70 93 -70] -70]
Test Case:  83 | Input/Output: [[-4 -4 -4 52] -4]
Test Case:  84 | Input/Output: [[63 -81 -81 -81] -81]
Test Case:  85 | Input/Output: [[-39 -39 -26 -39] -39]
Test Case:  86 | Input/Output: [[-67 -67 -57 -67] -67]
Test Case:  87 | Input/Output: [[5 97 97 97] 5]
Test Case:  88 | Input/Output: [[-39 -39 -34 -39] -39]
Test Case:  89 | Input/Output: [[52 52 52 70] 52]
Test Case:  90 | Input/Output: [[-68 -39 -39 -39] -68]
Test Case:  91 | Input/Output: [[-23 -11 -23 -23] -23]
Test Case:  92 | Input/Output: [[-67 -67 -67 -6] -67]
Test Case:  93 | Input/Output: [[17 79 17 17] 17]
Test Case:  94 | Input/Output: [[57 57 -82 57] -82]
Test Case:  95 | Input/Output: [[21 -29 21 21] -29]
Test Case:  96 | Input/Output: [[10 18 18 18] 10]
Test Case:  97 | Input/Output: [[11 11 11 -93] -93]
Test Case:  98 | Input/Output: [[-50 -50 93 -50] -50]
Test Case:  99 | Input/Output: [[0 -30 0 0] -30]
Test Case: 100 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 101 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 102 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 103 | Input/Output: [(32 32 32 32) 32]
Test Case: 104 | Input/Output: [(17 17 17 17) 17]
Test Case: 105 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 106 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 107 | Input/Output: [(12 12 12 12) 12]
Test Case: 108 | Input/Output: [(50 50 50 50) 50]
Test Case: 109 | Input/Output: [(59 59 59 59) 59]
Test Case: 110 | Input/Output: [(56 56 56 56) 56]
Test Case: 111 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 112 | Input/Output: [(31 31 31 31) 31]
Test Case: 113 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 114 | Input/Output: [(66 66 66 66) 66]
Test Case: 115 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 116 | Input/Output: [(97 97 97 97) 97]
Test Case: 117 | Input/Output: [(14 14 14 14) 14]
Test Case: 118 | Input/Output: [(85 85 85 85) 85]
Test Case: 119 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 120 | Input/Output: [(62 62 62 62) 62]
Test Case: 121 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 122 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 123 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 124 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 125 | Input/Output: [(61 61 61 61) 61]
Test Case: 126 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 127 | Input/Output: [(65 65 65 65) 65]
Test Case: 128 | Input/Output: [(80 80 80 80) 80]
Test Case: 129 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 130 | Input/Output: [(69 69 69 69) 69]
Test Case: 131 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 132 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 133 | Input/Output: [(55 55 55 55) 55]
Test Case: 134 | Input/Output: [(29 29 29 29) 29]
Test Case: 135 | Input/Output: [(9 9 9 9) 9]
Test Case: 136 | Input/Output: [(10 10 10 10) 10]
Test Case: 137 | Input/Output: [(29 29 29 29) 29]
Test Case: 138 | Input/Output: [(45 45 45 45) 45]
Test Case: 139 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 140 | Input/Output: [(94 94 94 94) 94]
Test Case: 141 | Input/Output: [(9 9 9 9) 9]
Test Case: 142 | Input/Output: [(74 74 74 74) 74]
Test Case: 143 | Input/Output: [(70 70 70 70) 70]
Test Case: 144 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 145 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 146 | Input/Output: [(14 14 14 14) 14]
Test Case: 147 | Input/Output: [(36 36 36 36) 36]
Test Case: 148 | Input/Output: [(9 9 9 9) 9]
Test Case: 149 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 150 | Input/Output: [(28 28 28 28) 28]
Test Case: 151 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 152 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 153 | Input/Output: [(22 22 22 22) 22]
Test Case: 154 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 155 | Input/Output: [(80 80 80 80) 80]
Test Case: 156 | Input/Output: [(22 22 22 22) 22]
Test Case: 157 | Input/Output: [(100 100 100 100) 100]
Test Case: 158 | Input/Output: [(27 27 27 27) 27]
Test Case: 159 | Input/Output: [(48 48 48 48) 48]
Test Case: 160 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 161 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 162 | Input/Output: [(71 71 71 71) 71]
Test Case: 163 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 164 | Input/Output: [(45 45 45 45) 45]
Test Case: 165 | Input/Output: [(60 60 60 60) 60]
Test Case: 166 | Input/Output: [(87 87 87 87) 87]
Test Case: 167 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 168 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 169 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 170 | Input/Output: [(68 68 68 68) 68]
Test Case: 171 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 172 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 173 | Input/Output: [(98 98 98 98) 98]
Test Case: 174 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 175 | Input/Output: [(99 99 99 99) 99]
Test Case: 176 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 177 | Input/Output: [(1 1 1 1) 1]
Test Case: 178 | Input/Output: [(38 38 38 38) 38]
Test Case: 179 | Input/Output: [(60 60 60 60) 60]
Test Case: 180 | Input/Output: [(98 98 98 98) 98]
Test Case: 181 | Input/Output: [(32 32 32 32) 32]
Test Case: 182 | Input/Output: [(70 70 70 70) 70]
Test Case: 183 | Input/Output: [(54 54 54 54) 54]
Test Case: 184 | Input/Output: [(74 74 74 74) 74]
Test Case: 185 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 186 | Input/Output: [(82 82 82 82) 82]
Test Case: 187 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 188 | Input/Output: [(3 3 3 3) 3]
Test Case: 189 | Input/Output: [(53 53 53 53) 53]
Test Case: 190 | Input/Output: [(33 33 33 33) 33]
Test Case: 191 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 192 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 193 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 194 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 195 | Input/Output: [(23 23 23 23) 23]
Test Case: 196 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 197 | Input/Output: [(63 63 63 63) 63]
Test Case: 198 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 199 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 200 | Input/Output: [(60 98 94 28) 28]
Test Case: 201 | Input/Output: [(55 10 62 95) 10]
Test Case: 202 | Input/Output: [(78 33 55 28) 28]
Test Case: 203 | Input/Output: [(61 91 72 70) 61]
Test Case: 204 | Input/Output: [(18 59 84 8) 8]
Test Case: 205 | Input/Output: [(39 95 41 34) 34]
Test Case: 206 | Input/Output: [(32 71 0 20) 0]
Test Case: 207 | Input/Output: [(91 33 93 56) 33]
Test Case: 208 | Input/Output: [(25 37 6 1) 1]
Test Case: 209 | Input/Output: [(81 46 46 1) 1]
Test Case: 210 | Input/Output: [(32 50 28 99) 28]
Test Case: 211 | Input/Output: [(22 59 38 13) 13]
Test Case: 212 | Input/Output: [(34 86 100 45) 34]
Test Case: 213 | Input/Output: [(29 31 12 2) 2]
Test Case: 214 | Input/Output: [(6 54 4 43) 4]
Test Case: 215 | Input/Output: [(62 81 5 0) 0]
Test Case: 216 | Input/Output: [(37 82 11 13) 11]
Test Case: 217 | Input/Output: [(17 42 39 74) 17]
Test Case: 218 | Input/Output: [(44 64 91 71) 44]
Test Case: 219 | Input/Output: [(49 38 95 36) 36]
Test Case: 220 | Input/Output: [(99 2 5 3) 2]
Test Case: 221 | Input/Output: [(68 43 60 36) 36]
Test Case: 222 | Input/Output: [(85 72 21 49) 21]
Test Case: 223 | Input/Output: [(42 16 81 1) 1]
Test Case: 224 | Input/Output: [(55 91 2 96) 2]
Test Case: 225 | Input/Output: [(59 54 90 81) 54]
Test Case: 226 | Input/Output: [(42 15 60 80) 15]
Test Case: 227 | Input/Output: [(44 78 73 1) 1]
Test Case: 228 | Input/Output: [(29 88 82 70) 29]
Test Case: 229 | Input/Output: [(7 71 56 6) 6]
Test Case: 230 | Input/Output: [(33 13 86 59) 13]
Test Case: 231 | Input/Output: [(91 87 17 70) 17]
Test Case: 232 | Input/Output: [(90 49 51 91) 49]
Test Case: 233 | Input/Output: [(81 63 48 40) 40]
Test Case: 234 | Input/Output: [(94 1 68 36) 1]
Test Case: 235 | Input/Output: [(10 32 22 52) 10]
Test Case: 236 | Input/Output: [(9 100 2 100) 2]
Test Case: 237 | Input/Output: [(47 36 5 20) 5]
Test Case: 238 | Input/Output: [(5 18 7 14) 5]
Test Case: 239 | Input/Output: [(60 30 89 60) 30]
Test Case: 240 | Input/Output: [(73 36 78 60) 36]
Test Case: 241 | Input/Output: [(44 60 16 42) 16]
Test Case: 242 | Input/Output: [(40 11 88 89) 11]
Test Case: 243 | Input/Output: [(58 95 76 32) 32]
Test Case: 244 | Input/Output: [(42 66 32 72) 32]
Test Case: 245 | Input/Output: [(4 19 66 35) 4]
Test Case: 246 | Input/Output: [(97 75 53 24) 24]
Test Case: 247 | Input/Output: [(33 45 91 18) 18]
Test Case: 248 | Input/Output: [(86 52 17 56) 17]
Test Case: 249 | Input/Output: [(33 85 62 77) 33]
Test Case: 250 | Input/Output: [(32 35 84 24) 24]
Test Case: 251 | Input/Output: [(84 24 61 92) 24]
Test Case: 252 | Input/Output: [(76 44 20 49) 20]
Test Case: 253 | Input/Output: [(51 95 34 45) 34]
Test Case: 254 | Input/Output: [(42 48 31 82) 31]
Test Case: 255 | Input/Output: [(71 94 71 39) 39]
Test Case: 256 | Input/Output: [(35 23 70 82) 23]
Test Case: 257 | Input/Output: [(49 44 5 84) 5]
Test Case: 258 | Input/Output: [(39 99 24 66) 24]
Test Case: 259 | Input/Output: [(96 21 64 56) 21]
Test Case: 260 | Input/Output: [(69 54 21 12) 12]
Test Case: 261 | Input/Output: [(33 84 93 32) 32]
Test Case: 262 | Input/Output: [(65 35 93 12) 12]
Test Case: 263 | Input/Output: [(14 83 4 49) 4]
Test Case: 264 | Input/Output: [(47 12 88 23) 12]
Test Case: 265 | Input/Output: [(100 35 45 41) 35]
Test Case: 266 | Input/Output: [(17 31 44 78) 17]
Test Case: 267 | Input/Output: [(14 88 22 23) 14]
Test Case: 268 | Input/Output: [(87 8 100 0) 0]
Test Case: 269 | Input/Output: [(45 36 73 29) 29]
Test Case: 270 | Input/Output: [(89 27 89 23) 23]
Test Case: 271 | Input/Output: [(95 16 67 10) 10]
Test Case: 272 | Input/Output: [(87 47 97 29) 29]
Test Case: 273 | Input/Output: [(33 5 88 20) 5]
Test Case: 274 | Input/Output: [(58 85 67 5) 5]
Test Case: 275 | Input/Output: [(27 60 40 83) 27]
Test Case: 276 | Input/Output: [(34 85 41 25) 25]
Test Case: 277 | Input/Output: [(65 47 63 4) 4]
Test Case: 278 | Input/Output: [(46 58 92 52) 46]
Test Case: 279 | Input/Output: [(12 48 22 62) 12]
Test Case: 280 | Input/Output: [(88 5 69 44) 5]
Test Case: 281 | Input/Output: [(36 32 95 100) 32]
Test Case: 282 | Input/Output: [(92 20 35 39) 20]
Test Case: 283 | Input/Output: [(59 80 87 89) 59]
Test Case: 284 | Input/Output: [(76 28 77 18) 18]
Test Case: 285 | Input/Output: [(33 87 92 84) 33]
Test Case: 286 | Input/Output: [(98 28 89 97) 28]
Test Case: 287 | Input/Output: [(27 48 34 12) 12]
Test Case: 288 | Input/Output: [(40 85 8 91) 8]
Test Case: 289 | Input/Output: [(47 16 48 15) 15]
Test Case: 290 | Input/Output: [(81 18 69 95) 18]
Test Case: 291 | Input/Output: [(23 22 77 75) 22]
Test Case: 292 | Input/Output: [(63 50 43 81) 43]
Test Case: 293 | Input/Output: [(30 39 15 17) 15]
Test Case: 294 | Input/Output: [(51 46 74 51) 46]
Test Case: 295 | Input/Output: [(1 30 50 47) 1]
Test Case: 296 | Input/Output: [(31 51 11 64) 11]
Test Case: 297 | Input/Output: [(11 49 31 83) 11]
Test Case: 298 | Input/Output: [(0 33 81 93) 0]
Test Case: 299 | Input/Output: [(90 49 97 68) 49]
Test Case: 300 | Input/Output: [(32 66 99 36) 32]
Test Case: 301 | Input/Output: [(55 34 87 29) 29]
Test Case: 302 | Input/Output: [(79 8 5 35) 5]
Test Case: 303 | Input/Output: [(7 98 9 24) 7]
Test Case: 304 | Input/Output: [(95 58 98 11) 11]
Test Case: 305 | Input/Output: [(75 48 28 24) 24]
Test Case: 306 | Input/Output: [(25 20 91 27) 20]
Test Case: 307 | Input/Output: [(69 32 88 50) 32]
Test Case: 308 | Input/Output: [(19 86 45 67) 19]
Test Case: 309 | Input/Output: [(51 8 59 52) 8]
Test Case: 310 | Input/Output: [(36 64 71 15) 15]
Test Case: 311 | Input/Output: [(8 38 59 63) 8]
Test Case: 312 | Input/Output: [(92 33 64 0) 0]
Test Case: 313 | Input/Output: [(98 89 16 53) 16]
Test Case: 314 | Input/Output: [(18 96 59 29) 18]
Test Case: 315 | Input/Output: [(19 29 41 93) 19]
Test Case: 316 | Input/Output: [(0 98 44 84) 0]
Test Case: 317 | Input/Output: [(0 87 84 50) 0]
Test Case: 318 | Input/Output: [(63 21 85 57) 21]
Test Case: 319 | Input/Output: [(35 66 98 93) 35]
Test Case: 320 | Input/Output: [(9 81 8 94) 8]
Test Case: 321 | Input/Output: [(2 70 1 98) 1]
Test Case: 322 | Input/Output: [(13 43 82 43) 13]
Test Case: 323 | Input/Output: [(87 27 0 57) 0]
Test Case: 324 | Input/Output: [(17 54 29 31) 17]
Test Case: 325 | Input/Output: [(47 57 17 6) 6]
Test Case: 326 | Input/Output: [(88 87 25 30) 25]
Test Case: 327 | Input/Output: [(73 7 93 93) 7]
Test Case: 328 | Input/Output: [(2 53 77 57) 2]
Test Case: 329 | Input/Output: [(10 50 84 42) 10]
Test Case: 330 | Input/Output: [(8 83 65 80) 8]
Test Case: 331 | Input/Output: [(29 47 67 30) 29]
Test Case: 332 | Input/Output: [(57 59 12 74) 12]
Test Case: 333 | Input/Output: [(93 46 81 48) 46]
Test Case: 334 | Input/Output: [(90 24 66 62) 24]
Test Case: 335 | Input/Output: [(64 95 87 5) 5]
Test Case: 336 | Input/Output: [(5 99 27 13) 5]
Test Case: 337 | Input/Output: [(38 81 72 10) 10]
Test Case: 338 | Input/Output: [(35 56 56 49) 35]
Test Case: 339 | Input/Output: [(39 8 93 81) 8]
Test Case: 340 | Input/Output: [(4 37 46 71) 4]
Test Case: 341 | Input/Output: [(89 67 47 25) 25]
Test Case: 342 | Input/Output: [(54 82 17 92) 17]
Test Case: 343 | Input/Output: [(1 9 63 30) 1]
Test Case: 344 | Input/Output: [(70 83 92 48) 48]
Test Case: 345 | Input/Output: [(84 91 26 92) 26]
Test Case: 346 | Input/Output: [(13 44 11 91) 11]
Test Case: 347 | Input/Output: [(19 3 89 98) 3]
Test Case: 348 | Input/Output: [(52 36 52 72) 36]
Test Case: 349 | Input/Output: [(93 85 85 5) 5]
Test Case: 350 | Input/Output: [(82 65 88 2) 2]
Test Case: 351 | Input/Output: [(93 55 36 100) 36]
Test Case: 352 | Input/Output: [(3 66 30 90) 3]
Test Case: 353 | Input/Output: [(28 38 14 39) 14]
Test Case: 354 | Input/Output: [(100 19 13 1) 1]
Test Case: 355 | Input/Output: [(45 15 20 99) 15]
Test Case: 356 | Input/Output: [(88 20 41 8) 8]
Test Case: 357 | Input/Output: [(6 64 5 67) 5]
Test Case: 358 | Input/Output: [(80 88 40 89) 40]
Test Case: 359 | Input/Output: [(49 70 92 74) 49]
Test Case: 360 | Input/Output: [(68 72 80 90) 68]
Test Case: 361 | Input/Output: [(14 25 44 91) 14]
Test Case: 362 | Input/Output: [(41 50 69 1) 1]
Test Case: 363 | Input/Output: [(47 72 41 45) 41]
Test Case: 364 | Input/Output: [(95 51 38 98) 38]
Test Case: 365 | Input/Output: [(56 54 37 93) 37]
Test Case: 366 | Input/Output: [(5 0 26 24) 0]
Test Case: 367 | Input/Output: [(92 4 28 22) 4]
Test Case: 368 | Input/Output: [(62 13 87 92) 13]
Test Case: 369 | Input/Output: [(49 100 45 44) 44]
Test Case: 370 | Input/Output: [(11 26 38 60) 11]
Test Case: 371 | Input/Output: [(37 9 60 1) 1]
Test Case: 372 | Input/Output: [(38 86 49 13) 13]
Test Case: 373 | Input/Output: [(77 62 13 35) 13]
Test Case: 374 | Input/Output: [(58 79 76 73) 58]
Test Case: 375 | Input/Output: [(6 61 84 41) 6]
Test Case: 376 | Input/Output: [(81 82 35 9) 9]
Test Case: 377 | Input/Output: [(60 49 52 98) 49]
Test Case: 378 | Input/Output: [(66 75 53 63) 53]
Test Case: 379 | Input/Output: [(66 79 18 52) 18]
Test Case: 380 | Input/Output: [(48 93 39 45) 39]
Test Case: 381 | Input/Output: [(66 35 100 87) 35]
Test Case: 382 | Input/Output: [(93 65 29 89) 29]
Test Case: 383 | Input/Output: [(34 14 54 19) 14]
Test Case: 384 | Input/Output: [(95 13 22 52) 13]
Test Case: 385 | Input/Output: [(6 44 42 5) 5]
Test Case: 386 | Input/Output: [(77 29 58 4) 4]
Test Case: 387 | Input/Output: [(81 80 94 30) 30]
Test Case: 388 | Input/Output: [(29 96 19 11) 11]
Test Case: 389 | Input/Output: [(38 91 54 55) 38]
Test Case: 390 | Input/Output: [(77 70 54 62) 54]
Test Case: 391 | Input/Output: [(51 26 55 93) 26]
Test Case: 392 | Input/Output: [(69 28 84 8) 8]
Test Case: 393 | Input/Output: [(50 23 12 12) 12]
Test Case: 394 | Input/Output: [(95 34 36 85) 34]
Test Case: 395 | Input/Output: [(69 72 16 73) 16]
Test Case: 396 | Input/Output: [(67 33 13 48) 13]
Test Case: 397 | Input/Output: [(23 9 44 23) 9]
Test Case: 398 | Input/Output: [(6 94 28 92) 6]
Test Case: 399 | Input/Output: [(93 31 8 99) 8]
Test Case: 400 | Input/Output: [(-19 -36 66 -21) -36]
Test Case: 401 | Input/Output: [(-44 -78 -35 -79) -79]
Test Case: 402 | Input/Output: [(62 30 -33 88) -33]
Test Case: 403 | Input/Output: [(-58 16 -37 75) -58]
Test Case: 404 | Input/Output: [(-11 -25 16 75) -25]
Test Case: 405 | Input/Output: [(11 75 -74 -10) -74]
Test Case: 406 | Input/Output: [(91 57 -10 -64) -64]
Test Case: 407 | Input/Output: [(-9 -47 39 -4) -47]
Test Case: 408 | Input/Output: [(30 -38 -5 -6) -38]
Test Case: 409 | Input/Output: [(37 56 98 94) 37]
Test Case: 410 | Input/Output: [(31 -5 16 -99) -99]
Test Case: 411 | Input/Output: [(-87 17 -24 50) -87]
Test Case: 412 | Input/Output: [(14 21 1 95) 1]
Test Case: 413 | Input/Output: [(35 -38 33 -67) -67]
Test Case: 414 | Input/Output: [(-77 -1 -83 47) -83]
Test Case: 415 | Input/Output: [(-91 -81 38 -85) -91]
Test Case: 416 | Input/Output: [(-34 100 93 39) -34]
Test Case: 417 | Input/Output: [(60 96 -10 19) -10]
Test Case: 418 | Input/Output: [(-50 -9 -72 49) -72]
Test Case: 419 | Input/Output: [(-53 23 25 93) -53]
Test Case: 420 | Input/Output: [(-29 53 72 -65) -65]
Test Case: 421 | Input/Output: [(83 -38 -55 38) -55]
Test Case: 422 | Input/Output: [(-2 -31 -67 -5) -67]
Test Case: 423 | Input/Output: [(-1 -86 82 72) -86]
Test Case: 424 | Input/Output: [(-73 11 58 -29) -73]
Test Case: 425 | Input/Output: [(30 -87 -12 3) -87]
Test Case: 426 | Input/Output: [(14 -28 -7 96) -28]
Test Case: 427 | Input/Output: [(67 97 33 81) 33]
Test Case: 428 | Input/Output: [(46 -99 -54 -70) -99]
Test Case: 429 | Input/Output: [(9 -51 20 63) -51]
Test Case: 430 | Input/Output: [(-54 -7 49 -21) -54]
Test Case: 431 | Input/Output: [(41 -49 -59 -64) -64]
Test Case: 432 | Input/Output: [(14 23 -96 62) -96]
Test Case: 433 | Input/Output: [(90 89 2 -18) -18]
Test Case: 434 | Input/Output: [(59 -80 -78 13) -80]
Test Case: 435 | Input/Output: [(-82 -50 -100 94) -100]
Test Case: 436 | Input/Output: [(51 75 -81 -51) -81]
Test Case: 437 | Input/Output: [(22 10 60 -30) -30]
Test Case: 438 | Input/Output: [(-20 60 86 -25) -25]
Test Case: 439 | Input/Output: [(-99 -45 -84 -48) -99]
Test Case: 440 | Input/Output: [(16 -63 41 47) -63]
Test Case: 441 | Input/Output: [(-47 -98 64 1) -98]
Test Case: 442 | Input/Output: [(-8 58 95 16) -8]
Test Case: 443 | Input/Output: [(47 6 85 97) 6]
Test Case: 444 | Input/Output: [(26 -19 -43 51) -43]
Test Case: 445 | Input/Output: [(-95 83 80 -28) -95]
Test Case: 446 | Input/Output: [(60 88 95 68) 60]
Test Case: 447 | Input/Output: [(38 -55 94 67) -55]
Test Case: 448 | Input/Output: [(-96 17 -62 -6) -96]
Test Case: 449 | Input/Output: [(-33 88 5 16) -33]
Test Case: 450 | Input/Output: [(-28 -10 -37 -48) -48]
Test Case: 451 | Input/Output: [(-67 -40 77 -28) -67]
Test Case: 452 | Input/Output: [(-69 -22 14 39) -69]
Test Case: 453 | Input/Output: [(40 71 -61 7) -61]
Test Case: 454 | Input/Output: [(24 -67 73 89) -67]
Test Case: 455 | Input/Output: [(95 -46 46 -28) -46]
Test Case: 456 | Input/Output: [(33 0 -23 86) -23]
Test Case: 457 | Input/Output: [(77 -15 -84 -6) -84]
Test Case: 458 | Input/Output: [(-68 -59 17 -44) -68]
Test Case: 459 | Input/Output: [(63 -9 70 46) -9]
Test Case: 460 | Input/Output: [(96 -5 -19 -26) -26]
Test Case: 461 | Input/Output: [(25 13 -42 -18) -42]
Test Case: 462 | Input/Output: [(21 10 -62 28) -62]
Test Case: 463 | Input/Output: [(-56 -63 90 27) -63]
Test Case: 464 | Input/Output: [(76 85 -69 -67) -69]
Test Case: 465 | Input/Output: [(-84 51 89 72) -84]
Test Case: 466 | Input/Output: [(-84 -96 -8 50) -96]
Test Case: 467 | Input/Output: [(53 93 10 -26) -26]
Test Case: 468 | Input/Output: [(85 21 -82 -76) -82]
Test Case: 469 | Input/Output: [(-44 -16 41 94) -44]
Test Case: 470 | Input/Output: [(-58 30 -88 -60) -88]
Test Case: 471 | Input/Output: [(68 12 -70 -39) -70]
Test Case: 472 | Input/Output: [(99 79 73 -59) -59]
Test Case: 473 | Input/Output: [(76 52 -70 97) -70]
Test Case: 474 | Input/Output: [(-45 -74 48 44) -74]
Test Case: 475 | Input/Output: [(35 -7 -54 77) -54]
Test Case: 476 | Input/Output: [(-56 23 47 -5) -56]
Test Case: 477 | Input/Output: [(12 13 21 50) 12]
Test Case: 478 | Input/Output: [(86 76 59 32) 32]
Test Case: 479 | Input/Output: [(92 -51 53 -88) -88]
Test Case: 480 | Input/Output: [(4 -28 -88 26) -88]
Test Case: 481 | Input/Output: [(13 -8 29 -78) -78]
Test Case: 482 | Input/Output: [(28 68 39 11) 11]
Test Case: 483 | Input/Output: [(94 23 84 -6) -6]
Test Case: 484 | Input/Output: [(71 61 -76 -40) -76]
Test Case: 485 | Input/Output: [(51 -86 10 0) -86]
Test Case: 486 | Input/Output: [(-45 35 -70 43) -70]
Test Case: 487 | Input/Output: [(-2 -53 24 89) -53]
Test Case: 488 | Input/Output: [(69 -61 -87 -41) -87]
Test Case: 489 | Input/Output: [(-49 -13 -25 -32) -49]
Test Case: 490 | Input/Output: [(-46 -49 18 21) -49]
Test Case: 491 | Input/Output: [(-98 -33 5 51) -98]
Test Case: 492 | Input/Output: [(-3 90 -24 -87) -87]
Test Case: 493 | Input/Output: [(90 86 -71 96) -71]
Test Case: 494 | Input/Output: [(-8 -26 -90 19) -90]
Test Case: 495 | Input/Output: [(-90 -39 95 -63) -90]
Test Case: 496 | Input/Output: [(-1 37 61 60) -1]
Test Case: 497 | Input/Output: [(14 29 11 55) 11]
Test Case: 498 | Input/Output: [(37 35 50 96) 35]
Test Case: 499 | Input/Output: [(-18 13 5 41) -18]
Test Case: 500 | Input/Output: [(76 50 -57 19) -57]
Test Case: 501 | Input/Output: [(-49 -17 -44 14) -49]
Test Case: 502 | Input/Output: [(12 -80 -65 41) -80]
Test Case: 503 | Input/Output: [(98 27 -60 21) -60]
Test Case: 504 | Input/Output: [(59 -27 -5 -71) -71]
Test Case: 505 | Input/Output: [(-45 -7 32 59) -45]
Test Case: 506 | Input/Output: [(34 31 27 -75) -75]
Test Case: 507 | Input/Output: [(-71 -66 -32 -28) -71]
Test Case: 508 | Input/Output: [(77 19 -20 46) -20]
Test Case: 509 | Input/Output: [(-91 66 -31 -95) -95]
Test Case: 510 | Input/Output: [(-41 11 87 70) -41]
Test Case: 511 | Input/Output: [(-75 41 -95 -81) -95]
Test Case: 512 | Input/Output: [(-22 38 33 -41) -41]
Test Case: 513 | Input/Output: [(-9 -2 -19 84) -19]
Test Case: 514 | Input/Output: [(74 4 -39 3) -39]
Test Case: 515 | Input/Output: [(26 -13 -64 17) -64]
Test Case: 516 | Input/Output: [(75 -8 -77 39) -77]
Test Case: 517 | Input/Output: [(-45 -8 -77 -53) -77]
Test Case: 518 | Input/Output: [(50 71 51 21) 21]
Test Case: 519 | Input/Output: [(31 57 21 -18) -18]
Test Case: 520 | Input/Output: [(-69 59 -87 43) -87]
Test Case: 521 | Input/Output: [(-86 41 84 -16) -86]
Test Case: 522 | Input/Output: [(3 80 100 -97) -97]
Test Case: 523 | Input/Output: [(17 -28 -36 -29) -36]
Test Case: 524 | Input/Output: [(58 -74 -25 -66) -74]
Test Case: 525 | Input/Output: [(-99 7 -3 54) -99]
Test Case: 526 | Input/Output: [(-43 41 -21 45) -43]
Test Case: 527 | Input/Output: [(6 -36 -77 -100) -100]
Test Case: 528 | Input/Output: [(91 40 -34 -88) -88]
Test Case: 529 | Input/Output: [(-95 -9 34 79) -95]
Test Case: 530 | Input/Output: [(-6 -7 -54 66) -54]
Test Case: 531 | Input/Output: [(100 18 47 -67) -67]
Test Case: 532 | Input/Output: [(-76 49 86 38) -76]
Test Case: 533 | Input/Output: [(44 -36 70 -97) -97]
Test Case: 534 | Input/Output: [(65 33 -66 -2) -66]
Test Case: 535 | Input/Output: [(18 -48 -74 30) -74]
Test Case: 536 | Input/Output: [(-95 -96 -38 -88) -96]
Test Case: 537 | Input/Output: [(-25 -76 38 -11) -76]
Test Case: 538 | Input/Output: [(-48 50 27 34) -48]
Test Case: 539 | Input/Output: [(66 73 75 -79) -79]
Test Case: 540 | Input/Output: [(-16 69 88 -62) -62]
Test Case: 541 | Input/Output: [(47 99 -51 20) -51]
Test Case: 542 | Input/Output: [(35 -21 -85 -11) -85]
Test Case: 543 | Input/Output: [(-96 19 -77 -97) -97]
Test Case: 544 | Input/Output: [(77 -37 -88 80) -88]
Test Case: 545 | Input/Output: [(-30 11 -7 -59) -59]
Test Case: 546 | Input/Output: [(-57 39 27 -53) -57]
Test Case: 547 | Input/Output: [(75 -87 61 -14) -87]
Test Case: 548 | Input/Output: [(-39 23 -47 74) -47]
Test Case: 549 | Input/Output: [(81 -17 57 14) -17]
Test Case: 550 | Input/Output: [(-6 -34 -52 -75) -75]
Test Case: 551 | Input/Output: [(22 -92 38 -94) -94]
Test Case: 552 | Input/Output: [(-6 62 76 -23) -23]
Test Case: 553 | Input/Output: [(30 -31 -47 -78) -78]
Test Case: 554 | Input/Output: [(-12 -26 81 68) -26]
Test Case: 555 | Input/Output: [(-68 -21 -21 -14) -68]
Test Case: 556 | Input/Output: [(70 -80 80 54) -80]
Test Case: 557 | Input/Output: [(-25 51 -91 27) -91]
Test Case: 558 | Input/Output: [(52 88 59 -62) -62]
Test Case: 559 | Input/Output: [(27 -100 -1 -49) -100]
Test Case: 560 | Input/Output: [(-74 -82 26 -17) -82]
Test Case: 561 | Input/Output: [(-43 94 -17 78) -43]
Test Case: 562 | Input/Output: [(88 -44 78 49) -44]
Test Case: 563 | Input/Output: [(-27 -33 -43 19) -43]
Test Case: 564 | Input/Output: [(-43 50 -12 -54) -54]
Test Case: 565 | Input/Output: [(88 -50 -35 78) -50]
Test Case: 566 | Input/Output: [(-83 -31 -33 -15) -83]
Test Case: 567 | Input/Output: [(51 51 44 0) 0]
Test Case: 568 | Input/Output: [(47 28 -10 6) -10]
Test Case: 569 | Input/Output: [(33 -39 14 -54) -54]
Test Case: 570 | Input/Output: [(-50 -76 -8 72) -76]
Test Case: 571 | Input/Output: [(73 -51 10 1) -51]
Test Case: 572 | Input/Output: [(-93 -10 87 -2) -93]
Test Case: 573 | Input/Output: [(88 -90 -80 -70) -90]
Test Case: 574 | Input/Output: [(89 54 38 67) 38]
Test Case: 575 | Input/Output: [(77 -53 -76 -30) -76]
Test Case: 576 | Input/Output: [(-93 69 63 -23) -93]
Test Case: 577 | Input/Output: [(-72 -48 -95 17) -95]
Test Case: 578 | Input/Output: [(-95 -83 -57 -1) -95]
Test Case: 579 | Input/Output: [(-23 -46 -63 -5) -63]
Test Case: 580 | Input/Output: [(-41 -19 -46 96) -46]
Test Case: 581 | Input/Output: [(63 -81 -37 -37) -81]
Test Case: 582 | Input/Output: [(2 -12 26 -16) -16]
Test Case: 583 | Input/Output: [(72 -66 34 67) -66]
Test Case: 584 | Input/Output: [(-24 88 75 4) -24]
Test Case: 585 | Input/Output: [(36 -90 82 57) -90]
Test Case: 586 | Input/Output: [(-56 -27 79 -79) -79]
Test Case: 587 | Input/Output: [(59 65 69 -87) -87]
Test Case: 588 | Input/Output: [(28 -18 -2 -73) -73]
Test Case: 589 | Input/Output: [(30 79 -7 -6) -7]
Test Case: 590 | Input/Output: [(-9 34 22 -7) -9]
Test Case: 591 | Input/Output: [(89 -9 79 -3) -9]
Test Case: 592 | Input/Output: [(29 45 -40 -17) -40]
Test Case: 593 | Input/Output: [(77 20 50 12) 12]
Test Case: 594 | Input/Output: [(-12 69 -56 -15) -56]
Test Case: 595 | Input/Output: [(-76 -96 7 -91) -96]
Test Case: 596 | Input/Output: [(60 -74 -91 -94) -94]
Test Case: 597 | Input/Output: [(79 -76 -68 -91) -91]
Test Case: 598 | Input/Output: [(-6 -54 92 91) -54]
Test Case: 599 | Input/Output: [(-34 -20 30 69) -34]
Test Case: 600 | Input/Output: [(45 45 -18 -35) -35]
Test Case: 601 | Input/Output: [(-94 -68 76 47) -94]
Test Case: 602 | Input/Output: [(-81 35 20 15) -81]
Test Case: 603 | Input/Output: [(67 21 36 -29) -29]
Test Case: 604 | Input/Output: [(24 -86 -92 1) -92]
Test Case: 605 | Input/Output: [(-59 -74 -91 -83) -91]
Test Case: 606 | Input/Output: [(28 -68 66 73) -68]
Test Case: 607 | Input/Output: [(12 -84 -33 52) -84]
Test Case: 608 | Input/Output: [(-55 -40 36 -47) -55]
Test Case: 609 | Input/Output: [(43 -52 -8 -6) -52]
Test Case: 610 | Input/Output: [(-77 -100 -47 20) -100]
Test Case: 611 | Input/Output: [(0 -4 7 57) -4]
Test Case: 612 | Input/Output: [(-51 -70 -76 -52) -76]
Test Case: 613 | Input/Output: [(-86 -100 90 -68) -100]
Test Case: 614 | Input/Output: [(59 16 -1 -85) -85]
Test Case: 615 | Input/Output: [(-78 82 -57 -85) -85]
Test Case: 616 | Input/Output: [(-16 99 -58 85) -58]
Test Case: 617 | Input/Output: [(-36 84 79 34) -36]
Test Case: 618 | Input/Output: [(-31 100 -32 23) -32]
Test Case: 619 | Input/Output: [(-35 -6 -16 -58) -58]
Test Case: 620 | Input/Output: [(76 67 61 -16) -16]
Test Case: 621 | Input/Output: [(-49 -54 36 -15) -54]
Test Case: 622 | Input/Output: [(87 -74 82 20) -74]
Test Case: 623 | Input/Output: [(37 88 92 6) 6]
Test Case: 624 | Input/Output: [(85 71 7 -19) -19]
Test Case: 625 | Input/Output: [(-96 -38 75 21) -96]
Test Case: 626 | Input/Output: [(-65 47 25 40) -65]
Test Case: 627 | Input/Output: [(27 -49 19 -71) -71]
Test Case: 628 | Input/Output: [(42 74 -84 -55) -84]
Test Case: 629 | Input/Output: [(-61 38 27 69) -61]
Test Case: 630 | Input/Output: [(40 48 -31 90) -31]
Test Case: 631 | Input/Output: [(14 80 97 -76) -76]
Test Case: 632 | Input/Output: [(-76 -44 88 -21) -76]
Test Case: 633 | Input/Output: [(-46 -23 4 -33) -46]
Test Case: 634 | Input/Output: [(-8 -19 3 -82) -82]
Test Case: 635 | Input/Output: [(64 67 90 0) 0]
Test Case: 636 | Input/Output: [(17 91 -86 12) -86]
Test Case: 637 | Input/Output: [(-53 71 -40 27) -53]
Test Case: 638 | Input/Output: [(3 34 28 27) 3]
Test Case: 639 | Input/Output: [(-20 34 -26 80) -26]
Test Case: 640 | Input/Output: [(53 56 -49 20) -49]
Test Case: 641 | Input/Output: [(-20 -29 -91 -87) -91]
Test Case: 642 | Input/Output: [(-42 56 82 -24) -42]
Test Case: 643 | Input/Output: [(-6 95 -8 40) -8]
Test Case: 644 | Input/Output: [(84 51 49 97) 49]
Test Case: 645 | Input/Output: [(-29 -43 69 -86) -86]
Test Case: 646 | Input/Output: [(84 56 -26 17) -26]
Test Case: 647 | Input/Output: [(-6 -22 93 35) -22]
Test Case: 648 | Input/Output: [(-17 -37 3 -40) -40]
Test Case: 649 | Input/Output: [(15 -68 13 76) -68]
Test Case: 650 | Input/Output: [(-9 9 29 50) -9]
Test Case: 651 | Input/Output: [(-20 -21 31 -64) -64]
Test Case: 652 | Input/Output: [(97 33 -81 -87) -87]
Test Case: 653 | Input/Output: [(-20 35 -11 -36) -36]
Test Case: 654 | Input/Output: [(-27 -68 63 -7) -68]
Test Case: 655 | Input/Output: [(49 -26 30 -17) -26]
Test Case: 656 | Input/Output: [(53 -83 -70 -87) -87]
Test Case: 657 | Input/Output: [(53 -85 -77 -7) -85]
Test Case: 658 | Input/Output: [(36 -14 85 -30) -30]
Test Case: 659 | Input/Output: [(7 -9 -93 -100) -100]
Test Case: 660 | Input/Output: [(-20 18 -68 -79) -79]
Test Case: 661 | Input/Output: [(20 -68 40 -65) -68]
Test Case: 662 | Input/Output: [(-69 -1 93 99) -69]
Test Case: 663 | Input/Output: [(25 -8 47 62) -8]
Test Case: 664 | Input/Output: [(25 99 40 -72) -72]
Test Case: 665 | Input/Output: [(83 88 98 53) 53]
Test Case: 666 | Input/Output: [(-47 64 -92 31) -92]
Test Case: 667 | Input/Output: [(-40 16 -90 -100) -100]
Test Case: 668 | Input/Output: [(-27 96 -82 1) -82]
Test Case: 669 | Input/Output: [(-91 -49 47 19) -91]
Test Case: 670 | Input/Output: [(77 16 -62 -23) -62]
Test Case: 671 | Input/Output: [(93 55 -45 -2) -45]
Test Case: 672 | Input/Output: [(-33 -30 74 14) -33]
Test Case: 673 | Input/Output: [(-8 46 48 -11) -11]
Test Case: 674 | Input/Output: [(52 -27 -40 -84) -84]
Test Case: 675 | Input/Output: [(-55 25 -94 99) -94]
Test Case: 676 | Input/Output: [(-22 45 -45 -69) -69]
Test Case: 677 | Input/Output: [(66 -49 55 -22) -49]
Test Case: 678 | Input/Output: [(-75 60 25 -64) -75]
Test Case: 679 | Input/Output: [(-6 54 77 47) -6]
Test Case: 680 | Input/Output: [(-25 19 -25 31) -25]
Test Case: 681 | Input/Output: [(-58 32 3 -45) -58]
Test Case: 682 | Input/Output: [(11 68 27 -48) -48]
Test Case: 683 | Input/Output: [(-25 -35 -86 23) -86]
Test Case: 684 | Input/Output: [(-36 -3 20 -46) -46]
Test Case: 685 | Input/Output: [(-43 81 91 50) -43]
Test Case: 686 | Input/Output: [(44 69 83 -96) -96]
Test Case: 687 | Input/Output: [(59 91 82 96) 59]
Test Case: 688 | Input/Output: [(-34 76 99 75) -34]
Test Case: 689 | Input/Output: [(35 14 -7 -83) -83]
Test Case: 690 | Input/Output: [(32 -90 -57 -41) -90]
Test Case: 691 | Input/Output: [(-5 -78 26 -50) -78]
Test Case: 692 | Input/Output: [(-74 74 -44 22) -74]
Test Case: 693 | Input/Output: [(61 -56 5 79) -56]
Test Case: 694 | Input/Output: [(15 40 -20 -64) -64]
Test Case: 695 | Input/Output: [(-100 86 -84 -90) -100]
Test Case: 696 | Input/Output: [(-60 74 14 -39) -60]
Test Case: 697 | Input/Output: [(-40 70 36 -65) -65]
Test Case: 698 | Input/Output: [(-64 32 -88 -93) -93]
Test Case: 699 | Input/Output: [(16 1 16 -32) -32]
Test Case: 700 | Input/Output: [(-29 -22 33 34) -29]
Test Case: 701 | Input/Output: [(48 81 -96 57) -96]
Test Case: 702 | Input/Output: [(68 -80 -79 93) -80]
Test Case: 703 | Input/Output: [(-39 42 87 -66) -66]
Test Case: 704 | Input/Output: [(37 -60 40 -63) -63]
Test Case: 705 | Input/Output: [(-99 -85 -8 11) -99]
Test Case: 706 | Input/Output: [(-93 -60 -21 47) -93]
Test Case: 707 | Input/Output: [(-78 -35 49 63) -78]
Test Case: 708 | Input/Output: [(85 17 94 74) 17]
Test Case: 709 | Input/Output: [(47 -62 -4 -35) -62]
Test Case: 710 | Input/Output: [(47 73 1 -4) -4]
Test Case: 711 | Input/Output: [(-31 19 -68 -22) -68]
Test Case: 712 | Input/Output: [(-74 55 32 -19) -74]
Test Case: 713 | Input/Output: [(-47 34 -88 -41) -88]
Test Case: 714 | Input/Output: [(-44 9 47 79) -44]
Test Case: 715 | Input/Output: [(55 46 51 -97) -97]
Test Case: 716 | Input/Output: [(61 93 -15 -15) -15]
Test Case: 717 | Input/Output: [(54 70 13 14) 13]
Test Case: 718 | Input/Output: [(95 87 9 47) 9]
Test Case: 719 | Input/Output: [(48 -1 82 30) -1]
Test Case: 720 | Input/Output: [(-45 81 -9 70) -45]
Test Case: 721 | Input/Output: [(-9 -1 36 -38) -38]
Test Case: 722 | Input/Output: [(91 -75 -73 -96) -96]
Test Case: 723 | Input/Output: [(29 13 -29 -12) -29]
Test Case: 724 | Input/Output: [(97 -91 -52 14) -91]
Test Case: 725 | Input/Output: [(-9 -14 81 69) -14]
Test Case: 726 | Input/Output: [(59 6 62 -17) -17]
Test Case: 727 | Input/Output: [(67 -46 22 -2) -46]
Test Case: 728 | Input/Output: [(-84 -62 -100 99) -100]
Test Case: 729 | Input/Output: [(18 54 -84 -8) -84]
Test Case: 730 | Input/Output: [(-12 -3 66 -28) -28]
Test Case: 731 | Input/Output: [(-10 34 38 74) -10]
Test Case: 732 | Input/Output: [(-79 97 68 89) -79]
Test Case: 733 | Input/Output: [(-50 90 -72 -2) -72]
Test Case: 734 | Input/Output: [(31 -38 6 -58) -58]
Test Case: 735 | Input/Output: [(100 10 87 -21) -21]
Test Case: 736 | Input/Output: [(-66 -22 56 11) -66]
Test Case: 737 | Input/Output: [(7 4 -33 73) -33]
Test Case: 738 | Input/Output: [(61 63 99 64) 61]
Test Case: 739 | Input/Output: [(29 -78 -66 -80) -80]
Test Case: 740 | Input/Output: [(92 35 37 -60) -60]
Test Case: 741 | Input/Output: [(83 60 -77 5) -77]
Test Case: 742 | Input/Output: [(61 -28 18 91) -28]
Test Case: 743 | Input/Output: [(-85 81 -83 -70) -85]
Test Case: 744 | Input/Output: [(27 33 12 -85) -85]
Test Case: 745 | Input/Output: [(75 34 25 19) 19]
Test Case: 746 | Input/Output: [(100 -97 -15 -71) -97]
Test Case: 747 | Input/Output: [(77 16 87 19) 16]
Test Case: 748 | Input/Output: [(-26 -88 -74 45) -88]
Test Case: 749 | Input/Output: [(49 -55 -88 94) -88]
Test Case: 750 | Input/Output: [(14 -25 67 -46) -46]
Test Case: 751 | Input/Output: [(97 48 -32 50) -32]
Test Case: 752 | Input/Output: [(-5 -61 56 -50) -61]
Test Case: 753 | Input/Output: [(-64 -1 69 -16) -64]
Test Case: 754 | Input/Output: [(54 1 29 11) 1]
Test Case: 755 | Input/Output: [(-84 99 83 -10) -84]
Test Case: 756 | Input/Output: [(18 -65 -9 60) -65]
Test Case: 757 | Input/Output: [(16 69 76 53) 16]
Test Case: 758 | Input/Output: [(16 40 26 -97) -97]
Test Case: 759 | Input/Output: [(-41 -2 39 34) -41]
Test Case: 760 | Input/Output: [(-58 25 -39 -72) -72]
Test Case: 761 | Input/Output: [(84 87 -37 90) -37]
Test Case: 762 | Input/Output: [(-2 80 18 91) -2]
Test Case: 763 | Input/Output: [(16 -47 95 -76) -76]
Test Case: 764 | Input/Output: [(9 -51 -84 -8) -84]
Test Case: 765 | Input/Output: [(84 80 -70 61) -70]
Test Case: 766 | Input/Output: [(44 -92 -61 58) -92]
Test Case: 767 | Input/Output: [(-15 63 -81 -32) -81]
Test Case: 768 | Input/Output: [(11 -85 19 65) -85]
Test Case: 769 | Input/Output: [(-8 -44 -76 63) -76]
Test Case: 770 | Input/Output: [(-7 -59 -29 -65) -65]
Test Case: 771 | Input/Output: [(-59 45 18 -45) -59]
Test Case: 772 | Input/Output: [(10 74 -65 -78) -78]
Test Case: 773 | Input/Output: [(-10 61 53 -50) -50]
Test Case: 774 | Input/Output: [(90 -31 -72 -23) -72]
Test Case: 775 | Input/Output: [(-53 63 35 15) -53]
Test Case: 776 | Input/Output: [(24 32 -86 -1) -86]
Test Case: 777 | Input/Output: [(-99 -83 28 -49) -99]
Test Case: 778 | Input/Output: [(91 47 22 -44) -44]
Test Case: 779 | Input/Output: [(99 -30 -13 -53) -53]
Test Case: 780 | Input/Output: [(31 84 -28 95) -28]
Test Case: 781 | Input/Output: [(72 -94 -99 28) -99]
Test Case: 782 | Input/Output: [(79 96 50 -67) -67]
Test Case: 783 | Input/Output: [(-70 -88 69 26) -88]
Test Case: 784 | Input/Output: [(7 -66 93 -31) -66]
Test Case: 785 | Input/Output: [(65 -48 -55 13) -55]
Test Case: 786 | Input/Output: [(48 21 -50 45) -50]
Test Case: 787 | Input/Output: [(25 -44 -66 91) -66]
Test Case: 788 | Input/Output: [(47 -65 38 40) -65]
Test Case: 789 | Input/Output: [(6 85 43 -100) -100]
Test Case: 790 | Input/Output: [(16 36 -79 49) -79]
Test Case: 791 | Input/Output: [(-93 -11 61 -83) -93]
Test Case: 792 | Input/Output: [(7 -63 88 54) -63]
Test Case: 793 | Input/Output: [(63 -90 -31 67) -90]
Test Case: 794 | Input/Output: [(-50 40 5 32) -50]
Test Case: 795 | Input/Output: [(70 99 -78 -30) -78]
Test Case: 796 | Input/Output: [(-69 92 -93 79) -93]
Test Case: 797 | Input/Output: [(-44 -28 -89 51) -89]
Test Case: 798 | Input/Output: [(-35 58 -13 -70) -70]
Test Case: 799 | Input/Output: [(-100 -1 99 -6) -100]
Test Case: 800 | Input/Output: [(-57 -88 -47 -13) -88]
Test Case: 801 | Input/Output: [(-70 -57 -61 -18) -70]
Test Case: 802 | Input/Output: [(37 62 -61 85) -61]
Test Case: 803 | Input/Output: [(83 78 -82 61) -82]
Test Case: 804 | Input/Output: [(22 47 -18 55) -18]
Test Case: 805 | Input/Output: [(-36 46 -9 36) -36]
Test Case: 806 | Input/Output: [(-30 -82 -13 66) -82]
Test Case: 807 | Input/Output: [(77 -36 -19 -56) -56]
Test Case: 808 | Input/Output: [(-72 46 -30 11) -72]
Test Case: 809 | Input/Output: [(79 -57 -60 -7) -60]
Test Case: 810 | Input/Output: [(20 -69 85 94) -69]
Test Case: 811 | Input/Output: [(63 -62 18 -23) -62]
Test Case: 812 | Input/Output: [(-24 67 -70 33) -70]
Test Case: 813 | Input/Output: [(27 -4 -62 -48) -62]
Test Case: 814 | Input/Output: [(42 55 34 7) 7]
Test Case: 815 | Input/Output: [(33 -47 47 -43) -47]
Test Case: 816 | Input/Output: [(-43 44 -90 -91) -91]
Test Case: 817 | Input/Output: [(-51 11 74 -84) -84]
Test Case: 818 | Input/Output: [(-9 31 86 8) -9]
Test Case: 819 | Input/Output: [(-26 -89 -32 -44) -89]
Test Case: 820 | Input/Output: [(82 80 -9 47) -9]
Test Case: 821 | Input/Output: [(85 -44 78 87) -44]
Test Case: 822 | Input/Output: [(38 -82 -81 -25) -82]
Test Case: 823 | Input/Output: [(-50 -91 -94 66) -94]
Test Case: 824 | Input/Output: [(0 -49 -14 -98) -98]
Test Case: 825 | Input/Output: [(-23 36 77 23) -23]
Test Case: 826 | Input/Output: [(13 -98 45 23) -98]
Test Case: 827 | Input/Output: [(52 35 -1 15) -1]
Test Case: 828 | Input/Output: [(32 41 38 71) 32]
Test Case: 829 | Input/Output: [(28 36 24 -71) -71]
Test Case: 830 | Input/Output: [(14 -3 -62 32) -62]
Test Case: 831 | Input/Output: [(14 -37 -4 23) -37]
Test Case: 832 | Input/Output: [(77 7 -26 -10) -26]
Test Case: 833 | Input/Output: [(20 19 89 42) 19]
Test Case: 834 | Input/Output: [(-78 -92 87 -77) -92]
Test Case: 835 | Input/Output: [(-91 45 -82 13) -91]
Test Case: 836 | Input/Output: [(-98 -62 -51 69) -98]
Test Case: 837 | Input/Output: [(-61 -1 41 29) -61]
Test Case: 838 | Input/Output: [(-52 -71 -62 8) -71]
Test Case: 839 | Input/Output: [(44 4 0 44) 0]
Test Case: 840 | Input/Output: [(81 -29 -16 27) -29]
Test Case: 841 | Input/Output: [(-95 -10 27 80) -95]
Test Case: 842 | Input/Output: [(-66 -19 32 65) -66]
Test Case: 843 | Input/Output: [(49 -12 11 20) -12]
Test Case: 844 | Input/Output: [(-83 5 81 -7) -83]
Test Case: 845 | Input/Output: [(78 -58 -29 -3) -58]
Test Case: 846 | Input/Output: [(-90 76 -96 97) -96]
Test Case: 847 | Input/Output: [(16 35 -62 -41) -62]
Test Case: 848 | Input/Output: [(-27 -11 -46 5) -46]
Test Case: 849 | Input/Output: [(71 49 -61 29) -61]
Test Case: 850 | Input/Output: [(-70 93 -9 94) -70]
Test Case: 851 | Input/Output: [(13 -29 -19 0) -29]
Test Case: 852 | Input/Output: [(29 -6 -54 63) -54]
Test Case: 853 | Input/Output: [(-88 88 -65 28) -88]
Test Case: 854 | Input/Output: [(61 19 17 5) 5]
Test Case: 855 | Input/Output: [(-7 70 40 32) -7]
Test Case: 856 | Input/Output: [(-32 -31 -68 -30) -68]
Test Case: 857 | Input/Output: [(-66 52 98 -9) -66]
Test Case: 858 | Input/Output: [(74 -96 -3 85) -96]
Test Case: 859 | Input/Output: [(22 16 -94 -96) -96]
Test Case: 860 | Input/Output: [(27 32 86 -72) -72]
Test Case: 861 | Input/Output: [(-82 -35 47 47) -82]
Test Case: 862 | Input/Output: [(91 -91 28 72) -91]
Test Case: 863 | Input/Output: [(-97 60 94 -80) -97]
Test Case: 864 | Input/Output: [(100 -73 -91 99) -91]
Test Case: 865 | Input/Output: [(68 -20 -76 63) -76]
Test Case: 866 | Input/Output: [(8 -85 78 -95) -95]
Test Case: 867 | Input/Output: [(-85 -58 -20 59) -85]
Test Case: 868 | Input/Output: [(-87 46 -12 30) -87]
Test Case: 869 | Input/Output: [(-87 -6 -65 43) -87]
Test Case: 870 | Input/Output: [(-71 85 20 -67) -71]
Test Case: 871 | Input/Output: [(19 70 55 100) 19]
Test Case: 872 | Input/Output: [(-17 -59 35 -11) -59]
Test Case: 873 | Input/Output: [(-26 42 2 31) -26]
Test Case: 874 | Input/Output: [(-43 48 37 -11) -43]
Test Case: 875 | Input/Output: [(-48 -83 -33 -40) -83]
Test Case: 876 | Input/Output: [(94 -7 29 19) -7]
Test Case: 877 | Input/Output: [(73 69 80 34) 34]
Test Case: 878 | Input/Output: [(-89 -21 57 93) -89]
Test Case: 879 | Input/Output: [(-32 -73 -73 47) -73]
Test Case: 880 | Input/Output: [(-68 -83 74 55) -83]
Test Case: 881 | Input/Output: [(-79 66 -39 15) -79]
Test Case: 882 | Input/Output: [(-23 -71 -89 -79) -89]
Test Case: 883 | Input/Output: [(-56 8 -29 -73) -73]
Test Case: 884 | Input/Output: [(-92 -78 14 4) -92]
Test Case: 885 | Input/Output: [(-47 -64 -48 35) -64]
Test Case: 886 | Input/Output: [(80 -7 37 -1) -7]
Test Case: 887 | Input/Output: [(-91 99 47 -13) -91]
Test Case: 888 | Input/Output: [(95 -15 -34 -28) -34]
Test Case: 889 | Input/Output: [(-45 -86 -82 -73) -86]
Test Case: 890 | Input/Output: [(-15 38 15 47) -15]
Test Case: 891 | Input/Output: [(82 -38 -74 -16) -74]
Test Case: 892 | Input/Output: [(9 -53 -19 92) -53]
Test Case: 893 | Input/Output: [(38 -52 2 21) -52]
Test Case: 894 | Input/Output: [(54 -68 14 -59) -68]
Test Case: 895 | Input/Output: [(49 -33 -59 -11) -59]
Test Case: 896 | Input/Output: [(-83 -38 45 15) -83]
Test Case: 897 | Input/Output: [(96 62 -71 -48) -71]
Test Case: 898 | Input/Output: [(40 14 -12 -49) -49]
Test Case: 899 | Input/Output: [(-58 -87 27 -43) -87]
Test Case: 900 | Input/Output: [(30 46 -1 0) -1]
Test Case: 901 | Input/Output: [(58 -18 87 -38) -38]
Test Case: 902 | Input/Output: [(0 -26 -16 -55) -55]
Test Case: 903 | Input/Output: [(28 64 -1 89) -1]
Test Case: 904 | Input/Output: [(-22 -93 6 63) -93]
Test Case: 905 | Input/Output: [(-90 -11 -75 34) -90]
Test Case: 906 | Input/Output: [(83 -46 80 95) -46]
Test Case: 907 | Input/Output: [(-65 -13 75 78) -65]
Test Case: 908 | Input/Output: [(89 -62 -98 82) -98]
Test Case: 909 | Input/Output: [(-6 -26 13 -39) -39]
Test Case: 910 | Input/Output: [(-19 38 -13 -12) -19]
Test Case: 911 | Input/Output: [(-94 -63 -28 59) -94]
Test Case: 912 | Input/Output: [(63 -41 96 -5) -41]
Test Case: 913 | Input/Output: [(-34 -79 -93 56) -93]
Test Case: 914 | Input/Output: [(-51 -60 17 -68) -68]
Test Case: 915 | Input/Output: [(-45 -61 -32 49) -61]
Test Case: 916 | Input/Output: [(-5 75 -21 -23) -23]
Test Case: 917 | Input/Output: [(-57 -86 48 26) -86]
Test Case: 918 | Input/Output: [(21 -13 -7 -3) -13]
Test Case: 919 | Input/Output: [(88 41 91 6) 6]
Test Case: 920 | Input/Output: [(25 46 51 78) 25]
Test Case: 921 | Input/Output: [(-16 22 -21 -5) -21]
Test Case: 922 | Input/Output: [(-77 -84 -49 -37) -84]
Test Case: 923 | Input/Output: [(-58 -51 -2 18) -58]
Test Case: 924 | Input/Output: [(-50 24 63 2) -50]
Test Case: 925 | Input/Output: [(-24 -48 56 -94) -94]
Test Case: 926 | Input/Output: [(-10 1 29 -9) -10]
Test Case: 927 | Input/Output: [(64 -55 64 17) -55]
Test Case: 928 | Input/Output: [(92 -89 25 13) -89]
Test Case: 929 | Input/Output: [(-68 -25 -21 -23) -68]
Test Case: 930 | Input/Output: [(-30 24 54 -61) -61]
Test Case: 931 | Input/Output: [(7 54 -95 70) -95]
Test Case: 932 | Input/Output: [(0 -22 -36 -87) -87]
Test Case: 933 | Input/Output: [(-61 23 -23 -40) -61]
Test Case: 934 | Input/Output: [(-70 -75 67 51) -75]
Test Case: 935 | Input/Output: [(68 -14 13 70) -14]
Test Case: 936 | Input/Output: [(-76 -51 60 29) -76]
Test Case: 937 | Input/Output: [(-77 63 23 62) -77]
Test Case: 938 | Input/Output: [(-22 51 97 -24) -24]
Test Case: 939 | Input/Output: [(7 -17 -9 -91) -91]
Test Case: 940 | Input/Output: [(-21 -28 13 80) -28]
Test Case: 941 | Input/Output: [(12 9 49 -22) -22]
Test Case: 942 | Input/Output: [(56 -12 89 -39) -39]
Test Case: 943 | Input/Output: [(-54 52 -13 -78) -78]
Test Case: 944 | Input/Output: [(-7 -62 55 -92) -92]
Test Case: 945 | Input/Output: [(79 -21 64 -78) -78]
Test Case: 946 | Input/Output: [(-2 79 27 13) -2]
Test Case: 947 | Input/Output: [(79 -23 -8 -100) -100]
Test Case: 948 | Input/Output: [(-45 -95 -41 4) -95]
Test Case: 949 | Input/Output: [(57 -92 75 11) -92]
Test Case: 950 | Input/Output: [(20 77 -43 -40) -43]
Test Case: 951 | Input/Output: [(-76 56 0 79) -76]
Test Case: 952 | Input/Output: [(5 61 -24 -50) -50]
Test Case: 953 | Input/Output: [(-63 0 49 98) -63]
Test Case: 954 | Input/Output: [(-2 93 -46 26) -46]
Test Case: 955 | Input/Output: [(-55 11 -51 35) -55]
Test Case: 956 | Input/Output: [(-82 24 59 58) -82]
Test Case: 957 | Input/Output: [(-31 -81 -91 -4) -91]
Test Case: 958 | Input/Output: [(96 -87 -58 -20) -87]
Test Case: 959 | Input/Output: [(95 -76 99 -70) -76]
Test Case: 960 | Input/Output: [(-19 -48 32 -90) -90]
Test Case: 961 | Input/Output: [(-28 2 18 -61) -61]
Test Case: 962 | Input/Output: [(89 -11 30 -84) -84]
Test Case: 963 | Input/Output: [(55 -72 -3 98) -72]
Test Case: 964 | Input/Output: [(72 -94 28 -60) -94]
Test Case: 965 | Input/Output: [(83 -1 45 29) -1]
Test Case: 966 | Input/Output: [(86 54 74 -70) -70]
Test Case: 967 | Input/Output: [(31 43 97 -74) -74]
Test Case: 968 | Input/Output: [(27 71 98 -36) -36]
Test Case: 969 | Input/Output: [(-2 47 -86 -24) -86]
Test Case: 970 | Input/Output: [(-69 16 -9 98) -69]
Test Case: 971 | Input/Output: [(99 25 78 -44) -44]
Test Case: 972 | Input/Output: [(99 -3 63 -13) -13]
Test Case: 973 | Input/Output: [(53 10 -17 60) -17]
Test Case: 974 | Input/Output: [(67 70 -77 -39) -77]
Test Case: 975 | Input/Output: [(14 80 -50 57) -50]
Test Case: 976 | Input/Output: [(8 -38 92 -69) -69]
Test Case: 977 | Input/Output: [(2 -79 59 -16) -79]
Test Case: 978 | Input/Output: [(30 -16 -64 -11) -64]
Test Case: 979 | Input/Output: [(-57 -8 -16 62) -57]
Test Case: 980 | Input/Output: [(12 52 -55 2) -55]
Test Case: 981 | Input/Output: [(42 -5 10 46) -5]
Test Case: 982 | Input/Output: [(79 -82 -39 98) -82]
Test Case: 983 | Input/Output: [(-3 91 34 8) -3]
Test Case: 984 | Input/Output: [(17 51 22 -70) -70]
Test Case: 985 | Input/Output: [(-72 -65 -33 -41) -72]
Test Case: 986 | Input/Output: [(96 -31 91 81) -31]
Test Case: 987 | Input/Output: [(37 65 -81 3) -81]
Test Case: 988 | Input/Output: [(14 -15 65 -13) -15]
Test Case: 989 | Input/Output: [(-86 19 19 82) -86]
Test Case: 990 | Input/Output: [(59 77 52 -31) -31]
Test Case: 991 | Input/Output: [(-32 -68 30 43) -68]
Test Case: 992 | Input/Output: [(37 -86 29 36) -86]
Test Case: 993 | Input/Output: [(-26 26 -98 34) -98]
Test Case: 994 | Input/Output: [(-29 59 -66 -40) -66]
Test Case: 995 | Input/Output: [(16 -32 8 -23) -32]
Test Case: 996 | Input/Output: [(49 -86 -43 6) -86]
Test Case: 997 | Input/Output: [(-76 67 -93 -73) -93]
Test Case: 998 | Input/Output: [(-94 -68 41 58) -94]
Test Case: 999 | Input/Output: [(-12 -56 74 89) -56]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -57 -48 -54 -99 72 -75 -7 -109 83 32 -90 -127 -49 -81 -100 98
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[63 63 63 4] 4] [[15 15 15 50] 15] [[-86 -86 -3 -86] -86] [[-8 47 -8 -8] -8] [[56 56 38 56] 38] [[-50 -50 -66 -50] -66] [[79 8 79 79] 8] [[-79 -79 -79 95] -79] [[16 55 16 16] 16] [[28 39 39 39] 28] [(83 83 83 83) 83] [(74 74 74 74) 74] [(5 5 5 5) 5] [(-25 -25 -25 -25) -25] [(-14 -14 -14 -14) -14] [(96 16 76 49) 16] [(21 4 53 50) 4] [(52 29 77 21) 21] [(11 50 85 2) 2] [(98 22 100 16) 16] [(67 86 21 84) 21] [(91 36 59 8) 8] [(91 33 75 13) 13] [(49 41 12 21) 12] [(48 46 67 88) 46] [(47 97 97 49) 47] [(5 8 77 75) 5] [(11 5 86 80) 5] [(90 60 61 44) 44] [(33 70 86 87) 33] [(66 92 87 44) 44] [(71 78 34 19) 19] [(83 12 23 61) 12] [(97 14 94 99) 14] [(68 36 39 91) 36] [(93 79 -6 -81) -81] [(-95 28 -17 -23) -95] [(-63 -81 71 38) -81] [(-79 4 -63 -79) -79] [(54 -28 83 85) -28] [(-3 -78 -98 -62) -98] [(-39 -78 2 1) -78] [(-33 -86 -78 -59) -86] [(64 30 37 -99) -99] [(26 40 30 83) 26] [(38 45 83 96) 38] [(-70 0 -97 38) -97] [(61 -81 30 16) -81] [(-84 -61 21 -75) -84] [(87 77 -24 6) -24] [(-24 24 63 -8) -24] [(-62 42 -38 33) -62] [(50 28 10 -32) -32] [(-85 -98 86 17) -98] [(39 -21 -5 -35) -35] [(99 -67 -8 43) -67] [(96 34 -90 -75) -90] [(-23 -84 53 13) -84] [(-95 63 -45 30) -95] [(6 -1 -68 -57) -68] [(-8 19 -86 -30) -86] [(-44 84 95 -96) -96] [(-44 29 -93 -29) -93] [(92 -87 -20 -13) -87] [(17 -16 -71 -30) -71] [(83 94 48 2) 2] [(-68 -19 27 18) -68] [(-83 -62 75 -37) -83] [(-60 -10 98 61) -60] [(-17 -25 88 64) -25] [(73 54 -12 79) -12] [(60 -85 33 -33) -85] [(-60 15 51 -7) -60] [(-97 25 -81 -30) -97] [(33 41 59 -45) -45] [(-85 13 88 83) -85] [(56 75 -31 -100) -100] [(36 73 9 21) 9] [(38 93 -14 -100) -100] [(55 46 -58 81) -58] [(48 -66 26 70) -66] [(7 51 -46 77) -46] [(71 -93 42 -2) -93] [(95 92 100 97) 92] [(52 92 16 54) 16] [(-63 46 29 75) -63] [(18 -75 90 22) -75] [(1 -62 0 -52) -62] [(24 37 71 -66) -66] [(49 7 -36 -80) -80] [(91 11 91 -23) -23] [(17 5 -98 -30) -98] [(-12 59 78 85) -12] [(-32 0 -59 -12) -59] [(-18 -81 -88 -10) -88])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: 95                 
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 49                 
Correct output: 4                   | Program output: 50                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 84                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 88                 
Correct output: 47                  | Program output: 49                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 80                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 87                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 61                 
Correct output: 14                  | Program output: 99                 
Correct output: 36                  | Program output: 91                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -23                
Correct output: -81                 | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 85                 
Correct output: -98                 | Program output: -62                
Correct output: -78                 | Program output: 1                  
Correct output: -86                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 83                 
Correct output: 38                  | Program output: 96                 
Correct output: -97                 | Program output: 38                 
Correct output: -81                 | Program output: 16                 
Correct output: -84                 | Program output: -75                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -8                 
Correct output: -62                 | Program output: 33                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: 17                 
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: 43                 
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: 30                 
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -29                
Correct output: -87                 | Program output: -13                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: 18                 
Correct output: -83                 | Program output: -37                
Correct output: -60                 | Program output: 61                 
Correct output: -25                 | Program output: 64                 
Correct output: -12                 | Program output: 79                 
Correct output: -85                 | Program output: -33                
Correct output: -60                 | Program output: -7                 
Correct output: -97                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 81                 
Correct output: -66                 | Program output: 70                 
Correct output: -46                 | Program output: 77                 
Correct output: -93                 | Program output: -2                 
Correct output: 92                  | Program output: 97                 
Correct output: 16                  | Program output: 54                 
Correct output: -63                 | Program output: 75                 
Correct output: -75                 | Program output: 22                 
Correct output: -62                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: 85                 
Correct output: -59                 | Program output: -12                
Correct output: -88                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and})
Lexicase best program: (in4 boolean_shove boolean_and exec_do*range (boolean_swap exec_do*while (in3 exec_yank exec_if () (boolean_flush exec_s_when_autoconstructing (exec_do*while () boolean_empty print_integer exec_noop exec_eq) () (boolean_or boolean_not integer_shove boolean_yankdup boolean_and)))))
Lexicase best errors: [1 0 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and})
Zero cases best program: (in4 boolean_shove boolean_and exec_do*range (boolean_swap exec_do*while (in3 exec_yank exec_if () (boolean_flush exec_s_when_autoconstructing (exec_do*while () boolean_empty print_integer exec_noop exec_eq) () (boolean_or boolean_not integer_shove boolean_yankdup boolean_and)))))
Zero cases best errors: [1 0 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 2 3 13 14 2 3 5 3 5)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (5 2 3 13 14 2 3 5 3 5)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_exec_508} {:close 0, :instruction boolean_yank} {:close 2, :instruction tag_exec_643} {:close 0, :instruction in1} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot})
Best program: (integer_dup_items tag_exec_508 (boolean_yank tag_exec_643 ()) in1 boolean_not exec_pop () in4 print_integer boolean_dup_items exec_when (boolean_dup_times exec_pop (integer_empty exec_k_when_autoconstructing (exec_noop integer_pop boolean_not boolean_and integer_yank integer_rot) ())))
Errors: [1 0 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 9.945
Median total errors in population: 10
Error averages by case: (0.995 0.998 0.997 0.987 0.986 0.998 0.997 0.995 0.997 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.994
Average program size in population (points): 69.124
Average percent parens in population: 0.284
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 464707
--- Timings ---
Current time: 1559583192348 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.9 seconds, 34.2%
Fitness Testing:      1.7 seconds, 61.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -3                 
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 38                 
Correct output: -66                 | Program output: -66                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 76                 
Correct output: 4                   | Program output: 53                 
Correct output: 21                  | Program output: 77                 
Correct output: 2                   | Program output: 85                 
Correct output: 16                  | Program output: 100                
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 59                 
Correct output: 13                  | Program output: 75                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 67                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 77                 
Correct output: 5                   | Program output: 86                 
Correct output: 44                  | Program output: 61                 
Correct output: 33                  | Program output: 86                 
Correct output: 44                  | Program output: 87                 
Correct output: 19                  | Program output: 34                 
Correct output: 12                  | Program output: 23                 
Correct output: 14                  | Program output: 94                 
Correct output: 36                  | Program output: 39                 
Correct output: -81                 | Program output: -6                 
Correct output: -95                 | Program output: -17                
Correct output: -81                 | Program output: 71                 
Correct output: -79                 | Program output: -63                
Correct output: -28                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 2                  
Correct output: -86                 | Program output: -78                
Correct output: -99                 | Program output: 37                 
Correct output: 26                  | Program output: 30                 
Correct output: 38                  | Program output: 83                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: 30                 
Correct output: -84                 | Program output: 21                 
Correct output: -24                 | Program output: -24                
Correct output: -24                 | Program output: 63                 
Correct output: -62                 | Program output: -38                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 86                 
Correct output: -35                 | Program output: -5                 
Correct output: -67                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: 53                 
Correct output: -95                 | Program output: -45                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 95                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -20                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 48                 
Correct output: -68                 | Program output: 27                 
Correct output: -83                 | Program output: 75                 
Correct output: -60                 | Program output: 98                 
Correct output: -25                 | Program output: 88                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 33                 
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: -81                
Correct output: -45                 | Program output: 59                 
Correct output: -85                 | Program output: 88                 
Correct output: -100                | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -100                | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 42                 
Correct output: 92                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -63                 | Program output: 29                 
Correct output: -75                 | Program output: 90                 
Correct output: -62                 | Program output: 0                  
Correct output: -66                 | Program output: 71                 
Correct output: -80                 | Program output: -36                
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 78                 
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction print_newline} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_integer} {:close 0, :instruction print_exec} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_dup_times (in3 print_integer exec_k (boolean_invert_second_then_and) (exec_swap (in1 exec_yankdup boolean_shove integer_mod boolean_or integer_gt) (integer_mod in2 boolean_empty integer_rot exec_stackdepth integer_shove boolean_empty exec_swap (exec_do*times (print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth integer_dec exec_eq exec_yank) boolean_empty integer_inc integer_gt integer_gt integer_dec boolean_yankdup in3 exec_when (boolean_eq exec_yankdup)) boolean_dup_times) (integer_sub integer_mod exec_swap (print_integer) (exec_k_when_autoconstructing (integer_swap exec_when (integer_dup_items boolean_swap in3 boolean_swap)) (exec_stackdepth exec_pop (integer_dup print_newline) integer_gt) boolean_swap) boolean_dup_items boolean_not exec_when (print_newline boolean_yankdup boolean_rot print_integer)) print_exec (integer_mult) integer_rot exec_s (integer_mult) () ()))))
Lexicase best errors: [0 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 101
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction print_newline} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_integer} {:close 0, :instruction print_exec} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_dup_times (in3 print_integer exec_k (boolean_invert_second_then_and) (exec_swap (in1 exec_yankdup boolean_shove integer_mod boolean_or integer_gt) (integer_mod in2 boolean_empty integer_rot exec_stackdepth integer_shove boolean_empty exec_swap (exec_do*times (print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth integer_dec exec_eq exec_yank) boolean_empty integer_inc integer_gt integer_gt integer_dec boolean_yankdup in3 exec_when (boolean_eq exec_yankdup)) boolean_dup_times) (integer_sub integer_mod exec_swap (print_integer) (exec_k_when_autoconstructing (integer_swap exec_when (integer_dup_items boolean_swap in3 boolean_swap)) (exec_stackdepth exec_pop (integer_dup print_newline) integer_gt) boolean_swap) boolean_dup_items boolean_not exec_when (print_newline boolean_yankdup boolean_rot print_integer)) print_exec (integer_mult) integer_rot exec_s (integer_mult) () ()))))
Zero cases best errors: [0 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 101
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (117 117 197 197 197 406 117 150 117 116)
Population mean number of elite cases: 1.73
Count of perfect (error zero) individuals by case: (117 117 197 197 197 406 117 150 117 116)
Population mean number of perfect (error zero) cases: 1.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 3, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction -98} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 2, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 2, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction 40} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gte})
Best program: (integer_rot boolean_rot in3 boolean_rot print_integer integer_lt boolean_stackdepth exec_shove (integer_inc) exec_do*while (exec_s (-98 exec_y (integer_dec) integer_shove exec_dup (boolean_or boolean_dup_times in4 integer_inc boolean_and) boolean_not exec_when (exec_y ()) integer_eq integer_dec exec_while () print_newline integer_fromboolean) (integer_min exec_if (in1) (boolean_rot)) (boolean_not) exec_yank boolean_and integer_rot in4 boolean_shove print_boolean integer_dup_items print_newline boolean_empty 40 integer_gt) boolean_rot exec_when (boolean_empty exec_eq integer_inc) integer_rot boolean_pop boolean_frominteger integer_gte)
Errors: [0 0 1 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 54
Size: 68
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 8.269
Median total errors in population: 9
Error averages by case: (0.883 0.883 0.803 0.803 0.803 0.594 0.883 0.85 0.883 0.884)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.965
Average program size in population (points): 48.422
Average percent parens in population: 0.269
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.527
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.427
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 832404
--- Timings ---
Current time: 1559583194993 milliseconds
Total Time:           5.0 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         2.3 seconds, 47.2%
Fitness Testing:      2.1 seconds, 42.4%
Report:               0.4 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 96                 
Correct output: 4                   | Program output: 21                 
Correct output: 21                  | Program output: 52                 
Correct output: 2                   | Program output: 11                 
Correct output: 16                  | Program output: 98                 
Correct output: 21                  | Program output: 67                 
Correct output: 8                   | Program output: 91                 
Correct output: 13                  | Program output: 91                 
Correct output: 12                  | Program output: 49                 
Correct output: 46                  | Program output: 48                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 11                 
Correct output: 44                  | Program output: 90                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 66                 
Correct output: 19                  | Program output: 71                 
Correct output: 12                  | Program output: 83                 
Correct output: 14                  | Program output: 97                 
Correct output: 36                  | Program output: 68                 
Correct output: -81                 | Program output: 93                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 54                 
Correct output: -98                 | Program output: -3                 
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -33                
Correct output: -99                 | Program output: 64                 
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: 61                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 87                 
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: 50                 
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: 39                 
Correct output: -67                 | Program output: 99                 
Correct output: -90                 | Program output: 96                 
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: 6                  
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: 92                 
Correct output: -71                 | Program output: 17                 
Correct output: 2                   | Program output: 83                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 73                 
Correct output: -85                 | Program output: 60                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 33                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 56                 
Correct output: 9                   | Program output: 36                 
Correct output: -100                | Program output: 38                 
Correct output: -58                 | Program output: 55                 
Correct output: -66                 | Program output: 48                 
Correct output: -46                 | Program output: 7                  
Correct output: -93                 | Program output: 71                 
Correct output: 92                  | Program output: 95                 
Correct output: 16                  | Program output: 52                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 18                 
Correct output: -62                 | Program output: 1                  
Correct output: -66                 | Program output: 24                 
Correct output: -80                 | Program output: 49                 
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: 17                 
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 3, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction tag_boolean_922} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_exec_999} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_integer} {:close 0, :instruction print_exec} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*range (exec_pop (integer_inc boolean_invert_second_then_and integer_gt boolean_invert_second_then_and in4) exec_do*count (integer_add integer_shove in1) integer_add exec_s (exec_if (boolean_eq) () boolean_yank integer_empty boolean_rot integer_gte) (integer_gte boolean_invert_second_then_and) (boolean_frominteger integer_yank integer_mod) exec_eq exec_stackdepth boolean_swap boolean_dup_items) integer_fromboolean in2 boolean_eq integer_shove boolean_xor boolean_dup_times exec_do*times (in1) boolean_and boolean_eq boolean_dup_items in1 print_integer integer_mod exec_flush integer_yankdup integer_yankdup in4 exec_do*times (exec_y_when_autoconstructing (exec_do*count (integer_sub))) integer_max boolean_empty boolean_and tag_boolean_922 boolean_dup_times exec_do*count (exec_if () () boolean_not tag_exec_999 () boolean_or boolean_yankdup exec_rot (integer_gt) (boolean_swap) (boolean_dup_items boolean_not exec_when (print_newline boolean_not boolean_rot print_integer)) print_exec (integer_mult) integer_rot exec_s (integer_mult) () ()))
Lexicase best errors: [1 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 101
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 3, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction tag_boolean_922} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_exec_999} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_integer} {:close 0, :instruction print_exec} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*range (exec_pop (integer_inc boolean_invert_second_then_and integer_gt boolean_invert_second_then_and in4) exec_do*count (integer_add integer_shove in1) integer_add exec_s (exec_if (boolean_eq) () boolean_yank integer_empty boolean_rot integer_gte) (integer_gte boolean_invert_second_then_and) (boolean_frominteger integer_yank integer_mod) exec_eq exec_stackdepth boolean_swap boolean_dup_items) integer_fromboolean in2 boolean_eq integer_shove boolean_xor boolean_dup_times exec_do*times (in1) boolean_and boolean_eq boolean_dup_items in1 print_integer integer_mod exec_flush integer_yankdup integer_yankdup in4 exec_do*times (exec_y_when_autoconstructing (exec_do*count (integer_sub))) integer_max boolean_empty boolean_and tag_boolean_922 boolean_dup_times exec_do*count (exec_if () () boolean_not tag_exec_999 () boolean_or boolean_yankdup exec_rot (integer_gt) (boolean_swap) (boolean_dup_items boolean_not exec_when (print_newline boolean_not boolean_rot print_integer)) print_exec (integer_mult) integer_rot exec_s (integer_mult) () ()))
Zero cases best errors: [1 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 101
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 87 86 789 92 452 85 252 882 757)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (233 87 86 789 92 452 85 252 882 757)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_738} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 3, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction tag_boolean_897})
Best program: (exec_do*range (exec_pop (integer_inc boolean_invert_second_then_and integer_gt boolean_invert_second_then_and in4) integer_inc integer_add boolean_or in1) integer_add exec_s (exec_if (boolean_eq) () boolean_yank integer_empty boolean_rot integer_gte) (integer_gte boolean_invert_second_then_and) (boolean_frominteger tag_boolean_738 integer_mod) exec_eq exec_stackdepth boolean_swap boolean_dup_items integer_fromboolean in2 boolean_eq integer_shove boolean_xor boolean_dup_times exec_do*times (in1) boolean_and boolean_eq boolean_dup_items in1 print_integer integer_mod exec_flush integer_yankdup integer_yankdup integer_dup_times exec_do*times (exec_y_when_autoconstructing (exec_do*count (integer_sub))) integer_max boolean_empty boolean_and tag_boolean_897)
Errors: [1 0 0 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 54
Size: 66
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.285
Median total errors in population: 6
Error averages by case: (0.767 0.913 0.914 0.211 0.908 0.548 0.915 0.748 0.118 0.243)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.963
Average program size in population (points): 60.672
Average percent parens in population: 0.252
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0045
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1353548
--- Timings ---
Current time: 1559583197944 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.3 seconds, 52.1%
Fitness Testing:      2.7 seconds, 32.4%
Report:               1.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: 47                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 55                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 50                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 86                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 70                 
Correct output: 44                  | Program output: 92                 
Correct output: 19                  | Program output: 78                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: 79                 
Correct output: -95                 | Program output: 28                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 40                 
Correct output: 38                  | Program output: 45                 
Correct output: -97                 | Program output: 0                  
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -61                
Correct output: -24                 | Program output: 77                 
Correct output: -24                 | Program output: 24                 
Correct output: -62                 | Program output: 42                 
Correct output: -32                 | Program output: 28                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: 63                 
Correct output: -68                 | Program output: -1                 
Correct output: -86                 | Program output: 19                 
Correct output: -96                 | Program output: 84                 
Correct output: -93                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -16                
Correct output: 2                   | Program output: 94                 
Correct output: -68                 | Program output: -19                
Correct output: -83                 | Program output: -62                
Correct output: -60                 | Program output: -10                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: 15                 
Correct output: -97                 | Program output: 25                 
Correct output: -45                 | Program output: 41                 
Correct output: -85                 | Program output: 13                 
Correct output: -100                | Program output: 75                 
Correct output: 9                   | Program output: 73                 
Correct output: -100                | Program output: 93                 
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 51                 
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 92                 
Correct output: -63                 | Program output: 46                 
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 37                 
Correct output: -80                 | Program output: 7                  
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: 5                  
Correct output: -12                 | Program output: 59                 
Correct output: -59                 | Program output: 0                  
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_yank exec_dup (exec_yank boolean_dup boolean_yank) in1 exec_do*times (boolean_shove integer_dup_times exec_eq boolean_dup) boolean_or boolean_eq integer_lt integer_gte integer_max integer_gte boolean_shove boolean_pop boolean_eq integer_mod integer_yankdup in2 print_integer exec_do*times () exec_y () exec_yank integer_eq boolean_not)
Lexicase best errors: [0 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.147
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_yank exec_dup (exec_yank boolean_dup boolean_yank) in1 exec_do*times (boolean_shove integer_dup_times exec_eq boolean_dup) boolean_or boolean_eq integer_lt integer_gte integer_max integer_gte boolean_shove boolean_pop boolean_eq integer_mod integer_yankdup in2 print_integer exec_do*times () exec_y () exec_yank integer_eq boolean_not)
Zero cases best errors: [0 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.147
--- Lexicase Population Statistics ---
Count of elite individuals by case: (285 284 116 116 284 651 365 283 114 284)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (285 284 116 116 284 651 365 283 114 284)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_378} {:close 0, :instruction exec_do*times} {:close 1, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times})
Best program: (exec_do*count (exec_swap (integer_yankdup boolean_swap exec_dup (integer_yankdup integer_lte boolean_and boolean_yank) boolean_swap integer_dup_times print_integer boolean_frominteger) (boolean_not exec_do*range () exec_s_when_autoconstructing (integer_lt integer_fromboolean exec_yankdup boolean_flush exec_noop) (boolean_shove exec_when (in2) exec_k () (exec_k (in3 integer_gt exec_rot (exec_y_when_autoconstructing (integer_sub)) (print_boolean exec_dup_items boolean_eq exec_k_when_autoconstructing (integer_lt) (boolean_dup_items boolean_frominteger in3 boolean_swap integer_rot boolean_swap boolean_or boolean_rot boolean_stackdepth integer_eq in1 exec_flush boolean_yankdup tagged_378 exec_do*times (in3) boolean_stackdepth in3 integer_mult exec_if (exec_when (integer_dup_times integer_lte integer_yank integer_rot exec_yank integer_gt integer_fromboolean integer_min print_exec (integer_lte exec_dup_times (in3 exec_s (print_integer) (integer_div boolean_yank) (integer_dup_items in3 exec_do*times ()))))) ())) ()) ())) ())))
Errors: [0 0 1 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 76
Size: 106
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.218
Median total errors in population: 8
Error averages by case: (0.715 0.716 0.884 0.884 0.716 0.349 0.635 0.717 0.886 0.716)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.639
Average program size in population (points): 54.076
Average percent parens in population: 0.280
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.50375
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1809436
--- Timings ---
Current time: 1559583200272 milliseconds
Total Time:          10.7 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.9 seconds, 54.8%
Fitness Testing:      3.2 seconds, 29.4%
Report:               1.6 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: 47                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 55                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 50                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 86                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 70                 
Correct output: 44                  | Program output: 92                 
Correct output: 19                  | Program output: 78                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: 79                 
Correct output: -95                 | Program output: 28                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 40                 
Correct output: 38                  | Program output: 45                 
Correct output: -97                 | Program output: 0                  
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -61                
Correct output: -24                 | Program output: 77                 
Correct output: -24                 | Program output: 24                 
Correct output: -62                 | Program output: 42                 
Correct output: -32                 | Program output: 28                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: 63                 
Correct output: -68                 | Program output: -1                 
Correct output: -86                 | Program output: 19                 
Correct output: -96                 | Program output: 84                 
Correct output: -93                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -16                
Correct output: 2                   | Program output: 94                 
Correct output: -68                 | Program output: -19                
Correct output: -83                 | Program output: -62                
Correct output: -60                 | Program output: -10                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: 15                 
Correct output: -97                 | Program output: 25                 
Correct output: -45                 | Program output: 41                 
Correct output: -85                 | Program output: 13                 
Correct output: -100                | Program output: 75                 
Correct output: 9                   | Program output: 73                 
Correct output: -100                | Program output: 93                 
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 51                 
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 92                 
Correct output: -63                 | Program output: 46                 
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 37                 
Correct output: -80                 | Program output: 7                  
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: 5                  
Correct output: -12                 | Program output: 59                 
Correct output: -59                 | Program output: 0                  
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_240} {:close 0, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 3, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap})
Lexicase best program: (integer_max boolean_swap exec_rot (tagged_240 exec_dup (print_integer) exec_yank exec_do*times ()) () (in2) boolean_invert_first_then_and exec_s_when_autoconstructing (boolean_dup_items integer_mult exec_swap () ()) () ())
Lexicase best errors: [1 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.440
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_240} {:close 0, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 3, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap})
Zero cases best program: (integer_max boolean_swap exec_rot (tagged_240 exec_dup (print_integer) exec_yank exec_do*times ()) () (in2) boolean_invert_first_then_and exec_s_when_autoconstructing (boolean_dup_items integer_mult exec_swap () ()) () ())
Zero cases best errors: [1 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.440
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 101 1000 624 101 462 310 870 95 466)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (0 101 0 624 101 462 310 870 95 466)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean})
Best program: (integer_pop boolean_invert_first_then_and integer_div boolean_and exec_noop boolean_invert_second_then_and exec_s_when_autoconstructing () (exec_rot (exec_k_when_autoconstructing () (exec_yank boolean_eq integer_pop exec_noop integer_eq) integer_flush in2 print_integer exec_shove (integer_div integer_gte boolean_shove exec_swap (exec_while (print_boolean exec_eq exec_dup_items boolean_not) exec_yank integer_dup print_boolean boolean_rot integer_min in3 integer_max) (integer_lt integer_empty boolean_eq integer_fromboolean))) () ()) ())
Errors: [1 1 1 0 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 38
Size: 51
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.971
Median total errors in population: 6
Error averages by case: (1.0 0.899 1.0 0.376 0.899 0.538 0.69 0.13 0.905 0.534)
Error minima by case: (1 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 37.281
Average program size in population (points): 51.894
Average percent parens in population: 0.297
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.086875
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.005
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2342578
--- Timings ---
Current time: 1559583202876 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.6 seconds, 57.3%
Fitness Testing:      3.7 seconds, 27.9%
Report:               1.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 96                 
Correct output: 4                   | Program output: 21                 
Correct output: 21                  | Program output: 52                 
Correct output: 2                   | Program output: 11                 
Correct output: 16                  | Program output: 98                 
Correct output: 21                  | Program output: 67                 
Correct output: 8                   | Program output: 91                 
Correct output: 13                  | Program output: 91                 
Correct output: 12                  | Program output: 49                 
Correct output: 46                  | Program output: 48                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 11                 
Correct output: 44                  | Program output: 90                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 66                 
Correct output: 19                  | Program output: 71                 
Correct output: 12                  | Program output: 83                 
Correct output: 14                  | Program output: 97                 
Correct output: 36                  | Program output: 68                 
Correct output: -81                 | Program output: 93                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 54                 
Correct output: -98                 | Program output: -3                 
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -33                
Correct output: -99                 | Program output: 64                 
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: 61                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 87                 
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: 50                 
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: 39                 
Correct output: -67                 | Program output: 99                 
Correct output: -90                 | Program output: 96                 
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: 6                  
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: 92                 
Correct output: -71                 | Program output: 17                 
Correct output: 2                   | Program output: 83                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 73                 
Correct output: -85                 | Program output: 60                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 33                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 56                 
Correct output: 9                   | Program output: 36                 
Correct output: -100                | Program output: 38                 
Correct output: -58                 | Program output: 55                 
Correct output: -66                 | Program output: 48                 
Correct output: -46                 | Program output: 7                  
Correct output: -93                 | Program output: 71                 
Correct output: 92                  | Program output: 95                 
Correct output: 16                  | Program output: 52                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 18                 
Correct output: -62                 | Program output: 1                  
Correct output: -66                 | Program output: 24                 
Correct output: -80                 | Program output: 49                 
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: 17                 
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 3, :instruction integer_sub} {:close 0, :instruction integer_max})
Lexicase best program: (exec_do*range (exec_pop (exec_pop () integer_gte) integer_gte boolean_invert_second_then_and) boolean_frominteger integer_yank integer_mod exec_eq exec_stackdepth boolean_swap boolean_dup_items integer_fromboolean in2 integer_rot integer_shove boolean_xor boolean_dup_times exec_do*times (in1) boolean_and boolean_eq boolean_dup_items in1 print_integer integer_mod exec_flush integer_yankdup exec_stackdepth integer_dup_times exec_do*times (exec_y_when_autoconstructing (exec_do*count (integer_sub))) integer_max)
Lexicase best errors: [1 1 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 3, :instruction integer_sub} {:close 0, :instruction integer_max})
Zero cases best program: (exec_do*range (exec_pop (exec_pop () integer_gte) integer_gte boolean_invert_second_then_and) boolean_frominteger integer_yank integer_mod exec_eq exec_stackdepth boolean_swap boolean_dup_items integer_fromboolean in2 integer_rot integer_shove boolean_xor boolean_dup_times exec_do*times (in1) boolean_and boolean_eq boolean_dup_items in1 print_integer integer_mod exec_flush integer_yankdup exec_stackdepth integer_dup_times exec_do*times (exec_y_when_autoconstructing (exec_do*count (integer_sub))) integer_max)
Zero cases best errors: [1 1 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 838 376 846 362 369 1 1 2)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (1 1 838 376 846 362 369 1 1 2)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Best program: (exec_do*range (exec_pop (integer_inc boolean_invert_second_then_and integer_gt boolean_invert_second_then_and in4) exec_do*count (integer_add integer_shove in1) integer_add exec_s (exec_if (integer_mod) () boolean_yank integer_empty boolean_rot integer_gte) (integer_gte boolean_invert_second_then_and boolean_frominteger integer_yank integer_mod) (exec_eq exec_stackdepth boolean_swap boolean_dup_items) integer_fromboolean) in2 boolean_eq exec_rot (in1) (boolean_and) (boolean_eq) boolean_dup_items in1 print_integer)
Errors: [1 1 0 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 50
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 7.203
Median total errors in population: 8
Error averages by case: (0.999 0.999 0.162 0.624 0.154 0.638 0.631 0.999 0.999 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.538
Average program size in population (points): 49.622
Average percent parens in population: 0.297
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.6090625
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2760893
--- Timings ---
Current time: 1559583205213 milliseconds
Total Time:          15.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.3 seconds, 59.1%
Fitness Testing:      4.1 seconds, 26.4%
Report:               2.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: 95                 
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 49                 
Correct output: 4                   | Program output: 50                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 84                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 88                 
Correct output: 47                  | Program output: 49                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 80                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 87                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 61                 
Correct output: 14                  | Program output: 99                 
Correct output: 36                  | Program output: 91                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -23                
Correct output: -81                 | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 85                 
Correct output: -98                 | Program output: -62                
Correct output: -78                 | Program output: 1                  
Correct output: -86                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 83                 
Correct output: 38                  | Program output: 96                 
Correct output: -97                 | Program output: 38                 
Correct output: -81                 | Program output: 16                 
Correct output: -84                 | Program output: -75                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -8                 
Correct output: -62                 | Program output: 33                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: 17                 
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: 43                 
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: 30                 
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -29                
Correct output: -87                 | Program output: -13                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: 18                 
Correct output: -83                 | Program output: -37                
Correct output: -60                 | Program output: 61                 
Correct output: -25                 | Program output: 64                 
Correct output: -12                 | Program output: 79                 
Correct output: -85                 | Program output: -33                
Correct output: -60                 | Program output: -7                 
Correct output: -97                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 81                 
Correct output: -66                 | Program output: 70                 
Correct output: -46                 | Program output: 77                 
Correct output: -93                 | Program output: -2                 
Correct output: 92                  | Program output: 97                 
Correct output: 16                  | Program output: 54                 
Correct output: -63                 | Program output: 75                 
Correct output: -75                 | Program output: 22                 
Correct output: -62                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: 85                 
Correct output: -59                 | Program output: -12                
Correct output: -88                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_do*range (exec_pop () integer_inc boolean_invert_second_then_and integer_gt boolean_invert_second_then_and in4) integer_rot exec_stackdepth integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ())
Lexicase best errors: [0 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_do*range (exec_pop () integer_inc boolean_invert_second_then_and integer_gt boolean_invert_second_then_and in4) integer_rot exec_stackdepth integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ())
Zero cases best errors: [0 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 181 366 8 371 821 567 255 1000 6)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (254 181 366 8 371 821 567 255 0 6)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_yank integer_gte integer_inc boolean_invert_second_then_and integer_gt boolean_invert_second_then_and in4 boolean_or integer_add integer_shove boolean_empty integer_rot exec_stackdepth integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ())
Errors: [0 1 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 36
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 7.171
Median total errors in population: 7
Error averages by case: (0.746 0.819 0.634 0.992 0.629 0.179 0.433 0.745 1.0 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 36.461
Average program size in population (points): 48.466
Average percent parens in population: 0.249
Minimum age in population: 7.0
Maximum age in population: 10.9375
Average age in population: 9.409875
Median age in population: 9.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3269634
--- Timings ---
Current time: 1559583207452 milliseconds
Total Time:          17.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.8 seconds, 60.3%
Fitness Testing:      4.6 seconds, 25.4%
Report:               2.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: 47                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 55                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 50                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 86                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 70                 
Correct output: 44                  | Program output: 92                 
Correct output: 19                  | Program output: 78                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: 79                 
Correct output: -95                 | Program output: 28                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 40                 
Correct output: 38                  | Program output: 45                 
Correct output: -97                 | Program output: 0                  
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -61                
Correct output: -24                 | Program output: 77                 
Correct output: -24                 | Program output: 24                 
Correct output: -62                 | Program output: 42                 
Correct output: -32                 | Program output: 28                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: 63                 
Correct output: -68                 | Program output: -1                 
Correct output: -86                 | Program output: 19                 
Correct output: -96                 | Program output: 84                 
Correct output: -93                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -16                
Correct output: 2                   | Program output: 94                 
Correct output: -68                 | Program output: -19                
Correct output: -83                 | Program output: -62                
Correct output: -60                 | Program output: -10                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: 15                 
Correct output: -97                 | Program output: 25                 
Correct output: -45                 | Program output: 41                 
Correct output: -85                 | Program output: 13                 
Correct output: -100                | Program output: 75                 
Correct output: 9                   | Program output: 73                 
Correct output: -100                | Program output: 93                 
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 51                 
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 92                 
Correct output: -63                 | Program output: 46                 
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 37                 
Correct output: -80                 | Program output: 7                  
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: 5                  
Correct output: -12                 | Program output: 59                 
Correct output: -59                 | Program output: 0                  
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_do*count (in2 integer_yankdup boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ()))
Lexicase best errors: [1 0 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_do*count (in2 integer_yankdup boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ()))
Zero cases best errors: [1 0 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (399 1 113 1 1 751 247 753 399 113)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (399 1 113 1 1 751 247 753 399 113)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_do*count (in2 integer_yankdup boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ()))
Errors: [1 0 1 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 35
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 7.222
Median total errors in population: 6
Error averages by case: (0.601 0.999 0.887 0.999 0.999 0.249 0.753 0.247 0.601 0.887)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.094
Average program size in population (points): 43.484
Average percent parens in population: 0.238
Minimum age in population: 8.0
Maximum age in population: 12.90625
Average age in population: 11.1760625
Median age in population: 11.21875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.489
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3636155
--- Timings ---
Current time: 1559583209750 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.5 seconds, 61.9%
Fitness Testing:      4.9 seconds, 24.1%
Report:               2.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -3                 
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 38                 
Correct output: -66                 | Program output: -66                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 76                 
Correct output: 4                   | Program output: 53                 
Correct output: 21                  | Program output: 77                 
Correct output: 2                   | Program output: 85                 
Correct output: 16                  | Program output: 100                
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 59                 
Correct output: 13                  | Program output: 75                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 67                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 77                 
Correct output: 5                   | Program output: 86                 
Correct output: 44                  | Program output: 61                 
Correct output: 33                  | Program output: 86                 
Correct output: 44                  | Program output: 87                 
Correct output: 19                  | Program output: 34                 
Correct output: 12                  | Program output: 23                 
Correct output: 14                  | Program output: 94                 
Correct output: 36                  | Program output: 39                 
Correct output: -81                 | Program output: -6                 
Correct output: -95                 | Program output: -17                
Correct output: -81                 | Program output: 71                 
Correct output: -79                 | Program output: -63                
Correct output: -28                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 2                  
Correct output: -86                 | Program output: -78                
Correct output: -99                 | Program output: 37                 
Correct output: 26                  | Program output: 30                 
Correct output: 38                  | Program output: 83                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: 30                 
Correct output: -84                 | Program output: 21                 
Correct output: -24                 | Program output: -24                
Correct output: -24                 | Program output: 63                 
Correct output: -62                 | Program output: -38                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 86                 
Correct output: -35                 | Program output: -5                 
Correct output: -67                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: 53                 
Correct output: -95                 | Program output: -45                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 95                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -20                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 48                 
Correct output: -68                 | Program output: 27                 
Correct output: -83                 | Program output: 75                 
Correct output: -60                 | Program output: 98                 
Correct output: -25                 | Program output: 88                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 33                 
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: -81                
Correct output: -45                 | Program output: 59                 
Correct output: -85                 | Program output: 88                 
Correct output: -100                | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -100                | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 42                 
Correct output: 92                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -63                 | Program output: 29                 
Correct output: -75                 | Program output: 90                 
Correct output: -62                 | Program output: 0                  
Correct output: -66                 | Program output: 71                 
Correct output: -80                 | Program output: -36                
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 78                 
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_do*count (exec_swap (integer_yankdup boolean_swap exec_dup (integer_yankdup integer_lte boolean_and exec_noop) boolean_swap integer_dup_times print_integer boolean_frominteger) (boolean_not exec_do*range () exec_s_when_autoconstructing (integer_lt integer_fromboolean exec_yankdup boolean_flush exec_noop) (boolean_shove exec_when (boolean_invert_second_then_and integer_gte boolean_shove exec_swap (exec_while (print_boolean exec_eq exec_dup_items boolean_and) exec_yank integer_dup print_boolean boolean_rot integer_min in3 exec_do*range (integer_shove integer_stackdepth boolean_shove boolean_stackdepth)) ())) ())))
Lexicase best errors: [1 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_do*count (exec_swap (integer_yankdup boolean_swap exec_dup (integer_yankdup integer_lte boolean_and exec_noop) boolean_swap integer_dup_times print_integer boolean_frominteger) (boolean_not exec_do*range () exec_s_when_autoconstructing (integer_lt integer_fromboolean exec_yankdup boolean_flush exec_noop) (boolean_shove exec_when (boolean_invert_second_then_and integer_gte boolean_shove exec_swap (exec_while (print_boolean exec_eq exec_dup_items boolean_and) exec_yank integer_dup print_boolean boolean_rot integer_min in3 exec_do*range (integer_shove integer_stackdepth boolean_shove boolean_stackdepth)) ())) ())))
Zero cases best errors: [1 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (338 107 224 832 224 161 339 492 158 164)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (338 107 224 832 224 161 339 492 158 164)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction -35} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction 61} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Best program: (integer_yank exec_if (integer_rot integer_div exec_y_when_autoconstructing () in1 exec_empty exec_pop () -35) (in3) exec_s (exec_if () (integer_fromboolean print_boolean) integer_max 61 integer_flush integer_empty in1 boolean_or) (print_integer integer_dup_items) (in3) boolean_invert_first_then_and exec_empty integer_pop integer_yank exec_stackdepth exec_s () () ())
Errors: [1 1 1 0 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 42
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 6.961
Median total errors in population: 7
Error averages by case: (0.662 0.893 0.776 0.168 0.776 0.839 0.661 0.508 0.842 0.836)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.381
Average program size in population (points): 41.724
Average percent parens in population: 0.248
Minimum age in population: 10.28125
Maximum age in population: 14.3203125
Average age in population: 12.5294140625
Median age in population: 12.5703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 250
Genome diversity (% unique genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 250
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3989410
--- Timings ---
Current time: 1559583212114 milliseconds
Total Time:          22.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.3 seconds, 63.3%
Fitness Testing:      5.2 seconds, 23.0%
Report:               3.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output:                    
Correct output: 4                   | Program output: 21                 
Correct output: 21                  | Program output: 52                 
Correct output: 2                   | Program output: 11                 
Correct output: 16                  | Program output:                    
Correct output: 21                  | Program output: 67                 
Correct output: 8                   | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 12                  | Program output: 49                 
Correct output: 46                  | Program output: 48                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 11                 
Correct output: 44                  | Program output:                    
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 66                 
Correct output: 19                  | Program output: 71                 
Correct output: 12                  | Program output: 83                 
Correct output: 14                  | Program output:                    
Correct output: 36                  | Program output: 68                 
Correct output: -81                 | Program output:                    
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 54                 
Correct output: -98                 | Program output: -3                 
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -33                
Correct output: -99                 | Program output: 64                 
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: 61                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output:                    
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: 50                 
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: 39                 
Correct output: -67                 | Program output:                    
Correct output: -90                 | Program output:                    
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: 6                  
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output:                    
Correct output: -71                 | Program output: 17                 
Correct output: 2                   | Program output: 83                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 73                 
Correct output: -85                 | Program output: 60                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 33                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 56                 
Correct output: 9                   | Program output: 36                 
Correct output: -100                | Program output: 38                 
Correct output: -58                 | Program output: 55                 
Correct output: -66                 | Program output: 48                 
Correct output: -46                 | Program output: 7                  
Correct output: -93                 | Program output: 71                 
Correct output: 92                  | Program output:                    
Correct output: 16                  | Program output: 52                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 18                 
Correct output: -62                 | Program output: 1                  
Correct output: -66                 | Program output: 24                 
Correct output: -80                 | Program output: 49                 
Correct output: -23                 | Program output:                    
Correct output: -98                 | Program output: 17                 
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction tag_boolean_922} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction tag_exec_999} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*range (exec_pop (integer_inc boolean_invert_second_then_and integer_gt boolean_invert_second_then_and in4) exec_do*count (integer_add integer_shove boolean_and) integer_add exec_s (exec_if (boolean_eq) () boolean_yank integer_empty boolean_rot integer_gte integer_gte boolean_invert_second_then_and) (boolean_frominteger integer_yank integer_mod) (exec_eq exec_stackdepth boolean_swap boolean_dup_items)) integer_fromboolean in2 boolean_eq integer_shove boolean_xor boolean_dup_times exec_do*times (in1) boolean_and integer_shove boolean_dup_items in1 print_integer integer_mod exec_flush integer_yankdup integer_yankdup boolean_dup_items exec_do*times (exec_y_when_autoconstructing (exec_do*count (integer_sub)) integer_max exec_rot () (boolean_and) (tag_boolean_922 boolean_dup_times exec_do*count (exec_if () () boolean_not tag_exec_999 (boolean_or boolean_yankdup exec_rot (exec_pop (integer_lte integer_dec boolean_swap print_newline integer_max exec_pop (exec_k_when_autoconstructing () (exec_empty boolean_pop exec_when () integer_dec boolean_invert_first_then_and boolean_yankdup boolean_xor exec_empty exec_eq exec_dup (exec_dup_items exec_dup_times (in1) boolean_frominteger integer_yankdup integer_gt boolean_dup_times integer_mult integer_rot exec_s (integer_mult) () ()))))) () ())))))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 124
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction tag_boolean_922} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction tag_exec_999} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*range (exec_pop (integer_inc boolean_invert_second_then_and integer_gt boolean_invert_second_then_and in4) exec_do*count (integer_add integer_shove boolean_and) integer_add exec_s (exec_if (boolean_eq) () boolean_yank integer_empty boolean_rot integer_gte integer_gte boolean_invert_second_then_and) (boolean_frominteger integer_yank integer_mod) (exec_eq exec_stackdepth boolean_swap boolean_dup_items)) integer_fromboolean in2 boolean_eq integer_shove boolean_xor boolean_dup_times exec_do*times (in1) boolean_and integer_shove boolean_dup_items in1 print_integer integer_mod exec_flush integer_yankdup integer_yankdup boolean_dup_items exec_do*times (exec_y_when_autoconstructing (exec_do*count (integer_sub)) integer_max exec_rot () (boolean_and) (tag_boolean_922 boolean_dup_times exec_do*count (exec_if () () boolean_not tag_exec_999 (boolean_or boolean_yankdup exec_rot (exec_pop (integer_lte integer_dec boolean_swap print_newline integer_max exec_pop (exec_k_when_autoconstructing () (exec_empty boolean_pop exec_when () integer_dec boolean_invert_first_then_and boolean_yankdup boolean_xor exec_empty exec_eq exec_dup (exec_dup_items exec_dup_times (in1) boolean_frominteger integer_yankdup integer_gt boolean_dup_times integer_mult integer_rot exec_s (integer_mult) () ()))))) () ())))))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 124
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 298 247 269 533 545 591 105 103 191)
Population mean number of elite cases: 2.98
Count of perfect (error zero) individuals by case: (103 298 247 269 533 545 591 105 103 191)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_max} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 61} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_items} {:close 1, :instruction tag_integer_35} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Best program: (integer_max integer_yank exec_if () (integer_rot integer_div exec_y_when_autoconstructing () in1 exec_empty exec_pop () exec_dup_times (in3) exec_s (exec_if () (integer_fromboolean print_boolean) integer_dup_times 61 integer_flush integer_empty in1 boolean_or) (print_integer integer_dup_items) () tag_integer_35) boolean_invert_first_then_and integer_yank integer_pop integer_yank exec_stackdepth exec_s () () ())
Errors: [0 0 1 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 30
Size: 44
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 7.015
Median total errors in population: 7
Error averages by case: (0.897 0.702 0.753 0.731 0.467 0.455 0.409 0.895 0.897 0.809)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.93
Average program size in population (points): 44.977
Average percent parens in population: 0.245
Minimum age in population: 11.30078125
Maximum age in population: 15.92578125
Average age in population: 13.986484375
Median age in population: 14.103515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4353318
--- Timings ---
Current time: 1559583214657 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.1 seconds, 64.5%
Fitness Testing:      5.5 seconds, 22.0%
Report:               3.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -3                 
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 38                 
Correct output: -66                 | Program output: -66                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 76                 
Correct output: 4                   | Program output: 53                 
Correct output: 21                  | Program output: 77                 
Correct output: 2                   | Program output: 85                 
Correct output: 16                  | Program output: 100                
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 59                 
Correct output: 13                  | Program output: 75                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 67                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 77                 
Correct output: 5                   | Program output: 86                 
Correct output: 44                  | Program output: 61                 
Correct output: 33                  | Program output: 86                 
Correct output: 44                  | Program output: 87                 
Correct output: 19                  | Program output: 34                 
Correct output: 12                  | Program output: 23                 
Correct output: 14                  | Program output: 94                 
Correct output: 36                  | Program output: 39                 
Correct output: -81                 | Program output: -6                 
Correct output: -95                 | Program output: -17                
Correct output: -81                 | Program output: 71                 
Correct output: -79                 | Program output: -63                
Correct output: -28                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 2                  
Correct output: -86                 | Program output: -78                
Correct output: -99                 | Program output: 37                 
Correct output: 26                  | Program output: 30                 
Correct output: 38                  | Program output: 83                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: 30                 
Correct output: -84                 | Program output: 21                 
Correct output: -24                 | Program output: -24                
Correct output: -24                 | Program output: 63                 
Correct output: -62                 | Program output: -38                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 86                 
Correct output: -35                 | Program output: -5                 
Correct output: -67                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: 53                 
Correct output: -95                 | Program output: -45                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 95                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -20                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 48                 
Correct output: -68                 | Program output: 27                 
Correct output: -83                 | Program output: 75                 
Correct output: -60                 | Program output: 98                 
Correct output: -25                 | Program output: 88                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 33                 
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: -81                
Correct output: -45                 | Program output: 59                 
Correct output: -85                 | Program output: 88                 
Correct output: -100                | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -100                | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 42                 
Correct output: 92                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -63                 | Program output: 29                 
Correct output: -75                 | Program output: 90                 
Correct output: -62                 | Program output: 0                  
Correct output: -66                 | Program output: 71                 
Correct output: -80                 | Program output: -36                
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 78                 
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_do*count (exec_swap (integer_yankdup boolean_swap exec_dup (integer_yankdup integer_lte boolean_and exec_noop) boolean_swap integer_dup_times print_integer boolean_frominteger) (boolean_not exec_do*range () exec_s_when_autoconstructing (integer_lt integer_fromboolean exec_yankdup boolean_flush exec_noop) (boolean_shove exec_when (boolean_invert_second_then_and integer_gte boolean_shove exec_swap (exec_while (print_boolean exec_eq exec_dup_items boolean_not) exec_yank integer_dup print_boolean boolean_rot integer_min in3 exec_do*range (integer_shove integer_stackdepth boolean_shove boolean_stackdepth)) ())) ())))
Lexicase best errors: [1 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_do*count (exec_swap (integer_yankdup boolean_swap exec_dup (integer_yankdup integer_lte boolean_and exec_noop) boolean_swap integer_dup_times print_integer boolean_frominteger) (boolean_not exec_do*range () exec_s_when_autoconstructing (integer_lt integer_fromboolean exec_yankdup boolean_flush exec_noop) (boolean_shove exec_when (boolean_invert_second_then_and integer_gte boolean_shove exec_swap (exec_while (print_boolean exec_eq exec_dup_items boolean_not) exec_yank integer_dup print_boolean boolean_rot integer_min in3 exec_do*range (integer_shove integer_stackdepth boolean_shove boolean_stackdepth)) ())) ())))
Zero cases best errors: [1 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 98 521 98 134 98 864 96 96 98)
Population mean number of elite cases: 2.24
Count of perfect (error zero) individuals by case: (134 98 521 98 134 98 864 96 96 98)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_do*count (exec_swap (boolean_invert_first_then_and boolean_swap exec_dup (integer_yankdup integer_lte boolean_and exec_noop) boolean_swap integer_dup_times print_integer boolean_frominteger) (boolean_not exec_do*range () exec_s_when_autoconstructing (integer_lt integer_fromboolean exec_yankdup boolean_flush exec_noop) (boolean_shove exec_when (boolean_invert_second_then_and integer_gte boolean_shove exec_swap (exec_while (print_boolean exec_eq exec_dup_items boolean_not) exec_yank integer_dup print_boolean boolean_rot integer_min in3 exec_do*range (integer_shove integer_stackdepth boolean_shove boolean_stackdepth)) ())) ())))
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 43
Size: 57
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 7.763
Median total errors in population: 8
Error averages by case: (0.866 0.902 0.479 0.902 0.866 0.902 0.136 0.904 0.904 0.902)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.473
Average program size in population (points): 45.767
Average percent parens in population: 0.248
Minimum age in population: 12.3125
Maximum age in population: 17.341796875
Average age in population: 15.426623046875
Median age in population: 15.4873046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4718993
--- Timings ---
Current time: 1559583216999 milliseconds
Total Time:          27.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.8 seconds, 64.8%
Fitness Testing:      5.8 seconds, 21.2%
Report:               3.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: 47                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 55                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 50                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 86                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 70                 
Correct output: 44                  | Program output: 92                 
Correct output: 19                  | Program output: 78                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: 79                 
Correct output: -95                 | Program output: 28                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 40                 
Correct output: 38                  | Program output: 45                 
Correct output: -97                 | Program output: 0                  
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -61                
Correct output: -24                 | Program output: 77                 
Correct output: -24                 | Program output: 24                 
Correct output: -62                 | Program output: 42                 
Correct output: -32                 | Program output: 28                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: 63                 
Correct output: -68                 | Program output: -1                 
Correct output: -86                 | Program output: 19                 
Correct output: -96                 | Program output: 84                 
Correct output: -93                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -16                
Correct output: 2                   | Program output: 94                 
Correct output: -68                 | Program output: -19                
Correct output: -83                 | Program output: -62                
Correct output: -60                 | Program output: -10                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: 15                 
Correct output: -97                 | Program output: 25                 
Correct output: -45                 | Program output: 41                 
Correct output: -85                 | Program output: 13                 
Correct output: -100                | Program output: 75                 
Correct output: 9                   | Program output: 73                 
Correct output: -100                | Program output: 93                 
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 51                 
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 92                 
Correct output: -63                 | Program output: 46                 
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 37                 
Correct output: -80                 | Program output: 7                  
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: 5                  
Correct output: -12                 | Program output: 59                 
Correct output: -59                 | Program output: 0                  
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_do*count (in2 integer_yankdup boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq) (boolean_shove integer_lt integer_gt) exec_do*range (exec_do*count (boolean_stackdepth))) ()))
Lexicase best errors: [0 0 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_do*count (in2 integer_yankdup boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq) (boolean_shove integer_lt integer_gt) exec_do*range (exec_do*count (boolean_stackdepth))) ()))
Zero cases best errors: [0 0 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 186 187 100 334 186 334 100 187 804)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (186 186 187 100 334 186 334 100 187 804)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_do*count (in2 integer_yankdup boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (exec_rot () (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) () ()) ()))
Errors: [0 0 0 1 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 7.396
Median total errors in population: 7
Error averages by case: (0.814 0.814 0.813 0.9 0.666 0.814 0.666 0.9 0.813 0.196)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.218
Average program size in population (points): 45.524
Average percent parens in population: 0.248
Minimum age in population: 13.796875
Maximum age in population: 19.16796875
Average age in population: 16.84890234375
Median age in population: 16.94091796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5088377
--- Timings ---
Current time: 1559583219496 milliseconds
Total Time:          30.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.7 seconds, 65.7%
Fitness Testing:      6.1 seconds, 20.5%
Report:               4.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -3                 
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 38                 
Correct output: -66                 | Program output: -66                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 76                 
Correct output: 4                   | Program output: 53                 
Correct output: 21                  | Program output: 77                 
Correct output: 2                   | Program output: 85                 
Correct output: 16                  | Program output: 100                
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 59                 
Correct output: 13                  | Program output: 75                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 67                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 77                 
Correct output: 5                   | Program output: 86                 
Correct output: 44                  | Program output: 61                 
Correct output: 33                  | Program output: 86                 
Correct output: 44                  | Program output: 87                 
Correct output: 19                  | Program output: 34                 
Correct output: 12                  | Program output: 23                 
Correct output: 14                  | Program output: 94                 
Correct output: 36                  | Program output: 39                 
Correct output: -81                 | Program output: -6                 
Correct output: -95                 | Program output: -17                
Correct output: -81                 | Program output: 71                 
Correct output: -79                 | Program output: -63                
Correct output: -28                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 2                  
Correct output: -86                 | Program output: -78                
Correct output: -99                 | Program output: 37                 
Correct output: 26                  | Program output: 30                 
Correct output: 38                  | Program output: 83                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: 30                 
Correct output: -84                 | Program output: 21                 
Correct output: -24                 | Program output: -24                
Correct output: -24                 | Program output: 63                 
Correct output: -62                 | Program output: -38                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 86                 
Correct output: -35                 | Program output: -5                 
Correct output: -67                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: 53                 
Correct output: -95                 | Program output: -45                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 95                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -20                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 48                 
Correct output: -68                 | Program output: 27                 
Correct output: -83                 | Program output: 75                 
Correct output: -60                 | Program output: 98                 
Correct output: -25                 | Program output: 88                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 33                 
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: -81                
Correct output: -45                 | Program output: 59                 
Correct output: -85                 | Program output: 88                 
Correct output: -100                | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -100                | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 42                 
Correct output: 92                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -63                 | Program output: 29                 
Correct output: -75                 | Program output: 90                 
Correct output: -62                 | Program output: 0                  
Correct output: -66                 | Program output: 71                 
Correct output: -80                 | Program output: -36                
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 78                 
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction -35} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction 61} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_yank exec_if (integer_rot integer_div exec_y_when_autoconstructing () in1 exec_empty exec_pop () -35) (in3) exec_s (exec_if () (integer_fromboolean print_boolean) integer_inc 61 integer_flush integer_empty in1 boolean_or) (print_integer exec_flush) (in3) integer_lt integer_fromboolean exec_swap (exec_while (print_boolean exec_eq exec_dup_items boolean_not) boolean_dup_items in1 print_integer integer_mod exec_flush) (integer_yankdup) exec_stackdepth integer_dup_times exec_do*times ())
Lexicase best errors: [1 0 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction -35} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction 61} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_yank exec_if (integer_rot integer_div exec_y_when_autoconstructing () in1 exec_empty exec_pop () -35) (in3) exec_s (exec_if () (integer_fromboolean print_boolean) integer_inc 61 integer_flush integer_empty in1 boolean_or) (print_integer exec_flush) (in3) integer_lt integer_fromboolean exec_swap (exec_while (print_boolean exec_eq exec_dup_items boolean_not) boolean_dup_items in1 print_integer integer_mod exec_flush) (integer_yankdup) exec_stackdepth integer_dup_times exec_do*times ())
Zero cases best errors: [1 0 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 145 146 1 1 147 147 207 849 147)
Population mean number of elite cases: 2.00
Count of perfect (error zero) individuals by case: (207 145 146 1 1 147 147 207 849 147)
Population mean number of perfect (error zero) cases: 2.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_do*count (exec_swap (integer_yankdup boolean_swap exec_dup (integer_yankdup integer_lte boolean_and exec_noop) boolean_swap integer_dup_times print_integer boolean_frominteger) (boolean_invert_first_then_and exec_do*range () exec_s_when_autoconstructing (integer_lt integer_fromboolean exec_yankdup boolean_flush exec_noop) (boolean_shove exec_when (boolean_invert_second_then_and integer_gte boolean_shove exec_swap (exec_while (print_boolean exec_eq exec_dup_items boolean_not) exec_yank integer_dup print_boolean boolean_rot integer_min in3 exec_do*range (integer_shove integer_stackdepth boolean_shove boolean_stackdepth)) ())) ())))
Errors: [1 0 0 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 57
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 8.003
Median total errors in population: 9
Error averages by case: (0.793 0.855 0.854 0.999 0.999 0.853 0.853 0.793 0.151 0.853)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.084
Average program size in population (points): 41.8
Average percent parens in population: 0.257
Minimum age in population: 14.796875
Maximum age in population: 20.32373046875
Average age in population: 18.2948876953125
Median age in population: 18.40771484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5425168
--- Timings ---
Current time: 1559583222312 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.9 seconds, 66.9%
Fitness Testing:      6.4 seconds, 19.6%
Report:               4.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: 47                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 55                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 50                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 86                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 70                 
Correct output: 44                  | Program output: 92                 
Correct output: 19                  | Program output: 78                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: 79                 
Correct output: -95                 | Program output: 28                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 40                 
Correct output: 38                  | Program output: 45                 
Correct output: -97                 | Program output: 0                  
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -61                
Correct output: -24                 | Program output: 77                 
Correct output: -24                 | Program output: 24                 
Correct output: -62                 | Program output: 42                 
Correct output: -32                 | Program output: 28                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: 63                 
Correct output: -68                 | Program output: -1                 
Correct output: -86                 | Program output: 19                 
Correct output: -96                 | Program output: 84                 
Correct output: -93                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -16                
Correct output: 2                   | Program output: 94                 
Correct output: -68                 | Program output: -19                
Correct output: -83                 | Program output: -62                
Correct output: -60                 | Program output: -10                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: 15                 
Correct output: -97                 | Program output: 25                 
Correct output: -45                 | Program output: 41                 
Correct output: -85                 | Program output: 13                 
Correct output: -100                | Program output: 75                 
Correct output: 9                   | Program output: 73                 
Correct output: -100                | Program output: 93                 
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 51                 
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 92                 
Correct output: -63                 | Program output: 46                 
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 37                 
Correct output: -80                 | Program output: 7                  
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: 5                  
Correct output: -12                 | Program output: 59                 
Correct output: -59                 | Program output: 0                  
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_do*count (in2 exec_s_when_autoconstructing (integer_add) (exec_s (exec_if (integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ()) ()) () ()) ()))
Lexicase best errors: [1 0 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.421
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_do*count (in2 exec_s_when_autoconstructing (integer_add) (exec_s (exec_if (integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ()) ()) () ()) ()))
Zero cases best errors: [1 0 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.421
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 9 8 8 163 245 640 811 163 163)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (242 9 8 8 163 245 640 811 163 163)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_do*count (in2 integer_yankdup boolean_swap exec_swap (integer_yankdup boolean_swap exec_dup (integer_yankdup integer_lte boolean_and exec_noop) boolean_swap exec_k_when_autoconstructing (print_integer boolean_frominteger) (boolean_not exec_do*range () exec_s_when_autoconstructing (integer_lt integer_fromboolean exec_yankdup boolean_flush exec_noop) (boolean_shove exec_when (boolean_invert_second_then_and integer_gte boolean_shove exec_swap (exec_while (print_boolean exec_eq exec_dup_items boolean_not) exec_yank integer_dup print_boolean boolean_rot integer_min in3 exec_do*range (integer_shove integer_stackdepth boolean_shove boolean_stackdepth)) ())) ())) ()))
Errors: [1 0 0 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 46
Size: 62
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.548
Median total errors in population: 8
Error averages by case: (0.758 0.991 0.992 0.992 0.837 0.755 0.36 0.189 0.837 0.837)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.713
Average program size in population (points): 48.309
Average percent parens in population: 0.264
Minimum age in population: 16.25
Maximum age in population: 21.52587890625
Average age in population: 19.556916015625
Median age in population: 19.6796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5809534
--- Timings ---
Current time: 1559583225247 milliseconds
Total Time:          35.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.2 seconds, 67.8%
Fitness Testing:      6.8 seconds, 18.9%
Report:               4.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: 95                 
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 49                 
Correct output: 4                   | Program output: 50                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 84                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 88                 
Correct output: 47                  | Program output: 49                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 80                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 87                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 61                 
Correct output: 14                  | Program output: 99                 
Correct output: 36                  | Program output: 91                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -23                
Correct output: -81                 | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 85                 
Correct output: -98                 | Program output: -62                
Correct output: -78                 | Program output: 1                  
Correct output: -86                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 83                 
Correct output: 38                  | Program output: 96                 
Correct output: -97                 | Program output: 38                 
Correct output: -81                 | Program output: 16                 
Correct output: -84                 | Program output: -75                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -8                 
Correct output: -62                 | Program output: 33                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: 17                 
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: 43                 
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: 30                 
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -29                
Correct output: -87                 | Program output: -13                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: 18                 
Correct output: -83                 | Program output: -37                
Correct output: -60                 | Program output: 61                 
Correct output: -25                 | Program output: 64                 
Correct output: -12                 | Program output: 79                 
Correct output: -85                 | Program output: -33                
Correct output: -60                 | Program output: -7                 
Correct output: -97                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 81                 
Correct output: -66                 | Program output: 70                 
Correct output: -46                 | Program output: 77                 
Correct output: -93                 | Program output: -2                 
Correct output: 92                  | Program output: 97                 
Correct output: 16                  | Program output: 54                 
Correct output: -63                 | Program output: 75                 
Correct output: -75                 | Program output: 22                 
Correct output: -62                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: 85                 
Correct output: -59                 | Program output: -12                
Correct output: -88                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove in4 exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ()) () ()))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove in4 exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ()) () ()))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (304 240 239 304 1 362 304 912 910 1)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (304 240 239 304 1 362 304 912 910 1)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove in4 exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ()) () ()))
Errors: [0 1 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 6.423
Median total errors in population: 6
Error averages by case: (0.696 0.76 0.761 0.696 0.999 0.638 0.696 0.088 0.09 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.65
Average program size in population (points): 42.16
Average percent parens in population: 0.300
Minimum age in population: 18.69140625
Maximum age in population: 22.947998046875
Average age in population: 20.76027661132812
Median age in population: 20.79168701171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 154
Genome diversity (% unique genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6127034
--- Timings ---
Current time: 1559583227467 milliseconds
Total Time:          37.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.9 seconds, 68.1%
Fitness Testing:      7.0 seconds, 18.6%
Report:               4.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: 47                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 55                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 50                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 86                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 70                 
Correct output: 44                  | Program output: 92                 
Correct output: 19                  | Program output: 78                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: 79                 
Correct output: -95                 | Program output: 28                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 40                 
Correct output: 38                  | Program output: 45                 
Correct output: -97                 | Program output: 0                  
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -61                
Correct output: -24                 | Program output: 77                 
Correct output: -24                 | Program output: 24                 
Correct output: -62                 | Program output: 42                 
Correct output: -32                 | Program output: 28                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: 63                 
Correct output: -68                 | Program output: -1                 
Correct output: -86                 | Program output: 19                 
Correct output: -96                 | Program output: 84                 
Correct output: -93                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -16                
Correct output: 2                   | Program output: 94                 
Correct output: -68                 | Program output: -19                
Correct output: -83                 | Program output: -62                
Correct output: -60                 | Program output: -10                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: 15                 
Correct output: -97                 | Program output: 25                 
Correct output: -45                 | Program output: 41                 
Correct output: -85                 | Program output: 13                 
Correct output: -100                | Program output: 75                 
Correct output: 9                   | Program output: 73                 
Correct output: -100                | Program output: 93                 
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 51                 
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 92                 
Correct output: -63                 | Program output: 46                 
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 37                 
Correct output: -80                 | Program output: 7                  
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: 5                  
Correct output: -12                 | Program output: 59                 
Correct output: -59                 | Program output: 0                  
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove boolean_flush exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ()) () ()))
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove boolean_flush exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)) ()) () ()))
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (105 108 107 253 105 108 105 105 197 108)
Population mean number of elite cases: 1.30
Count of perfect (error zero) individuals by case: (105 108 107 253 105 108 105 105 197 108)
Population mean number of perfect (error zero) cases: 1.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_swap integer_dup_times print_integer boolean_frominteger) (boolean_not exec_do*range () exec_s_when_autoconstructing (integer_lt integer_fromboolean exec_yankdup boolean_flush exec_noop) (boolean_shove exec_when (boolean_invert_second_then_and integer_gte boolean_shove boolean_stackdepth)) ()) ()))
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 25
Size: 36
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 8.699
Median total errors in population: 9
Error averages by case: (0.895 0.892 0.893 0.747 0.895 0.892 0.895 0.895 0.803 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.418
Average program size in population (points): 40.566
Average percent parens in population: 0.300
Minimum age in population: 19.9921875
Maximum age in population: 24.11138916015625
Average age in population: 21.95810046386719
Median age in population: 22.001708984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6556814
--- Timings ---
Current time: 1559583229820 milliseconds
Total Time:          40.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.6 seconds, 68.4%
Fitness Testing:      7.4 seconds, 18.4%
Report:               5.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -3                 
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 38                 
Correct output: -66                 | Program output: -66                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 76                 
Correct output: 4                   | Program output: 53                 
Correct output: 21                  | Program output: 77                 
Correct output: 2                   | Program output: 85                 
Correct output: 16                  | Program output: 100                
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 59                 
Correct output: 13                  | Program output: 75                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 67                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 77                 
Correct output: 5                   | Program output: 86                 
Correct output: 44                  | Program output: 61                 
Correct output: 33                  | Program output: 86                 
Correct output: 44                  | Program output: 87                 
Correct output: 19                  | Program output: 34                 
Correct output: 12                  | Program output: 23                 
Correct output: 14                  | Program output: 94                 
Correct output: 36                  | Program output: 39                 
Correct output: -81                 | Program output: -6                 
Correct output: -95                 | Program output: -17                
Correct output: -81                 | Program output: 71                 
Correct output: -79                 | Program output: -63                
Correct output: -28                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 2                  
Correct output: -86                 | Program output: -78                
Correct output: -99                 | Program output: 37                 
Correct output: 26                  | Program output: 30                 
Correct output: 38                  | Program output: 83                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: 30                 
Correct output: -84                 | Program output: 21                 
Correct output: -24                 | Program output: -24                
Correct output: -24                 | Program output: 63                 
Correct output: -62                 | Program output: -38                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 86                 
Correct output: -35                 | Program output: -5                 
Correct output: -67                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: 53                 
Correct output: -95                 | Program output: -45                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 95                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -20                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 48                 
Correct output: -68                 | Program output: 27                 
Correct output: -83                 | Program output: 75                 
Correct output: -60                 | Program output: 98                 
Correct output: -25                 | Program output: 88                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 33                 
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: -81                
Correct output: -45                 | Program output: 59                 
Correct output: -85                 | Program output: 88                 
Correct output: -100                | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -100                | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 42                 
Correct output: 92                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -63                 | Program output: 29                 
Correct output: -75                 | Program output: 90                 
Correct output: -62                 | Program output: 0                  
Correct output: -66                 | Program output: 71                 
Correct output: -80                 | Program output: -36                
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 78                 
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Lexicase best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt exec_yankdup boolean_flush exec_noop) (boolean_shove print_integer integer_dup_items)) (in3) boolean_invert_first_then_and integer_yank integer_pop integer_yank exec_stackdepth) (exec_s () () ()) ()))
Lexicase best errors: [1 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Zero cases best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt exec_yankdup boolean_flush exec_noop) (boolean_shove print_integer integer_dup_items)) (in3) boolean_invert_first_then_and integer_yank integer_pop integer_yank exec_stackdepth) (exec_s () () ()) ()))
Zero cases best errors: [1 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 1000 609 87 14 149 87 7 87 87)
Population mean number of elite cases: 2.14
Count of perfect (error zero) individuals by case: (11 0 609 87 14 149 87 7 87 87)
Population mean number of perfect (error zero) cases: 1.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_max} {:close 0, :instruction 61} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Best program: (integer_yank exec_if () (integer_rot integer_div exec_y_when_autoconstructing () in1 exec_empty exec_pop () in3) exec_s (exec_if (integer_fromboolean) (print_boolean integer_max) 61 integer_flush integer_empty in1 boolean_or) (print_integer integer_dup_items) (in3) boolean_invert_first_then_and integer_yank integer_pop integer_yank exec_stackdepth exec_s () () ())
Errors: [1 1 1 0 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 41
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 8.862
Median total errors in population: 9
Error averages by case: (0.989 1.0 0.391 0.913 0.986 0.851 0.913 0.993 0.913 0.913)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.185
Average program size in population (points): 47.336
Average percent parens in population: 0.308
Minimum age in population: 21.5592041015625
Maximum age in population: 25.52996826171875
Average age in population: 23.73131619262695
Median age in population: 23.87677001953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7032357
--- Timings ---
Current time: 1559583232398 milliseconds
Total Time:          42.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.5 seconds, 68.8%
Fitness Testing:      7.8 seconds, 18.2%
Report:               5.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 96                 
Correct output: 4                   | Program output: 21                 
Correct output: 21                  | Program output: 52                 
Correct output: 2                   | Program output: 11                 
Correct output: 16                  | Program output: 98                 
Correct output: 21                  | Program output: 67                 
Correct output: 8                   | Program output: 91                 
Correct output: 13                  | Program output: 91                 
Correct output: 12                  | Program output: 49                 
Correct output: 46                  | Program output: 48                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 11                 
Correct output: 44                  | Program output: 90                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 66                 
Correct output: 19                  | Program output: 71                 
Correct output: 12                  | Program output: 83                 
Correct output: 14                  | Program output: 97                 
Correct output: 36                  | Program output: 68                 
Correct output: -81                 | Program output: 93                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 54                 
Correct output: -98                 | Program output: -3                 
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -33                
Correct output: -99                 | Program output: 64                 
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: 61                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 87                 
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: 50                 
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: 39                 
Correct output: -67                 | Program output: 99                 
Correct output: -90                 | Program output: 96                 
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: 6                  
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: 92                 
Correct output: -71                 | Program output: 17                 
Correct output: 2                   | Program output: 83                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 73                 
Correct output: -85                 | Program output: 60                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 33                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 56                 
Correct output: 9                   | Program output: 36                 
Correct output: -100                | Program output: 38                 
Correct output: -58                 | Program output: 55                 
Correct output: -66                 | Program output: 48                 
Correct output: -46                 | Program output: 7                  
Correct output: -93                 | Program output: 71                 
Correct output: 92                  | Program output: 95                 
Correct output: 16                  | Program output: 52                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 18                 
Correct output: -62                 | Program output: 1                  
Correct output: -66                 | Program output: 24                 
Correct output: -80                 | Program output: 49                 
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: 17                 
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (integer_yank exec_if () (integer_rot integer_div exec_y_when_autoconstructing () in1 print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)))
Lexicase best errors: [1 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (integer_yank exec_if () (integer_rot integer_div exec_y_when_autoconstructing () in1 print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times boolean_stackdepth)))
Zero cases best errors: [1 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 324 593 328 1000 855 324 98 1000 324)
Population mean number of elite cases: 4.95
Count of perfect (error zero) individuals by case: (99 324 593 328 0 855 324 98 0 324)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) integer_add integer_shove) (boolean_empty integer_rot integer_flush integer_empty in1 boolean_or) (print_integer integer_dup_items) in3) boolean_invert_first_then_and integer_yank integer_pop integer_yank exec_stackdepth exec_s () () ())
Errors: [1 0 0 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 24
Size: 33
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.055
Median total errors in population: 8
Error averages by case: (0.901 0.676 0.407 0.672 1.0 0.145 0.676 0.902 1.0 0.676)
Error minima by case: (0 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 29.535
Average program size in population (points): 42.466
Average percent parens in population: 0.307
Minimum age in population: 22.927734375
Maximum age in population: 26.96798706054688
Average age in population: 25.0810693359375
Median age in population: 25.10744476318359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.448
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7412394
--- Timings ---
Current time: 1559583234947 milliseconds
Total Time:          45.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.4 seconds, 69.2%
Fitness Testing:      8.2 seconds, 18.0%
Report:               5.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: 47                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 55                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 50                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 86                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 70                 
Correct output: 44                  | Program output: 92                 
Correct output: 19                  | Program output: 78                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: 79                 
Correct output: -95                 | Program output: 28                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 40                 
Correct output: 38                  | Program output: 45                 
Correct output: -97                 | Program output: 0                  
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -61                
Correct output: -24                 | Program output: 77                 
Correct output: -24                 | Program output: 24                 
Correct output: -62                 | Program output: 42                 
Correct output: -32                 | Program output: 28                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: 63                 
Correct output: -68                 | Program output: -1                 
Correct output: -86                 | Program output: 19                 
Correct output: -96                 | Program output: 84                 
Correct output: -93                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -16                
Correct output: 2                   | Program output: 94                 
Correct output: -68                 | Program output: -19                
Correct output: -83                 | Program output: -62                
Correct output: -60                 | Program output: -10                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: 15                 
Correct output: -97                 | Program output: 25                 
Correct output: -45                 | Program output: 41                 
Correct output: -85                 | Program output: 13                 
Correct output: -100                | Program output: 75                 
Correct output: 9                   | Program output: 73                 
Correct output: -100                | Program output: 93                 
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 51                 
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 92                 
Correct output: -63                 | Program output: 46                 
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 37                 
Correct output: -80                 | Program output: 7                  
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: 5                  
Correct output: -12                 | Program output: 59                 
Correct output: -59                 | Program output: 0                  
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove integer_lt exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt exec_do*times () exec_do*range () integer_dup_times) (boolean_stackdepth)) ()) () ()))
Lexicase best errors: [1 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove integer_lt exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt exec_do*times () exec_do*range () integer_dup_times) (boolean_stackdepth)) ()) () ()))
Zero cases best errors: [1 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 247 5 248 640 895 249 1 5 247)
Population mean number of elite cases: 2.54
Count of perfect (error zero) individuals by case: (5 247 5 248 640 895 249 1 5 247)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction 66} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove boolean_flush exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt integer_gt) (66) integer_dup_times boolean_stackdepth) ()) () ()))
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 26
Size: 37
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.458
Median total errors in population: 8
Error averages by case: (0.995 0.753 0.995 0.752 0.36 0.105 0.751 0.999 0.995 0.753)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.676
Average program size in population (points): 37.806
Average percent parens in population: 0.297
Minimum age in population: 23.927734375
Maximum age in population: 28.54135894775391
Average age in population: 26.73752626037598
Median age in population: 26.82073974609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.505
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7674866
--- Timings ---
Current time: 1559583237335 milliseconds
Total Time:          47.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.3 seconds, 69.7%
Fitness Testing:      8.4 seconds, 17.6%
Report:               6.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -3                 
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 38                 
Correct output: -66                 | Program output: -66                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 76                 
Correct output: 4                   | Program output: 53                 
Correct output: 21                  | Program output: 77                 
Correct output: 2                   | Program output: 85                 
Correct output: 16                  | Program output: 100                
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 59                 
Correct output: 13                  | Program output: 75                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 67                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 77                 
Correct output: 5                   | Program output: 86                 
Correct output: 44                  | Program output: 61                 
Correct output: 33                  | Program output: 86                 
Correct output: 44                  | Program output: 87                 
Correct output: 19                  | Program output: 34                 
Correct output: 12                  | Program output: 23                 
Correct output: 14                  | Program output: 94                 
Correct output: 36                  | Program output: 39                 
Correct output: -81                 | Program output: -6                 
Correct output: -95                 | Program output: -17                
Correct output: -81                 | Program output: 71                 
Correct output: -79                 | Program output: -63                
Correct output: -28                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 2                  
Correct output: -86                 | Program output: -78                
Correct output: -99                 | Program output: 37                 
Correct output: 26                  | Program output: 30                 
Correct output: 38                  | Program output: 83                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: 30                 
Correct output: -84                 | Program output: 21                 
Correct output: -24                 | Program output: -24                
Correct output: -24                 | Program output: 63                 
Correct output: -62                 | Program output: -38                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 86                 
Correct output: -35                 | Program output: -5                 
Correct output: -67                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: 53                 
Correct output: -95                 | Program output: -45                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 95                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -20                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 48                 
Correct output: -68                 | Program output: 27                 
Correct output: -83                 | Program output: 75                 
Correct output: -60                 | Program output: 98                 
Correct output: -25                 | Program output: 88                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 33                 
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: -81                
Correct output: -45                 | Program output: 59                 
Correct output: -85                 | Program output: 88                 
Correct output: -100                | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -100                | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 42                 
Correct output: 92                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -63                 | Program output: 29                 
Correct output: -75                 | Program output: 90                 
Correct output: -62                 | Program output: 0                  
Correct output: -66                 | Program output: 71                 
Correct output: -80                 | Program output: -36                
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 78                 
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_max} {:close 0, :instruction 61} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Lexicase best program: (integer_yank exec_if () (integer_rot integer_div exec_y_when_autoconstructing () integer_dup_items exec_empty exec_pop () exec_dup_times (in3) exec_s (exec_if (integer_fromboolean) (print_boolean integer_max) 61 integer_flush integer_empty) (in1 integer_pop print_integer integer_dup_items) (in3) exec_empty integer_yank integer_pop integer_yank exec_stackdepth) exec_s () () ())
Lexicase best errors: [0 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_max} {:close 0, :instruction 61} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Zero cases best program: (integer_yank exec_if () (integer_rot integer_div exec_y_when_autoconstructing () integer_dup_items exec_empty exec_pop () exec_dup_times (in3) exec_s (exec_if (integer_fromboolean) (print_boolean integer_max) 61 integer_flush integer_empty) (in1 integer_pop print_integer integer_dup_items) (in3) exec_empty integer_yank integer_pop integer_yank exec_stackdepth) exec_s () () ())
Zero cases best errors: [0 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 76 279 280 76 440 103 103 440 278)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (279 76 279 280 76 440 103 103 440 278)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Best program: (in3 in3 boolean_or print_integer integer_dup_items in3 boolean_invert_first_then_and integer_yank integer_pop integer_yank exec_stackdepth exec_s () () ())
Errors: [0 1 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 12
Size: 16
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.646
Median total errors in population: 8
Error averages by case: (0.721 0.924 0.721 0.72 0.924 0.56 0.897 0.897 0.56 0.722)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.809
Average program size in population (points): 37.782
Average percent parens in population: 0.316
Minimum age in population: 24.98046875
Maximum age in population: 30.16720581054688
Average age in population: 28.15227054595947
Median age in population: 28.25237464904785
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7964187
--- Timings ---
Current time: 1559583239245 milliseconds
Total Time:          49.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.8 seconds, 69.9%
Fitness Testing:      8.7 seconds, 17.4%
Report:               6.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: 47                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 55                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 50                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 86                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 70                 
Correct output: 44                  | Program output: 92                 
Correct output: 19                  | Program output: 78                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: 79                 
Correct output: -95                 | Program output: 28                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 40                 
Correct output: 38                  | Program output: 45                 
Correct output: -97                 | Program output: 0                  
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -61                
Correct output: -24                 | Program output: 77                 
Correct output: -24                 | Program output: 24                 
Correct output: -62                 | Program output: 42                 
Correct output: -32                 | Program output: 28                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: 63                 
Correct output: -68                 | Program output: -1                 
Correct output: -86                 | Program output: 19                 
Correct output: -96                 | Program output: 84                 
Correct output: -93                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -16                
Correct output: 2                   | Program output: 94                 
Correct output: -68                 | Program output: -19                
Correct output: -83                 | Program output: -62                
Correct output: -60                 | Program output: -10                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: 15                 
Correct output: -97                 | Program output: 25                 
Correct output: -45                 | Program output: 41                 
Correct output: -85                 | Program output: 13                 
Correct output: -100                | Program output: 75                 
Correct output: 9                   | Program output: 73                 
Correct output: -100                | Program output: 93                 
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 51                 
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 92                 
Correct output: -63                 | Program output: 46                 
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 37                 
Correct output: -80                 | Program output: 7                  
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: 5                  
Correct output: -12                 | Program output: 59                 
Correct output: -59                 | Program output: 0                  
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Lexicase best program: (exec_do*count (in2 exec_s_when_autoconstructing (integer_lte exec_dup (integer_add integer_shove) boolean_or) (print_integer integer_dup_items) (in3) exec_dup_times (integer_yank integer_pop integer_yank exec_stackdepth) exec_s () () ()))
Lexicase best errors: [1 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Zero cases best program: (exec_do*count (in2 exec_s_when_autoconstructing (integer_lte exec_dup (integer_add integer_shove) boolean_or) (print_integer integer_dup_items) (in3) exec_dup_times (integer_yank integer_pop integer_yank exec_stackdepth) exec_s () () ()))
Zero cases best errors: [1 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 171 195 349 187 195 195 195 195 740)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (187 171 195 349 187 195 195 195 195 740)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Best program: (exec_do*count (in2 integer_yankdup boolean_swap exec_swap (integer_yankdup boolean_swap exec_dup (integer_yankdup integer_lte boolean_and exec_noop) boolean_swap exec_k_when_autoconstructing (print_integer boolean_frominteger) (exec_do*range (exec_do*range () exec_s_when_autoconstructing (exec_rot (integer_fromboolean exec_yankdup boolean_flush boolean_not) (in3) (boolean_invert_first_then_and integer_yank integer_pop integer_yank exec_stackdepth) exec_s () () ()) () ()))) ()))
Errors: [1 1 0 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 49
Percent parens: 0.367
--- Population Statistics ---
Average total errors in population: 7.391
Median total errors in population: 8
Error averages by case: (0.813 0.829 0.805 0.651 0.813 0.805 0.805 0.805 0.805 0.26)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.459
Average program size in population (points): 35.36
Average percent parens in population: 0.307
Minimum age in population: 25.98046875
Maximum age in population: 31.89060974121094
Average age in population: 29.70979798316956
Median age in population: 29.83002090454102
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.507
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8231123
--- Timings ---
Current time: 1559583241831 milliseconds
Total Time:          52.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.8 seconds, 70.4%
Fitness Testing:      8.9 seconds, 17.1%
Report:               6.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: 47                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 55                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 50                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 86                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 70                 
Correct output: 44                  | Program output: 92                 
Correct output: 19                  | Program output: 78                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: 79                 
Correct output: -95                 | Program output: 28                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 40                 
Correct output: 38                  | Program output: 45                 
Correct output: -97                 | Program output: 0                  
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -61                
Correct output: -24                 | Program output: 77                 
Correct output: -24                 | Program output: 24                 
Correct output: -62                 | Program output: 42                 
Correct output: -32                 | Program output: 28                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: 63                 
Correct output: -68                 | Program output: -1                 
Correct output: -86                 | Program output: 19                 
Correct output: -96                 | Program output: 84                 
Correct output: -93                 | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -16                
Correct output: 2                   | Program output: 94                 
Correct output: -68                 | Program output: -19                
Correct output: -83                 | Program output: -62                
Correct output: -60                 | Program output: -10                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: 15                 
Correct output: -97                 | Program output: 25                 
Correct output: -45                 | Program output: 41                 
Correct output: -85                 | Program output: 13                 
Correct output: -100                | Program output: 75                 
Correct output: 9                   | Program output: 73                 
Correct output: -100                | Program output: 93                 
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 51                 
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 92                 
Correct output: -63                 | Program output: 46                 
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 37                 
Correct output: -80                 | Program output: 7                  
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: 5                  
Correct output: -12                 | Program output: 59                 
Correct output: -59                 | Program output: 0                  
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove exec_swap (boolean_invert_first_then_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times integer_dup)) ()) () ()))
Lexicase best errors: [1 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove exec_swap (boolean_invert_first_then_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times integer_dup)) ()) () ()))
Zero cases best errors: [1 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (93 695 91 497 93 93 495 495 199 105)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (93 695 91 497 93 93 495 495 199 105)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank})
Best program: (exec_do*count (in2 exec_s_when_autoconstructing () (boolean_swap exec_dup (integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove integer_lt exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt integer_gt) (exec_do*range () integer_dup_times integer_yank)) ()) ()))
Errors: [1 0 1 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 7.144
Median total errors in population: 7
Error averages by case: (0.907 0.305 0.909 0.503 0.907 0.907 0.505 0.505 0.801 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.213
Average program size in population (points): 37.127
Average percent parens in population: 0.321
Minimum age in population: 27.91690063476562
Maximum age in population: 33.16013145446777
Average age in population: 31.1898136472702
Median age in population: 31.2831768989563
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8517948
--- Timings ---
Current time: 1559583244044 milliseconds
Total Time:          54.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.5 seconds, 70.7%
Fitness Testing:      9.2 seconds, 16.9%
Report:               6.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 96                 
Correct output: 4                   | Program output: 21                 
Correct output: 21                  | Program output: 52                 
Correct output: 2                   | Program output: 11                 
Correct output: 16                  | Program output: 98                 
Correct output: 21                  | Program output: 67                 
Correct output: 8                   | Program output: 91                 
Correct output: 13                  | Program output: 91                 
Correct output: 12                  | Program output: 49                 
Correct output: 46                  | Program output: 48                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 11                 
Correct output: 44                  | Program output: 90                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 66                 
Correct output: 19                  | Program output: 71                 
Correct output: 12                  | Program output: 83                 
Correct output: 14                  | Program output: 97                 
Correct output: 36                  | Program output: 68                 
Correct output: -81                 | Program output: 93                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 54                 
Correct output: -98                 | Program output: -3                 
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -33                
Correct output: -99                 | Program output: 64                 
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: 61                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 87                 
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: 50                 
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: 39                 
Correct output: -67                 | Program output: 99                 
Correct output: -90                 | Program output: 96                 
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: 6                  
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: 92                 
Correct output: -71                 | Program output: 17                 
Correct output: 2                   | Program output: 83                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 73                 
Correct output: -85                 | Program output: 60                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 33                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 56                 
Correct output: 9                   | Program output: 36                 
Correct output: -100                | Program output: 38                 
Correct output: -58                 | Program output: 55                 
Correct output: -66                 | Program output: 48                 
Correct output: -46                 | Program output: 7                  
Correct output: -93                 | Program output: 71                 
Correct output: 92                  | Program output: 95                 
Correct output: 16                  | Program output: 52                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 18                 
Correct output: -62                 | Program output: 1                  
Correct output: -66                 | Program output: 24                 
Correct output: -80                 | Program output: 49                 
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: 17                 
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (integer_yank exec_if () (integer_rot integer_div exec_y_when_autoconstructing () in1 print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt integer_gt) (exec_noop) integer_dup_times boolean_stackdepth))
Lexicase best errors: [1 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (integer_yank exec_if () (integer_rot integer_div exec_y_when_autoconstructing () in1 print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt integer_gt) (exec_noop) integer_dup_times boolean_stackdepth))
Zero cases best errors: [1 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (270 330 328 199 903 196 107 108 270 108)
Population mean number of elite cases: 2.82
Count of perfect (error zero) individuals by case: (270 330 328 199 903 196 107 108 270 108)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank exec_if () (integer_rot integer_div exec_y_when_autoconstructing () in1 exec_empty integer_dup_times print_integer boolean_frominteger) boolean_not exec_do*range () exec_s_when_autoconstructing (integer_lt integer_fromboolean exec_yankdup boolean_flush) (boolean_invert_second_then_and) ())
Errors: [1 1 1 1 0 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.181
Median total errors in population: 7
Error averages by case: (0.73 0.67 0.672 0.801 0.097 0.804 0.893 0.892 0.73 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.181
Average program size in population (points): 35.409
Average percent parens in population: 0.317
Minimum age in population: 28.93243408203125
Maximum age in population: 34.69059801101685
Average age in population: 32.67109801673889
Median age in population: 32.71333169937134
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8801517
--- Timings ---
Current time: 1559583246170 milliseconds
Total Time:          56.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.2 seconds, 70.9%
Fitness Testing:      9.5 seconds, 16.7%
Report:               6.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -3                 
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 38                 
Correct output: -66                 | Program output: -66                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 76                 
Correct output: 4                   | Program output: 53                 
Correct output: 21                  | Program output: 77                 
Correct output: 2                   | Program output: 85                 
Correct output: 16                  | Program output: 100                
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 59                 
Correct output: 13                  | Program output: 75                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 67                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 77                 
Correct output: 5                   | Program output: 86                 
Correct output: 44                  | Program output: 61                 
Correct output: 33                  | Program output: 86                 
Correct output: 44                  | Program output: 87                 
Correct output: 19                  | Program output: 34                 
Correct output: 12                  | Program output: 23                 
Correct output: 14                  | Program output: 94                 
Correct output: 36                  | Program output: 39                 
Correct output: -81                 | Program output: -6                 
Correct output: -95                 | Program output: -17                
Correct output: -81                 | Program output: 71                 
Correct output: -79                 | Program output: -63                
Correct output: -28                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 2                  
Correct output: -86                 | Program output: -78                
Correct output: -99                 | Program output: 37                 
Correct output: 26                  | Program output: 30                 
Correct output: 38                  | Program output: 83                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: 30                 
Correct output: -84                 | Program output: 21                 
Correct output: -24                 | Program output: -24                
Correct output: -24                 | Program output: 63                 
Correct output: -62                 | Program output: -38                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 86                 
Correct output: -35                 | Program output: -5                 
Correct output: -67                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: 53                 
Correct output: -95                 | Program output: -45                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 95                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -20                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 48                 
Correct output: -68                 | Program output: 27                 
Correct output: -83                 | Program output: 75                 
Correct output: -60                 | Program output: 98                 
Correct output: -25                 | Program output: 88                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 33                 
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: -81                
Correct output: -45                 | Program output: 59                 
Correct output: -85                 | Program output: 88                 
Correct output: -100                | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -100                | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 42                 
Correct output: 92                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -63                 | Program output: 29                 
Correct output: -75                 | Program output: 90                 
Correct output: -62                 | Program output: 0                  
Correct output: -66                 | Program output: 71                 
Correct output: -80                 | Program output: -36                
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 78                 
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Lexicase best program: (integer_yank exec_if () (integer_rot integer_div exec_y_when_autoconstructing () in1 exec_empty exec_pop () in3) boolean_or print_integer integer_dup_items in3 boolean_invert_first_then_and integer_yank integer_pop integer_yank exec_stackdepth exec_s () () ())
Lexicase best errors: [0 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Zero cases best program: (integer_yank exec_if () (integer_rot integer_div exec_y_when_autoconstructing () in1 exec_empty exec_pop () in3) boolean_or print_integer integer_dup_items in3 boolean_invert_first_then_and integer_yank integer_pop integer_yank exec_stackdepth exec_s () () ())
Zero cases best errors: [0 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (930 199 199 206 199 733 197 199 325 196)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (930 199 199 206 199 733 197 199 325 196)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup_items} {:close 2, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s})
Best program: (integer_yank exec_if () (integer_rot integer_div exec_y_when_autoconstructing (in1 integer_add integer_shove) boolean_empty integer_rot exec_stackdepth integer_shove in1) integer_yankdup boolean_flush exec_k_when_autoconstructing (exec_do*while () exec_swap (exec_stackdepth integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt exec_yankdup boolean_flush exec_noop) (boolean_shove integer_eq integer_dup_items)) (in3)) (boolean_invert_first_then_and integer_yank integer_pop integer_yank exec_stackdepth) exec_s () () ()) ())
Errors: [0 0 0 1 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 6.617
Median total errors in population: 7
Error averages by case: (0.07 0.801 0.801 0.794 0.801 0.267 0.803 0.801 0.675 0.804)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.416
Average program size in population (points): 34.038
Average percent parens in population: 0.312
Minimum age in population: 30.70895767211914
Maximum age in population: 36.49863290786743
Average age in population: 34.18877569270134
Median age in population: 34.25698733329773
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9068497
--- Timings ---
Current time: 1559583248676 milliseconds
Total Time:          59.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.1 seconds, 71.3%
Fitness Testing:      9.7 seconds, 16.5%
Report:               7.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 96                 
Correct output: 4                   | Program output: 21                 
Correct output: 21                  | Program output: 52                 
Correct output: 2                   | Program output: 11                 
Correct output: 16                  | Program output: 98                 
Correct output: 21                  | Program output: 67                 
Correct output: 8                   | Program output: 91                 
Correct output: 13                  | Program output: 91                 
Correct output: 12                  | Program output: 49                 
Correct output: 46                  | Program output: 48                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 11                 
Correct output: 44                  | Program output: 90                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 66                 
Correct output: 19                  | Program output: 71                 
Correct output: 12                  | Program output: 83                 
Correct output: 14                  | Program output: 97                 
Correct output: 36                  | Program output: 68                 
Correct output: -81                 | Program output: 93                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 54                 
Correct output: -98                 | Program output: -3                 
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -33                
Correct output: -99                 | Program output: 64                 
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: 61                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 87                 
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: 50                 
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: 39                 
Correct output: -67                 | Program output: 99                 
Correct output: -90                 | Program output: 96                 
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: 6                  
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: 92                 
Correct output: -71                 | Program output: 17                 
Correct output: 2                   | Program output: 83                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 73                 
Correct output: -85                 | Program output: 60                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 33                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 56                 
Correct output: 9                   | Program output: 36                 
Correct output: -100                | Program output: 38                 
Correct output: -58                 | Program output: 55                 
Correct output: -66                 | Program output: 48                 
Correct output: -46                 | Program output: 7                  
Correct output: -93                 | Program output: 71                 
Correct output: 92                  | Program output: 95                 
Correct output: 16                  | Program output: 52                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 18                 
Correct output: -62                 | Program output: 1                  
Correct output: -66                 | Program output: 24                 
Correct output: -80                 | Program output: 49                 
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: 17                 
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () exec_if (integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_sub boolean_stackdepth)) ()) ()))
Lexicase best errors: [0 1 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () exec_if (integer_shove boolean_empty exec_swap (integer_lt print_integer boolean_xor exec_rot (integer_mult) (integer_lt boolean_eq boolean_shove integer_lt integer_gt) (exec_do*range () integer_sub boolean_stackdepth)) ()) ()))
Zero cases best errors: [0 1 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (121 582 121 131 121 121 131 454 791 207)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (121 582 121 131 121 121 131 454 791 207)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when})
Best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove)) (integer_flush integer_empty in1 boolean_or) (print_integer integer_dup_items) in3 boolean_invert_first_then_and integer_yank integer_pop integer_yank exec_stackdepth) exec_when ())
Errors: [1 0 1 0 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 20
Size: 27
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 7.22
Median total errors in population: 7
Error averages by case: (0.879 0.418 0.879 0.869 0.879 0.879 0.869 0.546 0.209 0.793)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.299
Average program size in population (points): 35.147
Average percent parens in population: 0.308
Minimum age in population: 32.19660949707031
Maximum age in population: 37.81316125392914
Average age in population: 35.61903215396404
Median age in population: 35.68318510055542
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9339030
--- Timings ---
Current time: 1559583251288 milliseconds
Total Time:          61.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.3 seconds, 71.6%
Fitness Testing:     10.0 seconds, 16.1%
Report:               7.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: 95                 
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 49                 
Correct output: 4                   | Program output: 50                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 84                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 88                 
Correct output: 47                  | Program output: 49                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 80                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 87                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 61                 
Correct output: 14                  | Program output: 99                 
Correct output: 36                  | Program output: 91                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -23                
Correct output: -81                 | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 85                 
Correct output: -98                 | Program output: -62                
Correct output: -78                 | Program output: 1                  
Correct output: -86                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 83                 
Correct output: 38                  | Program output: 96                 
Correct output: -97                 | Program output: 38                 
Correct output: -81                 | Program output: 16                 
Correct output: -84                 | Program output: -75                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -8                 
Correct output: -62                 | Program output: 33                 
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: 17                 
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: 43                 
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: 30                 
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -29                
Correct output: -87                 | Program output: -13                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: 18                 
Correct output: -83                 | Program output: -37                
Correct output: -60                 | Program output: 61                 
Correct output: -25                 | Program output: 64                 
Correct output: -12                 | Program output: 79                 
Correct output: -85                 | Program output: -33                
Correct output: -60                 | Program output: -7                 
Correct output: -97                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 81                 
Correct output: -66                 | Program output: 70                 
Correct output: -46                 | Program output: 77                 
Correct output: -93                 | Program output: -2                 
Correct output: 92                  | Program output: 97                 
Correct output: 16                  | Program output: 54                 
Correct output: -63                 | Program output: 75                 
Correct output: -75                 | Program output: 22                 
Correct output: -62                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: 85                 
Correct output: -59                 | Program output: -12                
Correct output: -88                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_yank boolean_not in4 integer_div exec_y_when_autoconstructing () boolean_yank exec_empty integer_dup_times print_integer boolean_frominteger boolean_not exec_do*range () exec_s_when_autoconstructing (integer_lt integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) () ())
Lexicase best errors: [1 0 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_yank boolean_not in4 integer_div exec_y_when_autoconstructing () boolean_yank exec_empty integer_dup_times print_integer boolean_frominteger boolean_not exec_do*range () exec_s_when_autoconstructing (integer_lt integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) () ())
Zero cases best errors: [1 0 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 912 324 152 914 325 152 152 328 310)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (311 912 324 152 914 325 152 152 328 310)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times})
Best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_lt integer_yankdup boolean_shove integer_lt integer_gt) () exec_do*range () integer_dup_times) ()))
Errors: [1 0 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 6.12
Median total errors in population: 6
Error averages by case: (0.689 0.088 0.676 0.848 0.086 0.675 0.848 0.848 0.672 0.69)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.84
Average program size in population (points): 31.837
Average percent parens in population: 0.315
Minimum age in population: 34.14542675018311
Maximum age in population: 39.28411728143692
Average age in population: 37.14365019518137
Median age in population: 37.19827654957771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9573534
--- Timings ---
Current time: 1559583253562 milliseconds
Total Time:          64.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.1 seconds, 72.0%
Fitness Testing:     10.2 seconds, 15.9%
Report:               7.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 528
Test mean error for best: 0.52800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 49                 
Correct output: 4                   | Program output: 50                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 84                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 88                 
Correct output: 47                  | Program output: 49                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 80                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 87                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 61                 
Correct output: 14                  | Program output: 99                 
Correct output: 36                  | Program output: 91                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 85                 
Correct output: -98                 | Program output: -3                 
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 83                 
Correct output: 38                  | Program output: 96                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: 43                 
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -13                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 79                 
Correct output: -85                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 81                 
Correct output: -66                 | Program output: 70                 
Correct output: -46                 | Program output: 77                 
Correct output: -93                 | Program output: -2                 
Correct output: 92                  | Program output: 97                 
Correct output: 16                  | Program output: 54                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 22                 
Correct output: -62                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()))
Lexicase best errors: [1 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()))
Zero cases best errors: [1 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 314 13 313 240 240 13 313 314 13)
Population mean number of elite cases: 1.79
Count of perfect (error zero) individuals by case: (14 314 13 313 240 240 13 313 314 13)
Population mean number of perfect (error zero) cases: 1.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()))
Errors: [1 0 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 8.213
Median total errors in population: 8
Error averages by case: (0.986 0.686 0.987 0.687 0.76 0.76 0.987 0.687 0.686 0.987)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.94
Average program size in population (points): 31.589
Average percent parens in population: 0.306
Minimum age in population: 35.8632230758667
Maximum age in population: 40.474714666605
Average age in population: 38.5697599658668
Median age in population: 38.67509004473686
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9812459
--- Timings ---
Current time: 1559583255754 milliseconds
Total Time:          66.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.9 seconds, 72.2%
Fitness Testing:     10.4 seconds, 15.7%
Report:               7.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 528
Test mean error for best: 0.52800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 49                 
Correct output: 4                   | Program output: 50                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 84                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 88                 
Correct output: 47                  | Program output: 49                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 80                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 87                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 61                 
Correct output: 14                  | Program output: 99                 
Correct output: 36                  | Program output: 91                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 85                 
Correct output: -98                 | Program output: -3                 
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 83                 
Correct output: 38                  | Program output: 96                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: 43                 
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -13                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 79                 
Correct output: -85                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 81                 
Correct output: -66                 | Program output: 70                 
Correct output: -46                 | Program output: 77                 
Correct output: -93                 | Program output: -2                 
Correct output: 92                  | Program output: 97                 
Correct output: 16                  | Program output: 54                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 22                 
Correct output: -62                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()))
Lexicase best errors: [0 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()))
Zero cases best errors: [0 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (906 380 1 506 1 522 507 924 1 530)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (906 380 1 506 1 522 507 924 1 530)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()))
Errors: [0 1 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 5.722
Median total errors in population: 5
Error averages by case: (0.094 0.62 0.999 0.494 0.999 0.478 0.493 0.076 0.999 0.47)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.428
Average program size in population (points): 32.979
Average percent parens in population: 0.321
Minimum age in population: 39.10879468917847
Maximum age in population: 41.85600474476814
Average age in population: 40.63666543798149
Median age in population: 40.62286168336868
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 419
Genome diversity (% unique genomes):	 0.303
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 420
Syntactic diversity (% unique Push programs):	 0.296
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10070637
--- Timings ---
Current time: 1559583257967 milliseconds
Total Time:          68.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.6 seconds, 72.4%
Fitness Testing:     10.7 seconds, 15.6%
Report:               8.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 55                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 50                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 86                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 70                 
Correct output: 44                  | Program output: 92                 
Correct output: 19                  | Program output: 78                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: 79                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -3                 
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -33                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 40                 
Correct output: 38                  | Program output: 45                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 77                 
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: 28                 
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: 34                 
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -1                 
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -16                
Correct output: 2                   | Program output: 94                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 75                 
Correct output: 9                   | Program output: 73                 
Correct output: -100                | Program output: 93                 
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 51                 
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 92                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 37                 
Correct output: -80                 | Program output: 7                  
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: 5                  
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 2, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove)) (exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()) ()))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 2, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap exec_dup (integer_add integer_shove)) (exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()) ()))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (533 201 349 347 201 517 201 341 926 343)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (533 201 349 347 201 517 201 341 926 343)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_do*count (in2 exec_s_when_autoconstructing (boolean_swap integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()) () ()))
Errors: [0 0 1 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.041
Median total errors in population: 6
Error averages by case: (0.467 0.799 0.651 0.653 0.799 0.483 0.799 0.659 0.074 0.657)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.527
Average program size in population (points): 38.46
Average percent parens in population: 0.335
Minimum age in population: 40.78543770313263
Maximum age in population: 43.33614614605904
Average age in population: 42.17514396026731
Median age in population: 42.28214778006077
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 263
Genome diversity (% unique genomes):	 0.357
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 264
Syntactic diversity (% unique Push programs):	 0.352
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10531079
--- Timings ---
Current time: 1559583260251 milliseconds
Total Time:          70.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.2 seconds, 72.3%
Fitness Testing:     11.2 seconds, 15.8%
Report:               8.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 528
Test mean error for best: 0.52800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 49                 
Correct output: 4                   | Program output: 50                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 84                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 88                 
Correct output: 47                  | Program output: 49                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 80                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 87                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 61                 
Correct output: 14                  | Program output: 99                 
Correct output: 36                  | Program output: 91                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 85                 
Correct output: -98                 | Program output: -3                 
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 83                 
Correct output: 38                  | Program output: 96                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: 43                 
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -13                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 79                 
Correct output: -85                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 81                 
Correct output: -66                 | Program output: 70                 
Correct output: -46                 | Program output: 77                 
Correct output: -93                 | Program output: -2                 
Correct output: 92                  | Program output: 97                 
Correct output: 16                  | Program output: 54                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 22                 
Correct output: -62                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()))
Lexicase best errors: [1 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()))
Zero cases best errors: [1 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (30 752 191 191 702 271 694 271 272 918)
Population mean number of elite cases: 4.29
Count of perfect (error zero) individuals by case: (30 752 191 191 702 271 694 271 272 918)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()))
Errors: [1 0 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 5.708
Median total errors in population: 6
Error averages by case: (0.97 0.248 0.809 0.809 0.298 0.729 0.306 0.729 0.728 0.082)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.406
Average program size in population (points): 36.96
Average percent parens in population: 0.339
Minimum age in population: 41.92494204640388
Maximum age in population: 45.22288481518626
Average age in population: 43.66496858561411
Median age in population: 43.74057430028915
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.409
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 164
Syntactic diversity (% unique Push programs):	 0.404
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 10903896
--- Timings ---
Current time: 1559583262491 milliseconds
Total Time:          73.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.8 seconds, 72.3%
Fitness Testing:     11.6 seconds, 15.8%
Report:               8.5 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 528
Test mean error for best: 0.52800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 49                 
Correct output: 4                   | Program output: 50                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 84                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 88                 
Correct output: 47                  | Program output: 49                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 80                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 87                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 61                 
Correct output: 14                  | Program output: 99                 
Correct output: 36                  | Program output: 91                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 85                 
Correct output: -98                 | Program output: -3                 
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 83                 
Correct output: 38                  | Program output: 96                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: 43                 
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -13                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 79                 
Correct output: -85                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 81                 
Correct output: -66                 | Program output: 70                 
Correct output: -46                 | Program output: 77                 
Correct output: -93                 | Program output: -2                 
Correct output: 92                  | Program output: 97                 
Correct output: 16                  | Program output: 54                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 22                 
Correct output: -62                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()))
Lexicase best errors: [0 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()))
Zero cases best errors: [0 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (486 218 486 925 670 487 215 487 487 218)
Population mean number of elite cases: 4.68
Count of perfect (error zero) individuals by case: (486 218 486 925 670 487 215 487 487 218)
Population mean number of perfect (error zero) cases: 4.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_inc integer_fromboolean boolean_dup boolean_flush boolean_invert_second_then_and) ()) ()))
Errors: [0 1 0 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 5.321
Median total errors in population: 6
Error averages by case: (0.514 0.782 0.514 0.075 0.33 0.513 0.785 0.513 0.513 0.782)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.799
Average program size in population (points): 35.61
Average percent parens in population: 0.330
Minimum age in population: 43.16237020492554
Maximum age in population: 46.92278492450714
Average age in population: 45.19548696294427
Median age in population: 45.2775658480823
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 215
Genome diversity (% unique genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.425
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 11281330
--- Timings ---
Current time: 1559583264690 milliseconds
Total Time:          75.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.4 seconds, 72.3%
Fitness Testing:     12.0 seconds, 15.9%
Report:               8.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 49                 
Correct output: 4                   | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 67                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 48                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 61                 
Correct output: 14                  | Program output: 97                 
Correct output: 36                  | Program output: 68                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 54                 
Correct output: -98                 | Program output: -62                
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: 43                 
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -13                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 73                 
Correct output: -85                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 55                 
Correct output: -66                 | Program output: 48                 
Correct output: -46                 | Program output: 7                  
Correct output: -93                 | Program output: -2                 
Correct output: 92                  | Program output: 95                 
Correct output: 16                  | Program output: 52                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 18                 
Correct output: -62                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_yank exec_if () (in4 integer_div boolean_swap) in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())
Lexicase best errors: [1 0 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_yank exec_if () (in4 integer_div boolean_swap) in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())
Zero cases best errors: [1 0 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (20 290 915 589 261 261 631 20 590 20)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (20 290 915 589 261 261 631 20 590 20)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove integer_min boolean_and print_integer boolean_xor exec_rot (integer_mult) (integer_dup_items integer_fromboolean exec_yankdup boolean_pop boolean_invert_second_then_and) ()))
Errors: [1 0 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.403
Median total errors in population: 6
Error averages by case: (0.98 0.71 0.085 0.411 0.739 0.739 0.369 0.98 0.41 0.98)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.986
Average program size in population (points): 35.821
Average percent parens in population: 0.329
Minimum age in population: 44.20147225260735
Maximum age in population: 48.50791577529162
Average age in population: 46.61275210300833
Median age in population: 46.70299270236865
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 233
Genome diversity (% unique genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 241
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11686547
--- Timings ---
Current time: 1559583267086 milliseconds
Total Time:          77.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.1 seconds, 72.3%
Fitness Testing:     12.4 seconds, 16.0%
Report:               9.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 49                 
Correct output: 4                   | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 67                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 48                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 61                 
Correct output: 14                  | Program output: 97                 
Correct output: 36                  | Program output: 68                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 54                 
Correct output: -98                 | Program output: -62                
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: 43                 
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -13                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: 73                 
Correct output: -85                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 55                 
Correct output: -66                 | Program output: 48                 
Correct output: -46                 | Program output: 7                  
Correct output: -93                 | Program output: -2                 
Correct output: 92                  | Program output: 95                 
Correct output: 16                  | Program output: 52                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 18                 
Correct output: -62                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_yank exec_if () (in4 integer_div boolean_swap) in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())
Lexicase best errors: [1 0 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_yank exec_if () (in4 integer_div boolean_swap) in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())
Zero cases best errors: [1 0 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 314 314 12 314 908 331 313 266 266)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (13 314 314 12 314 908 331 313 266 266)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank exec_if () (in4 integer_div boolean_swap) in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())
Errors: [1 0 0 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 30
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.949
Median total errors in population: 7
Error averages by case: (0.987 0.686 0.686 0.988 0.686 0.092 0.669 0.687 0.734 0.734)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.79
Average program size in population (points): 33.62
Average percent parens in population: 0.319
Minimum age in population: 45.37384495139122
Maximum age in population: 50.05796342901886
Average age in population: 48.29259056901047
Median age in population: 48.29978100140579
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 241
Genome diversity (% unique genomes):	 0.336
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 243
Syntactic diversity (% unique Push programs):	 0.332
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 11995503
--- Timings ---
Current time: 1559583269189 milliseconds
Total Time:          79.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.7 seconds, 72.4%
Fitness Testing:     12.7 seconds, 16.0%
Report:               9.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 67                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 66                 
Correct output: 19                  | Program output: 71                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: 79                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 77                 
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: 28                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -1                 
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -16                
Correct output: 2                   | Program output: 83                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 33                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 56                 
Correct output: 9                   | Program output: 36                 
Correct output: -100                | Program output: 38                 
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 52                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 24                 
Correct output: -80                 | Program output: 7                  
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: 5                  
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_do*count (in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())) () ()))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.371
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_do*count (in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())) () ()))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.371
--- Lexicase Population Statistics ---
Count of elite individuals by case: (608 647 243 332 204 609 698 608 203 609)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (608 647 243 332 204 609 698 608 203 609)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_do*count (in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())) () ()))
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 22
Size: 35
Percent parens: 0.371
--- Population Statistics ---
Average total errors in population: 5.239
Median total errors in population: 3
Error averages by case: (0.392 0.353 0.757 0.668 0.796 0.391 0.302 0.392 0.797 0.391)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.835
Average program size in population (points): 32.054
Average percent parens in population: 0.318
Minimum age in population: 48.17289197817445
Maximum age in population: 51.76036744425073
Average age in population: 50.21249415394687
Median age in population: 50.29293286800385
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 156
Genome diversity (% unique genomes):	 0.335
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.33
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 12231418
--- Timings ---
Current time: 1559583271265 milliseconds
Total Time:          81.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.3 seconds, 72.5%
Fitness Testing:     13.0 seconds, 15.8%
Report:               9.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 326
Test mean error for best: 0.32600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 38                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 50                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 70                 
Correct output: 44                  | Program output: 87                 
Correct output: 19                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 30                 
Correct output: 38                  | Program output: 45                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 48                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -100                | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 37                 
Correct output: -80                 | Program output: -36                
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_yank exec_if () (in3 integer_div exec_y_when_autoconstructing () in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.366
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_yank exec_if () (in3 integer_div exec_y_when_autoconstructing () in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.366
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 933 499 948 872 233 874 233 233 236)
Population mean number of elite cases: 5.29
Count of perfect (error zero) individuals by case: (233 933 499 948 872 233 874 233 233 236)
Population mean number of perfect (error zero) cases: 5.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank exec_if () (in3 integer_div exec_y_when_autoconstructing () in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())) () ()))
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 26
Size: 41
Percent parens: 0.366
--- Population Statistics ---
Average total errors in population: 4.706
Median total errors in population: 5
Error averages by case: (0.767 0.067 0.501 0.052 0.128 0.767 0.126 0.767 0.767 0.764)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.133
Average program size in population (points): 33.323
Average percent parens in population: 0.333
Minimum age in population: 49.21590419020504
Maximum age in population: 53.61784692609217
Average age in population: 51.9829414848733
Median age in population: 52.10104006621987
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 264
Genome diversity (% unique genomes):	 0.396
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 264
Syntactic diversity (% unique Push programs):	 0.388
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 12475773
--- Timings ---
Current time: 1559583273319 milliseconds
Total Time:          83.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.8 seconds, 72.6%
Fitness Testing:     13.2 seconds, 15.8%
Report:               9.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 326
Test mean error for best: 0.32600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 38                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 39                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 50                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 97                 
Correct output: 5                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 70                 
Correct output: 44                  | Program output: 87                 
Correct output: 19                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 30                 
Correct output: 38                  | Program output: 45                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -8                 
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 48                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -100                | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 37                 
Correct output: -80                 | Program output: -36                
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_yank exec_if () (in3 integer_div exec_y_when_autoconstructing () in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())) () ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.366
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_yank exec_if () (in3 integer_div exec_y_when_autoconstructing () in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())) () ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.366
--- Lexicase Population Statistics ---
Count of elite individuals by case: (917 519 267 806 660 955 939 521 346 519)
Population mean number of elite cases: 6.45
Count of perfect (error zero) individuals by case: (917 519 267 806 660 955 939 521 346 519)
Population mean number of perfect (error zero) cases: 6.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank exec_if () (in3 integer_div exec_y_when_autoconstructing () in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())) () ()))
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 41
Percent parens: 0.366
--- Population Statistics ---
Average total errors in population: 3.551
Median total errors in population: 2
Error averages by case: (0.083 0.481 0.733 0.194 0.34 0.045 0.061 0.479 0.654 0.481)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.331
Average program size in population (points): 36.91
Average percent parens in population: 0.335
Minimum age in population: 50.52023573406041
Maximum age in population: 54.84975858451799
Average age in population: 53.29639683481114
Median age in population: 53.48427566877217
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 408
Genome diversity (% unique genomes):	 0.359
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 409
Syntactic diversity (% unique Push programs):	 0.35
Total error diversity:				 0.009
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 12773509
--- Timings ---
Current time: 1559583275432 milliseconds
Total Time:          85.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.4 seconds, 72.6%
Fitness Testing:     13.5 seconds, 15.7%
Report:               9.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 38                 
Correct output: -66                 | Program output: -66                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 76                 
Correct output: 4                   | Program output: 21                 
Correct output: 21                  | Program output: 52                 
Correct output: 2                   | Program output: 11                 
Correct output: 16                  | Program output: 98                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 59                 
Correct output: 13                  | Program output: 75                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 48                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 11                 
Correct output: 44                  | Program output: 61                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 66                 
Correct output: 19                  | Program output: 34                 
Correct output: 12                  | Program output: 23                 
Correct output: 14                  | Program output: 94                 
Correct output: 36                  | Program output: 39                 
Correct output: -81                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 54                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -78                
Correct output: -99                 | Program output: 37                 
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: 30                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: -5                 
Correct output: -67                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -20                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 48                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 33                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -100                | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 42                 
Correct output: 92                  | Program output: 95                 
Correct output: 16                  | Program output: 16                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 18                 
Correct output: -62                 | Program output: 0                  
Correct output: -66                 | Program output: 24                 
Correct output: -80                 | Program output: -36                
Correct output: -23                 | Program output: 91                 
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_yank exec_if () (in3 integer_div exec_y_when_autoconstructing () in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()) ())) () ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_yank exec_if () (in3 integer_div exec_y_when_autoconstructing () in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()) ())) () ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (614 614 608 270 608 905 269 929 903 266)
Population mean number of elite cases: 5.99
Count of perfect (error zero) individuals by case: (614 614 608 270 608 905 269 929 903 266)
Population mean number of perfect (error zero) cases: 5.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank exec_if () (in3 integer_div exec_y_when_autoconstructing () in2 exec_s_when_autoconstructing (exec_yankdup integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()) ()))
Errors: [0 0 0 1 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 26
Size: 39
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.014
Median total errors in population: 3
Error averages by case: (0.386 0.386 0.392 0.73 0.392 0.095 0.731 0.071 0.097 0.734)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.194
Average program size in population (points): 38.823
Average percent parens in population: 0.324
Minimum age in population: 52.58239635586506
Maximum age in population: 56.28307319496525
Average age in population: 54.90621215869478
Median age in population: 54.99775024547125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 194
Genome diversity (% unique genomes):	 0.352
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 195
Syntactic diversity (% unique Push programs):	 0.344
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 13051661
--- Timings ---
Current time: 1559583277512 milliseconds
Total Time:          88.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.0 seconds, 72.7%
Fitness Testing:     13.8 seconds, 15.7%
Report:              10.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 38                 
Correct output: -66                 | Program output: -66                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 16                  | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 36                 
Correct output: 13                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 60                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 66                 
Correct output: 19                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: 30                 
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -21                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 48                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 33                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -31                
Correct output: 9                   | Program output: 9                  
Correct output: -100                | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 24                 
Correct output: -80                 | Program output: -36                
Correct output: -23                 | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k})
Lexicase best program: (integer_yank exec_if () (in3 integer_div exec_y_when_autoconstructing () in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush exec_k () ()) ()) ()) ())) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 47
Percent parens: 0.404
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k})
Zero cases best program: (integer_yank exec_if () (in3 integer_div exec_y_when_autoconstructing () in2 exec_s_when_autoconstructing (exec_swap (integer_div boolean_swap) (in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush exec_k () ()) ()) ()) ())) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 47
Percent parens: 0.404
--- Lexicase Population Statistics ---
Count of elite individuals by case: (594 591 512 290 878 347 635 591 513 904)
Population mean number of elite cases: 5.86
Count of perfect (error zero) individuals by case: (594 591 512 290 878 347 635 591 513 904)
Population mean number of perfect (error zero) cases: 5.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank exec_if () (in3 integer_div exec_y_when_autoconstructing () integer_empty exec_s_when_autoconstructing (exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 exec_empty integer_shove integer_min boolean_flush exec_noop) (boolean_shove in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ()) ()))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 33
Size: 48
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 4.145
Median total errors in population: 3
Error averages by case: (0.406 0.409 0.488 0.71 0.122 0.653 0.365 0.409 0.487 0.096)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.639
Average program size in population (points): 38.939
Average percent parens in population: 0.315
Minimum age in population: 53.58239635586506
Maximum age in population: 58.24715778109385
Average age in population: 56.52349419862757
Median age in population: 56.54520717852574
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.01
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 13337455
--- Timings ---
Current time: 1559583279646 milliseconds
Total Time:          90.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.5 seconds, 72.7%
Fitness Testing:     14.1 seconds, 15.6%
Report:              10.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 201
Test mean error for best: 0.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 38                 
Correct output: -66                 | Program output: -66                
Correct output: 8                   | Program output: 79                 
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 49                 
Correct output: 4                   | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 48                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 23                 
Correct output: 14                  | Program output: 94                 
Correct output: 36                  | Program output: 39                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 54                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -39                
Correct output: -86                 | Program output: -78                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -85                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -20                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -17                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 9                  
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -2                 
Correct output: 92                  | Program output: 95                 
Correct output: 16                  | Program output: 16                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: 18                 
Correct output: -62                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_yank exec_if () (integer_yank) exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 exec_empty integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_yank exec_if () (integer_yank) exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 exec_empty integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 283 908 683 284 950 909 285 904 735)
Population mean number of elite cases: 6.22
Count of perfect (error zero) individuals by case: (284 283 908 683 284 950 909 285 904 735)
Population mean number of perfect (error zero) cases: 6.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k})
Best program: (integer_yank exec_if () (in4 integer_div exec_if () (in3 boolean_swap) in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush exec_k () ()) ()) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 25
Size: 40
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 3.775
Median total errors in population: 4
Error averages by case: (0.716 0.717 0.092 0.317 0.716 0.05 0.091 0.715 0.096 0.265)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.317
Average program size in population (points): 44.482
Average percent parens in population: 0.339
Minimum age in population: 56.14455697766971
Maximum age in population: 59.68156885897042
Average age in population: 57.79368513184452
Median age in population: 57.84488207809773
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 210
Genome diversity (% unique genomes):	 0.423
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.42
Total error diversity:				 0.01
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 13648611
--- Timings ---
Current time: 1559583281770 milliseconds
Total Time:          92.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.1 seconds, 72.7%
Fitness Testing:     14.4 seconds, 15.6%
Report:              10.7 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 67                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 52                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 exec_empty integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 41
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 exec_empty integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 41
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (492 471 798 896 798 870 914 798 450 471)
Population mean number of elite cases: 6.96
Count of perfect (error zero) individuals by case: (492 471 798 896 798 870 914 798 450 471)
Population mean number of perfect (error zero) cases: 6.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing ()) in1 exec_empty integer_shove integer_min boolean_flush exec_noop boolean_shove in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult integer_swap integer_fromboolean exec_yankdup boolean_flush boolean_invert_second_then_and) () ()) ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 31
Size: 42
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 3.042
Median total errors in population: 3
Error averages by case: (0.508 0.529 0.202 0.104 0.202 0.13 0.086 0.202 0.55 0.529)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.927
Average program size in population (points): 38.568
Average percent parens in population: 0.302
Minimum age in population: 57.14455697766971
Maximum age in population: 61.56394787984391
Average age in population: 59.85321382065949
Median age in population: 59.8961824798098
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 243
Genome diversity (% unique genomes):	 0.441
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 248
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.01
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 13939173
--- Timings ---
Current time: 1559583283865 milliseconds
Total Time:          94.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.6 seconds, 72.7%
Fitness Testing:     14.7 seconds, 15.5%
Report:              10.9 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 209
Test mean error for best: 0.20900
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 67                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 52                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult})
Lexicase best program: (exec_k_when_autoconstructing () (exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 exec_empty integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 38
Percent parens: 0.342
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult})
Zero cases best program: (exec_k_when_autoconstructing () (exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 exec_empty integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing () in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) () ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 38
Percent parens: 0.342
--- Lexicase Population Statistics ---
Count of elite individuals by case: (636 637 682 753 757 890 924 889 890 755)
Population mean number of elite cases: 7.81
Count of perfect (error zero) individuals by case: (636 637 682 753 757 890 924 889 890 755)
Population mean number of perfect (error zero) cases: 7.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 2.187
Median total errors in population: 2
Error averages by case: (0.364 0.363 0.318 0.247 0.243 0.11 0.076 0.111 0.11 0.245)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.101
Average program size in population (points): 41.63
Average percent parens in population: 0.300
Minimum age in population: 58.14455697766971
Maximum age in population: 62.97239716375225
Average age in population: 61.2283570804058
Median age in population: 61.28165247242305
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.011
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 14261754
--- Timings ---
Current time: 1559583286530 milliseconds
Total Time:          96.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.1 seconds, 72.7%
Fitness Testing:     15.0 seconds, 15.5%
Report:              11.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 40
Successful program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 43


Auto-simplifying with starting size: 43
step: 0
program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 500
program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 1000
program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 1500
program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 2000
program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 2500
program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 3000
program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 3500
program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 4000
program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 4500
program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 5000
program: (integer_yank exec_if () (in4 integer_div exec_y_when_autoconstructing () in2 exec_y_when_autoconstructing () in1 integer_inc integer_shove integer_min boolean_flush exec_noop) boolean_shove in1 exec_y_when_autoconstructing (in1 exec_empty integer_shove exec_swap (integer_min print_integer boolean_xor exec_rot (integer_mult) (integer_swap integer_fromboolean exec_yankdup exec_y (boolean_flush boolean_invert_second_then_and)) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 209
Test mean error for best: 0.20900
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 38                  | Program output: 56                 
Correct output: -66                 | Program output: -50                
Correct output: 8                   | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: 28                  | Program output: 28                 
Correct output: 83                  | Program output: 83                 
Correct output: 74                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 67                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 21                 
Correct output: 46                  | Program output: 46                 
Correct output: 47                  | Program output: 47                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 33                  | Program output: 33                 
Correct output: 44                  | Program output: 44                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: 26                  | Program output: 26                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -24                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -90                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -57                
Correct output: -86                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -12                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: 9                   | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 46                 
Correct output: -66                 | Program output: -66                
Correct output: -46                 | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: 92                  | Program output: 92                 
Correct output: 16                  | Program output: 52                 
Correct output: -63                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -30                
Correct output: -12                 | Program output: -12                
Correct output: -59                 | Program output: -32                
Correct output: -88                 | Program output: -81                
;;******************************
