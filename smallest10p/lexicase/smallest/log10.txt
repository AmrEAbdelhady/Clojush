Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-28 -15 -15 -15] -28] [[29 -100 29 29] -100] [[41 -72 -72 -72] -72] [[-45 -80 -45 -45] -80] [[7 54 7 7] 7] [[32 32 32 -89] -89] [[92 12 12 12] 12] [[32 32 32 -71] -71] [[-53 -97 -97 -97] -97] [[59 59 42 59] 42] [(-81 -81 -81 -81) -81] [(-70 -70 -70 -70) -70] [(-100 -100 -100 -100) -100] [(-57 -57 -57 -57) -57] [(43 43 43 43) 43] [(48 51 23 44) 23] [(27 39 74 54) 27] [(54 0 38 40) 0] [(18 15 1 45) 1] [(63 96 35 59) 35] [(90 98 29 46) 29] [(52 74 1 79) 1] [(89 53 86 3) 3] [(30 81 26 17) 17] [(71 43 51 81) 43] [(12 99 11 4) 4] [(62 61 53 66) 53] [(92 80 59 85) 59] [(7 75 55 40) 7] [(57 27 1 73) 1] [(97 25 54 65) 25] [(95 55 18 91) 18] [(2 31 80 76) 2] [(88 96 82 70) 70] [(83 60 95 87) 60] [(40 -36 -34 -80) -80] [(-31 -30 -76 -9) -76] [(37 -45 -18 4) -45] [(52 30 -14 -16) -16] [(-58 60 51 18) -58] [(-60 28 94 58) -60] [(30 -9 -16 -64) -64] [(62 -66 93 -46) -66] [(-8 71 7 3) -8] [(-60 -87 83 -52) -87] [(-22 40 73 -1) -22] [(-22 -98 -18 -46) -98] [(-72 -83 88 89) -83] [(-95 91 -89 27) -95] [(-3 78 61 -93) -93] [(-37 -83 -54 97) -83] [(-96 -66 31 23) -96] [(-51 1 -49 -79) -79] [(-9 -83 75 61) -83] [(-87 14 -5 42) -87] [(56 66 -22 61) -22] [(54 77 -16 -28) -28] [(-92 12 -60 -52) -92] [(77 38 58 -81) -81] [(84 83 33 -65) -65] [(67 -12 -97 -50) -97] [(53 51 10 73) 10] [(-62 -75 -66 21) -75] [(-81 -8 83 -31) -81] [(92 44 -48 -59) -59] [(7 79 79 -93) -93] [(70 -57 39 5) -57] [(-27 75 -14 -12) -27] [(84 84 58 9) 9] [(-57 -21 76 47) -57] [(-86 35 -53 -59) -86] [(69 -46 30 -55) -55] [(-33 -38 74 -99) -99] [(-46 -69 -99 71) -99] [(-31 -73 -10 -30) -73] [(25 -2 15 41) -2] [(11 -53 -66 35) -66] [(-88 86 -15 -41) -88] [(-78 -32 -30 97) -78] [(-32 79 -88 79) -88] [(-100 -59 96 6) -100] [(0 15 -58 65) -58] [(-20 -32 -90 54) -90] [(-79 74 30 63) -79] [(19 -26 84 84) -26] [(94 11 42 81) 11] [(-92 -94 -57 -29) -94] [(11 -34 92 -95) -95] [(59 -37 72 -46) -46] [(-4 85 36 64) -4] [(50 94 34 91) 34] [(71 27 -100 28) -100] [(-17 62 -88 52) -88] [(-54 -4 -68 60) -68] [(-70 64 50 -90) -90])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-28 -15 -15 -15] -28]
Train Case:   6 | Input/Output: [[29 -100 29 29] -100]
Train Case:   7 | Input/Output: [[41 -72 -72 -72] -72]
Train Case:   8 | Input/Output: [[-45 -80 -45 -45] -80]
Train Case:   9 | Input/Output: [[7 54 7 7] 7]
Train Case:  10 | Input/Output: [[32 32 32 -89] -89]
Train Case:  11 | Input/Output: [[92 12 12 12] 12]
Train Case:  12 | Input/Output: [[32 32 32 -71] -71]
Train Case:  13 | Input/Output: [[-53 -97 -97 -97] -97]
Train Case:  14 | Input/Output: [[59 59 42 59] 42]
Train Case:  15 | Input/Output: [(-81 -81 -81 -81) -81]
Train Case:  16 | Input/Output: [(-70 -70 -70 -70) -70]
Train Case:  17 | Input/Output: [(-100 -100 -100 -100) -100]
Train Case:  18 | Input/Output: [(-57 -57 -57 -57) -57]
Train Case:  19 | Input/Output: [(43 43 43 43) 43]
Train Case:  20 | Input/Output: [(48 51 23 44) 23]
Train Case:  21 | Input/Output: [(27 39 74 54) 27]
Train Case:  22 | Input/Output: [(54 0 38 40) 0]
Train Case:  23 | Input/Output: [(18 15 1 45) 1]
Train Case:  24 | Input/Output: [(63 96 35 59) 35]
Train Case:  25 | Input/Output: [(90 98 29 46) 29]
Train Case:  26 | Input/Output: [(52 74 1 79) 1]
Train Case:  27 | Input/Output: [(89 53 86 3) 3]
Train Case:  28 | Input/Output: [(30 81 26 17) 17]
Train Case:  29 | Input/Output: [(71 43 51 81) 43]
Train Case:  30 | Input/Output: [(12 99 11 4) 4]
Train Case:  31 | Input/Output: [(62 61 53 66) 53]
Train Case:  32 | Input/Output: [(92 80 59 85) 59]
Train Case:  33 | Input/Output: [(7 75 55 40) 7]
Train Case:  34 | Input/Output: [(57 27 1 73) 1]
Train Case:  35 | Input/Output: [(97 25 54 65) 25]
Train Case:  36 | Input/Output: [(95 55 18 91) 18]
Train Case:  37 | Input/Output: [(2 31 80 76) 2]
Train Case:  38 | Input/Output: [(88 96 82 70) 70]
Train Case:  39 | Input/Output: [(83 60 95 87) 60]
Train Case:  40 | Input/Output: [(40 -36 -34 -80) -80]
Train Case:  41 | Input/Output: [(-31 -30 -76 -9) -76]
Train Case:  42 | Input/Output: [(37 -45 -18 4) -45]
Train Case:  43 | Input/Output: [(52 30 -14 -16) -16]
Train Case:  44 | Input/Output: [(-58 60 51 18) -58]
Train Case:  45 | Input/Output: [(-60 28 94 58) -60]
Train Case:  46 | Input/Output: [(30 -9 -16 -64) -64]
Train Case:  47 | Input/Output: [(62 -66 93 -46) -66]
Train Case:  48 | Input/Output: [(-8 71 7 3) -8]
Train Case:  49 | Input/Output: [(-60 -87 83 -52) -87]
Train Case:  50 | Input/Output: [(-22 40 73 -1) -22]
Train Case:  51 | Input/Output: [(-22 -98 -18 -46) -98]
Train Case:  52 | Input/Output: [(-72 -83 88 89) -83]
Train Case:  53 | Input/Output: [(-95 91 -89 27) -95]
Train Case:  54 | Input/Output: [(-3 78 61 -93) -93]
Train Case:  55 | Input/Output: [(-37 -83 -54 97) -83]
Train Case:  56 | Input/Output: [(-96 -66 31 23) -96]
Train Case:  57 | Input/Output: [(-51 1 -49 -79) -79]
Train Case:  58 | Input/Output: [(-9 -83 75 61) -83]
Train Case:  59 | Input/Output: [(-87 14 -5 42) -87]
Train Case:  60 | Input/Output: [(56 66 -22 61) -22]
Train Case:  61 | Input/Output: [(54 77 -16 -28) -28]
Train Case:  62 | Input/Output: [(-92 12 -60 -52) -92]
Train Case:  63 | Input/Output: [(77 38 58 -81) -81]
Train Case:  64 | Input/Output: [(84 83 33 -65) -65]
Train Case:  65 | Input/Output: [(67 -12 -97 -50) -97]
Train Case:  66 | Input/Output: [(53 51 10 73) 10]
Train Case:  67 | Input/Output: [(-62 -75 -66 21) -75]
Train Case:  68 | Input/Output: [(-81 -8 83 -31) -81]
Train Case:  69 | Input/Output: [(92 44 -48 -59) -59]
Train Case:  70 | Input/Output: [(7 79 79 -93) -93]
Train Case:  71 | Input/Output: [(70 -57 39 5) -57]
Train Case:  72 | Input/Output: [(-27 75 -14 -12) -27]
Train Case:  73 | Input/Output: [(84 84 58 9) 9]
Train Case:  74 | Input/Output: [(-57 -21 76 47) -57]
Train Case:  75 | Input/Output: [(-86 35 -53 -59) -86]
Train Case:  76 | Input/Output: [(69 -46 30 -55) -55]
Train Case:  77 | Input/Output: [(-33 -38 74 -99) -99]
Train Case:  78 | Input/Output: [(-46 -69 -99 71) -99]
Train Case:  79 | Input/Output: [(-31 -73 -10 -30) -73]
Train Case:  80 | Input/Output: [(25 -2 15 41) -2]
Train Case:  81 | Input/Output: [(11 -53 -66 35) -66]
Train Case:  82 | Input/Output: [(-88 86 -15 -41) -88]
Train Case:  83 | Input/Output: [(-78 -32 -30 97) -78]
Train Case:  84 | Input/Output: [(-32 79 -88 79) -88]
Train Case:  85 | Input/Output: [(-100 -59 96 6) -100]
Train Case:  86 | Input/Output: [(0 15 -58 65) -58]
Train Case:  87 | Input/Output: [(-20 -32 -90 54) -90]
Train Case:  88 | Input/Output: [(-79 74 30 63) -79]
Train Case:  89 | Input/Output: [(19 -26 84 84) -26]
Train Case:  90 | Input/Output: [(94 11 42 81) 11]
Train Case:  91 | Input/Output: [(-92 -94 -57 -29) -94]
Train Case:  92 | Input/Output: [(11 -34 92 -95) -95]
Train Case:  93 | Input/Output: [(59 -37 72 -46) -46]
Train Case:  94 | Input/Output: [(-4 85 36 64) -4]
Train Case:  95 | Input/Output: [(50 94 34 91) 34]
Train Case:  96 | Input/Output: [(71 27 -100 28) -100]
Train Case:  97 | Input/Output: [(-17 62 -88 52) -88]
Train Case:  98 | Input/Output: [(-54 -4 -68 60) -68]
Train Case:  99 | Input/Output: [(-70 64 50 -90) -90]
Test Case:   0 | Input/Output: [[-24 -91 -24 -24] -91]
Test Case:   1 | Input/Output: [[71 73 73 73] 71]
Test Case:   2 | Input/Output: [[32 32 32 -22] -22]
Test Case:   3 | Input/Output: [[94 94 -95 94] -95]
Test Case:   4 | Input/Output: [[-77 -50 -50 -50] -77]
Test Case:   5 | Input/Output: [[80 80 80 51] 51]
Test Case:   6 | Input/Output: [[20 20 -64 20] -64]
Test Case:   7 | Input/Output: [[-90 -90 -1 -90] -90]
Test Case:   8 | Input/Output: [[-27 -27 48 -27] -27]
Test Case:   9 | Input/Output: [[-76 -76 -76 82] -76]
Test Case:  10 | Input/Output: [[72 72 3 72] 3]
Test Case:  11 | Input/Output: [[-1 -25 -1 -1] -25]
Test Case:  12 | Input/Output: [[81 -70 81 81] -70]
Test Case:  13 | Input/Output: [[-80 -38 -80 -80] -80]
Test Case:  14 | Input/Output: [[4 4 4 -58] -58]
Test Case:  15 | Input/Output: [[99 49 99 99] 49]
Test Case:  16 | Input/Output: [[52 37 37 37] 37]
Test Case:  17 | Input/Output: [[-33 -80 -80 -80] -80]
Test Case:  18 | Input/Output: [[-13 -13 -42 -13] -42]
Test Case:  19 | Input/Output: [[-88 78 -88 -88] -88]
Test Case:  20 | Input/Output: [[1 76 1 1] 1]
Test Case:  21 | Input/Output: [[83 -81 83 83] -81]
Test Case:  22 | Input/Output: [[53 39 53 53] 39]
Test Case:  23 | Input/Output: [[-88 -79 -79 -79] -88]
Test Case:  24 | Input/Output: [[-43 18 18 18] -43]
Test Case:  25 | Input/Output: [[15 15 -17 15] -17]
Test Case:  26 | Input/Output: [[-49 -64 -49 -49] -64]
Test Case:  27 | Input/Output: [[44 84 84 84] 44]
Test Case:  28 | Input/Output: [[-26 -26 -65 -26] -65]
Test Case:  29 | Input/Output: [[95 71 71 71] 71]
Test Case:  30 | Input/Output: [[99 -66 99 99] -66]
Test Case:  31 | Input/Output: [[77 77 -62 77] -62]
Test Case:  32 | Input/Output: [[-89 -49 -89 -89] -89]
Test Case:  33 | Input/Output: [[98 98 98 34] 34]
Test Case:  34 | Input/Output: [[-45 44 -45 -45] -45]
Test Case:  35 | Input/Output: [[41 22 41 41] 22]
Test Case:  36 | Input/Output: [[99 99 -12 99] -12]
Test Case:  37 | Input/Output: [[26 26 26 44] 26]
Test Case:  38 | Input/Output: [[82 82 92 82] 82]
Test Case:  39 | Input/Output: [[-16 -16 -16 78] -16]
Test Case:  40 | Input/Output: [[-79 -84 -79 -79] -84]
Test Case:  41 | Input/Output: [[-85 -85 -85 -82] -85]
Test Case:  42 | Input/Output: [[35 -63 35 35] -63]
Test Case:  43 | Input/Output: [[-64 -64 -30 -64] -64]
Test Case:  44 | Input/Output: [[38 -35 -35 -35] -35]
Test Case:  45 | Input/Output: [[60 -62 -62 -62] -62]
Test Case:  46 | Input/Output: [[-3 -3 -46 -3] -46]
Test Case:  47 | Input/Output: [[84 -9 84 84] -9]
Test Case:  48 | Input/Output: [[-94 -94 -94 -19] -94]
Test Case:  49 | Input/Output: [[23 -83 23 23] -83]
Test Case:  50 | Input/Output: [[-80 -89 -80 -80] -89]
Test Case:  51 | Input/Output: [[89 89 -82 89] -82]
Test Case:  52 | Input/Output: [[-65 95 -65 -65] -65]
Test Case:  53 | Input/Output: [[-21 -21 -21 -55] -55]
Test Case:  54 | Input/Output: [[93 93 98 93] 93]
Test Case:  55 | Input/Output: [[9 9 1 9] 1]
Test Case:  56 | Input/Output: [[-52 -4 -4 -4] -52]
Test Case:  57 | Input/Output: [[10 -6 10 10] -6]
Test Case:  58 | Input/Output: [[80 -78 -78 -78] -78]
Test Case:  59 | Input/Output: [[-31 38 38 38] -31]
Test Case:  60 | Input/Output: [[-91 -2 -2 -2] -91]
Test Case:  61 | Input/Output: [[15 -8 15 15] -8]
Test Case:  62 | Input/Output: [[-1 -1 -61 -1] -61]
Test Case:  63 | Input/Output: [[-30 -30 -84 -30] -84]
Test Case:  64 | Input/Output: [[83 74 74 74] 74]
Test Case:  65 | Input/Output: [[54 54 92 54] 54]
Test Case:  66 | Input/Output: [[97 -35 -35 -35] -35]
Test Case:  67 | Input/Output: [[80 80 80 -95] -95]
Test Case:  68 | Input/Output: [[-44 -44 -44 71] -44]
Test Case:  69 | Input/Output: [[-36 -36 -100 -36] -100]
Test Case:  70 | Input/Output: [[73 73 73 94] 73]
Test Case:  71 | Input/Output: [[-34 87 -34 -34] -34]
Test Case:  72 | Input/Output: [[77 65 77 77] 65]
Test Case:  73 | Input/Output: [[-27 73 73 73] -27]
Test Case:  74 | Input/Output: [[-73 42 42 42] -73]
Test Case:  75 | Input/Output: [[-21 -21 -44 -21] -44]
Test Case:  76 | Input/Output: [[93 7 7 7] 7]
Test Case:  77 | Input/Output: [[-35 -68 -68 -68] -68]
Test Case:  78 | Input/Output: [[-7 -7 -7 35] -7]
Test Case:  79 | Input/Output: [[13 13 14 13] 13]
Test Case:  80 | Input/Output: [[-93 26 26 26] -93]
Test Case:  81 | Input/Output: [[98 98 98 80] 80]
Test Case:  82 | Input/Output: [[-95 -56 -56 -56] -95]
Test Case:  83 | Input/Output: [[93 67 93 93] 67]
Test Case:  84 | Input/Output: [[-64 -64 -93 -64] -93]
Test Case:  85 | Input/Output: [[43 -51 -51 -51] -51]
Test Case:  86 | Input/Output: [[-11 -11 -19 -11] -19]
Test Case:  87 | Input/Output: [[-22 -22 38 -22] -22]
Test Case:  88 | Input/Output: [[26 26 26 33] 26]
Test Case:  89 | Input/Output: [[29 29 29 54] 29]
Test Case:  90 | Input/Output: [[36 36 36 -21] -21]
Test Case:  91 | Input/Output: [[94 94 29 94] 29]
Test Case:  92 | Input/Output: [[55 55 55 96] 55]
Test Case:  93 | Input/Output: [[-8 -8 -8 71] -8]
Test Case:  94 | Input/Output: [[46 46 -1 46] -1]
Test Case:  95 | Input/Output: [[55 54 55 55] 54]
Test Case:  96 | Input/Output: [[-14 -27 -14 -14] -27]
Test Case:  97 | Input/Output: [[20 77 20 20] 20]
Test Case:  98 | Input/Output: [[83 50 50 50] 50]
Test Case:  99 | Input/Output: [[40 40 -23 40] -23]
Test Case: 100 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 101 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 102 | Input/Output: [(27 27 27 27) 27]
Test Case: 103 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 104 | Input/Output: [(91 91 91 91) 91]
Test Case: 105 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 106 | Input/Output: [(22 22 22 22) 22]
Test Case: 107 | Input/Output: [(50 50 50 50) 50]
Test Case: 108 | Input/Output: [(67 67 67 67) 67]
Test Case: 109 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 110 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 111 | Input/Output: [(98 98 98 98) 98]
Test Case: 112 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 113 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 114 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 115 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 116 | Input/Output: [(38 38 38 38) 38]
Test Case: 117 | Input/Output: [(2 2 2 2) 2]
Test Case: 118 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 119 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 120 | Input/Output: [(10 10 10 10) 10]
Test Case: 121 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 122 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 123 | Input/Output: [(95 95 95 95) 95]
Test Case: 124 | Input/Output: [(17 17 17 17) 17]
Test Case: 125 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 126 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 127 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 128 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 129 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 130 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 131 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 132 | Input/Output: [(52 52 52 52) 52]
Test Case: 133 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 134 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 135 | Input/Output: [(71 71 71 71) 71]
Test Case: 136 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 137 | Input/Output: [(71 71 71 71) 71]
Test Case: 138 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 139 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 140 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 141 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 142 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 143 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 144 | Input/Output: [(34 34 34 34) 34]
Test Case: 145 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 146 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 147 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 148 | Input/Output: [(51 51 51 51) 51]
Test Case: 149 | Input/Output: [(98 98 98 98) 98]
Test Case: 150 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 151 | Input/Output: [(38 38 38 38) 38]
Test Case: 152 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 153 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 154 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 155 | Input/Output: [(92 92 92 92) 92]
Test Case: 156 | Input/Output: [(81 81 81 81) 81]
Test Case: 157 | Input/Output: [(79 79 79 79) 79]
Test Case: 158 | Input/Output: [(2 2 2 2) 2]
Test Case: 159 | Input/Output: [(44 44 44 44) 44]
Test Case: 160 | Input/Output: [(68 68 68 68) 68]
Test Case: 161 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 162 | Input/Output: [(52 52 52 52) 52]
Test Case: 163 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 164 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 165 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 166 | Input/Output: [(37 37 37 37) 37]
Test Case: 167 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 168 | Input/Output: [(82 82 82 82) 82]
Test Case: 169 | Input/Output: [(25 25 25 25) 25]
Test Case: 170 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 171 | Input/Output: [(46 46 46 46) 46]
Test Case: 172 | Input/Output: [(19 19 19 19) 19]
Test Case: 173 | Input/Output: [(5 5 5 5) 5]
Test Case: 174 | Input/Output: [(3 3 3 3) 3]
Test Case: 175 | Input/Output: [(54 54 54 54) 54]
Test Case: 176 | Input/Output: [(2 2 2 2) 2]
Test Case: 177 | Input/Output: [(55 55 55 55) 55]
Test Case: 178 | Input/Output: [(12 12 12 12) 12]
Test Case: 179 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 180 | Input/Output: [(71 71 71 71) 71]
Test Case: 181 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 182 | Input/Output: [(79 79 79 79) 79]
Test Case: 183 | Input/Output: [(67 67 67 67) 67]
Test Case: 184 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 185 | Input/Output: [(45 45 45 45) 45]
Test Case: 186 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 187 | Input/Output: [(2 2 2 2) 2]
Test Case: 188 | Input/Output: [(23 23 23 23) 23]
Test Case: 189 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 190 | Input/Output: [(30 30 30 30) 30]
Test Case: 191 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 192 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 193 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 194 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 195 | Input/Output: [(59 59 59 59) 59]
Test Case: 196 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 197 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 198 | Input/Output: [(77 77 77 77) 77]
Test Case: 199 | Input/Output: [(25 25 25 25) 25]
Test Case: 200 | Input/Output: [(35 50 65 87) 35]
Test Case: 201 | Input/Output: [(97 94 32 43) 32]
Test Case: 202 | Input/Output: [(46 90 40 50) 40]
Test Case: 203 | Input/Output: [(10 53 13 95) 10]
Test Case: 204 | Input/Output: [(40 72 40 66) 40]
Test Case: 205 | Input/Output: [(76 5 54 9) 5]
Test Case: 206 | Input/Output: [(83 80 93 66) 66]
Test Case: 207 | Input/Output: [(78 72 93 29) 29]
Test Case: 208 | Input/Output: [(63 9 18 58) 9]
Test Case: 209 | Input/Output: [(7 12 15 24) 7]
Test Case: 210 | Input/Output: [(36 59 2 30) 2]
Test Case: 211 | Input/Output: [(50 22 52 76) 22]
Test Case: 212 | Input/Output: [(30 57 0 47) 0]
Test Case: 213 | Input/Output: [(41 41 69 38) 38]
Test Case: 214 | Input/Output: [(65 79 76 20) 20]
Test Case: 215 | Input/Output: [(83 42 13 10) 10]
Test Case: 216 | Input/Output: [(24 61 87 54) 24]
Test Case: 217 | Input/Output: [(59 84 25 54) 25]
Test Case: 218 | Input/Output: [(9 27 22 79) 9]
Test Case: 219 | Input/Output: [(39 14 76 85) 14]
Test Case: 220 | Input/Output: [(59 36 44 39) 36]
Test Case: 221 | Input/Output: [(37 67 32 60) 32]
Test Case: 222 | Input/Output: [(19 37 83 96) 19]
Test Case: 223 | Input/Output: [(77 81 79 60) 60]
Test Case: 224 | Input/Output: [(59 87 29 90) 29]
Test Case: 225 | Input/Output: [(34 8 15 11) 8]
Test Case: 226 | Input/Output: [(8 36 13 5) 5]
Test Case: 227 | Input/Output: [(41 41 16 77) 16]
Test Case: 228 | Input/Output: [(5 88 80 66) 5]
Test Case: 229 | Input/Output: [(83 50 88 62) 50]
Test Case: 230 | Input/Output: [(95 3 91 8) 3]
Test Case: 231 | Input/Output: [(20 90 95 28) 20]
Test Case: 232 | Input/Output: [(92 86 14 50) 14]
Test Case: 233 | Input/Output: [(48 43 63 27) 27]
Test Case: 234 | Input/Output: [(60 3 64 79) 3]
Test Case: 235 | Input/Output: [(14 1 23 94) 1]
Test Case: 236 | Input/Output: [(34 59 23 46) 23]
Test Case: 237 | Input/Output: [(79 75 48 68) 48]
Test Case: 238 | Input/Output: [(55 16 81 99) 16]
Test Case: 239 | Input/Output: [(72 13 58 71) 13]
Test Case: 240 | Input/Output: [(48 26 85 83) 26]
Test Case: 241 | Input/Output: [(25 93 9 6) 6]
Test Case: 242 | Input/Output: [(64 97 95 25) 25]
Test Case: 243 | Input/Output: [(53 12 70 10) 10]
Test Case: 244 | Input/Output: [(87 44 7 76) 7]
Test Case: 245 | Input/Output: [(99 7 29 61) 7]
Test Case: 246 | Input/Output: [(17 16 5 11) 5]
Test Case: 247 | Input/Output: [(0 2 70 68) 0]
Test Case: 248 | Input/Output: [(58 33 98 90) 33]
Test Case: 249 | Input/Output: [(90 5 87 10) 5]
Test Case: 250 | Input/Output: [(54 77 72 1) 1]
Test Case: 251 | Input/Output: [(91 48 74 74) 48]
Test Case: 252 | Input/Output: [(93 11 52 84) 11]
Test Case: 253 | Input/Output: [(57 5 100 83) 5]
Test Case: 254 | Input/Output: [(1 27 83 32) 1]
Test Case: 255 | Input/Output: [(56 45 34 10) 10]
Test Case: 256 | Input/Output: [(11 36 81 77) 11]
Test Case: 257 | Input/Output: [(94 100 96 11) 11]
Test Case: 258 | Input/Output: [(20 11 79 19) 11]
Test Case: 259 | Input/Output: [(82 19 40 16) 16]
Test Case: 260 | Input/Output: [(15 60 84 91) 15]
Test Case: 261 | Input/Output: [(23 66 97 2) 2]
Test Case: 262 | Input/Output: [(89 30 11 71) 11]
Test Case: 263 | Input/Output: [(85 82 7 100) 7]
Test Case: 264 | Input/Output: [(18 76 27 39) 18]
Test Case: 265 | Input/Output: [(62 59 93 1) 1]
Test Case: 266 | Input/Output: [(50 56 10 48) 10]
Test Case: 267 | Input/Output: [(17 37 99 78) 17]
Test Case: 268 | Input/Output: [(13 98 57 84) 13]
Test Case: 269 | Input/Output: [(81 60 79 72) 60]
Test Case: 270 | Input/Output: [(68 3 27 38) 3]
Test Case: 271 | Input/Output: [(84 78 55 33) 33]
Test Case: 272 | Input/Output: [(9 30 61 36) 9]
Test Case: 273 | Input/Output: [(51 78 30 11) 11]
Test Case: 274 | Input/Output: [(10 62 52 20) 10]
Test Case: 275 | Input/Output: [(56 99 23 2) 2]
Test Case: 276 | Input/Output: [(31 65 77 69) 31]
Test Case: 277 | Input/Output: [(97 76 56 78) 56]
Test Case: 278 | Input/Output: [(34 71 87 22) 22]
Test Case: 279 | Input/Output: [(18 39 26 42) 18]
Test Case: 280 | Input/Output: [(22 75 86 78) 22]
Test Case: 281 | Input/Output: [(21 15 65 37) 15]
Test Case: 282 | Input/Output: [(13 80 0 53) 0]
Test Case: 283 | Input/Output: [(59 2 32 64) 2]
Test Case: 284 | Input/Output: [(63 75 9 64) 9]
Test Case: 285 | Input/Output: [(14 95 77 45) 14]
Test Case: 286 | Input/Output: [(15 16 22 55) 15]
Test Case: 287 | Input/Output: [(50 49 48 63) 48]
Test Case: 288 | Input/Output: [(48 61 91 22) 22]
Test Case: 289 | Input/Output: [(24 6 44 98) 6]
Test Case: 290 | Input/Output: [(22 50 71 42) 22]
Test Case: 291 | Input/Output: [(39 83 32 61) 32]
Test Case: 292 | Input/Output: [(71 33 34 56) 33]
Test Case: 293 | Input/Output: [(89 49 43 91) 43]
Test Case: 294 | Input/Output: [(1 40 44 51) 1]
Test Case: 295 | Input/Output: [(99 41 36 10) 10]
Test Case: 296 | Input/Output: [(92 39 59 6) 6]
Test Case: 297 | Input/Output: [(41 19 11 37) 11]
Test Case: 298 | Input/Output: [(66 97 77 0) 0]
Test Case: 299 | Input/Output: [(60 57 17 53) 17]
Test Case: 300 | Input/Output: [(22 83 36 63) 22]
Test Case: 301 | Input/Output: [(95 30 43 54) 30]
Test Case: 302 | Input/Output: [(16 100 68 27) 16]
Test Case: 303 | Input/Output: [(48 78 25 99) 25]
Test Case: 304 | Input/Output: [(61 90 92 76) 61]
Test Case: 305 | Input/Output: [(31 60 23 30) 23]
Test Case: 306 | Input/Output: [(25 68 24 66) 24]
Test Case: 307 | Input/Output: [(46 81 23 70) 23]
Test Case: 308 | Input/Output: [(5 23 44 89) 5]
Test Case: 309 | Input/Output: [(3 68 89 69) 3]
Test Case: 310 | Input/Output: [(95 20 67 13) 13]
Test Case: 311 | Input/Output: [(94 48 47 20) 20]
Test Case: 312 | Input/Output: [(49 48 72 97) 48]
Test Case: 313 | Input/Output: [(8 35 24 69) 8]
Test Case: 314 | Input/Output: [(0 99 75 83) 0]
Test Case: 315 | Input/Output: [(67 24 76 30) 24]
Test Case: 316 | Input/Output: [(98 85 21 68) 21]
Test Case: 317 | Input/Output: [(21 89 61 73) 21]
Test Case: 318 | Input/Output: [(32 51 53 1) 1]
Test Case: 319 | Input/Output: [(77 86 25 13) 13]
Test Case: 320 | Input/Output: [(87 2 16 74) 2]
Test Case: 321 | Input/Output: [(15 78 45 90) 15]
Test Case: 322 | Input/Output: [(30 81 78 28) 28]
Test Case: 323 | Input/Output: [(89 24 84 29) 24]
Test Case: 324 | Input/Output: [(50 79 81 65) 50]
Test Case: 325 | Input/Output: [(28 20 64 51) 20]
Test Case: 326 | Input/Output: [(76 29 77 67) 29]
Test Case: 327 | Input/Output: [(21 48 20 23) 20]
Test Case: 328 | Input/Output: [(77 96 46 12) 12]
Test Case: 329 | Input/Output: [(57 87 11 90) 11]
Test Case: 330 | Input/Output: [(22 5 42 98) 5]
Test Case: 331 | Input/Output: [(52 88 45 1) 1]
Test Case: 332 | Input/Output: [(80 73 28 39) 28]
Test Case: 333 | Input/Output: [(16 98 5 9) 5]
Test Case: 334 | Input/Output: [(75 87 71 92) 71]
Test Case: 335 | Input/Output: [(42 72 35 69) 35]
Test Case: 336 | Input/Output: [(32 41 55 64) 32]
Test Case: 337 | Input/Output: [(83 94 23 79) 23]
Test Case: 338 | Input/Output: [(74 67 32 92) 32]
Test Case: 339 | Input/Output: [(91 88 60 16) 16]
Test Case: 340 | Input/Output: [(87 41 61 75) 41]
Test Case: 341 | Input/Output: [(42 10 61 14) 10]
Test Case: 342 | Input/Output: [(46 99 20 71) 20]
Test Case: 343 | Input/Output: [(76 95 97 86) 76]
Test Case: 344 | Input/Output: [(35 60 35 67) 35]
Test Case: 345 | Input/Output: [(21 58 27 75) 21]
Test Case: 346 | Input/Output: [(34 79 77 66) 34]
Test Case: 347 | Input/Output: [(25 59 13 12) 12]
Test Case: 348 | Input/Output: [(19 74 30 38) 19]
Test Case: 349 | Input/Output: [(100 92 38 8) 8]
Test Case: 350 | Input/Output: [(67 33 16 72) 16]
Test Case: 351 | Input/Output: [(100 92 29 27) 27]
Test Case: 352 | Input/Output: [(72 64 11 72) 11]
Test Case: 353 | Input/Output: [(3 68 44 6) 3]
Test Case: 354 | Input/Output: [(98 33 93 83) 33]
Test Case: 355 | Input/Output: [(95 19 68 89) 19]
Test Case: 356 | Input/Output: [(97 93 51 15) 15]
Test Case: 357 | Input/Output: [(46 41 7 65) 7]
Test Case: 358 | Input/Output: [(49 21 6 24) 6]
Test Case: 359 | Input/Output: [(40 40 100 92) 40]
Test Case: 360 | Input/Output: [(25 94 87 87) 25]
Test Case: 361 | Input/Output: [(4 65 77 34) 4]
Test Case: 362 | Input/Output: [(56 83 26 77) 26]
Test Case: 363 | Input/Output: [(10 95 50 60) 10]
Test Case: 364 | Input/Output: [(98 55 86 30) 30]
Test Case: 365 | Input/Output: [(75 44 26 2) 2]
Test Case: 366 | Input/Output: [(29 59 4 3) 3]
Test Case: 367 | Input/Output: [(26 88 36 88) 26]
Test Case: 368 | Input/Output: [(6 72 28 66) 6]
Test Case: 369 | Input/Output: [(69 31 43 49) 31]
Test Case: 370 | Input/Output: [(74 39 33 26) 26]
Test Case: 371 | Input/Output: [(46 45 39 82) 39]
Test Case: 372 | Input/Output: [(48 60 96 26) 26]
Test Case: 373 | Input/Output: [(89 32 4 57) 4]
Test Case: 374 | Input/Output: [(62 17 74 34) 17]
Test Case: 375 | Input/Output: [(62 26 67 42) 26]
Test Case: 376 | Input/Output: [(90 9 77 75) 9]
Test Case: 377 | Input/Output: [(45 5 40 23) 5]
Test Case: 378 | Input/Output: [(66 58 52 22) 22]
Test Case: 379 | Input/Output: [(40 39 3 11) 3]
Test Case: 380 | Input/Output: [(6 70 73 95) 6]
Test Case: 381 | Input/Output: [(67 67 4 87) 4]
Test Case: 382 | Input/Output: [(78 7 45 80) 7]
Test Case: 383 | Input/Output: [(96 35 16 46) 16]
Test Case: 384 | Input/Output: [(32 75 54 91) 32]
Test Case: 385 | Input/Output: [(73 18 13 68) 13]
Test Case: 386 | Input/Output: [(91 2 59 32) 2]
Test Case: 387 | Input/Output: [(95 37 10 22) 10]
Test Case: 388 | Input/Output: [(75 23 36 84) 23]
Test Case: 389 | Input/Output: [(34 75 28 22) 22]
Test Case: 390 | Input/Output: [(13 59 77 3) 3]
Test Case: 391 | Input/Output: [(86 47 23 61) 23]
Test Case: 392 | Input/Output: [(14 56 25 31) 14]
Test Case: 393 | Input/Output: [(77 74 79 7) 7]
Test Case: 394 | Input/Output: [(83 70 85 43) 43]
Test Case: 395 | Input/Output: [(27 46 62 42) 27]
Test Case: 396 | Input/Output: [(66 96 58 65) 58]
Test Case: 397 | Input/Output: [(89 71 6 29) 6]
Test Case: 398 | Input/Output: [(97 21 85 95) 21]
Test Case: 399 | Input/Output: [(38 63 52 70) 38]
Test Case: 400 | Input/Output: [(-86 -87 48 -14) -87]
Test Case: 401 | Input/Output: [(87 94 42 61) 42]
Test Case: 402 | Input/Output: [(45 -88 -70 -24) -88]
Test Case: 403 | Input/Output: [(32 65 -87 -92) -92]
Test Case: 404 | Input/Output: [(-76 61 41 -100) -100]
Test Case: 405 | Input/Output: [(-26 -43 2 -42) -43]
Test Case: 406 | Input/Output: [(-79 -5 8 -81) -81]
Test Case: 407 | Input/Output: [(21 53 37 66) 21]
Test Case: 408 | Input/Output: [(50 86 -50 -69) -69]
Test Case: 409 | Input/Output: [(-91 22 88 -19) -91]
Test Case: 410 | Input/Output: [(-92 -79 -92 -43) -92]
Test Case: 411 | Input/Output: [(-3 83 -44 -27) -44]
Test Case: 412 | Input/Output: [(-54 -45 0 -29) -54]
Test Case: 413 | Input/Output: [(-46 24 -38 64) -46]
Test Case: 414 | Input/Output: [(21 43 -72 -84) -84]
Test Case: 415 | Input/Output: [(-78 10 -75 -69) -78]
Test Case: 416 | Input/Output: [(72 33 23 -84) -84]
Test Case: 417 | Input/Output: [(66 65 57 22) 22]
Test Case: 418 | Input/Output: [(63 79 -50 40) -50]
Test Case: 419 | Input/Output: [(0 -37 -89 -84) -89]
Test Case: 420 | Input/Output: [(-97 -18 19 -26) -97]
Test Case: 421 | Input/Output: [(-50 53 -68 89) -68]
Test Case: 422 | Input/Output: [(44 -66 -32 10) -66]
Test Case: 423 | Input/Output: [(-2 -48 -85 97) -85]
Test Case: 424 | Input/Output: [(-8 -24 33 -88) -88]
Test Case: 425 | Input/Output: [(37 -74 -24 59) -74]
Test Case: 426 | Input/Output: [(-35 77 11 15) -35]
Test Case: 427 | Input/Output: [(-99 25 -39 22) -99]
Test Case: 428 | Input/Output: [(-10 -69 -99 -88) -99]
Test Case: 429 | Input/Output: [(-3 48 -36 41) -36]
Test Case: 430 | Input/Output: [(-59 57 31 -43) -59]
Test Case: 431 | Input/Output: [(-3 65 -11 -52) -52]
Test Case: 432 | Input/Output: [(12 16 -89 -6) -89]
Test Case: 433 | Input/Output: [(-20 -17 -10 -52) -52]
Test Case: 434 | Input/Output: [(2 27 23 -34) -34]
Test Case: 435 | Input/Output: [(73 57 -10 42) -10]
Test Case: 436 | Input/Output: [(3 40 -62 -48) -62]
Test Case: 437 | Input/Output: [(-80 44 -61 85) -80]
Test Case: 438 | Input/Output: [(-55 85 61 20) -55]
Test Case: 439 | Input/Output: [(-27 -2 -90 -47) -90]
Test Case: 440 | Input/Output: [(25 -63 -51 74) -63]
Test Case: 441 | Input/Output: [(55 -25 44 -8) -25]
Test Case: 442 | Input/Output: [(32 -75 51 -38) -75]
Test Case: 443 | Input/Output: [(57 12 -10 -53) -53]
Test Case: 444 | Input/Output: [(65 -81 -45 -84) -84]
Test Case: 445 | Input/Output: [(40 -57 76 -37) -57]
Test Case: 446 | Input/Output: [(-22 62 -57 -90) -90]
Test Case: 447 | Input/Output: [(-54 2 -13 -2) -54]
Test Case: 448 | Input/Output: [(-80 19 62 -85) -85]
Test Case: 449 | Input/Output: [(-67 52 -12 100) -67]
Test Case: 450 | Input/Output: [(-33 -47 -12 -77) -77]
Test Case: 451 | Input/Output: [(43 7 -13 88) -13]
Test Case: 452 | Input/Output: [(-49 -71 85 41) -71]
Test Case: 453 | Input/Output: [(13 84 -39 95) -39]
Test Case: 454 | Input/Output: [(43 -30 30 46) -30]
Test Case: 455 | Input/Output: [(97 -18 26 -25) -25]
Test Case: 456 | Input/Output: [(98 -36 38 49) -36]
Test Case: 457 | Input/Output: [(-94 63 -5 -69) -94]
Test Case: 458 | Input/Output: [(31 91 37 -5) -5]
Test Case: 459 | Input/Output: [(-38 29 98 44) -38]
Test Case: 460 | Input/Output: [(79 56 -58 65) -58]
Test Case: 461 | Input/Output: [(23 54 88 8) 8]
Test Case: 462 | Input/Output: [(61 26 -77 97) -77]
Test Case: 463 | Input/Output: [(96 -80 -41 -43) -80]
Test Case: 464 | Input/Output: [(-62 51 28 33) -62]
Test Case: 465 | Input/Output: [(-44 -47 -69 -31) -69]
Test Case: 466 | Input/Output: [(-23 8 2 56) -23]
Test Case: 467 | Input/Output: [(30 95 -3 -94) -94]
Test Case: 468 | Input/Output: [(-3 69 -80 -1) -80]
Test Case: 469 | Input/Output: [(-20 70 -2 -40) -40]
Test Case: 470 | Input/Output: [(25 63 -66 -79) -79]
Test Case: 471 | Input/Output: [(-95 -15 12 -97) -97]
Test Case: 472 | Input/Output: [(98 -43 4 63) -43]
Test Case: 473 | Input/Output: [(-74 -83 56 -50) -83]
Test Case: 474 | Input/Output: [(-40 -2 -16 58) -40]
Test Case: 475 | Input/Output: [(45 -48 -100 -7) -100]
Test Case: 476 | Input/Output: [(-6 -88 33 88) -88]
Test Case: 477 | Input/Output: [(7 -30 66 -60) -60]
Test Case: 478 | Input/Output: [(72 31 -95 80) -95]
Test Case: 479 | Input/Output: [(-8 -75 -66 -83) -83]
Test Case: 480 | Input/Output: [(65 -83 -39 -52) -83]
Test Case: 481 | Input/Output: [(-22 -73 91 -28) -73]
Test Case: 482 | Input/Output: [(78 68 21 72) 21]
Test Case: 483 | Input/Output: [(3 -83 -34 0) -83]
Test Case: 484 | Input/Output: [(57 -50 31 28) -50]
Test Case: 485 | Input/Output: [(-59 93 -83 34) -83]
Test Case: 486 | Input/Output: [(40 75 -44 1) -44]
Test Case: 487 | Input/Output: [(58 53 49 71) 49]
Test Case: 488 | Input/Output: [(6 18 -36 -94) -94]
Test Case: 489 | Input/Output: [(6 -42 42 96) -42]
Test Case: 490 | Input/Output: [(-47 -31 28 -77) -77]
Test Case: 491 | Input/Output: [(98 -2 -5 40) -5]
Test Case: 492 | Input/Output: [(31 26 -65 0) -65]
Test Case: 493 | Input/Output: [(-80 93 -71 69) -80]
Test Case: 494 | Input/Output: [(55 80 5 -38) -38]
Test Case: 495 | Input/Output: [(-35 -19 35 -9) -35]
Test Case: 496 | Input/Output: [(-12 -63 -33 -10) -63]
Test Case: 497 | Input/Output: [(90 94 83 -87) -87]
Test Case: 498 | Input/Output: [(82 85 -63 -32) -63]
Test Case: 499 | Input/Output: [(-11 82 82 -35) -35]
Test Case: 500 | Input/Output: [(-46 23 -44 47) -46]
Test Case: 501 | Input/Output: [(-3 -77 28 -67) -77]
Test Case: 502 | Input/Output: [(-73 83 -90 -100) -100]
Test Case: 503 | Input/Output: [(8 35 24 0) 0]
Test Case: 504 | Input/Output: [(-63 86 34 35) -63]
Test Case: 505 | Input/Output: [(15 68 48 89) 15]
Test Case: 506 | Input/Output: [(74 48 -46 94) -46]
Test Case: 507 | Input/Output: [(-73 -43 -17 75) -73]
Test Case: 508 | Input/Output: [(5 -48 17 -14) -48]
Test Case: 509 | Input/Output: [(80 -31 -61 -65) -65]
Test Case: 510 | Input/Output: [(-14 -32 -23 12) -32]
Test Case: 511 | Input/Output: [(20 -16 12 19) -16]
Test Case: 512 | Input/Output: [(22 -27 -69 -30) -69]
Test Case: 513 | Input/Output: [(-22 -69 30 96) -69]
Test Case: 514 | Input/Output: [(32 4 -24 -44) -44]
Test Case: 515 | Input/Output: [(-49 14 95 -40) -49]
Test Case: 516 | Input/Output: [(-39 -45 -5 -60) -60]
Test Case: 517 | Input/Output: [(-19 3 -99 -64) -99]
Test Case: 518 | Input/Output: [(79 -44 50 34) -44]
Test Case: 519 | Input/Output: [(-48 -77 -36 -37) -77]
Test Case: 520 | Input/Output: [(7 -95 -25 -26) -95]
Test Case: 521 | Input/Output: [(-39 36 -80 -22) -80]
Test Case: 522 | Input/Output: [(-52 79 15 86) -52]
Test Case: 523 | Input/Output: [(56 99 -40 43) -40]
Test Case: 524 | Input/Output: [(65 14 -57 65) -57]
Test Case: 525 | Input/Output: [(12 76 0 -43) -43]
Test Case: 526 | Input/Output: [(-81 17 35 21) -81]
Test Case: 527 | Input/Output: [(-96 84 -28 -56) -96]
Test Case: 528 | Input/Output: [(-16 87 -76 -16) -76]
Test Case: 529 | Input/Output: [(100 -70 87 -72) -72]
Test Case: 530 | Input/Output: [(91 66 -84 12) -84]
Test Case: 531 | Input/Output: [(43 -80 -49 -14) -80]
Test Case: 532 | Input/Output: [(-7 -10 -9 19) -10]
Test Case: 533 | Input/Output: [(90 50 79 24) 24]
Test Case: 534 | Input/Output: [(56 59 -80 -3) -80]
Test Case: 535 | Input/Output: [(6 -89 -95 -7) -95]
Test Case: 536 | Input/Output: [(28 -71 59 -100) -100]
Test Case: 537 | Input/Output: [(-54 -100 -98 35) -100]
Test Case: 538 | Input/Output: [(69 -88 -8 83) -88]
Test Case: 539 | Input/Output: [(-25 -32 26 -60) -60]
Test Case: 540 | Input/Output: [(-61 53 -66 69) -66]
Test Case: 541 | Input/Output: [(-92 54 34 16) -92]
Test Case: 542 | Input/Output: [(-86 -11 -71 -44) -86]
Test Case: 543 | Input/Output: [(-48 -35 68 38) -48]
Test Case: 544 | Input/Output: [(-24 37 39 55) -24]
Test Case: 545 | Input/Output: [(-54 12 14 -90) -90]
Test Case: 546 | Input/Output: [(-2 -62 -19 -38) -62]
Test Case: 547 | Input/Output: [(49 -30 -26 -19) -30]
Test Case: 548 | Input/Output: [(-36 -98 -89 -7) -98]
Test Case: 549 | Input/Output: [(6 -98 -75 -16) -98]
Test Case: 550 | Input/Output: [(77 -28 92 -46) -46]
Test Case: 551 | Input/Output: [(-5 57 47 83) -5]
Test Case: 552 | Input/Output: [(21 -32 -79 -77) -79]
Test Case: 553 | Input/Output: [(-13 92 -72 27) -72]
Test Case: 554 | Input/Output: [(20 -72 14 -55) -72]
Test Case: 555 | Input/Output: [(44 -39 23 11) -39]
Test Case: 556 | Input/Output: [(12 80 35 96) 12]
Test Case: 557 | Input/Output: [(84 17 -73 -88) -88]
Test Case: 558 | Input/Output: [(-17 -82 -93 32) -93]
Test Case: 559 | Input/Output: [(-89 40 65 91) -89]
Test Case: 560 | Input/Output: [(63 -62 -67 31) -67]
Test Case: 561 | Input/Output: [(70 -28 66 -66) -66]
Test Case: 562 | Input/Output: [(-63 80 -96 -67) -96]
Test Case: 563 | Input/Output: [(83 21 78 72) 21]
Test Case: 564 | Input/Output: [(93 -53 16 -23) -53]
Test Case: 565 | Input/Output: [(28 90 58 97) 28]
Test Case: 566 | Input/Output: [(42 55 -60 -75) -75]
Test Case: 567 | Input/Output: [(-15 73 33 -16) -16]
Test Case: 568 | Input/Output: [(27 51 -45 94) -45]
Test Case: 569 | Input/Output: [(61 73 49 98) 49]
Test Case: 570 | Input/Output: [(95 6 -32 81) -32]
Test Case: 571 | Input/Output: [(60 59 60 63) 59]
Test Case: 572 | Input/Output: [(-73 -82 86 -71) -82]
Test Case: 573 | Input/Output: [(-31 -58 -28 15) -58]
Test Case: 574 | Input/Output: [(76 16 70 56) 16]
Test Case: 575 | Input/Output: [(-28 90 70 -17) -28]
Test Case: 576 | Input/Output: [(16 -28 99 29) -28]
Test Case: 577 | Input/Output: [(-58 69 47 -95) -95]
Test Case: 578 | Input/Output: [(-58 79 96 100) -58]
Test Case: 579 | Input/Output: [(66 51 80 59) 51]
Test Case: 580 | Input/Output: [(-85 78 -60 66) -85]
Test Case: 581 | Input/Output: [(17 66 -60 34) -60]
Test Case: 582 | Input/Output: [(1 28 18 74) 1]
Test Case: 583 | Input/Output: [(-87 -78 -4 94) -87]
Test Case: 584 | Input/Output: [(-46 95 -55 -34) -55]
Test Case: 585 | Input/Output: [(60 3 -78 66) -78]
Test Case: 586 | Input/Output: [(-75 -65 -93 -21) -93]
Test Case: 587 | Input/Output: [(-36 -11 92 -65) -65]
Test Case: 588 | Input/Output: [(21 -56 33 36) -56]
Test Case: 589 | Input/Output: [(-77 -26 -44 -85) -85]
Test Case: 590 | Input/Output: [(-90 81 82 -29) -90]
Test Case: 591 | Input/Output: [(24 -64 -7 92) -64]
Test Case: 592 | Input/Output: [(41 77 -6 43) -6]
Test Case: 593 | Input/Output: [(86 -63 -73 -67) -73]
Test Case: 594 | Input/Output: [(-75 48 -25 8) -75]
Test Case: 595 | Input/Output: [(16 -92 -62 -56) -92]
Test Case: 596 | Input/Output: [(86 52 73 -21) -21]
Test Case: 597 | Input/Output: [(-100 -13 6 67) -100]
Test Case: 598 | Input/Output: [(70 -61 33 -42) -61]
Test Case: 599 | Input/Output: [(2 65 21 -84) -84]
Test Case: 600 | Input/Output: [(16 21 77 1) 1]
Test Case: 601 | Input/Output: [(-77 24 19 37) -77]
Test Case: 602 | Input/Output: [(39 -31 -34 -70) -70]
Test Case: 603 | Input/Output: [(16 55 14 -65) -65]
Test Case: 604 | Input/Output: [(12 69 4 1) 1]
Test Case: 605 | Input/Output: [(10 -52 -16 -76) -76]
Test Case: 606 | Input/Output: [(-52 41 83 -85) -85]
Test Case: 607 | Input/Output: [(-48 44 -73 -81) -81]
Test Case: 608 | Input/Output: [(90 -36 -8 -93) -93]
Test Case: 609 | Input/Output: [(17 80 6 47) 6]
Test Case: 610 | Input/Output: [(33 32 -11 6) -11]
Test Case: 611 | Input/Output: [(-49 18 21 -67) -67]
Test Case: 612 | Input/Output: [(13 -88 14 58) -88]
Test Case: 613 | Input/Output: [(-51 -66 66 48) -66]
Test Case: 614 | Input/Output: [(-31 -85 13 14) -85]
Test Case: 615 | Input/Output: [(80 -54 63 -41) -54]
Test Case: 616 | Input/Output: [(-54 -58 94 95) -58]
Test Case: 617 | Input/Output: [(59 -11 -21 68) -21]
Test Case: 618 | Input/Output: [(-56 -30 -48 -57) -57]
Test Case: 619 | Input/Output: [(-100 -47 5 -51) -100]
Test Case: 620 | Input/Output: [(-99 -57 79 92) -99]
Test Case: 621 | Input/Output: [(58 -30 -25 42) -30]
Test Case: 622 | Input/Output: [(-9 89 55 77) -9]
Test Case: 623 | Input/Output: [(94 7 24 48) 7]
Test Case: 624 | Input/Output: [(69 66 -44 87) -44]
Test Case: 625 | Input/Output: [(46 56 37 37) 37]
Test Case: 626 | Input/Output: [(-12 15 51 -19) -19]
Test Case: 627 | Input/Output: [(42 29 72 76) 29]
Test Case: 628 | Input/Output: [(55 -43 -50 74) -50]
Test Case: 629 | Input/Output: [(63 15 -89 -36) -89]
Test Case: 630 | Input/Output: [(-95 -29 26 -42) -95]
Test Case: 631 | Input/Output: [(-80 -49 32 -14) -80]
Test Case: 632 | Input/Output: [(4 -87 -70 50) -87]
Test Case: 633 | Input/Output: [(82 100 -1 78) -1]
Test Case: 634 | Input/Output: [(-40 -7 1 91) -40]
Test Case: 635 | Input/Output: [(91 54 41 -34) -34]
Test Case: 636 | Input/Output: [(64 50 -78 38) -78]
Test Case: 637 | Input/Output: [(45 -24 60 84) -24]
Test Case: 638 | Input/Output: [(-44 82 15 81) -44]
Test Case: 639 | Input/Output: [(16 -10 84 2) -10]
Test Case: 640 | Input/Output: [(98 -53 68 -54) -54]
Test Case: 641 | Input/Output: [(-31 3 -34 -29) -34]
Test Case: 642 | Input/Output: [(-22 84 11 79) -22]
Test Case: 643 | Input/Output: [(44 -94 -57 63) -94]
Test Case: 644 | Input/Output: [(-23 -22 -19 -32) -32]
Test Case: 645 | Input/Output: [(29 -34 96 62) -34]
Test Case: 646 | Input/Output: [(17 -40 22 21) -40]
Test Case: 647 | Input/Output: [(-16 96 70 -45) -45]
Test Case: 648 | Input/Output: [(-100 44 -74 35) -100]
Test Case: 649 | Input/Output: [(-89 71 -61 -77) -89]
Test Case: 650 | Input/Output: [(33 -67 -39 25) -67]
Test Case: 651 | Input/Output: [(-90 13 -32 31) -90]
Test Case: 652 | Input/Output: [(87 -37 -20 47) -37]
Test Case: 653 | Input/Output: [(38 2 54 -81) -81]
Test Case: 654 | Input/Output: [(-61 84 -46 27) -61]
Test Case: 655 | Input/Output: [(-71 -9 -86 -67) -86]
Test Case: 656 | Input/Output: [(-79 -79 -87 -14) -87]
Test Case: 657 | Input/Output: [(-29 -26 -49 -49) -49]
Test Case: 658 | Input/Output: [(70 80 -99 80) -99]
Test Case: 659 | Input/Output: [(55 49 -78 87) -78]
Test Case: 660 | Input/Output: [(-95 -86 29 -75) -95]
Test Case: 661 | Input/Output: [(30 -62 80 2) -62]
Test Case: 662 | Input/Output: [(22 48 -36 28) -36]
Test Case: 663 | Input/Output: [(-22 12 -65 -43) -65]
Test Case: 664 | Input/Output: [(63 -82 97 71) -82]
Test Case: 665 | Input/Output: [(52 -1 -48 75) -48]
Test Case: 666 | Input/Output: [(93 -4 -30 82) -30]
Test Case: 667 | Input/Output: [(-79 67 41 -77) -79]
Test Case: 668 | Input/Output: [(2 -74 -34 100) -74]
Test Case: 669 | Input/Output: [(-35 16 -68 87) -68]
Test Case: 670 | Input/Output: [(-83 11 -90 -34) -90]
Test Case: 671 | Input/Output: [(49 95 21 93) 21]
Test Case: 672 | Input/Output: [(9 26 -42 -99) -99]
Test Case: 673 | Input/Output: [(-13 0 54 48) -13]
Test Case: 674 | Input/Output: [(100 75 -22 78) -22]
Test Case: 675 | Input/Output: [(-90 65 5 16) -90]
Test Case: 676 | Input/Output: [(30 -54 -65 87) -65]
Test Case: 677 | Input/Output: [(-45 -13 54 -43) -45]
Test Case: 678 | Input/Output: [(29 29 52 -5) -5]
Test Case: 679 | Input/Output: [(-4 -32 41 78) -32]
Test Case: 680 | Input/Output: [(46 -70 24 5) -70]
Test Case: 681 | Input/Output: [(-6 99 94 8) -6]
Test Case: 682 | Input/Output: [(-99 -65 -19 -88) -99]
Test Case: 683 | Input/Output: [(97 86 -46 -99) -99]
Test Case: 684 | Input/Output: [(70 27 46 -44) -44]
Test Case: 685 | Input/Output: [(81 -64 66 -44) -64]
Test Case: 686 | Input/Output: [(-61 50 93 -96) -96]
Test Case: 687 | Input/Output: [(-21 -98 -87 29) -98]
Test Case: 688 | Input/Output: [(30 96 -36 3) -36]
Test Case: 689 | Input/Output: [(-35 59 -86 -23) -86]
Test Case: 690 | Input/Output: [(-58 74 -98 -38) -98]
Test Case: 691 | Input/Output: [(89 -5 -28 -26) -28]
Test Case: 692 | Input/Output: [(37 69 5 -80) -80]
Test Case: 693 | Input/Output: [(32 -68 49 62) -68]
Test Case: 694 | Input/Output: [(14 -8 -77 -11) -77]
Test Case: 695 | Input/Output: [(93 -17 -74 -100) -100]
Test Case: 696 | Input/Output: [(-1 89 -55 30) -55]
Test Case: 697 | Input/Output: [(9 32 0 -26) -26]
Test Case: 698 | Input/Output: [(31 -62 -87 99) -87]
Test Case: 699 | Input/Output: [(-82 53 7 -36) -82]
Test Case: 700 | Input/Output: [(-84 61 -54 -36) -84]
Test Case: 701 | Input/Output: [(72 56 -79 25) -79]
Test Case: 702 | Input/Output: [(-29 33 83 78) -29]
Test Case: 703 | Input/Output: [(-33 96 -9 43) -33]
Test Case: 704 | Input/Output: [(55 7 -83 -91) -91]
Test Case: 705 | Input/Output: [(-7 -22 100 92) -22]
Test Case: 706 | Input/Output: [(71 3 -96 0) -96]
Test Case: 707 | Input/Output: [(93 29 -26 -85) -85]
Test Case: 708 | Input/Output: [(45 -44 90 -26) -44]
Test Case: 709 | Input/Output: [(8 -12 31 39) -12]
Test Case: 710 | Input/Output: [(-29 -92 -5 55) -92]
Test Case: 711 | Input/Output: [(-93 -59 -43 -2) -93]
Test Case: 712 | Input/Output: [(-67 -71 95 60) -71]
Test Case: 713 | Input/Output: [(0 -7 43 26) -7]
Test Case: 714 | Input/Output: [(-95 -90 52 -10) -95]
Test Case: 715 | Input/Output: [(-63 -11 -98 58) -98]
Test Case: 716 | Input/Output: [(-83 45 -94 73) -94]
Test Case: 717 | Input/Output: [(-40 -33 26 -65) -65]
Test Case: 718 | Input/Output: [(-92 -60 35 -89) -92]
Test Case: 719 | Input/Output: [(-79 88 80 -91) -91]
Test Case: 720 | Input/Output: [(-56 100 98 85) -56]
Test Case: 721 | Input/Output: [(69 -25 -19 1) -25]
Test Case: 722 | Input/Output: [(-26 46 -39 95) -39]
Test Case: 723 | Input/Output: [(88 31 -33 -2) -33]
Test Case: 724 | Input/Output: [(-59 -66 54 8) -66]
Test Case: 725 | Input/Output: [(70 47 61 57) 47]
Test Case: 726 | Input/Output: [(-88 -60 73 -88) -88]
Test Case: 727 | Input/Output: [(28 -48 -53 75) -53]
Test Case: 728 | Input/Output: [(-11 86 -96 -40) -96]
Test Case: 729 | Input/Output: [(54 -54 -98 15) -98]
Test Case: 730 | Input/Output: [(-69 88 83 -74) -74]
Test Case: 731 | Input/Output: [(-96 80 -55 -19) -96]
Test Case: 732 | Input/Output: [(-63 51 -38 84) -63]
Test Case: 733 | Input/Output: [(24 -30 -66 32) -66]
Test Case: 734 | Input/Output: [(-54 73 -5 89) -54]
Test Case: 735 | Input/Output: [(86 -96 68 -70) -96]
Test Case: 736 | Input/Output: [(-49 24 -89 68) -89]
Test Case: 737 | Input/Output: [(-40 -61 -39 25) -61]
Test Case: 738 | Input/Output: [(-16 20 -8 84) -16]
Test Case: 739 | Input/Output: [(-3 32 -28 -16) -28]
Test Case: 740 | Input/Output: [(9 55 43 -81) -81]
Test Case: 741 | Input/Output: [(65 -21 33 -58) -58]
Test Case: 742 | Input/Output: [(85 -22 -55 68) -55]
Test Case: 743 | Input/Output: [(16 -54 -74 92) -74]
Test Case: 744 | Input/Output: [(57 60 -24 81) -24]
Test Case: 745 | Input/Output: [(-91 -22 -52 29) -91]
Test Case: 746 | Input/Output: [(36 -54 28 -10) -54]
Test Case: 747 | Input/Output: [(-64 -71 30 -25) -71]
Test Case: 748 | Input/Output: [(9 83 86 72) 9]
Test Case: 749 | Input/Output: [(89 86 -65 -47) -65]
Test Case: 750 | Input/Output: [(-77 -33 90 71) -77]
Test Case: 751 | Input/Output: [(73 56 12 -12) -12]
Test Case: 752 | Input/Output: [(99 63 -18 -53) -53]
Test Case: 753 | Input/Output: [(84 -69 76 -90) -90]
Test Case: 754 | Input/Output: [(24 -30 94 -56) -56]
Test Case: 755 | Input/Output: [(59 -45 53 -95) -95]
Test Case: 756 | Input/Output: [(-49 94 71 -57) -57]
Test Case: 757 | Input/Output: [(-69 -24 48 100) -69]
Test Case: 758 | Input/Output: [(100 28 87 76) 28]
Test Case: 759 | Input/Output: [(75 -12 76 19) -12]
Test Case: 760 | Input/Output: [(42 -46 -54 -90) -90]
Test Case: 761 | Input/Output: [(43 90 -13 -33) -33]
Test Case: 762 | Input/Output: [(70 75 83 26) 26]
Test Case: 763 | Input/Output: [(84 -67 -12 53) -67]
Test Case: 764 | Input/Output: [(-71 -98 -82 53) -98]
Test Case: 765 | Input/Output: [(-95 -39 -58 -3) -95]
Test Case: 766 | Input/Output: [(-67 52 -15 -26) -67]
Test Case: 767 | Input/Output: [(-45 31 69 85) -45]
Test Case: 768 | Input/Output: [(42 66 100 83) 42]
Test Case: 769 | Input/Output: [(-7 71 40 -47) -47]
Test Case: 770 | Input/Output: [(69 -41 -48 96) -48]
Test Case: 771 | Input/Output: [(8 -38 -35 -94) -94]
Test Case: 772 | Input/Output: [(-96 22 -74 78) -96]
Test Case: 773 | Input/Output: [(-57 -43 -35 -89) -89]
Test Case: 774 | Input/Output: [(98 23 -13 -64) -64]
Test Case: 775 | Input/Output: [(-1 4 34 33) -1]
Test Case: 776 | Input/Output: [(-63 72 90 -3) -63]
Test Case: 777 | Input/Output: [(41 -79 -48 8) -79]
Test Case: 778 | Input/Output: [(-87 95 -48 22) -87]
Test Case: 779 | Input/Output: [(-19 82 16 82) -19]
Test Case: 780 | Input/Output: [(34 70 51 28) 28]
Test Case: 781 | Input/Output: [(-22 -61 56 -83) -83]
Test Case: 782 | Input/Output: [(-2 13 -22 49) -22]
Test Case: 783 | Input/Output: [(-4 -19 22 55) -19]
Test Case: 784 | Input/Output: [(92 66 -54 -2) -54]
Test Case: 785 | Input/Output: [(-3 51 -91 66) -91]
Test Case: 786 | Input/Output: [(12 4 -6 65) -6]
Test Case: 787 | Input/Output: [(-57 -32 13 62) -57]
Test Case: 788 | Input/Output: [(36 -78 58 -89) -89]
Test Case: 789 | Input/Output: [(24 65 -14 38) -14]
Test Case: 790 | Input/Output: [(81 9 -91 -82) -91]
Test Case: 791 | Input/Output: [(27 6 5 -35) -35]
Test Case: 792 | Input/Output: [(15 -90 -34 74) -90]
Test Case: 793 | Input/Output: [(-77 77 -77 -18) -77]
Test Case: 794 | Input/Output: [(-36 17 50 9) -36]
Test Case: 795 | Input/Output: [(61 7 38 -60) -60]
Test Case: 796 | Input/Output: [(-58 -78 59 -63) -78]
Test Case: 797 | Input/Output: [(-3 34 -69 39) -69]
Test Case: 798 | Input/Output: [(-21 22 76 50) -21]
Test Case: 799 | Input/Output: [(27 -4 54 -92) -92]
Test Case: 800 | Input/Output: [(40 42 -19 -48) -48]
Test Case: 801 | Input/Output: [(44 -58 -98 42) -98]
Test Case: 802 | Input/Output: [(76 -18 37 100) -18]
Test Case: 803 | Input/Output: [(-53 81 77 -41) -53]
Test Case: 804 | Input/Output: [(-93 -11 -59 68) -93]
Test Case: 805 | Input/Output: [(-68 47 -49 -60) -68]
Test Case: 806 | Input/Output: [(6 -52 66 98) -52]
Test Case: 807 | Input/Output: [(-5 89 -53 68) -53]
Test Case: 808 | Input/Output: [(2 6 -35 35) -35]
Test Case: 809 | Input/Output: [(79 -69 -54 -32) -69]
Test Case: 810 | Input/Output: [(-31 -58 50 -38) -58]
Test Case: 811 | Input/Output: [(57 -70 -43 -61) -70]
Test Case: 812 | Input/Output: [(-87 36 -96 89) -96]
Test Case: 813 | Input/Output: [(-46 -58 -60 -34) -60]
Test Case: 814 | Input/Output: [(-4 63 59 -37) -37]
Test Case: 815 | Input/Output: [(7 -51 -100 -24) -100]
Test Case: 816 | Input/Output: [(52 69 15 4) 4]
Test Case: 817 | Input/Output: [(23 57 -95 -92) -95]
Test Case: 818 | Input/Output: [(45 21 -8 -24) -24]
Test Case: 819 | Input/Output: [(-98 -68 -66 41) -98]
Test Case: 820 | Input/Output: [(-80 31 14 7) -80]
Test Case: 821 | Input/Output: [(83 65 65 0) 0]
Test Case: 822 | Input/Output: [(-66 63 -92 -99) -99]
Test Case: 823 | Input/Output: [(29 -74 -47 -15) -74]
Test Case: 824 | Input/Output: [(-54 -86 10 0) -86]
Test Case: 825 | Input/Output: [(87 64 37 82) 37]
Test Case: 826 | Input/Output: [(67 34 9 35) 9]
Test Case: 827 | Input/Output: [(47 100 -71 -65) -71]
Test Case: 828 | Input/Output: [(77 -53 -15 73) -53]
Test Case: 829 | Input/Output: [(-65 -1 99 93) -65]
Test Case: 830 | Input/Output: [(86 84 -90 -55) -90]
Test Case: 831 | Input/Output: [(-3 84 -55 -59) -59]
Test Case: 832 | Input/Output: [(22 7 34 65) 7]
Test Case: 833 | Input/Output: [(30 -81 75 60) -81]
Test Case: 834 | Input/Output: [(-13 23 64 -79) -79]
Test Case: 835 | Input/Output: [(-70 -69 -35 -73) -73]
Test Case: 836 | Input/Output: [(-44 -8 96 53) -44]
Test Case: 837 | Input/Output: [(-70 -20 84 70) -70]
Test Case: 838 | Input/Output: [(-38 -30 100 29) -38]
Test Case: 839 | Input/Output: [(-44 56 -97 56) -97]
Test Case: 840 | Input/Output: [(-68 -27 -72 -92) -92]
Test Case: 841 | Input/Output: [(-60 90 2 -70) -70]
Test Case: 842 | Input/Output: [(-25 79 68 -79) -79]
Test Case: 843 | Input/Output: [(-5 -56 71 -8) -56]
Test Case: 844 | Input/Output: [(-59 56 -61 89) -61]
Test Case: 845 | Input/Output: [(75 -58 -94 48) -94]
Test Case: 846 | Input/Output: [(-21 71 68 -90) -90]
Test Case: 847 | Input/Output: [(69 81 -49 -88) -88]
Test Case: 848 | Input/Output: [(-51 88 -18 -69) -69]
Test Case: 849 | Input/Output: [(39 -60 -20 50) -60]
Test Case: 850 | Input/Output: [(94 -87 -50 -21) -87]
Test Case: 851 | Input/Output: [(-82 29 -82 84) -82]
Test Case: 852 | Input/Output: [(-32 -67 72 81) -67]
Test Case: 853 | Input/Output: [(-42 -35 -17 -72) -72]
Test Case: 854 | Input/Output: [(-60 76 41 58) -60]
Test Case: 855 | Input/Output: [(-86 -23 -33 98) -86]
Test Case: 856 | Input/Output: [(66 -4 94 58) -4]
Test Case: 857 | Input/Output: [(-67 16 11 -95) -95]
Test Case: 858 | Input/Output: [(-87 73 3 -26) -87]
Test Case: 859 | Input/Output: [(-41 -9 -37 -36) -41]
Test Case: 860 | Input/Output: [(68 7 89 -16) -16]
Test Case: 861 | Input/Output: [(23 -25 -56 -92) -92]
Test Case: 862 | Input/Output: [(10 -44 95 60) -44]
Test Case: 863 | Input/Output: [(-32 -6 51 89) -32]
Test Case: 864 | Input/Output: [(87 -42 -6 -1) -42]
Test Case: 865 | Input/Output: [(92 -57 -15 30) -57]
Test Case: 866 | Input/Output: [(71 29 -54 65) -54]
Test Case: 867 | Input/Output: [(58 -92 1 78) -92]
Test Case: 868 | Input/Output: [(-69 -63 -6 57) -69]
Test Case: 869 | Input/Output: [(-72 -96 96 -77) -96]
Test Case: 870 | Input/Output: [(1 85 -64 56) -64]
Test Case: 871 | Input/Output: [(-40 77 -67 -34) -67]
Test Case: 872 | Input/Output: [(12 44 -84 -75) -84]
Test Case: 873 | Input/Output: [(-59 -47 93 37) -59]
Test Case: 874 | Input/Output: [(20 -8 -68 -63) -68]
Test Case: 875 | Input/Output: [(90 -22 100 -82) -82]
Test Case: 876 | Input/Output: [(55 -70 80 95) -70]
Test Case: 877 | Input/Output: [(-99 53 32 -35) -99]
Test Case: 878 | Input/Output: [(65 50 61 4) 4]
Test Case: 879 | Input/Output: [(-77 75 63 -20) -77]
Test Case: 880 | Input/Output: [(26 4 50 84) 4]
Test Case: 881 | Input/Output: [(23 -32 99 -80) -80]
Test Case: 882 | Input/Output: [(79 -87 -5 69) -87]
Test Case: 883 | Input/Output: [(-59 -15 75 -18) -59]
Test Case: 884 | Input/Output: [(-58 -98 -90 42) -98]
Test Case: 885 | Input/Output: [(67 -71 -42 17) -71]
Test Case: 886 | Input/Output: [(-32 -33 -53 38) -53]
Test Case: 887 | Input/Output: [(-2 35 45 -89) -89]
Test Case: 888 | Input/Output: [(37 98 -25 -44) -44]
Test Case: 889 | Input/Output: [(-75 55 -52 -50) -75]
Test Case: 890 | Input/Output: [(69 22 -40 13) -40]
Test Case: 891 | Input/Output: [(-56 -74 60 -90) -90]
Test Case: 892 | Input/Output: [(22 -47 -34 -63) -63]
Test Case: 893 | Input/Output: [(-100 90 -71 81) -100]
Test Case: 894 | Input/Output: [(-94 46 -64 40) -94]
Test Case: 895 | Input/Output: [(72 67 -43 34) -43]
Test Case: 896 | Input/Output: [(-53 -34 -49 -15) -53]
Test Case: 897 | Input/Output: [(23 54 42 -97) -97]
Test Case: 898 | Input/Output: [(-53 -21 -92 -97) -97]
Test Case: 899 | Input/Output: [(-67 -91 41 92) -91]
Test Case: 900 | Input/Output: [(24 69 -21 19) -21]
Test Case: 901 | Input/Output: [(-42 -79 8 -87) -87]
Test Case: 902 | Input/Output: [(-21 -63 66 -66) -66]
Test Case: 903 | Input/Output: [(91 97 83 -39) -39]
Test Case: 904 | Input/Output: [(62 70 -8 -87) -87]
Test Case: 905 | Input/Output: [(96 43 3 -97) -97]
Test Case: 906 | Input/Output: [(82 -52 -19 69) -52]
Test Case: 907 | Input/Output: [(-13 30 85 49) -13]
Test Case: 908 | Input/Output: [(-33 -69 53 38) -69]
Test Case: 909 | Input/Output: [(7 -85 61 -66) -85]
Test Case: 910 | Input/Output: [(-74 55 -60 -66) -74]
Test Case: 911 | Input/Output: [(39 -15 -12 -4) -15]
Test Case: 912 | Input/Output: [(-17 67 -23 4) -23]
Test Case: 913 | Input/Output: [(-19 -31 -77 22) -77]
Test Case: 914 | Input/Output: [(22 -8 59 46) -8]
Test Case: 915 | Input/Output: [(90 78 -68 69) -68]
Test Case: 916 | Input/Output: [(-91 -20 39 -40) -91]
Test Case: 917 | Input/Output: [(28 -70 30 -66) -70]
Test Case: 918 | Input/Output: [(-63 -92 -92 54) -92]
Test Case: 919 | Input/Output: [(32 84 50 -9) -9]
Test Case: 920 | Input/Output: [(-34 -9 10 -24) -34]
Test Case: 921 | Input/Output: [(-43 82 55 -86) -86]
Test Case: 922 | Input/Output: [(90 74 -65 -76) -76]
Test Case: 923 | Input/Output: [(28 81 -1 52) -1]
Test Case: 924 | Input/Output: [(98 -78 60 80) -78]
Test Case: 925 | Input/Output: [(-45 -24 66 64) -45]
Test Case: 926 | Input/Output: [(-91 93 54 -41) -91]
Test Case: 927 | Input/Output: [(-88 0 83 -84) -88]
Test Case: 928 | Input/Output: [(80 74 33 11) 11]
Test Case: 929 | Input/Output: [(37 -35 -78 20) -78]
Test Case: 930 | Input/Output: [(-56 57 -29 -50) -56]
Test Case: 931 | Input/Output: [(-8 -11 -2 -58) -58]
Test Case: 932 | Input/Output: [(4 78 1 -7) -7]
Test Case: 933 | Input/Output: [(-29 42 55 -4) -29]
Test Case: 934 | Input/Output: [(56 -17 -2 -92) -92]
Test Case: 935 | Input/Output: [(18 51 -9 20) -9]
Test Case: 936 | Input/Output: [(-14 42 90 76) -14]
Test Case: 937 | Input/Output: [(-88 33 -84 -29) -88]
Test Case: 938 | Input/Output: [(-33 -1 -23 21) -33]
Test Case: 939 | Input/Output: [(45 -48 23 78) -48]
Test Case: 940 | Input/Output: [(78 18 -34 -63) -63]
Test Case: 941 | Input/Output: [(-13 40 -40 -81) -81]
Test Case: 942 | Input/Output: [(94 57 -18 18) -18]
Test Case: 943 | Input/Output: [(-16 17 -23 -18) -23]
Test Case: 944 | Input/Output: [(-28 16 -56 -59) -59]
Test Case: 945 | Input/Output: [(19 52 76 -64) -64]
Test Case: 946 | Input/Output: [(-82 79 -70 -93) -93]
Test Case: 947 | Input/Output: [(-20 6 -1 99) -20]
Test Case: 948 | Input/Output: [(-26 82 -89 85) -89]
Test Case: 949 | Input/Output: [(-73 -81 17 -23) -81]
Test Case: 950 | Input/Output: [(92 -4 72 -86) -86]
Test Case: 951 | Input/Output: [(13 -31 -10 93) -31]
Test Case: 952 | Input/Output: [(-55 -9 85 76) -55]
Test Case: 953 | Input/Output: [(79 93 16 -51) -51]
Test Case: 954 | Input/Output: [(81 3 -33 91) -33]
Test Case: 955 | Input/Output: [(69 74 32 23) 23]
Test Case: 956 | Input/Output: [(-15 -84 69 18) -84]
Test Case: 957 | Input/Output: [(49 -33 -4 35) -33]
Test Case: 958 | Input/Output: [(64 -5 85 55) -5]
Test Case: 959 | Input/Output: [(81 91 -27 66) -27]
Test Case: 960 | Input/Output: [(-27 -29 30 65) -29]
Test Case: 961 | Input/Output: [(-53 64 -51 21) -53]
Test Case: 962 | Input/Output: [(-7 33 65 29) -7]
Test Case: 963 | Input/Output: [(49 92 -61 -77) -77]
Test Case: 964 | Input/Output: [(-6 -52 -73 57) -73]
Test Case: 965 | Input/Output: [(79 39 -34 83) -34]
Test Case: 966 | Input/Output: [(30 27 -15 -70) -70]
Test Case: 967 | Input/Output: [(37 -96 31 -4) -96]
Test Case: 968 | Input/Output: [(-52 31 -41 47) -52]
Test Case: 969 | Input/Output: [(29 -99 -16 37) -99]
Test Case: 970 | Input/Output: [(23 84 85 -32) -32]
Test Case: 971 | Input/Output: [(67 56 -45 54) -45]
Test Case: 972 | Input/Output: [(-52 -22 97 42) -52]
Test Case: 973 | Input/Output: [(15 88 64 33) 15]
Test Case: 974 | Input/Output: [(-78 -72 1 26) -78]
Test Case: 975 | Input/Output: [(82 -47 -11 -77) -77]
Test Case: 976 | Input/Output: [(-20 3 -35 31) -35]
Test Case: 977 | Input/Output: [(95 -52 -1 -38) -52]
Test Case: 978 | Input/Output: [(52 -50 -24 -27) -50]
Test Case: 979 | Input/Output: [(-9 30 81 50) -9]
Test Case: 980 | Input/Output: [(-20 -98 19 -75) -98]
Test Case: 981 | Input/Output: [(88 -72 -99 -27) -99]
Test Case: 982 | Input/Output: [(-15 -81 -93 97) -93]
Test Case: 983 | Input/Output: [(-69 81 -30 67) -69]
Test Case: 984 | Input/Output: [(-38 -89 -24 -36) -89]
Test Case: 985 | Input/Output: [(21 93 -40 61) -40]
Test Case: 986 | Input/Output: [(93 68 95 -100) -100]
Test Case: 987 | Input/Output: [(-59 -77 -64 -32) -77]
Test Case: 988 | Input/Output: [(89 59 86 -19) -19]
Test Case: 989 | Input/Output: [(-82 40 -88 -63) -88]
Test Case: 990 | Input/Output: [(-59 -25 -12 52) -59]
Test Case: 991 | Input/Output: [(-17 65 27 8) -17]
Test Case: 992 | Input/Output: [(-26 -56 -40 88) -56]
Test Case: 993 | Input/Output: [(-93 -90 -1 -66) -93]
Test Case: 994 | Input/Output: [(74 92 63 -69) -69]
Test Case: 995 | Input/Output: [(19 -5 -98 -64) -98]
Test Case: 996 | Input/Output: [(-72 9 -55 -18) -72]
Test Case: 997 | Input/Output: [(66 29 -25 44) -25]
Test Case: 998 | Input/Output: [(-65 -19 20 35) -65]
Test Case: 999 | Input/Output: [(-44 -89 11 -30) -89]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 48 50 113 124 36 12 0 50 30 -21 7 -91 -69 43 8 83
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-28 -15 -15 -15] -28] [[29 -100 29 29] -100] [[41 -72 -72 -72] -72] [[-45 -80 -45 -45] -80] [[7 54 7 7] 7] [[32 32 32 -89] -89] [[92 12 12 12] 12] [[32 32 32 -71] -71] [[-53 -97 -97 -97] -97] [[59 59 42 59] 42] [(-81 -81 -81 -81) -81] [(-70 -70 -70 -70) -70] [(-100 -100 -100 -100) -100] [(-57 -57 -57 -57) -57] [(43 43 43 43) 43] [(48 51 23 44) 23] [(27 39 74 54) 27] [(54 0 38 40) 0] [(18 15 1 45) 1] [(63 96 35 59) 35] [(90 98 29 46) 29] [(52 74 1 79) 1] [(89 53 86 3) 3] [(30 81 26 17) 17] [(71 43 51 81) 43] [(12 99 11 4) 4] [(62 61 53 66) 53] [(92 80 59 85) 59] [(7 75 55 40) 7] [(57 27 1 73) 1] [(97 25 54 65) 25] [(95 55 18 91) 18] [(2 31 80 76) 2] [(88 96 82 70) 70] [(83 60 95 87) 60] [(40 -36 -34 -80) -80] [(-31 -30 -76 -9) -76] [(37 -45 -18 4) -45] [(52 30 -14 -16) -16] [(-58 60 51 18) -58] [(-60 28 94 58) -60] [(30 -9 -16 -64) -64] [(62 -66 93 -46) -66] [(-8 71 7 3) -8] [(-60 -87 83 -52) -87] [(-22 40 73 -1) -22] [(-22 -98 -18 -46) -98] [(-72 -83 88 89) -83] [(-95 91 -89 27) -95] [(-3 78 61 -93) -93] [(-37 -83 -54 97) -83] [(-96 -66 31 23) -96] [(-51 1 -49 -79) -79] [(-9 -83 75 61) -83] [(-87 14 -5 42) -87] [(56 66 -22 61) -22] [(54 77 -16 -28) -28] [(-92 12 -60 -52) -92] [(77 38 58 -81) -81] [(84 83 33 -65) -65] [(67 -12 -97 -50) -97] [(53 51 10 73) 10] [(-62 -75 -66 21) -75] [(-81 -8 83 -31) -81] [(92 44 -48 -59) -59] [(7 79 79 -93) -93] [(70 -57 39 5) -57] [(-27 75 -14 -12) -27] [(84 84 58 9) 9] [(-57 -21 76 47) -57] [(-86 35 -53 -59) -86] [(69 -46 30 -55) -55] [(-33 -38 74 -99) -99] [(-46 -69 -99 71) -99] [(-31 -73 -10 -30) -73] [(25 -2 15 41) -2] [(11 -53 -66 35) -66] [(-88 86 -15 -41) -88] [(-78 -32 -30 97) -78] [(-32 79 -88 79) -88] [(-100 -59 96 6) -100] [(0 15 -58 65) -58] [(-20 -32 -90 54) -90] [(-79 74 30 63) -79] [(19 -26 84 84) -26] [(94 11 42 81) 11] [(-92 -94 -57 -29) -94] [(11 -34 92 -95) -95] [(59 -37 72 -46) -46] [(-4 85 36 64) -4] [(50 94 34 91) 34] [(71 27 -100 28) -100] [(-17 62 -88 52) -88] [(-54 -4 -68 60) -68] [(-70 64 50 -90) -90])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 44                 
Correct output: 27                  | Program output: 54                 
Correct output: 0                   | Program output: 40                 
Correct output: 1                   | Program output: 45                 
Correct output: 35                  | Program output: 59                 
Correct output: 29                  | Program output: 46                 
Correct output: 1                   | Program output: 79                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 43                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 53                  | Program output: 66                 
Correct output: 59                  | Program output: 85                 
Correct output: 7                   | Program output: 40                 
Correct output: 1                   | Program output: 73                 
Correct output: 25                  | Program output: 65                 
Correct output: 18                  | Program output: 91                 
Correct output: 2                   | Program output: 76                 
Correct output: 70                  | Program output: 70                 
Correct output: 60                  | Program output: 87                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -9                 
Correct output: -45                 | Program output: 4                  
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: 18                 
Correct output: -60                 | Program output: 58                 
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -46                
Correct output: -8                  | Program output: 3                  
Correct output: -87                 | Program output: -52                
Correct output: -22                 | Program output: -1                 
Correct output: -98                 | Program output: -46                
Correct output: -83                 | Program output: 89                 
Correct output: -95                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: 97                 
Correct output: -96                 | Program output: 23                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: 61                 
Correct output: -87                 | Program output: 42                 
Correct output: -22                 | Program output: 61                 
Correct output: -28                 | Program output: -28                
Correct output: -92                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -50                
Correct output: 10                  | Program output: 73                 
Correct output: -75                 | Program output: 21                 
Correct output: -81                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 5                  
Correct output: -27                 | Program output: -12                
Correct output: 9                   | Program output: 9                  
Correct output: -57                 | Program output: 47                 
Correct output: -86                 | Program output: -59                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: 71                 
Correct output: -73                 | Program output: -30                
Correct output: -2                  | Program output: 41                 
Correct output: -66                 | Program output: 35                 
Correct output: -88                 | Program output: -41                
Correct output: -78                 | Program output: 97                 
Correct output: -88                 | Program output: 79                 
Correct output: -100                | Program output: 6                  
Correct output: -58                 | Program output: 65                 
Correct output: -90                 | Program output: 54                 
Correct output: -79                 | Program output: 63                 
Correct output: -26                 | Program output: 84                 
Correct output: 11                  | Program output: 81                 
Correct output: -94                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: 64                 
Correct output: 34                  | Program output: 91                 
Correct output: -100                | Program output: 28                 
Correct output: -88                 | Program output: 52                 
Correct output: -68                 | Program output: 60                 
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (boolean_yank boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush integer_add) integer_sub integer_flush in4 print_integer boolean_flush integer_swap integer_max exec_shove (integer_empty exec_do*while (integer_mult)))
Lexicase best errors: [1 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 21
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (boolean_yank boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush integer_add) integer_sub integer_flush in4 print_integer boolean_flush integer_swap integer_max exec_shove (integer_empty exec_do*while (integer_mult)))
Zero cases best errors: [1 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 21
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 10 4 1 1 1 3 9 1 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (1 10 4 1 1 1 3 9 1 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (boolean_yank boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush integer_add) integer_sub integer_flush in4 print_integer boolean_flush integer_swap integer_max exec_shove (integer_empty exec_do*while (integer_mult)))
Errors: [1 0 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 17
Size: 21
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 9.965
Median total errors in population: 10
Error averages by case: (0.999 0.99 0.996 0.999 0.999 0.999 0.997 0.991 0.999 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.218
Average program size in population (points): 70.476
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 472344
--- Timings ---
Current time: 1559582731498 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.7 seconds, 28.8%
Fitness Testing:      1.7 seconds, 67.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 44                 
Correct output: 27                  | Program output: 54                 
Correct output: 0                   | Program output: 40                 
Correct output: 1                   | Program output: 45                 
Correct output: 35                  | Program output: 59                 
Correct output: 29                  | Program output: 46                 
Correct output: 1                   | Program output: 79                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 43                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 53                  | Program output: 66                 
Correct output: 59                  | Program output: 85                 
Correct output: 7                   | Program output: 40                 
Correct output: 1                   | Program output: 73                 
Correct output: 25                  | Program output: 65                 
Correct output: 18                  | Program output: 91                 
Correct output: 2                   | Program output: 76                 
Correct output: 70                  | Program output: 70                 
Correct output: 60                  | Program output: 87                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -9                 
Correct output: -45                 | Program output: 4                  
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: 18                 
Correct output: -60                 | Program output: 58                 
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -46                
Correct output: -8                  | Program output: 3                  
Correct output: -87                 | Program output: -52                
Correct output: -22                 | Program output: -1                 
Correct output: -98                 | Program output: -46                
Correct output: -83                 | Program output: 89                 
Correct output: -95                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: 97                 
Correct output: -96                 | Program output: 23                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: 61                 
Correct output: -87                 | Program output: 42                 
Correct output: -22                 | Program output: 61                 
Correct output: -28                 | Program output: -28                
Correct output: -92                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -50                
Correct output: 10                  | Program output: 73                 
Correct output: -75                 | Program output: 21                 
Correct output: -81                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 5                  
Correct output: -27                 | Program output: -12                
Correct output: 9                   | Program output: 9                  
Correct output: -57                 | Program output: 47                 
Correct output: -86                 | Program output: -59                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: 71                 
Correct output: -73                 | Program output: -30                
Correct output: -2                  | Program output: 41                 
Correct output: -66                 | Program output: 35                 
Correct output: -88                 | Program output: -41                
Correct output: -78                 | Program output: 97                 
Correct output: -88                 | Program output: 79                 
Correct output: -100                | Program output: 6                  
Correct output: -58                 | Program output: 65                 
Correct output: -90                 | Program output: 54                 
Correct output: -79                 | Program output: 63                 
Correct output: -26                 | Program output: 84                 
Correct output: 11                  | Program output: 81                 
Correct output: -94                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: 64                 
Correct output: 34                  | Program output: 91                 
Correct output: -100                | Program output: 28                 
Correct output: -88                 | Program output: 52                 
Correct output: -68                 | Program output: 60                 
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (boolean_yank boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush boolean_yank) boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush integer_add) integer_sub integer_flush in4 print_integer boolean_flush integer_swap integer_max exec_shove (integer_empty exec_do*while (integer_mult)))
Lexicase best errors: [0 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (boolean_yank boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush boolean_yank) boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush integer_add) integer_sub integer_flush in4 print_integer boolean_flush integer_swap integer_max exec_shove (integer_empty exec_do*while (integer_mult)))
Zero cases best errors: [0 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (462 1000 462 239 239 462 462 239 462 239)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (462 0 462 239 239 462 462 239 462 239)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (boolean_yank boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush integer_add) integer_sub integer_flush in4 print_integer boolean_flush integer_swap integer_max exec_shove (integer_empty exec_do*while (integer_mult)))
Errors: [0 1 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 21
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.734
Median total errors in population: 6
Error averages by case: (0.538 1.0 0.538 0.761 0.761 0.538 0.538 0.761 0.538 0.761)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.896
Average program size in population (points): 41.522
Average percent parens in population: 0.235
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.5
Median age in population: 1.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 347
Genome diversity (% unique genomes):	 0.379
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 368
Syntactic diversity (% unique Push programs):	 0.355
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 782459
--- Timings ---
Current time: 1559582733755 milliseconds
Total Time:           5.0 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.3 seconds, 45.6%
Fitness Testing:      2.2 seconds, 44.8%
Report:               0.4 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 44                 
Correct output: 27                  | Program output: 54                 
Correct output: 0                   | Program output: 40                 
Correct output: 1                   | Program output: 45                 
Correct output: 35                  | Program output: 59                 
Correct output: 29                  | Program output: 46                 
Correct output: 1                   | Program output: 79                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 43                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 53                  | Program output: 66                 
Correct output: 59                  | Program output: 85                 
Correct output: 7                   | Program output: 40                 
Correct output: 1                   | Program output: 73                 
Correct output: 25                  | Program output: 65                 
Correct output: 18                  | Program output: 91                 
Correct output: 2                   | Program output: 76                 
Correct output: 70                  | Program output: 70                 
Correct output: 60                  | Program output: 87                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -9                 
Correct output: -45                 | Program output: 4                  
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: 18                 
Correct output: -60                 | Program output: 58                 
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -46                
Correct output: -8                  | Program output: 3                  
Correct output: -87                 | Program output: -52                
Correct output: -22                 | Program output: -1                 
Correct output: -98                 | Program output: -46                
Correct output: -83                 | Program output: 89                 
Correct output: -95                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: 97                 
Correct output: -96                 | Program output: 23                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: 61                 
Correct output: -87                 | Program output: 42                 
Correct output: -22                 | Program output: 61                 
Correct output: -28                 | Program output: -28                
Correct output: -92                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -50                
Correct output: 10                  | Program output: 73                 
Correct output: -75                 | Program output: 21                 
Correct output: -81                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 5                  
Correct output: -27                 | Program output: -12                
Correct output: 9                   | Program output: 9                  
Correct output: -57                 | Program output: 47                 
Correct output: -86                 | Program output: -59                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: 71                 
Correct output: -73                 | Program output: -30                
Correct output: -2                  | Program output: 41                 
Correct output: -66                 | Program output: 35                 
Correct output: -88                 | Program output: -41                
Correct output: -78                 | Program output: 97                 
Correct output: -88                 | Program output: 79                 
Correct output: -100                | Program output: 6                  
Correct output: -58                 | Program output: 65                 
Correct output: -90                 | Program output: 54                 
Correct output: -79                 | Program output: 63                 
Correct output: -26                 | Program output: 84                 
Correct output: 11                  | Program output: 81                 
Correct output: -94                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: 64                 
Correct output: 34                  | Program output: 91                 
Correct output: -100                | Program output: 28                 
Correct output: -88                 | Program output: 52                 
Correct output: -68                 | Program output: 60                 
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (boolean_yank boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush integer_add) integer_sub integer_flush in4 print_integer boolean_flush integer_swap integer_max exec_shove (in1 exec_do*while (integer_mult)))
Lexicase best errors: [0 1 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (boolean_yank boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush integer_add) integer_sub integer_flush in4 print_integer boolean_flush integer_swap integer_max exec_shove (in1 exec_do*while (integer_mult)))
Zero cases best errors: [0 1 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (931 1000 1000 1000 929 524 404 2 1000 524)
Population mean number of elite cases: 7.31
Count of perfect (error zero) individuals by case: (931 0 0 0 929 524 404 2 0 524)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_980} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if})
Best program: (boolean_yank boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush integer_add) integer_sub integer_flush in4 print_integer boolean_flush integer_swap integer_max exec_shove (integer_div print_integer exec_yank integer_eq integer_max integer_max integer_dup_items exec_rot (integer_flush exec_noop) () (exec_dup_items exec_while (in2 integer_eq exec_dup (integer_yankdup boolean_yank) exec_yank integer_dup_times integer_dup_items exec_empty boolean_eq integer_lt in4) boolean_xor exec_noop integer_min) integer_dup in1 tag_exec_980 (boolean_dup boolean_not boolean_yank integer_sub exec_eq) integer_mod integer_lte exec_pop (exec_swap (print_newline boolean_invert_first_then_and exec_do*count (integer_rot exec_if () ())) ())))
Errors: [0 1 1 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 58
Size: 73
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.686
Median total errors in population: 6
Error averages by case: (0.069 1.0 1.0 1.0 0.071 0.476 0.596 0.998 1.0 0.476)
Error minima by case: (0 1 1 1 0 0 0 0 1 0)
Average genome size in population (length): 30.684
Average program size in population (points): 41.325
Average percent parens in population: 0.238
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.013
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 314
Genome diversity (% unique genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 337
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1032174
--- Timings ---
Current time: 1559582736236 milliseconds
Total Time:           7.4 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.2 seconds, 56.2%
Fitness Testing:      2.6 seconds, 34.5%
Report:               0.6 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 44                 
Correct output: 27                  | Program output: 54                 
Correct output: 0                   | Program output: 40                 
Correct output: 1                   | Program output: 45                 
Correct output: 35                  | Program output: 59                 
Correct output: 29                  | Program output: 46                 
Correct output: 1                   | Program output: 79                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 43                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 53                  | Program output: 66                 
Correct output: 59                  | Program output: 85                 
Correct output: 7                   | Program output: 40                 
Correct output: 1                   | Program output: 73                 
Correct output: 25                  | Program output: 65                 
Correct output: 18                  | Program output: 91                 
Correct output: 2                   | Program output: 76                 
Correct output: 70                  | Program output: 70                 
Correct output: 60                  | Program output: 87                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -9                 
Correct output: -45                 | Program output: 4                  
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: 18                 
Correct output: -60                 | Program output: 58                 
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -46                
Correct output: -8                  | Program output: 3                  
Correct output: -87                 | Program output: -52                
Correct output: -22                 | Program output: -1                 
Correct output: -98                 | Program output: -46                
Correct output: -83                 | Program output: 89                 
Correct output: -95                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: 97                 
Correct output: -96                 | Program output: 23                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: 61                 
Correct output: -87                 | Program output: 42                 
Correct output: -22                 | Program output: 61                 
Correct output: -28                 | Program output: -28                
Correct output: -92                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -50                
Correct output: 10                  | Program output: 73                 
Correct output: -75                 | Program output: 21                 
Correct output: -81                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 5                  
Correct output: -27                 | Program output: -12                
Correct output: 9                   | Program output: 9                  
Correct output: -57                 | Program output: 47                 
Correct output: -86                 | Program output: -59                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: 71                 
Correct output: -73                 | Program output: -30                
Correct output: -2                  | Program output: 41                 
Correct output: -66                 | Program output: 35                 
Correct output: -88                 | Program output: -41                
Correct output: -78                 | Program output: 97                 
Correct output: -88                 | Program output: 79                 
Correct output: -100                | Program output: 6                  
Correct output: -58                 | Program output: 65                 
Correct output: -90                 | Program output: 54                 
Correct output: -79                 | Program output: 63                 
Correct output: -26                 | Program output: 84                 
Correct output: 11                  | Program output: 81                 
Correct output: -94                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: 64                 
Correct output: 34                  | Program output: 91                 
Correct output: -100                | Program output: 28                 
Correct output: -88                 | Program output: 52                 
Correct output: -68                 | Program output: 60                 
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup})
Lexicase best program: (boolean_yank boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush integer_add) integer_sub integer_flush in4 print_integer boolean_flush integer_swap integer_max exec_shove (integer_empty exec_if (exec_when (print_integer boolean_not) exec_k (boolean_xor in3 exec_flush exec_do*times (integer_sub) in4) (boolean_invert_first_then_and in4 integer_max) integer_pop exec_pop () boolean_invert_first_then_and exec_s_when_autoconstructing (exec_y (exec_yankdup)) () ()) ()))
Lexicase best errors: [0 1 1 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 49
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup})
Zero cases best program: (boolean_yank boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush integer_add) integer_sub integer_flush in4 print_integer boolean_flush integer_swap integer_max exec_shove (integer_empty exec_if (exec_when (print_integer boolean_not) exec_k (boolean_xor in3 exec_flush exec_do*times (integer_sub) in4) (boolean_invert_first_then_and in4 integer_max) integer_pop exec_pop () boolean_invert_first_then_and exec_s_when_autoconstructing (exec_y (exec_yankdup)) () ()) ()))
Zero cases best errors: [0 1 1 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 49
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (525 1000 1000 1000 1000 1000 258 523 523 1000)
Population mean number of elite cases: 7.83
Count of perfect (error zero) individuals by case: (525 0 0 0 0 0 258 523 523 0)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction 28} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (boolean_yank boolean_or exec_y_when_autoconstructing (exec_yankdup boolean_flush integer_add) integer_sub integer_flush in4 print_integer boolean_flush integer_swap integer_max exec_shove (integer_empty exec_do*while (exec_y (exec_yankdup exec_when (exec_do*times (integer_shove boolean_dup_times) exec_dup () integer_inc integer_swap exec_empty boolean_invert_first_then_and exec_pop (exec_y_when_autoconstructing () exec_y_when_autoconstructing (print_integer exec_while (boolean_invert_first_then_and) in1 exec_swap (integer_gte) (28 exec_y (in4 integer_dec) integer_yank integer_dup_items exec_if (integer_gte exec_do*count (integer_min integer_swap boolean_swap integer_mult exec_pop (print_boolean boolean_yankdup boolean_dup))) ()))))))))
Errors: [0 1 1 1 1 1 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 53
Size: 72
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 8.171
Median total errors in population: 7
Error averages by case: (0.475 1.0 1.0 1.0 1.0 1.0 0.742 0.477 0.477 1.0)
Error minima by case: (0 1 1 1 1 1 0 0 0 1)
Average genome size in population (length): 27.441
Average program size in population (points): 36.837
Average percent parens in population: 0.238
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.479
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 235
Genome diversity (% unique genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 280
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1261523
--- Timings ---
Current time: 1559582739272 milliseconds
Total Time:           9.7 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.9 seconds, 60.6%
Fitness Testing:      2.9 seconds, 29.4%
Report:               0.9 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: 41                 
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 92                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -53                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 48                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 54                 
Correct output: 1                   | Program output: 18                 
Correct output: 35                  | Program output: 63                 
Correct output: 29                  | Program output: 90                 
Correct output: 1                   | Program output: 52                 
Correct output: 3                   | Program output: 89                 
Correct output: 17                  | Program output: 30                 
Correct output: 43                  | Program output: 71                 
Correct output: 4                   | Program output: 12                 
Correct output: 53                  | Program output: 62                 
Correct output: 59                  | Program output: 92                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 57                 
Correct output: 25                  | Program output: 97                 
Correct output: 18                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 70                  | Program output: 88                 
Correct output: 60                  | Program output: 83                 
Correct output: -80                 | Program output: 40                 
Correct output: -76                 | Program output: -31                
Correct output: -45                 | Program output: 37                 
Correct output: -16                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: 30                 
Correct output: -66                 | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -60                
Correct output: -22                 | Program output: -22                
Correct output: -98                 | Program output: -22                
Correct output: -83                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -3                 
Correct output: -83                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -51                
Correct output: -83                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 56                 
Correct output: -28                 | Program output: 54                 
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 77                 
Correct output: -65                 | Program output: 84                 
Correct output: -97                 | Program output: 67                 
Correct output: 10                  | Program output: 53                 
Correct output: -75                 | Program output: -62                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: 92                 
Correct output: -93                 | Program output: 7                  
Correct output: -57                 | Program output: 70                 
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 69                 
Correct output: -99                 | Program output: -33                
Correct output: -99                 | Program output: -46                
Correct output: -73                 | Program output: -31                
Correct output: -2                  | Program output: 25                 
Correct output: -66                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -32                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 0                  
Correct output: -90                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -26                 | Program output: 19                 
Correct output: 11                  | Program output: 94                 
Correct output: -94                 | Program output: -92                
Correct output: -95                 | Program output: 11                 
Correct output: -46                 | Program output: 59                 
Correct output: -4                  | Program output: -4                 
Correct output: 34                  | Program output: 50                 
Correct output: -100                | Program output: 71                 
Correct output: -88                 | Program output: -17                
Correct output: -68                 | Program output: -54                
Correct output: -90                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush})
Lexicase best program: (exec_if (integer_flush exec_s_when_autoconstructing () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_yank integer_eq exec_flush integer_max integer_dup_items exec_rot (integer_flush) () ())) ()) ())
Lexicase best errors: [0 1 1 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 28
Percent parens: 0.393
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush})
Zero cases best program: (exec_if (integer_flush exec_s_when_autoconstructing () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_yank integer_eq exec_flush integer_max integer_dup_items exec_rot (integer_flush) () ())) ()) ())
Zero cases best errors: [0 1 1 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 28
Percent parens: 0.393
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 1000 1000 954 1000 1000 1000 233 1000 1000)
Population mean number of elite cases: 8.42
Count of perfect (error zero) individuals by case: (233 0 0 954 0 0 0 233 0 0)
Population mean number of perfect (error zero) cases: 1.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yank})
Best program: (exec_if (integer_flush exec_s_when_autoconstructing () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_yank integer_eq integer_max integer_max integer_dup_items exec_rot (integer_flush exec_noop) () (exec_dup_items exec_while (in2 integer_eq exec_dup (integer_yankdup boolean_yank) exec_yank)))) ()) ())
Errors: [0 1 1 0 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 26
Size: 39
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 8.58
Median total errors in population: 9
Error averages by case: (0.767 1.0 1.0 0.046 1.0 1.0 1.0 0.767 1.0 1.0)
Error minima by case: (0 1 1 0 1 1 1 0 1 1)
Average genome size in population (length): 23.953
Average program size in population (points): 31.637
Average percent parens in population: 0.227
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.005
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 274
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 334
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1489317
--- Timings ---
Current time: 1559582741708 milliseconds
Total Time:          13.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.9 seconds, 60.7%
Fitness Testing:      3.1 seconds, 24.0%
Report:               1.9 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 54                 
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 51                 
Correct output: 27                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 15                 
Correct output: 35                  | Program output: 96                 
Correct output: 29                  | Program output: 98                 
Correct output: 1                   | Program output: 74                 
Correct output: 3                   | Program output: 53                 
Correct output: 17                  | Program output: 81                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 99                 
Correct output: 53                  | Program output: 61                 
Correct output: 59                  | Program output: 80                 
Correct output: 7                   | Program output: 75                 
Correct output: 1                   | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 70                  | Program output: 96                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -36                
Correct output: -76                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 30                 
Correct output: -58                 | Program output: 60                 
Correct output: -60                 | Program output: 28                 
Correct output: -64                 | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: 71                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: 91                 
Correct output: -93                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -66                
Correct output: -79                 | Program output: 1                  
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: 14                 
Correct output: -22                 | Program output: 66                 
Correct output: -28                 | Program output: 77                 
Correct output: -92                 | Program output: 12                 
Correct output: -81                 | Program output: 38                 
Correct output: -65                 | Program output: 83                 
Correct output: -97                 | Program output: -12                
Correct output: 10                  | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -8                 
Correct output: -59                 | Program output: 44                 
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: 75                 
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -21                
Correct output: -86                 | Program output: 35                 
Correct output: -55                 | Program output: -46                
Correct output: -99                 | Program output: -38                
Correct output: -99                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -53                
Correct output: -88                 | Program output: 86                 
Correct output: -78                 | Program output: -32                
Correct output: -88                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -58                 | Program output: 15                 
Correct output: -90                 | Program output: -32                
Correct output: -79                 | Program output: 74                 
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -34                
Correct output: -46                 | Program output: -37                
Correct output: -4                  | Program output: 85                 
Correct output: 34                  | Program output: 94                 
Correct output: -100                | Program output: 27                 
Correct output: -88                 | Program output: 62                 
Correct output: -68                 | Program output: -4                 
Correct output: -90                 | Program output: 64                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Lexicase best errors: [1 1 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Zero cases best errors: [1 1 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1 1000 1000 1 1000 1000 1)
Population mean number of elite cases: 7.00
Count of perfect (error zero) individuals by case: (0 0 0 1 0 0 1 0 0 1)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Errors: [1 1 1 0 1 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 9.997
Median total errors in population: 10
Error averages by case: (1.0 1.0 1.0 0.999 1.0 1.0 0.999 1.0 1.0 0.999)
Error minima by case: (1 1 1 0 1 1 0 1 1 0)
Average genome size in population (length): 40.328
Average program size in population (points): 56.518
Average percent parens in population: 0.296
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.418125
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1776281
--- Timings ---
Current time: 1559582743905 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.5 seconds, 63.1%
Fitness Testing:      3.4 seconds, 22.7%
Report:               2.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 54                 
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 51                 
Correct output: 27                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 15                 
Correct output: 35                  | Program output: 96                 
Correct output: 29                  | Program output: 98                 
Correct output: 1                   | Program output: 74                 
Correct output: 3                   | Program output: 53                 
Correct output: 17                  | Program output: 81                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 99                 
Correct output: 53                  | Program output: 61                 
Correct output: 59                  | Program output: 80                 
Correct output: 7                   | Program output: 75                 
Correct output: 1                   | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 70                  | Program output: 96                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -36                
Correct output: -76                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 30                 
Correct output: -58                 | Program output: 60                 
Correct output: -60                 | Program output: 28                 
Correct output: -64                 | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: 71                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: 91                 
Correct output: -93                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -66                
Correct output: -79                 | Program output: 1                  
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: 14                 
Correct output: -22                 | Program output: 66                 
Correct output: -28                 | Program output: 77                 
Correct output: -92                 | Program output: 12                 
Correct output: -81                 | Program output: 38                 
Correct output: -65                 | Program output: 83                 
Correct output: -97                 | Program output: -12                
Correct output: 10                  | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -8                 
Correct output: -59                 | Program output: 44                 
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: 75                 
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -21                
Correct output: -86                 | Program output: 35                 
Correct output: -55                 | Program output: -46                
Correct output: -99                 | Program output: -38                
Correct output: -99                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -53                
Correct output: -88                 | Program output: 86                 
Correct output: -78                 | Program output: -32                
Correct output: -88                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -58                 | Program output: 15                 
Correct output: -90                 | Program output: -32                
Correct output: -79                 | Program output: 74                 
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -34                
Correct output: -46                 | Program output: -37                
Correct output: -4                  | Program output: 85                 
Correct output: 34                  | Program output: 94                 
Correct output: -100                | Program output: 27                 
Correct output: -88                 | Program output: 62                 
Correct output: -68                 | Program output: -4                 
Correct output: -90                 | Program output: 64                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Lexicase best errors: [1 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Zero cases best errors: [1 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 945 938 6 1000 1000 1000 1000 938)
Population mean number of elite cases: 8.83
Count of perfect (error zero) individuals by case: (0 0 945 938 6 0 0 0 0 938)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Errors: [1 1 0 0 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 7.173
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.055 0.062 0.994 1.0 1.0 1.0 1.0 0.062)
Error minima by case: (1 1 0 0 0 1 1 1 1 0)
Average genome size in population (length): 14.011
Average program size in population (points): 24.034
Average percent parens in population: 0.417
Minimum age in population: 9.125
Maximum age in population: 10.125
Average age in population: 9.62
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 792
Genome diversity (% unique genomes):	 0.168
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 793
Syntactic diversity (% unique Push programs):	 0.167
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.009
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 1945799
--- Timings ---
Current time: 1559582745646 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.9 seconds, 64.5%
Fitness Testing:      3.6 seconds, 21.5%
Report:               2.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 54                 
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 51                 
Correct output: 27                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 15                 
Correct output: 35                  | Program output: 96                 
Correct output: 29                  | Program output: 98                 
Correct output: 1                   | Program output: 74                 
Correct output: 3                   | Program output: 53                 
Correct output: 17                  | Program output: 81                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 99                 
Correct output: 53                  | Program output: 61                 
Correct output: 59                  | Program output: 80                 
Correct output: 7                   | Program output: 75                 
Correct output: 1                   | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 70                  | Program output: 96                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -36                
Correct output: -76                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 30                 
Correct output: -58                 | Program output: 60                 
Correct output: -60                 | Program output: 28                 
Correct output: -64                 | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: 71                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: 91                 
Correct output: -93                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -66                
Correct output: -79                 | Program output: 1                  
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: 14                 
Correct output: -22                 | Program output: 66                 
Correct output: -28                 | Program output: 77                 
Correct output: -92                 | Program output: 12                 
Correct output: -81                 | Program output: 38                 
Correct output: -65                 | Program output: 83                 
Correct output: -97                 | Program output: -12                
Correct output: 10                  | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -8                 
Correct output: -59                 | Program output: 44                 
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: 75                 
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -21                
Correct output: -86                 | Program output: 35                 
Correct output: -55                 | Program output: -46                
Correct output: -99                 | Program output: -38                
Correct output: -99                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -53                
Correct output: -88                 | Program output: 86                 
Correct output: -78                 | Program output: -32                
Correct output: -88                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -58                 | Program output: 15                 
Correct output: -90                 | Program output: -32                
Correct output: -79                 | Program output: 74                 
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -34                
Correct output: -46                 | Program output: -37                
Correct output: -4                  | Program output: 85                 
Correct output: 34                  | Program output: 94                 
Correct output: -100                | Program output: 27                 
Correct output: -88                 | Program output: 62                 
Correct output: -68                 | Program output: -4                 
Correct output: -90                 | Program output: 64                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Lexicase best errors: [1 0 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 24
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Zero cases best errors: [1 0 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 24
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 671 1000 672 671 1000 1000 671 1000 1000)
Population mean number of elite cases: 8.69
Count of perfect (error zero) individuals by case: (0 671 0 672 671 0 0 671 0 0)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (exec_do*while (integer_mult)))) ()) ())
Errors: [1 0 1 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 13
Size: 23
Percent parens: 0.435
--- Population Statistics ---
Average total errors in population: 7.315
Median total errors in population: 6
Error averages by case: (1.0 0.329 1.0 0.328 0.329 1.0 1.0 0.329 1.0 1.0)
Error minima by case: (1 0 1 0 0 1 1 0 1 1)
Average genome size in population (length): 15.078
Average program size in population (points): 25.45
Average percent parens in population: 0.408
Minimum age in population: 10.125
Maximum age in population: 12.125
Average age in population: 11.1025
Median age in population: 11.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 485
Genome diversity (% unique genomes):	 0.24
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 487
Syntactic diversity (% unique Push programs):	 0.238
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2126518
--- Timings ---
Current time: 1559582747433 milliseconds
Total Time:          18.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.3 seconds, 65.8%
Fitness Testing:      3.9 seconds, 20.7%
Report:               2.4 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: 41                 
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 92                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -53                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 48                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 54                 
Correct output: 1                   | Program output: 18                 
Correct output: 35                  | Program output: 63                 
Correct output: 29                  | Program output: 90                 
Correct output: 1                   | Program output: 52                 
Correct output: 3                   | Program output: 89                 
Correct output: 17                  | Program output: 30                 
Correct output: 43                  | Program output: 71                 
Correct output: 4                   | Program output: 12                 
Correct output: 53                  | Program output: 62                 
Correct output: 59                  | Program output: 92                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 57                 
Correct output: 25                  | Program output: 97                 
Correct output: 18                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 70                  | Program output: 88                 
Correct output: 60                  | Program output: 83                 
Correct output: -80                 | Program output: 40                 
Correct output: -76                 | Program output: -31                
Correct output: -45                 | Program output: 37                 
Correct output: -16                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: 30                 
Correct output: -66                 | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -60                
Correct output: -22                 | Program output: -22                
Correct output: -98                 | Program output: -22                
Correct output: -83                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -3                 
Correct output: -83                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -51                
Correct output: -83                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 56                 
Correct output: -28                 | Program output: 54                 
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 77                 
Correct output: -65                 | Program output: 84                 
Correct output: -97                 | Program output: 67                 
Correct output: 10                  | Program output: 53                 
Correct output: -75                 | Program output: -62                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: 92                 
Correct output: -93                 | Program output: 7                  
Correct output: -57                 | Program output: 70                 
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 69                 
Correct output: -99                 | Program output: -33                
Correct output: -99                 | Program output: -46                
Correct output: -73                 | Program output: -31                
Correct output: -2                  | Program output: 25                 
Correct output: -66                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -32                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 0                  
Correct output: -90                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -26                 | Program output: 19                 
Correct output: 11                  | Program output: 94                 
Correct output: -94                 | Program output: -92                
Correct output: -95                 | Program output: 11                 
Correct output: -46                 | Program output: 59                 
Correct output: -4                  | Program output: -4                 
Correct output: 34                  | Program output: 50                 
Correct output: -100                | Program output: 71                 
Correct output: -88                 | Program output: -17                
Correct output: -68                 | Program output: -54                
Correct output: -90                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Lexicase best errors: [1 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Zero cases best errors: [1 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 943 1 1000 6 1000 1000 1 1000 1)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (0 943 1 0 6 0 0 1 0 1)
Population mean number of perfect (error zero) cases: 0.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Errors: [1 1 0 1 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 9.048
Median total errors in population: 9
Error averages by case: (1.0 0.057 0.999 1.0 0.994 1.0 1.0 0.999 1.0 0.999)
Error minima by case: (1 0 0 1 0 1 1 0 1 0)
Average genome size in population (length): 14.102
Average program size in population (points): 24.162
Average percent parens in population: 0.416
Minimum age in population: 11.125
Maximum age in population: 14.125
Average age in population: 12.61225
Median age in population: 12.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 580
Genome diversity (% unique genomes):	 0.256
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 582
Syntactic diversity (% unique Push programs):	 0.255
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2300373
--- Timings ---
Current time: 1559582749363 milliseconds
Total Time:          20.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.9 seconds, 67.3%
Fitness Testing:      4.1 seconds, 19.7%
Report:               2.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 54                 
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 51                 
Correct output: 27                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 15                 
Correct output: 35                  | Program output: 96                 
Correct output: 29                  | Program output: 98                 
Correct output: 1                   | Program output: 74                 
Correct output: 3                   | Program output: 53                 
Correct output: 17                  | Program output: 81                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 99                 
Correct output: 53                  | Program output: 61                 
Correct output: 59                  | Program output: 80                 
Correct output: 7                   | Program output: 75                 
Correct output: 1                   | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 70                  | Program output: 96                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -36                
Correct output: -76                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 30                 
Correct output: -58                 | Program output: 60                 
Correct output: -60                 | Program output: 28                 
Correct output: -64                 | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: 71                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: 91                 
Correct output: -93                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -66                
Correct output: -79                 | Program output: 1                  
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: 14                 
Correct output: -22                 | Program output: 66                 
Correct output: -28                 | Program output: 77                 
Correct output: -92                 | Program output: 12                 
Correct output: -81                 | Program output: 38                 
Correct output: -65                 | Program output: 83                 
Correct output: -97                 | Program output: -12                
Correct output: 10                  | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -8                 
Correct output: -59                 | Program output: 44                 
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: 75                 
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -21                
Correct output: -86                 | Program output: 35                 
Correct output: -55                 | Program output: -46                
Correct output: -99                 | Program output: -38                
Correct output: -99                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -53                
Correct output: -88                 | Program output: 86                 
Correct output: -78                 | Program output: -32                
Correct output: -88                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -58                 | Program output: 15                 
Correct output: -90                 | Program output: -32                
Correct output: -79                 | Program output: 74                 
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -34                
Correct output: -46                 | Program output: -37                
Correct output: -4                  | Program output: 85                 
Correct output: 34                  | Program output: 94                 
Correct output: -100                | Program output: 27                 
Correct output: -88                 | Program output: 62                 
Correct output: -68                 | Program output: -4                 
Correct output: -90                 | Program output: 64                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Lexicase best errors: [1 1 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 24
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Zero cases best errors: [1 1 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 24
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 563 386 1000 1000 1000 204)
Population mean number of elite cases: 8.15
Count of perfect (error zero) individuals by case: (0 0 0 0 563 386 0 0 0 204)
Population mean number of perfect (error zero) cases: 1.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Errors: [1 1 1 1 1 0 1 1 1 0]
Total: 8
Mean: 0.8
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 8.847
Median total errors in population: 9
Error averages by case: (1.0 1.0 1.0 1.0 0.437 0.614 1.0 1.0 1.0 0.796)
Error minima by case: (1 1 1 1 0 0 1 1 1 0)
Average genome size in population (length): 14.38
Average program size in population (points): 24.554
Average percent parens in population: 0.414
Minimum age in population: 12.125
Maximum age in population: 15.875
Average age in population: 14.193125
Median age in population: 14.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 462
Genome diversity (% unique genomes):	 0.258
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 463
Syntactic diversity (% unique Push programs):	 0.255
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2474609
--- Timings ---
Current time: 1559582751130 milliseconds
Total Time:          22.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.3 seconds, 68.3%
Fitness Testing:      4.3 seconds, 19.1%
Report:               2.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 54                 
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 51                 
Correct output: 27                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 15                 
Correct output: 35                  | Program output: 96                 
Correct output: 29                  | Program output: 98                 
Correct output: 1                   | Program output: 74                 
Correct output: 3                   | Program output: 53                 
Correct output: 17                  | Program output: 81                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 99                 
Correct output: 53                  | Program output: 61                 
Correct output: 59                  | Program output: 80                 
Correct output: 7                   | Program output: 75                 
Correct output: 1                   | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 70                  | Program output: 96                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -36                
Correct output: -76                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 30                 
Correct output: -58                 | Program output: 60                 
Correct output: -60                 | Program output: 28                 
Correct output: -64                 | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: 71                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: 91                 
Correct output: -93                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -66                
Correct output: -79                 | Program output: 1                  
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: 14                 
Correct output: -22                 | Program output: 66                 
Correct output: -28                 | Program output: 77                 
Correct output: -92                 | Program output: 12                 
Correct output: -81                 | Program output: 38                 
Correct output: -65                 | Program output: 83                 
Correct output: -97                 | Program output: -12                
Correct output: 10                  | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -8                 
Correct output: -59                 | Program output: 44                 
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: 75                 
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -21                
Correct output: -86                 | Program output: 35                 
Correct output: -55                 | Program output: -46                
Correct output: -99                 | Program output: -38                
Correct output: -99                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -53                
Correct output: -88                 | Program output: 86                 
Correct output: -78                 | Program output: -32                
Correct output: -88                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -58                 | Program output: 15                 
Correct output: -90                 | Program output: -32                
Correct output: -79                 | Program output: 74                 
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -34                
Correct output: -46                 | Program output: -37                
Correct output: -4                  | Program output: 85                 
Correct output: 34                  | Program output: 94                 
Correct output: -100                | Program output: 27                 
Correct output: -88                 | Program output: 62                 
Correct output: -68                 | Program output: -4                 
Correct output: -90                 | Program output: 64                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Lexicase best errors: [1 0 0 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Zero cases best errors: [1 0 0 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 318 318 1 1000 633 318 633 633 1000)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (1 318 318 1 0 633 318 633 633 0)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while () integer_mult))) ()) ())
Errors: [1 1 1 1 1 0 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 7.145
Median total errors in population: 7
Error averages by case: (0.999 0.682 0.682 0.999 1.0 0.367 0.682 0.367 0.367 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 14.172
Average program size in population (points): 24.236
Average percent parens in population: 0.414
Minimum age in population: 13.125
Maximum age in population: 17.375
Average age in population: 15.6315625
Median age in population: 15.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 267
Genome diversity (% unique genomes):	 0.293
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 270
Syntactic diversity (% unique Push programs):	 0.292
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 2645479
--- Timings ---
Current time: 1559582753268 milliseconds
Total Time:          24.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.1 seconds, 69.6%
Fitness Testing:      4.5 seconds, 18.2%
Report:               2.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: 41                 
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 92                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -53                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 48                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 54                 
Correct output: 1                   | Program output: 18                 
Correct output: 35                  | Program output: 63                 
Correct output: 29                  | Program output: 90                 
Correct output: 1                   | Program output: 52                 
Correct output: 3                   | Program output: 89                 
Correct output: 17                  | Program output: 30                 
Correct output: 43                  | Program output: 71                 
Correct output: 4                   | Program output: 12                 
Correct output: 53                  | Program output: 62                 
Correct output: 59                  | Program output: 92                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 57                 
Correct output: 25                  | Program output: 97                 
Correct output: 18                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 70                  | Program output: 88                 
Correct output: 60                  | Program output: 83                 
Correct output: -80                 | Program output: 40                 
Correct output: -76                 | Program output: -31                
Correct output: -45                 | Program output: 37                 
Correct output: -16                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: 30                 
Correct output: -66                 | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -60                
Correct output: -22                 | Program output: -22                
Correct output: -98                 | Program output: -22                
Correct output: -83                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -3                 
Correct output: -83                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -51                
Correct output: -83                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 56                 
Correct output: -28                 | Program output: 54                 
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 77                 
Correct output: -65                 | Program output: 84                 
Correct output: -97                 | Program output: 67                 
Correct output: 10                  | Program output: 53                 
Correct output: -75                 | Program output: -62                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: 92                 
Correct output: -93                 | Program output: 7                  
Correct output: -57                 | Program output: 70                 
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 69                 
Correct output: -99                 | Program output: -33                
Correct output: -99                 | Program output: -46                
Correct output: -73                 | Program output: -31                
Correct output: -2                  | Program output: 25                 
Correct output: -66                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -32                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 0                  
Correct output: -90                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -26                 | Program output: 19                 
Correct output: 11                  | Program output: 94                 
Correct output: -94                 | Program output: -92                
Correct output: -95                 | Program output: 11                 
Correct output: -46                 | Program output: 59                 
Correct output: -4                  | Program output: -4                 
Correct output: 34                  | Program output: 50                 
Correct output: -100                | Program output: 71                 
Correct output: -88                 | Program output: -17                
Correct output: -68                 | Program output: -54                
Correct output: -90                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Lexicase best errors: [1 1 0 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Zero cases best errors: [1 1 0 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 237 366 366 1000 237 352 1000 366 237)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (352 237 366 366 0 237 352 0 366 237)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Errors: [1 1 0 0 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 7.487
Median total errors in population: 7
Error averages by case: (0.648 0.763 0.634 0.634 1.0 0.763 0.648 1.0 0.634 0.763)
Error minima by case: (0 0 0 0 1 0 0 1 0 0)
Average genome size in population (length): 14.139
Average program size in population (points): 24.194
Average percent parens in population: 0.415
Minimum age in population: 14.625
Maximum age in population: 18.71875
Average age in population: 17.178625
Median age in population: 17.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 229
Genome diversity (% unique genomes):	 0.321
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 230
Syntactic diversity (% unique Push programs):	 0.317
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 2811709
--- Timings ---
Current time: 1559582755214 milliseconds
Total Time:          26.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.7 seconds, 70.5%
Fitness Testing:      4.7 seconds, 17.6%
Report:               3.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 54                 
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 51                 
Correct output: 27                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 15                 
Correct output: 35                  | Program output: 96                 
Correct output: 29                  | Program output: 98                 
Correct output: 1                   | Program output: 74                 
Correct output: 3                   | Program output: 53                 
Correct output: 17                  | Program output: 81                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 99                 
Correct output: 53                  | Program output: 61                 
Correct output: 59                  | Program output: 80                 
Correct output: 7                   | Program output: 75                 
Correct output: 1                   | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 70                  | Program output: 96                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -36                
Correct output: -76                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 30                 
Correct output: -58                 | Program output: 60                 
Correct output: -60                 | Program output: 28                 
Correct output: -64                 | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: 71                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: 91                 
Correct output: -93                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -66                
Correct output: -79                 | Program output: 1                  
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: 14                 
Correct output: -22                 | Program output: 66                 
Correct output: -28                 | Program output: 77                 
Correct output: -92                 | Program output: 12                 
Correct output: -81                 | Program output: 38                 
Correct output: -65                 | Program output: 83                 
Correct output: -97                 | Program output: -12                
Correct output: 10                  | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -8                 
Correct output: -59                 | Program output: 44                 
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: 75                 
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -21                
Correct output: -86                 | Program output: 35                 
Correct output: -55                 | Program output: -46                
Correct output: -99                 | Program output: -38                
Correct output: -99                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -53                
Correct output: -88                 | Program output: 86                 
Correct output: -78                 | Program output: -32                
Correct output: -88                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -58                 | Program output: 15                 
Correct output: -90                 | Program output: -32                
Correct output: -79                 | Program output: 74                 
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -34                
Correct output: -46                 | Program output: -37                
Correct output: -4                  | Program output: 85                 
Correct output: 34                  | Program output: 94                 
Correct output: -100                | Program output: 27                 
Correct output: -88                 | Program output: 62                 
Correct output: -68                 | Program output: -4                 
Correct output: -90                 | Program output: 64                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop in2) (print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult))))) ()) ()) ())
Lexicase best errors: [1 1 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 30
Percent parens: 0.467
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop in2) (print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult))))) ()) ()) ())
Zero cases best errors: [1 1 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 30
Percent parens: 0.467
--- Lexicase Population Statistics ---
Count of elite individuals by case: (382 382 1000 382 224 224 224 350 1000 1000)
Population mean number of elite cases: 5.17
Count of perfect (error zero) individuals by case: (382 382 0 382 224 224 224 350 0 0)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult)))) ()) ())
Errors: [1 1 1 1 0 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 7.832
Median total errors in population: 7
Error averages by case: (0.618 0.618 1.0 0.618 0.776 0.776 0.776 0.65 1.0 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 1 1)
Average genome size in population (length): 14.158
Average program size in population (points): 24.228
Average percent parens in population: 0.415
Minimum age in population: 15.625
Maximum age in population: 20.375
Average age in population: 18.70240625
Median age in population: 18.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 279
Genome diversity (% unique genomes):	 0.335
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 280
Syntactic diversity (% unique Push programs):	 0.332
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 2975936
--- Timings ---
Current time: 1559582757517 milliseconds
Total Time:          28.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.6 seconds, 71.7%
Fitness Testing:      4.9 seconds, 16.9%
Report:               3.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 74                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 86                 
Correct output: 17                  | Program output: 26                 
Correct output: 43                  | Program output: 51                 
Correct output: 4                   | Program output: 11                 
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 80                 
Correct output: 70                  | Program output: 82                 
Correct output: 60                  | Program output: 95                 
Correct output: -80                 | Program output: -34                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -18                
Correct output: -16                 | Program output: -14                
Correct output: -58                 | Program output: 51                 
Correct output: -60                 | Program output: 94                 
Correct output: -64                 | Program output: -16                
Correct output: -66                 | Program output: 93                 
Correct output: -8                  | Program output: 7                  
Correct output: -87                 | Program output: 83                 
Correct output: -22                 | Program output: 73                 
Correct output: -98                 | Program output: -18                
Correct output: -83                 | Program output: 88                 
Correct output: -95                 | Program output: -89                
Correct output: -93                 | Program output: 61                 
Correct output: -83                 | Program output: -54                
Correct output: -96                 | Program output: 31                 
Correct output: -79                 | Program output: -49                
Correct output: -83                 | Program output: 75                 
Correct output: -87                 | Program output: -5                 
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -16                
Correct output: -92                 | Program output: -60                
Correct output: -81                 | Program output: 58                 
Correct output: -65                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -66                
Correct output: -81                 | Program output: 83                 
Correct output: -59                 | Program output: -48                
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: 39                 
Correct output: -27                 | Program output: -14                
Correct output: 9                   | Program output: 58                 
Correct output: -57                 | Program output: 76                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 30                 
Correct output: -99                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -10                
Correct output: -2                  | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -15                
Correct output: -78                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: 30                 
Correct output: -26                 | Program output: 84                 
Correct output: 11                  | Program output: 42                 
Correct output: -94                 | Program output: -57                
Correct output: -95                 | Program output: 92                 
Correct output: -46                 | Program output: 72                 
Correct output: -4                  | Program output: 36                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (in3 print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Lexicase best errors: [0 1 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 24
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (in3 print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Zero cases best errors: [0 1 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 24
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (413 1000 1000 142 413 1000 416 413 142 1000)
Population mean number of elite cases: 5.94
Count of perfect (error zero) individuals by case: (413 0 0 142 413 0 416 413 142 0)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (in3 print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Errors: [0 1 1 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 8.061
Median total errors in population: 8
Error averages by case: (0.587 1.0 1.0 0.858 0.587 1.0 0.584 0.587 0.858 1.0)
Error minima by case: (0 1 1 0 0 1 0 0 0 1)
Average genome size in population (length): 14.258
Average program size in population (points): 24.445
Average percent parens in population: 0.415
Minimum age in population: 16.875
Maximum age in population: 22.0234375
Average age in population: 20.18128125
Median age in population: 20.26953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 251
Genome diversity (% unique genomes):	 0.372
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 255
Syntactic diversity (% unique Push programs):	 0.37
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 3140619
--- Timings ---
Current time: 1559582759918 milliseconds
Total Time:          31.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.7 seconds, 72.7%
Fitness Testing:      5.1 seconds, 16.2%
Report:               3.4 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 74                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 86                 
Correct output: 17                  | Program output: 26                 
Correct output: 43                  | Program output: 51                 
Correct output: 4                   | Program output: 11                 
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 80                 
Correct output: 70                  | Program output: 82                 
Correct output: 60                  | Program output: 95                 
Correct output: -80                 | Program output: -34                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -18                
Correct output: -16                 | Program output: -14                
Correct output: -58                 | Program output: 51                 
Correct output: -60                 | Program output: 94                 
Correct output: -64                 | Program output: -16                
Correct output: -66                 | Program output: 93                 
Correct output: -8                  | Program output: 7                  
Correct output: -87                 | Program output: 83                 
Correct output: -22                 | Program output: 73                 
Correct output: -98                 | Program output: -18                
Correct output: -83                 | Program output: 88                 
Correct output: -95                 | Program output: -89                
Correct output: -93                 | Program output: 61                 
Correct output: -83                 | Program output: -54                
Correct output: -96                 | Program output: 31                 
Correct output: -79                 | Program output: -49                
Correct output: -83                 | Program output: 75                 
Correct output: -87                 | Program output: -5                 
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -16                
Correct output: -92                 | Program output: -60                
Correct output: -81                 | Program output: 58                 
Correct output: -65                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -66                
Correct output: -81                 | Program output: 83                 
Correct output: -59                 | Program output: -48                
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: 39                 
Correct output: -27                 | Program output: -14                
Correct output: 9                   | Program output: 58                 
Correct output: -57                 | Program output: 76                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 30                 
Correct output: -99                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -10                
Correct output: -2                  | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -15                
Correct output: -78                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: 30                 
Correct output: -26                 | Program output: 84                 
Correct output: 11                  | Program output: 42                 
Correct output: -94                 | Program output: -57                
Correct output: -95                 | Program output: 92                 
Correct output: -46                 | Program output: 72                 
Correct output: -4                  | Program output: 36                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (in3 print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Lexicase best errors: [1 1 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (in3 print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Zero cases best errors: [1 1 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 5 632 5 632 5 632 632 632 950)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (313 5 632 5 632 5 632 632 632 950)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (in3 print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Errors: [1 1 0 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 5.562
Median total errors in population: 4
Error averages by case: (0.687 0.995 0.368 0.995 0.368 0.995 0.368 0.368 0.368 0.05)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.16
Average program size in population (points): 24.298
Average percent parens in population: 0.415
Minimum age in population: 18.625
Maximum age in population: 23.609375
Average age in population: 21.67615625
Median age in population: 21.7265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 315
Genome diversity (% unique genomes):	 0.338
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 317
Syntactic diversity (% unique Push programs):	 0.334
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 3302667
--- Timings ---
Current time: 1559582762180 milliseconds
Total Time:          33.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.6 seconds, 73.5%
Fitness Testing:      5.2 seconds, 15.7%
Report:               3.5 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 54                 
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 51                 
Correct output: 27                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 15                 
Correct output: 35                  | Program output: 96                 
Correct output: 29                  | Program output: 98                 
Correct output: 1                   | Program output: 74                 
Correct output: 3                   | Program output: 53                 
Correct output: 17                  | Program output: 81                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 99                 
Correct output: 53                  | Program output: 61                 
Correct output: 59                  | Program output: 80                 
Correct output: 7                   | Program output: 75                 
Correct output: 1                   | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 70                  | Program output: 96                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -36                
Correct output: -76                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 30                 
Correct output: -58                 | Program output: 60                 
Correct output: -60                 | Program output: 28                 
Correct output: -64                 | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: 71                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: 91                 
Correct output: -93                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -66                
Correct output: -79                 | Program output: 1                  
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: 14                 
Correct output: -22                 | Program output: 66                 
Correct output: -28                 | Program output: 77                 
Correct output: -92                 | Program output: 12                 
Correct output: -81                 | Program output: 38                 
Correct output: -65                 | Program output: 83                 
Correct output: -97                 | Program output: -12                
Correct output: 10                  | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -8                 
Correct output: -59                 | Program output: 44                 
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: 75                 
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -21                
Correct output: -86                 | Program output: 35                 
Correct output: -55                 | Program output: -46                
Correct output: -99                 | Program output: -38                
Correct output: -99                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -53                
Correct output: -88                 | Program output: 86                 
Correct output: -78                 | Program output: -32                
Correct output: -88                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -58                 | Program output: 15                 
Correct output: -90                 | Program output: -32                
Correct output: -79                 | Program output: 74                 
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -34                
Correct output: -46                 | Program output: -37                
Correct output: -4                  | Program output: 85                 
Correct output: 34                  | Program output: 94                 
Correct output: -100                | Program output: 27                 
Correct output: -88                 | Program output: 62                 
Correct output: -68                 | Program output: -4                 
Correct output: -90                 | Program output: 64                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (boolean_yankdup print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Lexicase best errors: [0 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 24
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (boolean_yankdup print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Zero cases best errors: [0 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 24
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 424 252 546 111 1 111 546 545 252)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (313 424 252 546 111 1 111 546 545 252)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_yank print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Errors: [0 0 0 1 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 6.899
Median total errors in population: 7
Error averages by case: (0.687 0.576 0.748 0.454 0.889 0.999 0.889 0.454 0.455 0.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.132
Average program size in population (points): 24.29
Average percent parens in population: 0.416
Minimum age in population: 20.6796875
Maximum age in population: 25.23046875
Average age in population: 23.358248046875
Median age in population: 23.4453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 213
Genome diversity (% unique genomes):	 0.321
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.319
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 3505717
--- Timings ---
Current time: 1559582764149 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.2 seconds, 73.9%
Fitness Testing:      5.5 seconds, 15.5%
Report:               3.7 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 74                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 86                 
Correct output: 17                  | Program output: 26                 
Correct output: 43                  | Program output: 51                 
Correct output: 4                   | Program output: 11                 
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 80                 
Correct output: 70                  | Program output: 82                 
Correct output: 60                  | Program output: 95                 
Correct output: -80                 | Program output: -34                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -18                
Correct output: -16                 | Program output: -14                
Correct output: -58                 | Program output: 51                 
Correct output: -60                 | Program output: 94                 
Correct output: -64                 | Program output: -16                
Correct output: -66                 | Program output: 93                 
Correct output: -8                  | Program output: 7                  
Correct output: -87                 | Program output: 83                 
Correct output: -22                 | Program output: 73                 
Correct output: -98                 | Program output: -18                
Correct output: -83                 | Program output: 88                 
Correct output: -95                 | Program output: -89                
Correct output: -93                 | Program output: 61                 
Correct output: -83                 | Program output: -54                
Correct output: -96                 | Program output: 31                 
Correct output: -79                 | Program output: -49                
Correct output: -83                 | Program output: 75                 
Correct output: -87                 | Program output: -5                 
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -16                
Correct output: -92                 | Program output: -60                
Correct output: -81                 | Program output: 58                 
Correct output: -65                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -66                
Correct output: -81                 | Program output: 83                 
Correct output: -59                 | Program output: -48                
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: 39                 
Correct output: -27                 | Program output: -14                
Correct output: 9                   | Program output: 58                 
Correct output: -57                 | Program output: 76                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 30                 
Correct output: -99                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -10                
Correct output: -2                  | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -15                
Correct output: -78                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: 30                 
Correct output: -26                 | Program output: 84                 
Correct output: 11                  | Program output: 42                 
Correct output: -94                 | Program output: -57                
Correct output: -95                 | Program output: 92                 
Correct output: -46                 | Program output: 72                 
Correct output: -4                  | Program output: 36                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_yankdup in2) (print_boolean exec_when (in3 print_integer exec_shove (90 exec_do*while (integer_mult))))) ())
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 23
Percent parens: 0.391
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_yankdup in2) (print_boolean exec_when (in3 print_integer exec_shove (90 exec_do*while (integer_mult))))) ())
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 23
Percent parens: 0.391
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 265 233 265 265 265 334 233 233 265)
Population mean number of elite cases: 2.59
Count of perfect (error zero) individuals by case: (233 265 233 265 265 265 334 233 233 265)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop integer_mult in2) (print_boolean exec_when (in3 print_integer exec_shove (90 exec_do*while (integer_mult))))) ())
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 14
Size: 23
Percent parens: 0.391
--- Population Statistics ---
Average total errors in population: 7.409
Median total errors in population: 9
Error averages by case: (0.767 0.735 0.767 0.735 0.735 0.735 0.666 0.767 0.767 0.735)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.268
Average program size in population (points): 24.524
Average percent parens in population: 0.415
Minimum age in population: 22.0625
Maximum age in population: 26.7353515625
Average age in population: 24.9439609375
Median age in population: 24.96826171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.379
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 3665775
--- Timings ---
Current time: 1559582766506 milliseconds
Total Time:          37.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.2 seconds, 74.7%
Fitness Testing:      5.7 seconds, 15.0%
Report:               3.8 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 54                 
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 51                 
Correct output: 27                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 15                 
Correct output: 35                  | Program output: 96                 
Correct output: 29                  | Program output: 98                 
Correct output: 1                   | Program output: 74                 
Correct output: 3                   | Program output: 53                 
Correct output: 17                  | Program output: 81                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 99                 
Correct output: 53                  | Program output: 61                 
Correct output: 59                  | Program output: 80                 
Correct output: 7                   | Program output: 75                 
Correct output: 1                   | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 70                  | Program output: 96                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -36                
Correct output: -76                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 30                 
Correct output: -58                 | Program output: 60                 
Correct output: -60                 | Program output: 28                 
Correct output: -64                 | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: 71                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: 91                 
Correct output: -93                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -66                
Correct output: -79                 | Program output: 1                  
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: 14                 
Correct output: -22                 | Program output: 66                 
Correct output: -28                 | Program output: 77                 
Correct output: -92                 | Program output: 12                 
Correct output: -81                 | Program output: 38                 
Correct output: -65                 | Program output: 83                 
Correct output: -97                 | Program output: -12                
Correct output: 10                  | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -8                 
Correct output: -59                 | Program output: 44                 
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: 75                 
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -21                
Correct output: -86                 | Program output: 35                 
Correct output: -55                 | Program output: -46                
Correct output: -99                 | Program output: -38                
Correct output: -99                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -53                
Correct output: -88                 | Program output: 86                 
Correct output: -78                 | Program output: -32                
Correct output: -88                 | Program output: 79                 
Correct output: -100                | Program output: -59                
Correct output: -58                 | Program output: 15                 
Correct output: -90                 | Program output: -32                
Correct output: -79                 | Program output: 74                 
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -34                
Correct output: -46                 | Program output: -37                
Correct output: -4                  | Program output: 85                 
Correct output: 34                  | Program output: 94                 
Correct output: -100                | Program output: 27                 
Correct output: -88                 | Program output: 62                 
Correct output: -68                 | Program output: -4                 
Correct output: -90                 | Program output: 64                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_yank print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Lexicase best errors: [1 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (integer_yank print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Zero cases best errors: [1 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (385 95 385 385 1000 1000 95 95 564 95)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (385 95 385 385 0 0 95 95 564 95)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (exec_dup_items) print_boolean exec_when (integer_pop exec_when (in2) print_boolean exec_when (integer_min print_integer exec_shove (90 integer_add integer_mult)))) ()) ())
Errors: [1 0 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 30
Percent parens: 0.367
--- Population Statistics ---
Average total errors in population: 7.901
Median total errors in population: 9
Error averages by case: (0.615 0.905 0.615 0.615 1.0 1.0 0.905 0.905 0.436 0.905)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 13.994
Average program size in population (points): 23.848
Average percent parens in population: 0.408
Minimum age in population: 23.0625
Maximum age in population: 28.37060546875
Average age in population: 26.34337890625
Median age in population: 26.43310546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.393
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.389
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 3825721
--- Timings ---
Current time: 1559582769181 milliseconds
Total Time:          40.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.5 seconds, 75.5%
Fitness Testing:      5.9 seconds, 14.5%
Report:               4.0 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: 41                 
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 92                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -53                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 48                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 54                 
Correct output: 1                   | Program output: 18                 
Correct output: 35                  | Program output: 63                 
Correct output: 29                  | Program output: 90                 
Correct output: 1                   | Program output: 52                 
Correct output: 3                   | Program output: 89                 
Correct output: 17                  | Program output: 30                 
Correct output: 43                  | Program output: 71                 
Correct output: 4                   | Program output: 12                 
Correct output: 53                  | Program output: 62                 
Correct output: 59                  | Program output: 92                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 57                 
Correct output: 25                  | Program output: 97                 
Correct output: 18                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 70                  | Program output: 88                 
Correct output: 60                  | Program output: 83                 
Correct output: -80                 | Program output: 40                 
Correct output: -76                 | Program output: -31                
Correct output: -45                 | Program output: 37                 
Correct output: -16                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: 30                 
Correct output: -66                 | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -60                
Correct output: -22                 | Program output: -22                
Correct output: -98                 | Program output: -22                
Correct output: -83                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -3                 
Correct output: -83                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -51                
Correct output: -83                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 56                 
Correct output: -28                 | Program output: 54                 
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 77                 
Correct output: -65                 | Program output: 84                 
Correct output: -97                 | Program output: 67                 
Correct output: 10                  | Program output: 53                 
Correct output: -75                 | Program output: -62                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: 92                 
Correct output: -93                 | Program output: 7                  
Correct output: -57                 | Program output: 70                 
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 69                 
Correct output: -99                 | Program output: -33                
Correct output: -99                 | Program output: -46                
Correct output: -73                 | Program output: -31                
Correct output: -2                  | Program output: 25                 
Correct output: -66                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -32                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 0                  
Correct output: -90                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -26                 | Program output: 19                 
Correct output: 11                  | Program output: 94                 
Correct output: -94                 | Program output: -92                
Correct output: -95                 | Program output: 11                 
Correct output: -46                 | Program output: 59                 
Correct output: -4                  | Program output: -4                 
Correct output: 34                  | Program output: 50                 
Correct output: -100                | Program output: 71                 
Correct output: -88                 | Program output: -17                
Correct output: -68                 | Program output: -54                
Correct output: -90                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop integer_pop) (exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (integer_add exec_do*while (integer_mult))))) ())
Lexicase best errors: [1 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop integer_pop) (exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (integer_add exec_do*while (integer_mult))))) ())
Zero cases best errors: [1 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (594 348 596 1000 3 348 1000 594 348 348)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (594 348 596 0 3 348 0 594 348 348)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty integer_gt integer_mult))) ()) ())
Errors: [1 0 1 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 14
Size: 23
Percent parens: 0.391
--- Population Statistics ---
Average total errors in population: 6.821
Median total errors in population: 7
Error averages by case: (0.406 0.652 0.404 1.0 0.997 0.652 1.0 0.406 0.652 0.652)
Error minima by case: (0 0 0 1 0 0 1 0 0 0)
Average genome size in population (length): 13.904
Average program size in population (points): 23.504
Average percent parens in population: 0.406
Minimum age in population: 25.068359375
Maximum age in population: 29.902099609375
Average age in population: 27.99248388671875
Median age in population: 28.083984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.324
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.321
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 3980317
--- Timings ---
Current time: 1559582771328 milliseconds
Total Time:          42.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.4 seconds, 75.9%
Fitness Testing:      6.0 seconds, 14.2%
Report:               4.1 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: 41                 
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 92                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -53                
Correct output: 42                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 48                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 54                 
Correct output: 1                   | Program output: 18                 
Correct output: 35                  | Program output: 63                 
Correct output: 29                  | Program output: 90                 
Correct output: 1                   | Program output: 52                 
Correct output: 3                   | Program output: 89                 
Correct output: 17                  | Program output: 30                 
Correct output: 43                  | Program output: 71                 
Correct output: 4                   | Program output: 12                 
Correct output: 53                  | Program output: 62                 
Correct output: 59                  | Program output: 92                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 57                 
Correct output: 25                  | Program output: 97                 
Correct output: 18                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 70                  | Program output: 88                 
Correct output: 60                  | Program output: 83                 
Correct output: -80                 | Program output: 40                 
Correct output: -76                 | Program output: -31                
Correct output: -45                 | Program output: 37                 
Correct output: -16                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: 30                 
Correct output: -66                 | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -60                
Correct output: -22                 | Program output: -22                
Correct output: -98                 | Program output: -22                
Correct output: -83                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -3                 
Correct output: -83                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -51                
Correct output: -83                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 56                 
Correct output: -28                 | Program output: 54                 
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 77                 
Correct output: -65                 | Program output: 84                 
Correct output: -97                 | Program output: 67                 
Correct output: 10                  | Program output: 53                 
Correct output: -75                 | Program output: -62                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: 92                 
Correct output: -93                 | Program output: 7                  
Correct output: -57                 | Program output: 70                 
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 84                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 69                 
Correct output: -99                 | Program output: -33                
Correct output: -99                 | Program output: -46                
Correct output: -73                 | Program output: -31                
Correct output: -2                  | Program output: 25                 
Correct output: -66                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -32                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: 0                  
Correct output: -90                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -26                 | Program output: 19                 
Correct output: 11                  | Program output: 94                 
Correct output: -94                 | Program output: -92                
Correct output: -95                 | Program output: 11                 
Correct output: -46                 | Program output: 59                 
Correct output: -4                  | Program output: -4                 
Correct output: 34                  | Program output: 50                 
Correct output: -100                | Program output: 71                 
Correct output: -88                 | Program output: -17                
Correct output: -68                 | Program output: -54                
Correct output: -90                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_dup () integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (exec_rot (exec_do*while (integer_mult)) () ()))) ())
Lexicase best errors: [0 1 1 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 25
Percent parens: 0.440
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_dup () integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (exec_rot (exec_do*while (integer_mult)) () ()))) ())
Zero cases best errors: [0 1 1 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 25
Percent parens: 0.440
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 48 336 1000 336 489 1000 489 1000 1000)
Population mean number of elite cases: 6.23
Count of perfect (error zero) individuals by case: (534 48 336 0 336 489 0 489 0 0)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () () (integer_pop exec_when (in1) print_boolean exec_when (integer_div print_integer exec_shove (integer_empty exec_do*while (integer_mult))))) ())
Errors: [0 1 1 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 7.768
Median total errors in population: 8
Error averages by case: (0.466 0.952 0.664 1.0 0.664 0.511 1.0 0.511 1.0 1.0)
Error minima by case: (0 0 0 1 0 0 1 0 1 1)
Average genome size in population (length): 14.278
Average program size in population (points): 23.905
Average percent parens in population: 0.400
Minimum age in population: 26.50390625
Maximum age in population: 31.4522705078125
Average age in population: 29.36693408203125
Median age in population: 29.4622802734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.405
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.4
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 4145217
--- Timings ---
Current time: 1559582773486 milliseconds
Total Time:          44.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.2 seconds, 76.3%
Fitness Testing:      6.2 seconds, 13.9%
Report:               4.3 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 74                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 86                 
Correct output: 17                  | Program output: 26                 
Correct output: 43                  | Program output: 51                 
Correct output: 4                   | Program output: 11                 
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 80                 
Correct output: 70                  | Program output: 82                 
Correct output: 60                  | Program output: 95                 
Correct output: -80                 | Program output: -34                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -18                
Correct output: -16                 | Program output: -14                
Correct output: -58                 | Program output: 51                 
Correct output: -60                 | Program output: 94                 
Correct output: -64                 | Program output: -16                
Correct output: -66                 | Program output: 93                 
Correct output: -8                  | Program output: 7                  
Correct output: -87                 | Program output: 83                 
Correct output: -22                 | Program output: 73                 
Correct output: -98                 | Program output: -18                
Correct output: -83                 | Program output: 88                 
Correct output: -95                 | Program output: -89                
Correct output: -93                 | Program output: 61                 
Correct output: -83                 | Program output: -54                
Correct output: -96                 | Program output: 31                 
Correct output: -79                 | Program output: -49                
Correct output: -83                 | Program output: 75                 
Correct output: -87                 | Program output: -5                 
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -16                
Correct output: -92                 | Program output: -60                
Correct output: -81                 | Program output: 58                 
Correct output: -65                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -66                
Correct output: -81                 | Program output: 83                 
Correct output: -59                 | Program output: -48                
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: 39                 
Correct output: -27                 | Program output: -14                
Correct output: 9                   | Program output: 58                 
Correct output: -57                 | Program output: 76                 
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: 30                 
Correct output: -99                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -10                
Correct output: -2                  | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -15                
Correct output: -78                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: 30                 
Correct output: -26                 | Program output: 84                 
Correct output: 11                  | Program output: 42                 
Correct output: -94                 | Program output: -57                
Correct output: -95                 | Program output: 92                 
Correct output: -46                 | Program output: 72                 
Correct output: -4                  | Program output: 36                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in3) print_boolean exec_when (integer_min print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Lexicase best errors: [1 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 24
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in3) print_boolean exec_when (integer_min print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Zero cases best errors: [1 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 24
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 241 240 406 406 240 239 1000 406 1000)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (0 241 240 406 406 240 239 0 406 0)
Population mean number of perfect (error zero) cases: 2.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in3) print_boolean exec_when (integer_min print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ())
Errors: [1 0 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 7.822
Median total errors in population: 7
Error averages by case: (1.0 0.759 0.76 0.594 0.594 0.76 0.761 1.0 0.594 1.0)
Error minima by case: (1 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 14.042
Average program size in population (points): 23.648
Average percent parens in population: 0.403
Minimum age in population: 27.50390625
Maximum age in population: 32.75213623046875
Average age in population: 30.84874377441406
Median age in population: 30.91342163085938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.417
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 4303911
--- Timings ---
Current time: 1559582775598 milliseconds
Total Time:          46.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.0 seconds, 76.7%
Fitness Testing:      6.4 seconds, 13.7%
Report:               4.4 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 53                 
Correct output: 17                  | Program output: 26                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 11                 
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 31                 
Correct output: 70                  | Program output: 82                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -14                
Correct output: -58                 | Program output: 51                 
Correct output: -60                 | Program output: 28                 
Correct output: -64                 | Program output: -16                
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: 7                  
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -89                
Correct output: -93                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -66                
Correct output: -79                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: -5                 
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -16                
Correct output: -92                 | Program output: -60                
Correct output: -81                 | Program output: 38                 
Correct output: -65                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -8                 
Correct output: -59                 | Program output: -48                
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: -14                
Correct output: 9                   | Program output: 58                 
Correct output: -57                 | Program output: -21                
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: -46                
Correct output: -99                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -15                
Correct output: -78                 | Program output: -32                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: 30                 
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -34                
Correct output: -46                 | Program output: -37                
Correct output: -4                  | Program output: 36                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (boolean_and exec_when (in3) print_boolean exec_when (integer_min print_integer exec_shove (90 exec_do*while (integer_mult))))) ()) ()) ()) ())
Lexicase best errors: [0 1 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.425
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (boolean_and exec_when (in3) print_boolean exec_when (integer_min print_integer exec_shove (90 exec_do*while (integer_mult))))) ()) ()) ()) ())
Zero cases best errors: [0 1 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.425
--- Lexicase Population Statistics ---
Count of elite individuals by case: (542 404 404 947 542 404 948 542 1 6)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (542 404 404 947 542 404 948 542 1 6)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (boolean_and exec_when (in3) print_boolean exec_when (integer_min print_integer exec_shove (90 exec_do*while (integer_mult))))) ()) ()) ()) ())
Errors: [0 1 1 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 40
Percent parens: 0.425
--- Population Statistics ---
Average total errors in population: 5.26
Median total errors in population: 5
Error averages by case: (0.458 0.596 0.596 0.053 0.458 0.596 0.052 0.458 0.999 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.325
Average program size in population (points): 24.107
Average percent parens in population: 0.403
Minimum age in population: 28.50390625
Maximum age in population: 34.12286376953125
Average age in population: 32.28471139526367
Median age in population: 32.34896850585938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 277
Genome diversity (% unique genomes):	 0.355
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 277
Syntactic diversity (% unique Push programs):	 0.35
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 4469191
--- Timings ---
Current time: 1559582777829 milliseconds
Total Time:          49.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.8 seconds, 77.0%
Fitness Testing:      6.6 seconds, 13.5%
Report:               4.6 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 53                 
Correct output: 17                  | Program output: 26                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 11                 
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 31                 
Correct output: 70                  | Program output: 82                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -14                
Correct output: -58                 | Program output: 51                 
Correct output: -60                 | Program output: 28                 
Correct output: -64                 | Program output: -16                
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: 7                  
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -89                
Correct output: -93                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -66                
Correct output: -79                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: -5                 
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -16                
Correct output: -92                 | Program output: -60                
Correct output: -81                 | Program output: 38                 
Correct output: -65                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -8                 
Correct output: -59                 | Program output: -48                
Correct output: -93                 | Program output: 79                 
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: -14                
Correct output: 9                   | Program output: 58                 
Correct output: -57                 | Program output: -21                
Correct output: -86                 | Program output: -53                
Correct output: -55                 | Program output: -46                
Correct output: -99                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -15                
Correct output: -78                 | Program output: -32                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: 30                 
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -34                
Correct output: -46                 | Program output: -37                
Correct output: -4                  | Program output: 36                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (exec_when (boolean_and exec_when (in3) print_boolean exec_when (integer_min) print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ()) ()) ())
Lexicase best errors: [0 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 40
Percent parens: 0.425
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (exec_when (boolean_and exec_when (in3) print_boolean exec_when (integer_min) print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ()) ()) ())
Zero cases best errors: [0 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 40
Percent parens: 0.425
--- Lexicase Population Statistics ---
Count of elite individuals by case: (588 347 313 587 270 940 586 270 588 270)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (588 347 313 587 270 940 586 270 588 270)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove})
Best program: (exec_if (integer_mod integer_pop exec_when (in1) boolean_eq exec_when (integer_div boolean_empty exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (boolean_and exec_when (in3) print_boolean exec_when (integer_min print_integer exec_shove ()))) ()) ()) ())) ())
Errors: [0 1 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 27
Size: 45
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 5.241
Median total errors in population: 4
Error averages by case: (0.412 0.653 0.687 0.413 0.73 0.06 0.414 0.73 0.412 0.73)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.539
Average program size in population (points): 27.33
Average percent parens in population: 0.384
Minimum age in population: 31.25372314453125
Maximum age in population: 35.63133239746094
Average age in population: 33.73268344116211
Median age in population: 33.78399658203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 273
Genome diversity (% unique genomes):	 0.34
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 274
Syntactic diversity (% unique Push programs):	 0.336
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 4657779
--- Timings ---
Current time: 1559582780013 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.6 seconds, 77.2%
Fitness Testing:      6.8 seconds, 13.3%
Report:               4.7 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 54                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 43                  | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 40                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 76                 
Correct output: 70                  | Program output: 70                 
Correct output: 60                  | Program output: 87                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -18                
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: 18                 
Correct output: -60                 | Program output: 58                 
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -46                
Correct output: -8                  | Program output: 3                  
Correct output: -87                 | Program output: -52                
Correct output: -22                 | Program output: -1                 
Correct output: -98                 | Program output: -46                
Correct output: -83                 | Program output: 88                 
Correct output: -95                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -54                
Correct output: -96                 | Program output: 23                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: 61                 
Correct output: -87                 | Program output: -5                 
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -92                 | Program output: -60                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -66                
Correct output: -81                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 5                  
Correct output: -27                 | Program output: -14                
Correct output: 9                   | Program output: 9                  
Correct output: -57                 | Program output: 47                 
Correct output: -86                 | Program output: -59                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -30                
Correct output: -2                  | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -41                
Correct output: -78                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: 6                  
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: 30                 
Correct output: -26                 | Program output: 84                 
Correct output: 11                  | Program output: 42                 
Correct output: -94                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: 36                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_do*while () integer_pop in4 in3) (print_boolean exec_when (integer_min print_integer exec_shove (90 exec_do*while (integer_mult)))))
Lexicase best errors: [0 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_do*while () integer_pop in4 in3) (print_boolean exec_when (integer_min print_integer exec_shove (90 exec_do*while (integer_mult)))))
Zero cases best errors: [0 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 177 556 932 555 177 186 186 556 186)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (186 177 556 932 555 177 186 186 556 186)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_do*while () integer_pop in4 in3) (print_boolean exec_when (integer_min print_integer exec_shove (90 exec_do*while (integer_mult)))))
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 14
Size: 21
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.303
Median total errors in population: 6
Error averages by case: (0.814 0.823 0.444 0.068 0.445 0.823 0.814 0.814 0.444 0.814)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.31
Average program size in population (points): 34.205
Average percent parens in population: 0.397
Minimum age in population: 33.06655883789062
Maximum age in population: 36.78399658203125
Average age in population: 34.99622499847412
Median age in population: 35.10359954833984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 194
Genome diversity (% unique genomes):	 0.328
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.327
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 4876691
--- Timings ---
Current time: 1559582782272 milliseconds
Total Time:          53.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.4 seconds, 77.4%
Fitness Testing:      7.1 seconds, 13.2%
Report:               4.9 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -15                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 54                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 43                  | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 40                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 76                 
Correct output: 70                  | Program output: 70                 
Correct output: 60                  | Program output: 87                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -18                
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: 18                 
Correct output: -60                 | Program output: 58                 
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -46                
Correct output: -8                  | Program output: 3                  
Correct output: -87                 | Program output: -52                
Correct output: -22                 | Program output: -1                 
Correct output: -98                 | Program output: -46                
Correct output: -83                 | Program output: 88                 
Correct output: -95                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -54                
Correct output: -96                 | Program output: 23                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: 61                 
Correct output: -87                 | Program output: -5                 
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -92                 | Program output: -60                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -66                
Correct output: -81                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 5                  
Correct output: -27                 | Program output: -14                
Correct output: 9                   | Program output: 9                  
Correct output: -57                 | Program output: 47                 
Correct output: -86                 | Program output: -59                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -30                
Correct output: -2                  | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -41                
Correct output: -78                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: 6                  
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: 30                 
Correct output: -26                 | Program output: 84                 
Correct output: 11                  | Program output: 42                 
Correct output: -94                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: 36                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (boolean_and print_boolean in1 integer_min) print_integer exec_shove (90 exec_do*while (integer_mult))) ()) ())) ()) ()) ()) ())
Lexicase best errors: [1 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.447
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (boolean_and print_boolean in1 integer_min) print_integer exec_shove (90 exec_do*while (integer_mult))) ()) ())) ()) ()) ()) ())
Zero cases best errors: [1 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.447
--- Lexicase Population Statistics ---
Count of elite individuals by case: (613 613 399 406 405 459 399 956 460 944)
Population mean number of elite cases: 5.65
Count of perfect (error zero) individuals by case: (613 613 399 406 405 459 399 956 460 944)
Population mean number of perfect (error zero) cases: 5.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_do*while () integer_pop in4 in3) (print_boolean exec_when (integer_min print_integer exec_shove (90 exec_do*while (integer_mult)))))
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 14
Size: 21
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.346
Median total errors in population: 4
Error averages by case: (0.387 0.387 0.601 0.594 0.595 0.541 0.601 0.044 0.54 0.056)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.239
Average program size in population (points): 29.944
Average percent parens in population: 0.380
Minimum age in population: 34.43194580078125
Maximum age in population: 38.74671173095703
Average age in population: 36.4074372253418
Median age in population: 36.41575622558594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 295
Genome diversity (% unique genomes):	 0.31
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 298
Syntactic diversity (% unique Push programs):	 0.309
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 5073931
--- Timings ---
Current time: 1559582784624 milliseconds
Total Time:          55.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.4 seconds, 77.7%
Fitness Testing:      7.3 seconds, 13.0%
Report:               5.1 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 53                 
Correct output: 17                  | Program output: 26                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 11                 
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 2                  
Correct output: 70                  | Program output: 82                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -36                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -14                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -16                
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -3                 
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -51                
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -16                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 38                 
Correct output: -65                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -48                
Correct output: -93                 | Program output: 7                  
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 58                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -46                
Correct output: -99                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -34                
Correct output: -46                 | Program output: -37                
Correct output: -4                  | Program output: -4                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (exec_when (boolean_and exec_when (in3) print_boolean in1 integer_min) integer_min) (print_integer exec_shove ())) ()) ()) ())
Lexicase best errors: [0 0 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 36
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (exec_when (boolean_and exec_when (in3) print_boolean in1 integer_min) integer_min) (print_integer exec_shove ())) ()) ()) ())
Zero cases best errors: [0 0 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 36
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (690 422 423 688 303 423 303 303 440 440)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (690 422 423 688 303 423 303 303 440 440)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction 90} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_when (in2) print_boolean exec_when (boolean_and print_boolean in1 integer_min) boolean_and exec_when (in3) print_boolean exec_when (integer_min print_integer exec_shove (90 exec_do*while (integer_mult)))) ()) ()) ()) ()) ()) ())
Errors: [0 0 0 0 1 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 53
Percent parens: 0.415
--- Population Statistics ---
Average total errors in population: 5.565
Median total errors in population: 5
Error averages by case: (0.31 0.578 0.577 0.312 0.697 0.577 0.697 0.697 0.56 0.56)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.206
Average program size in population (points): 31.565
Average percent parens in population: 0.382
Minimum age in population: 35.6263427734375
Maximum age in population: 39.94525146484375
Average age in population: 37.88425368499756
Median age in population: 37.89353942871094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 191
Genome diversity (% unique genomes):	 0.424
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 5278005
--- Timings ---
Current time: 1559582786931 milliseconds
Total Time:          58.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.3 seconds, 77.9%
Fitness Testing:      7.5 seconds, 12.9%
Report:               5.3 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 213
Test mean error for best: 0.21300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 43                  | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 2                  
Correct output: 70                  | Program output: 70                 
Correct output: 60                  | Program output: 83                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -18                
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -46                
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -60                
Correct output: -22                 | Program output: -22                
Correct output: -98                 | Program output: -46                
Correct output: -83                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -54                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 9                  
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -31                
Correct output: -2                  | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -26                 | Program output: 19                 
Correct output: 11                  | Program output: 42                 
Correct output: -94                 | Program output: -92                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 boolean_and exec_when (in3) print_boolean in1 integer_min) (integer_min) print_integer exec_shove ()) ()) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 boolean_and exec_when (in3) print_boolean in1 integer_min) (integer_min) print_integer exec_shove ()) ()) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (930 571 918 923 347 347 347 346 557 558)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (930 571 918 923 347 347 347 346 557 558)
Population mean number of perfect (error zero) cases: 5.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 boolean_and exec_when (in3) print_boolean in1 integer_min) (integer_min) print_integer exec_shove ()) ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 21
Size: 35
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 4.156
Median total errors in population: 4
Error averages by case: (0.07 0.429 0.082 0.077 0.653 0.653 0.653 0.654 0.443 0.442)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.371
Average program size in population (points): 35.518
Average percent parens in population: 0.387
Minimum age in population: 37.49458312988281
Maximum age in population: 41.44589233398438
Average age in population: 39.75865218257904
Median age in population: 39.73357963562012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 234
Genome diversity (% unique genomes):	 0.309
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 234
Syntactic diversity (% unique Push programs):	 0.308
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 5502975
--- Timings ---
Current time: 1559582789333 milliseconds
Total Time:          60.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.2 seconds, 78.0%
Fitness Testing:      7.7 seconds, 12.8%
Report:               5.5 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 213
Test mean error for best: 0.21300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: 29                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -45                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 43                  | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 2                  
Correct output: 70                  | Program output: 70                 
Correct output: 60                  | Program output: 83                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -18                
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -46                
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -60                
Correct output: -22                 | Program output: -22                
Correct output: -98                 | Program output: -46                
Correct output: -83                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -54                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 9                  
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -31                
Correct output: -2                  | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -26                 | Program output: 19                 
Correct output: 11                  | Program output: 42                 
Correct output: -94                 | Program output: -92                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing () (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 boolean_and exec_when (in3) print_boolean in1 integer_min) (integer_min) print_integer exec_shove ()) ()) ()) ()) ()) ()) ()) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.462
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing () (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 boolean_and exec_when (in3) print_boolean in1 integer_min) (integer_min) print_integer exec_shove ()) ()) ()) ()) ()) ()) ()) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.462
--- Lexicase Population Statistics ---
Count of elite individuals by case: (936 623 960 948 297 946 938 623 296 625)
Population mean number of elite cases: 7.19
Count of perfect (error zero) individuals by case: (936 623 960 948 297 946 938 623 296 625)
Population mean number of perfect (error zero) cases: 7.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 boolean_and exec_when (in3) print_boolean in1 integer_min) (integer_min) print_integer exec_shove ()) ()) ()) ())
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 35
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 2.808
Median total errors in population: 2
Error averages by case: (0.064 0.377 0.04 0.052 0.703 0.054 0.062 0.377 0.704 0.375)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.427
Average program size in population (points): 37.697
Average percent parens in population: 0.404
Minimum age in population: 39.67977714538574
Maximum age in population: 42.72497367858887
Average age in population: 41.72424715089798
Median age in population: 41.62350988388062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 480
Genome diversity (% unique genomes):	 0.343
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 480
Syntactic diversity (% unique Push programs):	 0.342
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 5729218
--- Timings ---
Current time: 1559582791628 milliseconds
Total Time:          62.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.1 seconds, 78.0%
Fitness Testing:      8.0 seconds, 12.7%
Report:               5.7 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 2                  
Correct output: 70                  | Program output: 70                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 9                  
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove})
Lexicase best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 37
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove})
Zero cases best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 37
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (752 934 680 953 669 686 948 675 685 680)
Population mean number of elite cases: 7.66
Count of perfect (error zero) individuals by case: (752 934 680 953 669 686 948 675 685 680)
Population mean number of perfect (error zero) cases: 7.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove})
Best program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 23
Size: 37
Percent parens: 0.378
--- Population Statistics ---
Average total errors in population: 2.338
Median total errors in population: 2
Error averages by case: (0.248 0.066 0.32 0.047 0.331 0.314 0.052 0.325 0.315 0.32)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.825
Average program size in population (points): 35.363
Average percent parens in population: 0.411
Minimum age in population: 41.15438461303711
Maximum age in population: 44.54120397567749
Average age in population: 43.46179615497589
Median age in population: 43.38063812255859
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 211
Genome diversity (% unique genomes):	 0.355
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.355
Total error diversity:				 0.01
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 5939098
--- Timings ---
Current time: 1559582793881 milliseconds
Total Time:          65.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.9 seconds, 78.1%
Fitness Testing:      8.2 seconds, 12.6%
Report:               5.9 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 28
Successful program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 37


Auto-simplifying with starting size: 37
step: 0
program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 37

step: 500
program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 37

step: 1000
program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 37

step: 1500
program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 37

step: 2000
program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 37

step: 2500
program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 37

step: 3000
program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 37

step: 3500
program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 37

step: 4000
program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 37

step: 4500
program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 37

step: 5000
program: (exec_if (integer_mod exec_s_when_autoconstructing () (integer_pop exec_if (integer_mod exec_s_when_autoconstructing (integer_pop exec_when (in2) print_boolean) (in4 in1 integer_min) (integer_min) exec_when (in3) print_boolean boolean_yank integer_min) (integer_min) print_integer exec_shove ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 37

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: 12                  | Program output: 12                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: 43                  | Program output: 43                 
Correct output: 23                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 53                  | Program output: 53                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 2                  
Correct output: 70                  | Program output: 70                 
Correct output: 60                  | Program output: 60                 
Correct output: -80                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -66                
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -87                 | Program output: -87                
Correct output: -22                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -97                
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 9                  
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -26                 | Program output: -26                
Correct output: 11                  | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: 34                  | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
;;******************************
