Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-23 -23 19 -23] -23] [[-45 -45 -79 -45] -79] [[3 3 3 7] 3] [[47 47 -71 47] -71] [[32 32 32 -51] -51] [[86 86 -7 86] -7] [[91 58 91 91] 58] [[89 -73 -73 -73] -73] [[-12 -12 -12 52] -12] [[45 45 -23 45] -23] [(50 50 50 50) 50] [(22 22 22 22) 22] [(33 33 33 33) 33] [(-93 -93 -93 -93) -93] [(57 57 57 57) 57] [(19 66 5 70) 5] [(22 80 58 2) 2] [(67 11 85 53) 11] [(20 42 31 97) 20] [(91 87 3 0) 0] [(29 20 35 40) 20] [(90 2 62 54) 2] [(52 0 69 33) 0] [(37 91 86 6) 6] [(20 53 22 48) 20] [(18 83 34 93) 18] [(15 42 56 42) 15] [(22 54 86 87) 22] [(59 64 9 57) 9] [(74 45 64 13) 13] [(82 43 12 73) 12] [(1 63 99 45) 1] [(85 60 38 6) 6] [(30 40 10 8) 8] [(19 90 100 44) 19] [(2 -35 79 -18) -35] [(-69 -69 -68 95) -69] [(-8 -1 -68 -21) -68] [(22 56 -34 -73) -73] [(14 12 -62 -11) -62] [(88 95 -32 -59) -59] [(-67 6 -64 61) -67] [(30 94 -87 -96) -96] [(-73 83 96 -5) -73] [(-23 80 -16 10) -23] [(-17 -42 -28 56) -42] [(-79 -16 -97 42) -97] [(84 -37 43 17) -37] [(-34 -18 -85 55) -85] [(74 65 -4 -10) -10] [(-90 9 -83 -77) -90] [(23 69 51 -85) -85] [(63 -94 -23 55) -94] [(83 -2 70 54) -2] [(95 57 36 -99) -99] [(82 73 -80 -55) -80] [(30 9 32 -11) -11] [(57 57 -66 -39) -66] [(14 87 95 12) 12] [(28 58 26 -96) -96] [(90 -13 -78 44) -78] [(-47 40 17 -74) -74] [(37 30 -18 -24) -24] [(-71 -67 -46 77) -71] [(-50 -6 -34 -20) -50] [(-2 -66 14 -22) -66] [(14 -14 -79 -78) -79] [(-74 80 52 36) -74] [(40 -86 -56 -59) -86] [(-28 34 -98 23) -98] [(24 77 34 5) 5] [(-28 96 -24 91) -28] [(4 -81 -21 -19) -81] [(69 -20 -48 -93) -93] [(-32 -83 -58 -72) -83] [(36 94 31 9) 9] [(-78 -23 63 -99) -99] [(98 -42 -65 6) -65] [(-88 -47 -32 -71) -88] [(-96 -60 95 -20) -96] [(-9 -74 -54 -35) -74] [(-41 -78 7 15) -78] [(-17 53 35 -97) -97] [(-36 51 24 60) -36] [(-73 -5 63 73) -73] [(-9 -5 -18 -5) -18] [(-42 -80 -8 50) -80] [(10 72 92 -45) -45] [(38 49 -46 -5) -46] [(-76 51 78 -15) -76] [(96 1 90 93) 1] [(-5 -15 68 -34) -34] [(24 86 28 12) 12] [(42 3 -3 88) -3] [(-61 -38 0 -9) -61])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-23 -23 19 -23] -23]
Train Case:   6 | Input/Output: [[-45 -45 -79 -45] -79]
Train Case:   7 | Input/Output: [[3 3 3 7] 3]
Train Case:   8 | Input/Output: [[47 47 -71 47] -71]
Train Case:   9 | Input/Output: [[32 32 32 -51] -51]
Train Case:  10 | Input/Output: [[86 86 -7 86] -7]
Train Case:  11 | Input/Output: [[91 58 91 91] 58]
Train Case:  12 | Input/Output: [[89 -73 -73 -73] -73]
Train Case:  13 | Input/Output: [[-12 -12 -12 52] -12]
Train Case:  14 | Input/Output: [[45 45 -23 45] -23]
Train Case:  15 | Input/Output: [(50 50 50 50) 50]
Train Case:  16 | Input/Output: [(22 22 22 22) 22]
Train Case:  17 | Input/Output: [(33 33 33 33) 33]
Train Case:  18 | Input/Output: [(-93 -93 -93 -93) -93]
Train Case:  19 | Input/Output: [(57 57 57 57) 57]
Train Case:  20 | Input/Output: [(19 66 5 70) 5]
Train Case:  21 | Input/Output: [(22 80 58 2) 2]
Train Case:  22 | Input/Output: [(67 11 85 53) 11]
Train Case:  23 | Input/Output: [(20 42 31 97) 20]
Train Case:  24 | Input/Output: [(91 87 3 0) 0]
Train Case:  25 | Input/Output: [(29 20 35 40) 20]
Train Case:  26 | Input/Output: [(90 2 62 54) 2]
Train Case:  27 | Input/Output: [(52 0 69 33) 0]
Train Case:  28 | Input/Output: [(37 91 86 6) 6]
Train Case:  29 | Input/Output: [(20 53 22 48) 20]
Train Case:  30 | Input/Output: [(18 83 34 93) 18]
Train Case:  31 | Input/Output: [(15 42 56 42) 15]
Train Case:  32 | Input/Output: [(22 54 86 87) 22]
Train Case:  33 | Input/Output: [(59 64 9 57) 9]
Train Case:  34 | Input/Output: [(74 45 64 13) 13]
Train Case:  35 | Input/Output: [(82 43 12 73) 12]
Train Case:  36 | Input/Output: [(1 63 99 45) 1]
Train Case:  37 | Input/Output: [(85 60 38 6) 6]
Train Case:  38 | Input/Output: [(30 40 10 8) 8]
Train Case:  39 | Input/Output: [(19 90 100 44) 19]
Train Case:  40 | Input/Output: [(2 -35 79 -18) -35]
Train Case:  41 | Input/Output: [(-69 -69 -68 95) -69]
Train Case:  42 | Input/Output: [(-8 -1 -68 -21) -68]
Train Case:  43 | Input/Output: [(22 56 -34 -73) -73]
Train Case:  44 | Input/Output: [(14 12 -62 -11) -62]
Train Case:  45 | Input/Output: [(88 95 -32 -59) -59]
Train Case:  46 | Input/Output: [(-67 6 -64 61) -67]
Train Case:  47 | Input/Output: [(30 94 -87 -96) -96]
Train Case:  48 | Input/Output: [(-73 83 96 -5) -73]
Train Case:  49 | Input/Output: [(-23 80 -16 10) -23]
Train Case:  50 | Input/Output: [(-17 -42 -28 56) -42]
Train Case:  51 | Input/Output: [(-79 -16 -97 42) -97]
Train Case:  52 | Input/Output: [(84 -37 43 17) -37]
Train Case:  53 | Input/Output: [(-34 -18 -85 55) -85]
Train Case:  54 | Input/Output: [(74 65 -4 -10) -10]
Train Case:  55 | Input/Output: [(-90 9 -83 -77) -90]
Train Case:  56 | Input/Output: [(23 69 51 -85) -85]
Train Case:  57 | Input/Output: [(63 -94 -23 55) -94]
Train Case:  58 | Input/Output: [(83 -2 70 54) -2]
Train Case:  59 | Input/Output: [(95 57 36 -99) -99]
Train Case:  60 | Input/Output: [(82 73 -80 -55) -80]
Train Case:  61 | Input/Output: [(30 9 32 -11) -11]
Train Case:  62 | Input/Output: [(57 57 -66 -39) -66]
Train Case:  63 | Input/Output: [(14 87 95 12) 12]
Train Case:  64 | Input/Output: [(28 58 26 -96) -96]
Train Case:  65 | Input/Output: [(90 -13 -78 44) -78]
Train Case:  66 | Input/Output: [(-47 40 17 -74) -74]
Train Case:  67 | Input/Output: [(37 30 -18 -24) -24]
Train Case:  68 | Input/Output: [(-71 -67 -46 77) -71]
Train Case:  69 | Input/Output: [(-50 -6 -34 -20) -50]
Train Case:  70 | Input/Output: [(-2 -66 14 -22) -66]
Train Case:  71 | Input/Output: [(14 -14 -79 -78) -79]
Train Case:  72 | Input/Output: [(-74 80 52 36) -74]
Train Case:  73 | Input/Output: [(40 -86 -56 -59) -86]
Train Case:  74 | Input/Output: [(-28 34 -98 23) -98]
Train Case:  75 | Input/Output: [(24 77 34 5) 5]
Train Case:  76 | Input/Output: [(-28 96 -24 91) -28]
Train Case:  77 | Input/Output: [(4 -81 -21 -19) -81]
Train Case:  78 | Input/Output: [(69 -20 -48 -93) -93]
Train Case:  79 | Input/Output: [(-32 -83 -58 -72) -83]
Train Case:  80 | Input/Output: [(36 94 31 9) 9]
Train Case:  81 | Input/Output: [(-78 -23 63 -99) -99]
Train Case:  82 | Input/Output: [(98 -42 -65 6) -65]
Train Case:  83 | Input/Output: [(-88 -47 -32 -71) -88]
Train Case:  84 | Input/Output: [(-96 -60 95 -20) -96]
Train Case:  85 | Input/Output: [(-9 -74 -54 -35) -74]
Train Case:  86 | Input/Output: [(-41 -78 7 15) -78]
Train Case:  87 | Input/Output: [(-17 53 35 -97) -97]
Train Case:  88 | Input/Output: [(-36 51 24 60) -36]
Train Case:  89 | Input/Output: [(-73 -5 63 73) -73]
Train Case:  90 | Input/Output: [(-9 -5 -18 -5) -18]
Train Case:  91 | Input/Output: [(-42 -80 -8 50) -80]
Train Case:  92 | Input/Output: [(10 72 92 -45) -45]
Train Case:  93 | Input/Output: [(38 49 -46 -5) -46]
Train Case:  94 | Input/Output: [(-76 51 78 -15) -76]
Train Case:  95 | Input/Output: [(96 1 90 93) 1]
Train Case:  96 | Input/Output: [(-5 -15 68 -34) -34]
Train Case:  97 | Input/Output: [(24 86 28 12) 12]
Train Case:  98 | Input/Output: [(42 3 -3 88) -3]
Train Case:  99 | Input/Output: [(-61 -38 0 -9) -61]
Test Case:   0 | Input/Output: [[-29 -29 -29 64] -29]
Test Case:   1 | Input/Output: [[18 18 40 18] 18]
Test Case:   2 | Input/Output: [[84 84 -36 84] -36]
Test Case:   3 | Input/Output: [[-56 -56 -60 -56] -60]
Test Case:   4 | Input/Output: [[-22 -16 -16 -16] -22]
Test Case:   5 | Input/Output: [[4 4 4 96] 4]
Test Case:   6 | Input/Output: [[-65 -65 -67 -65] -67]
Test Case:   7 | Input/Output: [[-60 50 -60 -60] -60]
Test Case:   8 | Input/Output: [[-50 -50 -41 -50] -50]
Test Case:   9 | Input/Output: [[-72 -73 -72 -72] -73]
Test Case:  10 | Input/Output: [[48 48 -62 48] -62]
Test Case:  11 | Input/Output: [[55 55 96 55] 55]
Test Case:  12 | Input/Output: [[69 -48 -48 -48] -48]
Test Case:  13 | Input/Output: [[-55 -46 -55 -55] -55]
Test Case:  14 | Input/Output: [[-92 -92 -15 -92] -92]
Test Case:  15 | Input/Output: [[-77 -77 -23 -77] -77]
Test Case:  16 | Input/Output: [[59 59 59 -32] -32]
Test Case:  17 | Input/Output: [[3 -29 3 3] -29]
Test Case:  18 | Input/Output: [[83 54 83 83] 54]
Test Case:  19 | Input/Output: [[-46 -46 67 -46] -46]
Test Case:  20 | Input/Output: [[-23 4 4 4] -23]
Test Case:  21 | Input/Output: [[9 -24 9 9] -24]
Test Case:  22 | Input/Output: [[78 78 78 -37] -37]
Test Case:  23 | Input/Output: [[-60 -60 -60 -38] -60]
Test Case:  24 | Input/Output: [[41 41 17 41] 17]
Test Case:  25 | Input/Output: [[-95 -95 -95 70] -95]
Test Case:  26 | Input/Output: [[-76 -58 -58 -58] -76]
Test Case:  27 | Input/Output: [[93 93 -35 93] -35]
Test Case:  28 | Input/Output: [[35 35 35 48] 35]
Test Case:  29 | Input/Output: [[94 -72 -72 -72] -72]
Test Case:  30 | Input/Output: [[83 -100 -100 -100] -100]
Test Case:  31 | Input/Output: [[-24 -24 -24 86] -24]
Test Case:  32 | Input/Output: [[6 6 -76 6] -76]
Test Case:  33 | Input/Output: [[-68 -88 -68 -68] -88]
Test Case:  34 | Input/Output: [[28 97 97 97] 28]
Test Case:  35 | Input/Output: [[-59 -50 -59 -59] -59]
Test Case:  36 | Input/Output: [[31 31 31 37] 31]
Test Case:  37 | Input/Output: [[82 82 82 60] 60]
Test Case:  38 | Input/Output: [[-53 -53 -53 -13] -53]
Test Case:  39 | Input/Output: [[48 48 29 48] 29]
Test Case:  40 | Input/Output: [[-7 67 -7 -7] -7]
Test Case:  41 | Input/Output: [[-62 -89 -89 -89] -89]
Test Case:  42 | Input/Output: [[-24 -33 -33 -33] -33]
Test Case:  43 | Input/Output: [[16 87 87 87] 16]
Test Case:  44 | Input/Output: [[-23 -23 99 -23] -23]
Test Case:  45 | Input/Output: [[72 94 72 72] 72]
Test Case:  46 | Input/Output: [[74 -66 -66 -66] -66]
Test Case:  47 | Input/Output: [[94 94 94 -31] -31]
Test Case:  48 | Input/Output: [[1 1 1 -90] -90]
Test Case:  49 | Input/Output: [[-98 99 99 99] -98]
Test Case:  50 | Input/Output: [[-8 28 28 28] -8]
Test Case:  51 | Input/Output: [[-70 89 -70 -70] -70]
Test Case:  52 | Input/Output: [[91 23 23 23] 23]
Test Case:  53 | Input/Output: [[-92 -70 -92 -92] -92]
Test Case:  54 | Input/Output: [[-56 0 -56 -56] -56]
Test Case:  55 | Input/Output: [[0 0 -22 0] -22]
Test Case:  56 | Input/Output: [[-7 37 37 37] -7]
Test Case:  57 | Input/Output: [[-75 -75 -75 34] -75]
Test Case:  58 | Input/Output: [[-21 -21 -1 -21] -21]
Test Case:  59 | Input/Output: [[-76 -76 -76 25] -76]
Test Case:  60 | Input/Output: [[28 -86 28 28] -86]
Test Case:  61 | Input/Output: [[-83 -15 -15 -15] -83]
Test Case:  62 | Input/Output: [[23 -96 -96 -96] -96]
Test Case:  63 | Input/Output: [[5 5 5 -74] -74]
Test Case:  64 | Input/Output: [[62 59 62 62] 59]
Test Case:  65 | Input/Output: [[-23 14 14 14] -23]
Test Case:  66 | Input/Output: [[-42 83 83 83] -42]
Test Case:  67 | Input/Output: [[82 82 -4 82] -4]
Test Case:  68 | Input/Output: [[-8 -8 19 -8] -8]
Test Case:  69 | Input/Output: [[-52 87 87 87] -52]
Test Case:  70 | Input/Output: [[62 62 62 62] 62]
Test Case:  71 | Input/Output: [[15 15 55 15] 15]
Test Case:  72 | Input/Output: [[87 -61 -61 -61] -61]
Test Case:  73 | Input/Output: [[16 16 16 92] 16]
Test Case:  74 | Input/Output: [[27 27 27 -6] -6]
Test Case:  75 | Input/Output: [[67 67 18 67] 18]
Test Case:  76 | Input/Output: [[-84 79 -84 -84] -84]
Test Case:  77 | Input/Output: [[94 94 25 94] 25]
Test Case:  78 | Input/Output: [[31 -79 -79 -79] -79]
Test Case:  79 | Input/Output: [[91 92 92 92] 91]
Test Case:  80 | Input/Output: [[31 -25 31 31] -25]
Test Case:  81 | Input/Output: [[99 99 99 65] 65]
Test Case:  82 | Input/Output: [[61 61 61 18] 18]
Test Case:  83 | Input/Output: [[-76 -76 -76 -52] -76]
Test Case:  84 | Input/Output: [[48 3 3 3] 3]
Test Case:  85 | Input/Output: [[-44 27 -44 -44] -44]
Test Case:  86 | Input/Output: [[61 61 61 61] 61]
Test Case:  87 | Input/Output: [[-58 -58 -5 -58] -58]
Test Case:  88 | Input/Output: [[86 91 86 86] 86]
Test Case:  89 | Input/Output: [[-88 -88 -88 22] -88]
Test Case:  90 | Input/Output: [[78 -1 78 78] -1]
Test Case:  91 | Input/Output: [[52 52 -69 52] -69]
Test Case:  92 | Input/Output: [[-16 -16 -16 -41] -41]
Test Case:  93 | Input/Output: [[-20 -92 -20 -20] -92]
Test Case:  94 | Input/Output: [[92 92 74 92] 74]
Test Case:  95 | Input/Output: [[-84 68 -84 -84] -84]
Test Case:  96 | Input/Output: [[-61 56 -61 -61] -61]
Test Case:  97 | Input/Output: [[4 -17 4 4] -17]
Test Case:  98 | Input/Output: [[52 52 52 42] 42]
Test Case:  99 | Input/Output: [[-9 -9 84 -9] -9]
Test Case: 100 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 101 | Input/Output: [(90 90 90 90) 90]
Test Case: 102 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 103 | Input/Output: [(52 52 52 52) 52]
Test Case: 104 | Input/Output: [(49 49 49 49) 49]
Test Case: 105 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 106 | Input/Output: [(61 61 61 61) 61]
Test Case: 107 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 108 | Input/Output: [(31 31 31 31) 31]
Test Case: 109 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 110 | Input/Output: [(38 38 38 38) 38]
Test Case: 111 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 112 | Input/Output: [(63 63 63 63) 63]
Test Case: 113 | Input/Output: [(98 98 98 98) 98]
Test Case: 114 | Input/Output: [(75 75 75 75) 75]
Test Case: 115 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 116 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 117 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 118 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 119 | Input/Output: [(46 46 46 46) 46]
Test Case: 120 | Input/Output: [(85 85 85 85) 85]
Test Case: 121 | Input/Output: [(20 20 20 20) 20]
Test Case: 122 | Input/Output: [(59 59 59 59) 59]
Test Case: 123 | Input/Output: [(79 79 79 79) 79]
Test Case: 124 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 125 | Input/Output: [(41 41 41 41) 41]
Test Case: 126 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 127 | Input/Output: [(60 60 60 60) 60]
Test Case: 128 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 129 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 130 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 131 | Input/Output: [(36 36 36 36) 36]
Test Case: 132 | Input/Output: [(39 39 39 39) 39]
Test Case: 133 | Input/Output: [(37 37 37 37) 37]
Test Case: 134 | Input/Output: [(56 56 56 56) 56]
Test Case: 135 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 136 | Input/Output: [(86 86 86 86) 86]
Test Case: 137 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 138 | Input/Output: [(49 49 49 49) 49]
Test Case: 139 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 140 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 141 | Input/Output: [(100 100 100 100) 100]
Test Case: 142 | Input/Output: [(45 45 45 45) 45]
Test Case: 143 | Input/Output: [(54 54 54 54) 54]
Test Case: 144 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 145 | Input/Output: [(27 27 27 27) 27]
Test Case: 146 | Input/Output: [(76 76 76 76) 76]
Test Case: 147 | Input/Output: [(30 30 30 30) 30]
Test Case: 148 | Input/Output: [(95 95 95 95) 95]
Test Case: 149 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 150 | Input/Output: [(70 70 70 70) 70]
Test Case: 151 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 152 | Input/Output: [(20 20 20 20) 20]
Test Case: 153 | Input/Output: [(48 48 48 48) 48]
Test Case: 154 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 155 | Input/Output: [(49 49 49 49) 49]
Test Case: 156 | Input/Output: [(57 57 57 57) 57]
Test Case: 157 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 158 | Input/Output: [(35 35 35 35) 35]
Test Case: 159 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 160 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 161 | Input/Output: [(50 50 50 50) 50]
Test Case: 162 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 163 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 164 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 165 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 166 | Input/Output: [(90 90 90 90) 90]
Test Case: 167 | Input/Output: [(43 43 43 43) 43]
Test Case: 168 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 169 | Input/Output: [(86 86 86 86) 86]
Test Case: 170 | Input/Output: [(54 54 54 54) 54]
Test Case: 171 | Input/Output: [(64 64 64 64) 64]
Test Case: 172 | Input/Output: [(39 39 39 39) 39]
Test Case: 173 | Input/Output: [(49 49 49 49) 49]
Test Case: 174 | Input/Output: [(63 63 63 63) 63]
Test Case: 175 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 176 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 177 | Input/Output: [(65 65 65 65) 65]
Test Case: 178 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 179 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 180 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 181 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 182 | Input/Output: [(79 79 79 79) 79]
Test Case: 183 | Input/Output: [(15 15 15 15) 15]
Test Case: 184 | Input/Output: [(66 66 66 66) 66]
Test Case: 185 | Input/Output: [(95 95 95 95) 95]
Test Case: 186 | Input/Output: [(8 8 8 8) 8]
Test Case: 187 | Input/Output: [(59 59 59 59) 59]
Test Case: 188 | Input/Output: [(19 19 19 19) 19]
Test Case: 189 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 190 | Input/Output: [(8 8 8 8) 8]
Test Case: 191 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 192 | Input/Output: [(50 50 50 50) 50]
Test Case: 193 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 194 | Input/Output: [(42 42 42 42) 42]
Test Case: 195 | Input/Output: [(44 44 44 44) 44]
Test Case: 196 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 197 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 198 | Input/Output: [(68 68 68 68) 68]
Test Case: 199 | Input/Output: [(23 23 23 23) 23]
Test Case: 200 | Input/Output: [(91 38 91 1) 1]
Test Case: 201 | Input/Output: [(12 46 43 60) 12]
Test Case: 202 | Input/Output: [(5 22 35 55) 5]
Test Case: 203 | Input/Output: [(47 98 31 30) 30]
Test Case: 204 | Input/Output: [(93 86 0 70) 0]
Test Case: 205 | Input/Output: [(65 41 59 11) 11]
Test Case: 206 | Input/Output: [(90 84 8 71) 8]
Test Case: 207 | Input/Output: [(53 46 0 94) 0]
Test Case: 208 | Input/Output: [(12 40 68 97) 12]
Test Case: 209 | Input/Output: [(10 37 64 8) 8]
Test Case: 210 | Input/Output: [(96 40 70 81) 40]
Test Case: 211 | Input/Output: [(27 22 81 87) 22]
Test Case: 212 | Input/Output: [(7 56 79 80) 7]
Test Case: 213 | Input/Output: [(31 4 55 68) 4]
Test Case: 214 | Input/Output: [(39 37 69 0) 0]
Test Case: 215 | Input/Output: [(80 50 39 68) 39]
Test Case: 216 | Input/Output: [(68 25 87 48) 25]
Test Case: 217 | Input/Output: [(56 16 72 77) 16]
Test Case: 218 | Input/Output: [(23 58 7 90) 7]
Test Case: 219 | Input/Output: [(9 88 43 90) 9]
Test Case: 220 | Input/Output: [(50 41 100 97) 41]
Test Case: 221 | Input/Output: [(64 19 93 12) 12]
Test Case: 222 | Input/Output: [(14 32 72 1) 1]
Test Case: 223 | Input/Output: [(41 57 71 72) 41]
Test Case: 224 | Input/Output: [(29 90 80 51) 29]
Test Case: 225 | Input/Output: [(58 8 42 73) 8]
Test Case: 226 | Input/Output: [(53 42 0 9) 0]
Test Case: 227 | Input/Output: [(2 32 16 78) 2]
Test Case: 228 | Input/Output: [(13 66 31 96) 13]
Test Case: 229 | Input/Output: [(81 28 92 40) 28]
Test Case: 230 | Input/Output: [(56 88 5 90) 5]
Test Case: 231 | Input/Output: [(37 26 55 83) 26]
Test Case: 232 | Input/Output: [(82 7 53 50) 7]
Test Case: 233 | Input/Output: [(0 96 93 61) 0]
Test Case: 234 | Input/Output: [(82 91 29 50) 29]
Test Case: 235 | Input/Output: [(38 26 26 87) 26]
Test Case: 236 | Input/Output: [(72 58 75 17) 17]
Test Case: 237 | Input/Output: [(89 59 92 74) 59]
Test Case: 238 | Input/Output: [(56 14 94 77) 14]
Test Case: 239 | Input/Output: [(84 69 49 73) 49]
Test Case: 240 | Input/Output: [(58 90 31 39) 31]
Test Case: 241 | Input/Output: [(51 28 72 25) 25]
Test Case: 242 | Input/Output: [(22 93 97 29) 22]
Test Case: 243 | Input/Output: [(68 18 29 44) 18]
Test Case: 244 | Input/Output: [(24 14 67 39) 14]
Test Case: 245 | Input/Output: [(70 48 64 48) 48]
Test Case: 246 | Input/Output: [(89 46 24 98) 24]
Test Case: 247 | Input/Output: [(69 54 52 47) 47]
Test Case: 248 | Input/Output: [(23 57 50 33) 23]
Test Case: 249 | Input/Output: [(78 92 97 86) 78]
Test Case: 250 | Input/Output: [(96 7 74 68) 7]
Test Case: 251 | Input/Output: [(2 15 51 27) 2]
Test Case: 252 | Input/Output: [(21 82 31 14) 14]
Test Case: 253 | Input/Output: [(90 23 11 77) 11]
Test Case: 254 | Input/Output: [(68 32 40 63) 32]
Test Case: 255 | Input/Output: [(98 38 50 22) 22]
Test Case: 256 | Input/Output: [(55 5 75 92) 5]
Test Case: 257 | Input/Output: [(21 86 79 12) 12]
Test Case: 258 | Input/Output: [(30 45 56 93) 30]
Test Case: 259 | Input/Output: [(91 20 5 17) 5]
Test Case: 260 | Input/Output: [(2 51 20 80) 2]
Test Case: 261 | Input/Output: [(95 47 63 49) 47]
Test Case: 262 | Input/Output: [(83 92 27 76) 27]
Test Case: 263 | Input/Output: [(86 80 46 59) 46]
Test Case: 264 | Input/Output: [(92 6 48 31) 6]
Test Case: 265 | Input/Output: [(34 57 6 25) 6]
Test Case: 266 | Input/Output: [(72 82 59 79) 59]
Test Case: 267 | Input/Output: [(75 53 3 60) 3]
Test Case: 268 | Input/Output: [(63 93 87 92) 63]
Test Case: 269 | Input/Output: [(33 30 59 14) 14]
Test Case: 270 | Input/Output: [(29 11 93 84) 11]
Test Case: 271 | Input/Output: [(76 65 56 53) 53]
Test Case: 272 | Input/Output: [(49 10 99 96) 10]
Test Case: 273 | Input/Output: [(8 21 74 28) 8]
Test Case: 274 | Input/Output: [(13 96 20 66) 13]
Test Case: 275 | Input/Output: [(18 61 52 96) 18]
Test Case: 276 | Input/Output: [(76 78 29 98) 29]
Test Case: 277 | Input/Output: [(42 22 50 6) 6]
Test Case: 278 | Input/Output: [(77 98 42 44) 42]
Test Case: 279 | Input/Output: [(58 36 53 99) 36]
Test Case: 280 | Input/Output: [(11 37 55 32) 11]
Test Case: 281 | Input/Output: [(33 27 92 47) 27]
Test Case: 282 | Input/Output: [(57 12 65 83) 12]
Test Case: 283 | Input/Output: [(61 26 25 64) 25]
Test Case: 284 | Input/Output: [(84 44 76 86) 44]
Test Case: 285 | Input/Output: [(84 62 10 87) 10]
Test Case: 286 | Input/Output: [(81 60 40 87) 40]
Test Case: 287 | Input/Output: [(4 91 70 36) 4]
Test Case: 288 | Input/Output: [(69 62 20 10) 10]
Test Case: 289 | Input/Output: [(61 72 42 9) 9]
Test Case: 290 | Input/Output: [(10 66 0 0) 0]
Test Case: 291 | Input/Output: [(30 72 96 55) 30]
Test Case: 292 | Input/Output: [(56 55 6 34) 6]
Test Case: 293 | Input/Output: [(56 81 87 83) 56]
Test Case: 294 | Input/Output: [(78 82 62 81) 62]
Test Case: 295 | Input/Output: [(11 40 91 64) 11]
Test Case: 296 | Input/Output: [(91 21 54 5) 5]
Test Case: 297 | Input/Output: [(2 6 3 87) 2]
Test Case: 298 | Input/Output: [(41 1 2 15) 1]
Test Case: 299 | Input/Output: [(68 98 14 51) 14]
Test Case: 300 | Input/Output: [(30 97 29 52) 29]
Test Case: 301 | Input/Output: [(2 81 52 54) 2]
Test Case: 302 | Input/Output: [(33 42 27 7) 7]
Test Case: 303 | Input/Output: [(54 25 99 47) 25]
Test Case: 304 | Input/Output: [(78 12 18 65) 12]
Test Case: 305 | Input/Output: [(53 63 94 36) 36]
Test Case: 306 | Input/Output: [(31 80 14 54) 14]
Test Case: 307 | Input/Output: [(72 16 62 79) 16]
Test Case: 308 | Input/Output: [(75 2 94 41) 2]
Test Case: 309 | Input/Output: [(42 99 24 29) 24]
Test Case: 310 | Input/Output: [(47 19 75 88) 19]
Test Case: 311 | Input/Output: [(100 9 45 94) 9]
Test Case: 312 | Input/Output: [(75 45 8 97) 8]
Test Case: 313 | Input/Output: [(13 41 87 24) 13]
Test Case: 314 | Input/Output: [(18 71 40 100) 18]
Test Case: 315 | Input/Output: [(77 76 30 50) 30]
Test Case: 316 | Input/Output: [(52 50 46 10) 10]
Test Case: 317 | Input/Output: [(2 74 3 16) 2]
Test Case: 318 | Input/Output: [(81 48 26 95) 26]
Test Case: 319 | Input/Output: [(44 43 40 5) 5]
Test Case: 320 | Input/Output: [(94 36 88 69) 36]
Test Case: 321 | Input/Output: [(93 81 57 63) 57]
Test Case: 322 | Input/Output: [(85 11 56 95) 11]
Test Case: 323 | Input/Output: [(43 88 56 3) 3]
Test Case: 324 | Input/Output: [(27 38 3 39) 3]
Test Case: 325 | Input/Output: [(89 31 11 83) 11]
Test Case: 326 | Input/Output: [(6 80 63 61) 6]
Test Case: 327 | Input/Output: [(85 39 23 58) 23]
Test Case: 328 | Input/Output: [(73 84 71 54) 54]
Test Case: 329 | Input/Output: [(36 54 89 65) 36]
Test Case: 330 | Input/Output: [(53 99 43 60) 43]
Test Case: 331 | Input/Output: [(15 0 17 52) 0]
Test Case: 332 | Input/Output: [(77 93 5 33) 5]
Test Case: 333 | Input/Output: [(74 67 10 86) 10]
Test Case: 334 | Input/Output: [(70 41 46 54) 41]
Test Case: 335 | Input/Output: [(95 30 77 38) 30]
Test Case: 336 | Input/Output: [(45 64 83 24) 24]
Test Case: 337 | Input/Output: [(35 74 78 15) 15]
Test Case: 338 | Input/Output: [(14 78 64 3) 3]
Test Case: 339 | Input/Output: [(67 10 49 64) 10]
Test Case: 340 | Input/Output: [(94 72 40 64) 40]
Test Case: 341 | Input/Output: [(17 30 79 51) 17]
Test Case: 342 | Input/Output: [(73 50 85 51) 50]
Test Case: 343 | Input/Output: [(58 37 68 8) 8]
Test Case: 344 | Input/Output: [(4 78 5 9) 4]
Test Case: 345 | Input/Output: [(81 81 94 45) 45]
Test Case: 346 | Input/Output: [(3 64 10 81) 3]
Test Case: 347 | Input/Output: [(71 22 8 84) 8]
Test Case: 348 | Input/Output: [(15 8 4 26) 4]
Test Case: 349 | Input/Output: [(51 46 91 65) 46]
Test Case: 350 | Input/Output: [(77 9 73 70) 9]
Test Case: 351 | Input/Output: [(17 12 22 88) 12]
Test Case: 352 | Input/Output: [(81 59 60 8) 8]
Test Case: 353 | Input/Output: [(90 84 44 17) 17]
Test Case: 354 | Input/Output: [(20 97 28 90) 20]
Test Case: 355 | Input/Output: [(37 62 25 58) 25]
Test Case: 356 | Input/Output: [(6 97 84 25) 6]
Test Case: 357 | Input/Output: [(10 53 27 85) 10]
Test Case: 358 | Input/Output: [(50 56 43 52) 43]
Test Case: 359 | Input/Output: [(71 24 72 1) 1]
Test Case: 360 | Input/Output: [(66 55 42 49) 42]
Test Case: 361 | Input/Output: [(58 64 64 75) 58]
Test Case: 362 | Input/Output: [(93 93 49 39) 39]
Test Case: 363 | Input/Output: [(3 48 36 63) 3]
Test Case: 364 | Input/Output: [(99 20 87 6) 6]
Test Case: 365 | Input/Output: [(86 58 26 47) 26]
Test Case: 366 | Input/Output: [(53 5 56 46) 5]
Test Case: 367 | Input/Output: [(20 17 92 11) 11]
Test Case: 368 | Input/Output: [(21 43 28 92) 21]
Test Case: 369 | Input/Output: [(46 6 15 72) 6]
Test Case: 370 | Input/Output: [(76 27 52 5) 5]
Test Case: 371 | Input/Output: [(24 58 18 38) 18]
Test Case: 372 | Input/Output: [(3 43 20 45) 3]
Test Case: 373 | Input/Output: [(59 39 79 6) 6]
Test Case: 374 | Input/Output: [(2 93 90 90) 2]
Test Case: 375 | Input/Output: [(39 86 31 81) 31]
Test Case: 376 | Input/Output: [(4 25 72 96) 4]
Test Case: 377 | Input/Output: [(72 25 66 0) 0]
Test Case: 378 | Input/Output: [(99 15 79 14) 14]
Test Case: 379 | Input/Output: [(40 61 44 63) 40]
Test Case: 380 | Input/Output: [(66 62 93 42) 42]
Test Case: 381 | Input/Output: [(52 30 22 86) 22]
Test Case: 382 | Input/Output: [(17 73 84 37) 17]
Test Case: 383 | Input/Output: [(78 74 77 80) 74]
Test Case: 384 | Input/Output: [(32 30 33 70) 30]
Test Case: 385 | Input/Output: [(41 63 88 77) 41]
Test Case: 386 | Input/Output: [(79 7 71 33) 7]
Test Case: 387 | Input/Output: [(48 3 60 72) 3]
Test Case: 388 | Input/Output: [(78 15 59 89) 15]
Test Case: 389 | Input/Output: [(92 40 81 65) 40]
Test Case: 390 | Input/Output: [(43 1 88 76) 1]
Test Case: 391 | Input/Output: [(60 38 97 73) 38]
Test Case: 392 | Input/Output: [(2 16 23 79) 2]
Test Case: 393 | Input/Output: [(84 18 97 19) 18]
Test Case: 394 | Input/Output: [(21 61 87 9) 9]
Test Case: 395 | Input/Output: [(95 74 16 66) 16]
Test Case: 396 | Input/Output: [(92 55 97 59) 55]
Test Case: 397 | Input/Output: [(67 7 83 33) 7]
Test Case: 398 | Input/Output: [(3 28 11 77) 3]
Test Case: 399 | Input/Output: [(85 33 44 44) 33]
Test Case: 400 | Input/Output: [(-40 -81 18 70) -81]
Test Case: 401 | Input/Output: [(-16 9 -35 -29) -35]
Test Case: 402 | Input/Output: [(45 23 -51 -100) -100]
Test Case: 403 | Input/Output: [(-16 65 -50 10) -50]
Test Case: 404 | Input/Output: [(47 43 1 75) 1]
Test Case: 405 | Input/Output: [(-29 98 -49 12) -49]
Test Case: 406 | Input/Output: [(51 -93 60 35) -93]
Test Case: 407 | Input/Output: [(-28 87 72 -41) -41]
Test Case: 408 | Input/Output: [(-28 3 38 -22) -28]
Test Case: 409 | Input/Output: [(79 -22 -79 -32) -79]
Test Case: 410 | Input/Output: [(-41 49 -51 62) -51]
Test Case: 411 | Input/Output: [(7 15 -98 -67) -98]
Test Case: 412 | Input/Output: [(-49 43 -48 -90) -90]
Test Case: 413 | Input/Output: [(18 -1 -56 -60) -60]
Test Case: 414 | Input/Output: [(88 15 -5 -17) -17]
Test Case: 415 | Input/Output: [(-53 -70 2 31) -70]
Test Case: 416 | Input/Output: [(-91 17 56 -6) -91]
Test Case: 417 | Input/Output: [(60 29 23 85) 23]
Test Case: 418 | Input/Output: [(-38 -52 30 -9) -52]
Test Case: 419 | Input/Output: [(-28 94 65 33) -28]
Test Case: 420 | Input/Output: [(-24 17 20 -99) -99]
Test Case: 421 | Input/Output: [(-33 -61 -15 -87) -87]
Test Case: 422 | Input/Output: [(-36 -20 26 -69) -69]
Test Case: 423 | Input/Output: [(-52 -75 70 -21) -75]
Test Case: 424 | Input/Output: [(45 -85 -22 24) -85]
Test Case: 425 | Input/Output: [(18 82 -87 -89) -89]
Test Case: 426 | Input/Output: [(88 67 -7 -45) -45]
Test Case: 427 | Input/Output: [(-38 29 62 35) -38]
Test Case: 428 | Input/Output: [(-21 -59 69 9) -59]
Test Case: 429 | Input/Output: [(91 -23 -23 91) -23]
Test Case: 430 | Input/Output: [(39 44 72 -62) -62]
Test Case: 431 | Input/Output: [(45 73 76 -35) -35]
Test Case: 432 | Input/Output: [(74 -3 -93 -31) -93]
Test Case: 433 | Input/Output: [(77 59 -97 -51) -97]
Test Case: 434 | Input/Output: [(73 55 -52 43) -52]
Test Case: 435 | Input/Output: [(-99 -74 52 61) -99]
Test Case: 436 | Input/Output: [(81 -80 64 71) -80]
Test Case: 437 | Input/Output: [(19 21 -98 -20) -98]
Test Case: 438 | Input/Output: [(-100 -78 -77 -94) -100]
Test Case: 439 | Input/Output: [(48 -13 -64 -83) -83]
Test Case: 440 | Input/Output: [(3 81 -42 -13) -42]
Test Case: 441 | Input/Output: [(-96 10 -84 -59) -96]
Test Case: 442 | Input/Output: [(69 14 49 89) 14]
Test Case: 443 | Input/Output: [(87 -53 98 1) -53]
Test Case: 444 | Input/Output: [(25 49 41 -20) -20]
Test Case: 445 | Input/Output: [(0 -10 -21 43) -21]
Test Case: 446 | Input/Output: [(-12 54 -75 -69) -75]
Test Case: 447 | Input/Output: [(-57 4 4 -57) -57]
Test Case: 448 | Input/Output: [(5 -92 92 -17) -92]
Test Case: 449 | Input/Output: [(29 67 61 85) 29]
Test Case: 450 | Input/Output: [(8 3 -65 30) -65]
Test Case: 451 | Input/Output: [(95 -76 -9 -4) -76]
Test Case: 452 | Input/Output: [(60 -91 93 -91) -91]
Test Case: 453 | Input/Output: [(98 90 -55 -28) -55]
Test Case: 454 | Input/Output: [(-15 -8 64 -73) -73]
Test Case: 455 | Input/Output: [(-99 63 99 53) -99]
Test Case: 456 | Input/Output: [(-56 -60 -65 62) -65]
Test Case: 457 | Input/Output: [(66 -83 -5 93) -83]
Test Case: 458 | Input/Output: [(-43 -63 -28 45) -63]
Test Case: 459 | Input/Output: [(-32 49 28 -73) -73]
Test Case: 460 | Input/Output: [(-95 42 13 59) -95]
Test Case: 461 | Input/Output: [(4 1 -82 51) -82]
Test Case: 462 | Input/Output: [(-66 -39 -19 46) -66]
Test Case: 463 | Input/Output: [(-7 -23 -66 -100) -100]
Test Case: 464 | Input/Output: [(44 -54 -97 45) -97]
Test Case: 465 | Input/Output: [(-17 -76 -23 -69) -76]
Test Case: 466 | Input/Output: [(93 -60 61 -58) -60]
Test Case: 467 | Input/Output: [(43 75 2 -86) -86]
Test Case: 468 | Input/Output: [(-1 82 -33 -51) -51]
Test Case: 469 | Input/Output: [(35 -27 -54 -54) -54]
Test Case: 470 | Input/Output: [(-83 28 47 -9) -83]
Test Case: 471 | Input/Output: [(98 2 -19 52) -19]
Test Case: 472 | Input/Output: [(-52 -40 -15 7) -52]
Test Case: 473 | Input/Output: [(-14 -30 20 84) -30]
Test Case: 474 | Input/Output: [(-93 -45 10 22) -93]
Test Case: 475 | Input/Output: [(-84 -19 62 -20) -84]
Test Case: 476 | Input/Output: [(-46 15 46 3) -46]
Test Case: 477 | Input/Output: [(35 -62 -30 18) -62]
Test Case: 478 | Input/Output: [(-93 43 -20 -76) -93]
Test Case: 479 | Input/Output: [(69 -42 -39 31) -42]
Test Case: 480 | Input/Output: [(14 87 -77 -35) -77]
Test Case: 481 | Input/Output: [(-38 87 -92 70) -92]
Test Case: 482 | Input/Output: [(40 61 25 -58) -58]
Test Case: 483 | Input/Output: [(43 -25 39 -72) -72]
Test Case: 484 | Input/Output: [(81 -96 -70 80) -96]
Test Case: 485 | Input/Output: [(-72 -1 -4 40) -72]
Test Case: 486 | Input/Output: [(47 19 -19 93) -19]
Test Case: 487 | Input/Output: [(8 67 89 -57) -57]
Test Case: 488 | Input/Output: [(96 -69 16 81) -69]
Test Case: 489 | Input/Output: [(49 -11 51 -20) -20]
Test Case: 490 | Input/Output: [(29 97 -52 -15) -52]
Test Case: 491 | Input/Output: [(-87 -61 -21 -28) -87]
Test Case: 492 | Input/Output: [(-58 -54 -92 -79) -92]
Test Case: 493 | Input/Output: [(51 66 -45 -75) -75]
Test Case: 494 | Input/Output: [(-83 -3 -40 60) -83]
Test Case: 495 | Input/Output: [(77 -41 23 44) -41]
Test Case: 496 | Input/Output: [(67 32 -6 -82) -82]
Test Case: 497 | Input/Output: [(100 -23 -46 62) -46]
Test Case: 498 | Input/Output: [(51 -16 59 24) -16]
Test Case: 499 | Input/Output: [(-24 29 -21 -55) -55]
Test Case: 500 | Input/Output: [(-46 -38 3 21) -46]
Test Case: 501 | Input/Output: [(-16 13 78 59) -16]
Test Case: 502 | Input/Output: [(-25 -36 -79 -95) -95]
Test Case: 503 | Input/Output: [(-70 -90 5 -76) -90]
Test Case: 504 | Input/Output: [(74 71 -40 6) -40]
Test Case: 505 | Input/Output: [(-72 93 -89 36) -89]
Test Case: 506 | Input/Output: [(-53 3 -89 -88) -89]
Test Case: 507 | Input/Output: [(-64 91 37 -31) -64]
Test Case: 508 | Input/Output: [(19 48 -99 77) -99]
Test Case: 509 | Input/Output: [(60 -85 23 -74) -85]
Test Case: 510 | Input/Output: [(-29 -3 55 -55) -55]
Test Case: 511 | Input/Output: [(63 88 17 -48) -48]
Test Case: 512 | Input/Output: [(-39 50 -56 82) -56]
Test Case: 513 | Input/Output: [(-98 75 -62 -42) -98]
Test Case: 514 | Input/Output: [(22 -6 36 -11) -11]
Test Case: 515 | Input/Output: [(60 -9 92 56) -9]
Test Case: 516 | Input/Output: [(-38 2 -41 83) -41]
Test Case: 517 | Input/Output: [(13 -3 71 100) -3]
Test Case: 518 | Input/Output: [(14 52 -62 -63) -63]
Test Case: 519 | Input/Output: [(66 72 94 -81) -81]
Test Case: 520 | Input/Output: [(55 -31 -9 -20) -31]
Test Case: 521 | Input/Output: [(69 -62 58 -7) -62]
Test Case: 522 | Input/Output: [(-9 52 -73 92) -73]
Test Case: 523 | Input/Output: [(7 56 -42 19) -42]
Test Case: 524 | Input/Output: [(29 28 -8 -78) -78]
Test Case: 525 | Input/Output: [(70 -44 4 -90) -90]
Test Case: 526 | Input/Output: [(33 8 98 -47) -47]
Test Case: 527 | Input/Output: [(-47 -2 -74 -64) -74]
Test Case: 528 | Input/Output: [(-15 -35 -99 -36) -99]
Test Case: 529 | Input/Output: [(-44 42 -4 -51) -51]
Test Case: 530 | Input/Output: [(54 -63 -55 91) -63]
Test Case: 531 | Input/Output: [(-49 -4 50 -81) -81]
Test Case: 532 | Input/Output: [(28 -52 57 -75) -75]
Test Case: 533 | Input/Output: [(12 -61 49 18) -61]
Test Case: 534 | Input/Output: [(-61 44 -32 25) -61]
Test Case: 535 | Input/Output: [(63 54 82 -63) -63]
Test Case: 536 | Input/Output: [(75 -71 97 -54) -71]
Test Case: 537 | Input/Output: [(14 77 2 62) 2]
Test Case: 538 | Input/Output: [(-18 57 90 78) -18]
Test Case: 539 | Input/Output: [(2 -49 -37 7) -49]
Test Case: 540 | Input/Output: [(99 -87 50 -74) -87]
Test Case: 541 | Input/Output: [(-87 99 46 -75) -87]
Test Case: 542 | Input/Output: [(71 -80 51 96) -80]
Test Case: 543 | Input/Output: [(-17 -80 71 -24) -80]
Test Case: 544 | Input/Output: [(-31 79 -27 -5) -31]
Test Case: 545 | Input/Output: [(-30 4 92 -79) -79]
Test Case: 546 | Input/Output: [(5 52 32 -25) -25]
Test Case: 547 | Input/Output: [(32 -27 24 27) -27]
Test Case: 548 | Input/Output: [(-35 83 83 49) -35]
Test Case: 549 | Input/Output: [(-59 47 20 -61) -61]
Test Case: 550 | Input/Output: [(-32 92 -43 18) -43]
Test Case: 551 | Input/Output: [(-21 26 -72 80) -72]
Test Case: 552 | Input/Output: [(60 -18 99 40) -18]
Test Case: 553 | Input/Output: [(21 73 -100 51) -100]
Test Case: 554 | Input/Output: [(30 52 -29 90) -29]
Test Case: 555 | Input/Output: [(72 -45 -33 -41) -45]
Test Case: 556 | Input/Output: [(7 19 5 89) 5]
Test Case: 557 | Input/Output: [(29 60 -22 -55) -55]
Test Case: 558 | Input/Output: [(27 -93 -36 -70) -93]
Test Case: 559 | Input/Output: [(44 -83 1 -72) -83]
Test Case: 560 | Input/Output: [(43 58 -36 -13) -36]
Test Case: 561 | Input/Output: [(-52 91 10 -68) -68]
Test Case: 562 | Input/Output: [(61 96 43 -7) -7]
Test Case: 563 | Input/Output: [(0 13 -29 35) -29]
Test Case: 564 | Input/Output: [(44 -86 -46 -61) -86]
Test Case: 565 | Input/Output: [(-41 -37 -42 -13) -42]
Test Case: 566 | Input/Output: [(-81 -8 -32 61) -81]
Test Case: 567 | Input/Output: [(7 -48 8 26) -48]
Test Case: 568 | Input/Output: [(-63 13 31 -26) -63]
Test Case: 569 | Input/Output: [(-88 20 53 71) -88]
Test Case: 570 | Input/Output: [(69 5 85 49) 5]
Test Case: 571 | Input/Output: [(69 -13 -76 -65) -76]
Test Case: 572 | Input/Output: [(99 -91 79 36) -91]
Test Case: 573 | Input/Output: [(-38 -49 60 -8) -49]
Test Case: 574 | Input/Output: [(-63 -51 44 -88) -88]
Test Case: 575 | Input/Output: [(-92 -44 97 56) -92]
Test Case: 576 | Input/Output: [(77 -25 49 68) -25]
Test Case: 577 | Input/Output: [(91 -77 -66 43) -77]
Test Case: 578 | Input/Output: [(82 -73 -42 -61) -73]
Test Case: 579 | Input/Output: [(-65 -82 82 -14) -82]
Test Case: 580 | Input/Output: [(-60 0 -26 -41) -60]
Test Case: 581 | Input/Output: [(7 12 31 -86) -86]
Test Case: 582 | Input/Output: [(14 39 93 -96) -96]
Test Case: 583 | Input/Output: [(8 12 -86 0) -86]
Test Case: 584 | Input/Output: [(18 17 -56 17) -56]
Test Case: 585 | Input/Output: [(94 55 70 87) 55]
Test Case: 586 | Input/Output: [(-50 70 -86 -20) -86]
Test Case: 587 | Input/Output: [(81 -60 9 67) -60]
Test Case: 588 | Input/Output: [(89 -47 -57 -45) -57]
Test Case: 589 | Input/Output: [(-29 29 -22 -66) -66]
Test Case: 590 | Input/Output: [(-87 -90 -5 -91) -91]
Test Case: 591 | Input/Output: [(93 61 92 -72) -72]
Test Case: 592 | Input/Output: [(37 -77 -2 -70) -77]
Test Case: 593 | Input/Output: [(43 -9 69 41) -9]
Test Case: 594 | Input/Output: [(2 -47 60 91) -47]
Test Case: 595 | Input/Output: [(-25 -68 58 72) -68]
Test Case: 596 | Input/Output: [(38 52 -85 23) -85]
Test Case: 597 | Input/Output: [(0 -77 69 61) -77]
Test Case: 598 | Input/Output: [(-39 -75 -33 -46) -75]
Test Case: 599 | Input/Output: [(-93 -75 -50 -66) -93]
Test Case: 600 | Input/Output: [(63 -46 -69 36) -69]
Test Case: 601 | Input/Output: [(65 2 -28 -17) -28]
Test Case: 602 | Input/Output: [(99 21 -54 -67) -67]
Test Case: 603 | Input/Output: [(-73 -14 82 29) -73]
Test Case: 604 | Input/Output: [(77 79 93 36) 36]
Test Case: 605 | Input/Output: [(-18 -39 -62 93) -62]
Test Case: 606 | Input/Output: [(64 2 24 -30) -30]
Test Case: 607 | Input/Output: [(-40 -44 -76 -50) -76]
Test Case: 608 | Input/Output: [(13 75 -46 68) -46]
Test Case: 609 | Input/Output: [(94 30 55 34) 30]
Test Case: 610 | Input/Output: [(41 -56 -89 47) -89]
Test Case: 611 | Input/Output: [(-74 1 99 83) -74]
Test Case: 612 | Input/Output: [(-79 100 26 93) -79]
Test Case: 613 | Input/Output: [(-89 -93 28 90) -93]
Test Case: 614 | Input/Output: [(-78 -97 -78 -74) -97]
Test Case: 615 | Input/Output: [(-61 -36 1 -20) -61]
Test Case: 616 | Input/Output: [(-86 -100 -18 16) -100]
Test Case: 617 | Input/Output: [(-37 -93 84 14) -93]
Test Case: 618 | Input/Output: [(27 -70 -18 -82) -82]
Test Case: 619 | Input/Output: [(-12 18 57 -71) -71]
Test Case: 620 | Input/Output: [(-73 90 48 30) -73]
Test Case: 621 | Input/Output: [(18 91 71 33) 18]
Test Case: 622 | Input/Output: [(-68 -36 -20 73) -68]
Test Case: 623 | Input/Output: [(-95 -92 -45 -3) -95]
Test Case: 624 | Input/Output: [(85 -83 -17 69) -83]
Test Case: 625 | Input/Output: [(-55 67 60 9) -55]
Test Case: 626 | Input/Output: [(19 -1 -95 -100) -100]
Test Case: 627 | Input/Output: [(-18 69 24 -27) -27]
Test Case: 628 | Input/Output: [(-30 49 -84 -80) -84]
Test Case: 629 | Input/Output: [(69 41 -75 -29) -75]
Test Case: 630 | Input/Output: [(-36 -49 71 -82) -82]
Test Case: 631 | Input/Output: [(94 -80 62 -22) -80]
Test Case: 632 | Input/Output: [(13 -42 74 50) -42]
Test Case: 633 | Input/Output: [(-2 -85 65 -28) -85]
Test Case: 634 | Input/Output: [(47 -39 -30 -27) -39]
Test Case: 635 | Input/Output: [(15 -5 15 -83) -83]
Test Case: 636 | Input/Output: [(82 46 72 -30) -30]
Test Case: 637 | Input/Output: [(16 -91 -95 52) -95]
Test Case: 638 | Input/Output: [(78 -94 -37 70) -94]
Test Case: 639 | Input/Output: [(-71 77 80 74) -71]
Test Case: 640 | Input/Output: [(-30 52 -4 70) -30]
Test Case: 641 | Input/Output: [(69 -92 27 100) -92]
Test Case: 642 | Input/Output: [(87 18 -35 -83) -83]
Test Case: 643 | Input/Output: [(58 72 -91 58) -91]
Test Case: 644 | Input/Output: [(20 -50 -49 -83) -83]
Test Case: 645 | Input/Output: [(-34 -93 -20 0) -93]
Test Case: 646 | Input/Output: [(-23 83 -39 -36) -39]
Test Case: 647 | Input/Output: [(-81 -19 -4 11) -81]
Test Case: 648 | Input/Output: [(-51 -63 73 88) -63]
Test Case: 649 | Input/Output: [(25 31 -36 64) -36]
Test Case: 650 | Input/Output: [(20 51 7 -16) -16]
Test Case: 651 | Input/Output: [(-78 18 42 44) -78]
Test Case: 652 | Input/Output: [(91 -57 -80 -46) -80]
Test Case: 653 | Input/Output: [(-77 88 -72 30) -77]
Test Case: 654 | Input/Output: [(58 -56 -58 -33) -58]
Test Case: 655 | Input/Output: [(-59 7 52 -28) -59]
Test Case: 656 | Input/Output: [(-32 42 -43 13) -43]
Test Case: 657 | Input/Output: [(-22 81 -45 -9) -45]
Test Case: 658 | Input/Output: [(-86 54 38 16) -86]
Test Case: 659 | Input/Output: [(-11 -98 -13 49) -98]
Test Case: 660 | Input/Output: [(-40 11 92 97) -40]
Test Case: 661 | Input/Output: [(-78 75 86 -77) -78]
Test Case: 662 | Input/Output: [(35 -68 -100 -30) -100]
Test Case: 663 | Input/Output: [(23 12 -17 50) -17]
Test Case: 664 | Input/Output: [(84 39 79 25) 25]
Test Case: 665 | Input/Output: [(-52 -15 43 27) -52]
Test Case: 666 | Input/Output: [(78 -77 84 -87) -87]
Test Case: 667 | Input/Output: [(-37 -80 82 11) -80]
Test Case: 668 | Input/Output: [(-33 89 -62 -97) -97]
Test Case: 669 | Input/Output: [(-25 90 60 -28) -28]
Test Case: 670 | Input/Output: [(79 95 -86 81) -86]
Test Case: 671 | Input/Output: [(56 62 100 31) 31]
Test Case: 672 | Input/Output: [(98 49 90 -5) -5]
Test Case: 673 | Input/Output: [(62 77 -60 -30) -60]
Test Case: 674 | Input/Output: [(-22 -1 63 -32) -32]
Test Case: 675 | Input/Output: [(48 90 80 91) 48]
Test Case: 676 | Input/Output: [(-31 95 -65 -42) -65]
Test Case: 677 | Input/Output: [(-6 6 58 80) -6]
Test Case: 678 | Input/Output: [(-77 78 8 -74) -77]
Test Case: 679 | Input/Output: [(-6 -73 58 37) -73]
Test Case: 680 | Input/Output: [(80 -50 96 84) -50]
Test Case: 681 | Input/Output: [(-41 -69 -79 23) -79]
Test Case: 682 | Input/Output: [(68 -90 44 -15) -90]
Test Case: 683 | Input/Output: [(-46 -63 79 -28) -63]
Test Case: 684 | Input/Output: [(69 94 -98 86) -98]
Test Case: 685 | Input/Output: [(-54 19 61 14) -54]
Test Case: 686 | Input/Output: [(-19 -71 62 -3) -71]
Test Case: 687 | Input/Output: [(12 -22 63 -33) -33]
Test Case: 688 | Input/Output: [(99 34 -68 27) -68]
Test Case: 689 | Input/Output: [(-79 66 77 -44) -79]
Test Case: 690 | Input/Output: [(-97 75 69 12) -97]
Test Case: 691 | Input/Output: [(60 -47 -82 56) -82]
Test Case: 692 | Input/Output: [(93 83 -2 -88) -88]
Test Case: 693 | Input/Output: [(16 -90 62 -47) -90]
Test Case: 694 | Input/Output: [(3 -75 10 -35) -75]
Test Case: 695 | Input/Output: [(18 23 -55 47) -55]
Test Case: 696 | Input/Output: [(61 -67 46 38) -67]
Test Case: 697 | Input/Output: [(-31 80 -85 28) -85]
Test Case: 698 | Input/Output: [(57 99 -40 97) -40]
Test Case: 699 | Input/Output: [(78 -22 66 21) -22]
Test Case: 700 | Input/Output: [(-55 17 -38 -48) -55]
Test Case: 701 | Input/Output: [(-98 5 10 -90) -98]
Test Case: 702 | Input/Output: [(13 31 -94 -56) -94]
Test Case: 703 | Input/Output: [(26 13 44 -12) -12]
Test Case: 704 | Input/Output: [(-59 57 99 79) -59]
Test Case: 705 | Input/Output: [(-68 51 -100 -17) -100]
Test Case: 706 | Input/Output: [(81 -22 -27 55) -27]
Test Case: 707 | Input/Output: [(11 -69 -98 33) -98]
Test Case: 708 | Input/Output: [(62 55 77 -50) -50]
Test Case: 709 | Input/Output: [(94 -59 48 -35) -59]
Test Case: 710 | Input/Output: [(-13 44 -57 35) -57]
Test Case: 711 | Input/Output: [(0 93 1 -84) -84]
Test Case: 712 | Input/Output: [(-16 84 -74 94) -74]
Test Case: 713 | Input/Output: [(75 12 -30 -21) -30]
Test Case: 714 | Input/Output: [(-50 -32 -32 -36) -50]
Test Case: 715 | Input/Output: [(45 92 76 -53) -53]
Test Case: 716 | Input/Output: [(86 -58 20 21) -58]
Test Case: 717 | Input/Output: [(51 -25 -1 -82) -82]
Test Case: 718 | Input/Output: [(-19 73 100 61) -19]
Test Case: 719 | Input/Output: [(10 52 95 -56) -56]
Test Case: 720 | Input/Output: [(59 8 -10 48) -10]
Test Case: 721 | Input/Output: [(-12 56 -18 82) -18]
Test Case: 722 | Input/Output: [(35 -95 3 100) -95]
Test Case: 723 | Input/Output: [(89 -79 93 -19) -79]
Test Case: 724 | Input/Output: [(-78 -8 -68 35) -78]
Test Case: 725 | Input/Output: [(25 54 83 42) 25]
Test Case: 726 | Input/Output: [(54 98 58 66) 54]
Test Case: 727 | Input/Output: [(82 -100 33 77) -100]
Test Case: 728 | Input/Output: [(-48 19 49 49) -48]
Test Case: 729 | Input/Output: [(-89 29 -5 -46) -89]
Test Case: 730 | Input/Output: [(-51 42 -28 -47) -51]
Test Case: 731 | Input/Output: [(22 39 -50 -82) -82]
Test Case: 732 | Input/Output: [(88 -8 -75 -31) -75]
Test Case: 733 | Input/Output: [(39 -42 99 12) -42]
Test Case: 734 | Input/Output: [(8 100 -31 -36) -36]
Test Case: 735 | Input/Output: [(-91 68 48 89) -91]
Test Case: 736 | Input/Output: [(87 51 -10 45) -10]
Test Case: 737 | Input/Output: [(-54 -86 -93 -96) -96]
Test Case: 738 | Input/Output: [(-84 -10 28 68) -84]
Test Case: 739 | Input/Output: [(18 58 9 6) 6]
Test Case: 740 | Input/Output: [(-52 -67 13 4) -67]
Test Case: 741 | Input/Output: [(37 -71 -41 -99) -99]
Test Case: 742 | Input/Output: [(2 -93 14 62) -93]
Test Case: 743 | Input/Output: [(-10 23 100 80) -10]
Test Case: 744 | Input/Output: [(49 -25 44 0) -25]
Test Case: 745 | Input/Output: [(52 -82 48 -32) -82]
Test Case: 746 | Input/Output: [(49 38 28 -22) -22]
Test Case: 747 | Input/Output: [(97 10 -36 78) -36]
Test Case: 748 | Input/Output: [(-81 47 -4 -9) -81]
Test Case: 749 | Input/Output: [(25 84 84 95) 25]
Test Case: 750 | Input/Output: [(-95 57 -93 -87) -95]
Test Case: 751 | Input/Output: [(35 -33 78 -3) -33]
Test Case: 752 | Input/Output: [(-97 -34 52 -100) -100]
Test Case: 753 | Input/Output: [(40 -36 -100 -35) -100]
Test Case: 754 | Input/Output: [(-13 -35 90 -61) -61]
Test Case: 755 | Input/Output: [(72 11 -32 28) -32]
Test Case: 756 | Input/Output: [(-6 50 18 -87) -87]
Test Case: 757 | Input/Output: [(-35 -32 62 -53) -53]
Test Case: 758 | Input/Output: [(77 -17 68 -96) -96]
Test Case: 759 | Input/Output: [(-89 -82 -40 45) -89]
Test Case: 760 | Input/Output: [(56 14 96 46) 14]
Test Case: 761 | Input/Output: [(44 22 87 -17) -17]
Test Case: 762 | Input/Output: [(-31 -87 -71 -66) -87]
Test Case: 763 | Input/Output: [(-38 25 -51 -71) -71]
Test Case: 764 | Input/Output: [(22 -9 59 -96) -96]
Test Case: 765 | Input/Output: [(-79 0 -66 52) -79]
Test Case: 766 | Input/Output: [(63 -73 81 -13) -73]
Test Case: 767 | Input/Output: [(-9 -7 100 99) -9]
Test Case: 768 | Input/Output: [(-81 -21 -76 78) -81]
Test Case: 769 | Input/Output: [(-57 95 -75 -89) -89]
Test Case: 770 | Input/Output: [(13 -57 28 54) -57]
Test Case: 771 | Input/Output: [(-91 -35 4 -21) -91]
Test Case: 772 | Input/Output: [(50 -77 29 -96) -96]
Test Case: 773 | Input/Output: [(78 11 -75 -70) -75]
Test Case: 774 | Input/Output: [(52 -64 78 41) -64]
Test Case: 775 | Input/Output: [(75 26 73 -47) -47]
Test Case: 776 | Input/Output: [(-20 57 79 61) -20]
Test Case: 777 | Input/Output: [(76 -72 79 -80) -80]
Test Case: 778 | Input/Output: [(-94 15 -3 12) -94]
Test Case: 779 | Input/Output: [(-65 35 87 25) -65]
Test Case: 780 | Input/Output: [(-84 23 78 99) -84]
Test Case: 781 | Input/Output: [(99 38 -69 -62) -69]
Test Case: 782 | Input/Output: [(-93 63 -35 98) -93]
Test Case: 783 | Input/Output: [(38 -7 -71 -74) -74]
Test Case: 784 | Input/Output: [(-79 74 -82 53) -82]
Test Case: 785 | Input/Output: [(-51 87 4 68) -51]
Test Case: 786 | Input/Output: [(61 -32 92 -65) -65]
Test Case: 787 | Input/Output: [(-81 54 -50 -64) -81]
Test Case: 788 | Input/Output: [(-94 52 -51 -1) -94]
Test Case: 789 | Input/Output: [(-30 86 77 -47) -47]
Test Case: 790 | Input/Output: [(-38 -59 80 93) -59]
Test Case: 791 | Input/Output: [(69 -90 -55 62) -90]
Test Case: 792 | Input/Output: [(35 83 -86 -89) -89]
Test Case: 793 | Input/Output: [(-81 38 46 44) -81]
Test Case: 794 | Input/Output: [(-62 62 -11 0) -62]
Test Case: 795 | Input/Output: [(73 14 12 -46) -46]
Test Case: 796 | Input/Output: [(-71 -34 64 98) -71]
Test Case: 797 | Input/Output: [(-81 47 -67 -84) -84]
Test Case: 798 | Input/Output: [(-70 -26 55 97) -70]
Test Case: 799 | Input/Output: [(-20 -24 -41 -83) -83]
Test Case: 800 | Input/Output: [(-3 97 -57 29) -57]
Test Case: 801 | Input/Output: [(-48 -84 44 36) -84]
Test Case: 802 | Input/Output: [(3 93 -41 -87) -87]
Test Case: 803 | Input/Output: [(46 23 73 22) 22]
Test Case: 804 | Input/Output: [(-46 21 -71 -25) -71]
Test Case: 805 | Input/Output: [(59 98 -45 93) -45]
Test Case: 806 | Input/Output: [(-64 -35 -10 69) -64]
Test Case: 807 | Input/Output: [(36 25 -94 62) -94]
Test Case: 808 | Input/Output: [(-35 43 43 10) -35]
Test Case: 809 | Input/Output: [(25 -84 -5 9) -84]
Test Case: 810 | Input/Output: [(-61 -96 22 70) -96]
Test Case: 811 | Input/Output: [(-37 -87 -48 20) -87]
Test Case: 812 | Input/Output: [(97 57 -53 60) -53]
Test Case: 813 | Input/Output: [(-72 87 89 -85) -85]
Test Case: 814 | Input/Output: [(-68 63 -49 -39) -68]
Test Case: 815 | Input/Output: [(-91 -99 42 34) -99]
Test Case: 816 | Input/Output: [(-24 23 68 -84) -84]
Test Case: 817 | Input/Output: [(-92 59 9 -47) -92]
Test Case: 818 | Input/Output: [(-30 -30 -18 94) -30]
Test Case: 819 | Input/Output: [(-91 44 48 1) -91]
Test Case: 820 | Input/Output: [(49 -59 53 -70) -70]
Test Case: 821 | Input/Output: [(-49 -90 38 19) -90]
Test Case: 822 | Input/Output: [(-90 -50 85 -30) -90]
Test Case: 823 | Input/Output: [(3 -62 40 99) -62]
Test Case: 824 | Input/Output: [(58 9 29 27) 9]
Test Case: 825 | Input/Output: [(84 99 46 12) 12]
Test Case: 826 | Input/Output: [(79 -80 -55 6) -80]
Test Case: 827 | Input/Output: [(-49 55 7 -52) -52]
Test Case: 828 | Input/Output: [(6 15 15 -90) -90]
Test Case: 829 | Input/Output: [(14 68 -2 -36) -36]
Test Case: 830 | Input/Output: [(96 40 -90 -80) -90]
Test Case: 831 | Input/Output: [(-92 79 81 -71) -92]
Test Case: 832 | Input/Output: [(-69 6 53 -23) -69]
Test Case: 833 | Input/Output: [(80 68 98 6) 6]
Test Case: 834 | Input/Output: [(40 19 -27 -65) -65]
Test Case: 835 | Input/Output: [(59 30 40 -57) -57]
Test Case: 836 | Input/Output: [(-15 -58 -10 25) -58]
Test Case: 837 | Input/Output: [(-6 -5 -24 42) -24]
Test Case: 838 | Input/Output: [(51 92 24 -71) -71]
Test Case: 839 | Input/Output: [(63 -19 -97 -87) -97]
Test Case: 840 | Input/Output: [(-29 33 -20 -45) -45]
Test Case: 841 | Input/Output: [(23 75 -19 90) -19]
Test Case: 842 | Input/Output: [(58 -89 14 62) -89]
Test Case: 843 | Input/Output: [(24 -26 42 66) -26]
Test Case: 844 | Input/Output: [(-13 -55 -1 1) -55]
Test Case: 845 | Input/Output: [(-12 2 30 -96) -96]
Test Case: 846 | Input/Output: [(42 3 93 -18) -18]
Test Case: 847 | Input/Output: [(23 -4 91 71) -4]
Test Case: 848 | Input/Output: [(32 -16 -13 -90) -90]
Test Case: 849 | Input/Output: [(14 -40 -59 -42) -59]
Test Case: 850 | Input/Output: [(40 23 74 10) 10]
Test Case: 851 | Input/Output: [(90 -77 -80 -81) -81]
Test Case: 852 | Input/Output: [(-58 -8 -30 34) -58]
Test Case: 853 | Input/Output: [(-75 61 -28 -20) -75]
Test Case: 854 | Input/Output: [(50 7 49 6) 6]
Test Case: 855 | Input/Output: [(-27 -30 -86 -79) -86]
Test Case: 856 | Input/Output: [(-71 79 49 13) -71]
Test Case: 857 | Input/Output: [(100 36 -85 30) -85]
Test Case: 858 | Input/Output: [(8 -55 39 -72) -72]
Test Case: 859 | Input/Output: [(-73 -40 19 -97) -97]
Test Case: 860 | Input/Output: [(97 -76 69 -36) -76]
Test Case: 861 | Input/Output: [(-42 89 33 21) -42]
Test Case: 862 | Input/Output: [(54 62 62 87) 54]
Test Case: 863 | Input/Output: [(-40 53 20 6) -40]
Test Case: 864 | Input/Output: [(-11 -34 22 -87) -87]
Test Case: 865 | Input/Output: [(25 -57 -36 9) -57]
Test Case: 866 | Input/Output: [(-84 71 6 -50) -84]
Test Case: 867 | Input/Output: [(-45 1 74 41) -45]
Test Case: 868 | Input/Output: [(26 -24 67 -60) -60]
Test Case: 869 | Input/Output: [(65 62 10 40) 10]
Test Case: 870 | Input/Output: [(68 -12 26 70) -12]
Test Case: 871 | Input/Output: [(16 15 24 85) 15]
Test Case: 872 | Input/Output: [(-91 -5 -56 -53) -91]
Test Case: 873 | Input/Output: [(-33 25 75 82) -33]
Test Case: 874 | Input/Output: [(-79 33 -39 93) -79]
Test Case: 875 | Input/Output: [(-61 48 17 -76) -76]
Test Case: 876 | Input/Output: [(58 6 -40 -23) -40]
Test Case: 877 | Input/Output: [(-42 -65 14 67) -65]
Test Case: 878 | Input/Output: [(-77 -89 42 50) -89]
Test Case: 879 | Input/Output: [(32 50 -61 85) -61]
Test Case: 880 | Input/Output: [(-14 13 82 -84) -84]
Test Case: 881 | Input/Output: [(94 -74 91 -3) -74]
Test Case: 882 | Input/Output: [(-22 73 -36 87) -36]
Test Case: 883 | Input/Output: [(-18 -45 14 -20) -45]
Test Case: 884 | Input/Output: [(-97 90 11 38) -97]
Test Case: 885 | Input/Output: [(-74 70 -31 -37) -74]
Test Case: 886 | Input/Output: [(-95 -42 -12 87) -95]
Test Case: 887 | Input/Output: [(80 2 -55 46) -55]
Test Case: 888 | Input/Output: [(91 -74 67 -2) -74]
Test Case: 889 | Input/Output: [(85 29 99 -100) -100]
Test Case: 890 | Input/Output: [(75 13 -92 -55) -92]
Test Case: 891 | Input/Output: [(-53 -47 59 -24) -53]
Test Case: 892 | Input/Output: [(-87 -12 14 -56) -87]
Test Case: 893 | Input/Output: [(88 -14 -25 -4) -25]
Test Case: 894 | Input/Output: [(33 69 -90 38) -90]
Test Case: 895 | Input/Output: [(1 -16 68 -22) -22]
Test Case: 896 | Input/Output: [(-59 29 88 49) -59]
Test Case: 897 | Input/Output: [(19 81 1 57) 1]
Test Case: 898 | Input/Output: [(28 88 -29 44) -29]
Test Case: 899 | Input/Output: [(47 5 95 38) 5]
Test Case: 900 | Input/Output: [(43 -46 -33 41) -46]
Test Case: 901 | Input/Output: [(67 32 97 -1) -1]
Test Case: 902 | Input/Output: [(6 39 57 -16) -16]
Test Case: 903 | Input/Output: [(19 97 82 55) 19]
Test Case: 904 | Input/Output: [(73 8 -20 -71) -71]
Test Case: 905 | Input/Output: [(-86 16 -48 96) -86]
Test Case: 906 | Input/Output: [(1 40 90 -47) -47]
Test Case: 907 | Input/Output: [(-59 3 -89 -47) -89]
Test Case: 908 | Input/Output: [(49 -68 -58 43) -68]
Test Case: 909 | Input/Output: [(13 -37 -17 -42) -42]
Test Case: 910 | Input/Output: [(-13 86 -40 -5) -40]
Test Case: 911 | Input/Output: [(56 73 39 86) 39]
Test Case: 912 | Input/Output: [(94 -89 28 -30) -89]
Test Case: 913 | Input/Output: [(-22 12 57 -42) -42]
Test Case: 914 | Input/Output: [(16 -23 44 47) -23]
Test Case: 915 | Input/Output: [(64 -50 68 99) -50]
Test Case: 916 | Input/Output: [(-25 54 -9 40) -25]
Test Case: 917 | Input/Output: [(-45 63 -13 -35) -45]
Test Case: 918 | Input/Output: [(-27 43 -76 -67) -76]
Test Case: 919 | Input/Output: [(-65 -90 -56 -99) -99]
Test Case: 920 | Input/Output: [(4 -40 71 -14) -40]
Test Case: 921 | Input/Output: [(40 60 22 -77) -77]
Test Case: 922 | Input/Output: [(1 59 -54 -79) -79]
Test Case: 923 | Input/Output: [(-88 -2 44 -73) -88]
Test Case: 924 | Input/Output: [(37 -50 -51 69) -51]
Test Case: 925 | Input/Output: [(78 -80 22 9) -80]
Test Case: 926 | Input/Output: [(39 -62 -81 -5) -81]
Test Case: 927 | Input/Output: [(54 -17 -37 -37) -37]
Test Case: 928 | Input/Output: [(-81 44 -38 -58) -81]
Test Case: 929 | Input/Output: [(-1 15 72 -3) -3]
Test Case: 930 | Input/Output: [(55 -56 35 -55) -56]
Test Case: 931 | Input/Output: [(15 2 41 -31) -31]
Test Case: 932 | Input/Output: [(-99 10 -40 -58) -99]
Test Case: 933 | Input/Output: [(-8 42 90 29) -8]
Test Case: 934 | Input/Output: [(-35 28 100 -16) -35]
Test Case: 935 | Input/Output: [(41 46 -47 48) -47]
Test Case: 936 | Input/Output: [(-66 -44 -34 -49) -66]
Test Case: 937 | Input/Output: [(60 29 64 -40) -40]
Test Case: 938 | Input/Output: [(29 18 -68 87) -68]
Test Case: 939 | Input/Output: [(-75 -36 -99 -93) -99]
Test Case: 940 | Input/Output: [(-23 -1 -48 64) -48]
Test Case: 941 | Input/Output: [(-6 34 34 3) -6]
Test Case: 942 | Input/Output: [(100 3 -41 41) -41]
Test Case: 943 | Input/Output: [(-68 66 -40 -77) -77]
Test Case: 944 | Input/Output: [(56 49 -86 -17) -86]
Test Case: 945 | Input/Output: [(-59 85 -55 -41) -59]
Test Case: 946 | Input/Output: [(-99 92 -100 -63) -100]
Test Case: 947 | Input/Output: [(1 51 62 11) 1]
Test Case: 948 | Input/Output: [(-56 -28 67 98) -56]
Test Case: 949 | Input/Output: [(-18 -27 36 67) -27]
Test Case: 950 | Input/Output: [(-60 -85 -72 45) -85]
Test Case: 951 | Input/Output: [(-37 98 -38 100) -38]
Test Case: 952 | Input/Output: [(-47 -82 94 -40) -82]
Test Case: 953 | Input/Output: [(-47 13 -85 28) -85]
Test Case: 954 | Input/Output: [(-55 99 24 -55) -55]
Test Case: 955 | Input/Output: [(36 -67 -76 -75) -76]
Test Case: 956 | Input/Output: [(-60 48 33 -51) -60]
Test Case: 957 | Input/Output: [(-61 -15 70 59) -61]
Test Case: 958 | Input/Output: [(-47 -37 75 -89) -89]
Test Case: 959 | Input/Output: [(-6 15 -73 90) -73]
Test Case: 960 | Input/Output: [(82 44 -80 -98) -98]
Test Case: 961 | Input/Output: [(69 -15 -47 -98) -98]
Test Case: 962 | Input/Output: [(-32 43 51 54) -32]
Test Case: 963 | Input/Output: [(-27 66 -45 -71) -71]
Test Case: 964 | Input/Output: [(-96 36 -48 -77) -96]
Test Case: 965 | Input/Output: [(87 -78 -52 -34) -78]
Test Case: 966 | Input/Output: [(55 9 66 56) 9]
Test Case: 967 | Input/Output: [(-76 -25 72 100) -76]
Test Case: 968 | Input/Output: [(16 43 74 50) 16]
Test Case: 969 | Input/Output: [(-70 73 92 -27) -70]
Test Case: 970 | Input/Output: [(38 62 -9 34) -9]
Test Case: 971 | Input/Output: [(-63 80 1 -65) -65]
Test Case: 972 | Input/Output: [(-70 -14 -55 18) -70]
Test Case: 973 | Input/Output: [(93 87 75 -80) -80]
Test Case: 974 | Input/Output: [(-35 -60 -62 44) -62]
Test Case: 975 | Input/Output: [(2 58 49 -52) -52]
Test Case: 976 | Input/Output: [(83 81 -68 18) -68]
Test Case: 977 | Input/Output: [(98 93 36 29) 29]
Test Case: 978 | Input/Output: [(-59 11 38 53) -59]
Test Case: 979 | Input/Output: [(18 75 90 36) 18]
Test Case: 980 | Input/Output: [(50 15 30 68) 15]
Test Case: 981 | Input/Output: [(19 59 84 7) 7]
Test Case: 982 | Input/Output: [(85 20 -89 55) -89]
Test Case: 983 | Input/Output: [(100 71 87 -33) -33]
Test Case: 984 | Input/Output: [(69 25 14 97) 14]
Test Case: 985 | Input/Output: [(-37 37 -98 -31) -98]
Test Case: 986 | Input/Output: [(74 -36 -56 43) -56]
Test Case: 987 | Input/Output: [(52 22 -18 37) -18]
Test Case: 988 | Input/Output: [(-88 6 -62 87) -88]
Test Case: 989 | Input/Output: [(88 20 22 -74) -74]
Test Case: 990 | Input/Output: [(38 -52 -2 51) -52]
Test Case: 991 | Input/Output: [(58 24 -76 -28) -76]
Test Case: 992 | Input/Output: [(24 45 99 23) 23]
Test Case: 993 | Input/Output: [(96 -74 17 -24) -74]
Test Case: 994 | Input/Output: [(83 -10 48 52) -10]
Test Case: 995 | Input/Output: [(82 55 -93 55) -93]
Test Case: 996 | Input/Output: [(-60 -57 49 -38) -60]
Test Case: 997 | Input/Output: [(0 68 56 28) 0]
Test Case: 998 | Input/Output: [(-2 -58 -28 32) -58]
Test Case: 999 | Input/Output: [(-67 -45 82 -68) -68]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -65 -14 75 1 5 91 62 -16 73 -83 -84 -27 -125 -127 -56 0
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-23 -23 19 -23] -23] [[-45 -45 -79 -45] -79] [[3 3 3 7] 3] [[47 47 -71 47] -71] [[32 32 32 -51] -51] [[86 86 -7 86] -7] [[91 58 91 91] 58] [[89 -73 -73 -73] -73] [[-12 -12 -12 52] -12] [[45 45 -23 45] -23] [(50 50 50 50) 50] [(22 22 22 22) 22] [(33 33 33 33) 33] [(-93 -93 -93 -93) -93] [(57 57 57 57) 57] [(19 66 5 70) 5] [(22 80 58 2) 2] [(67 11 85 53) 11] [(20 42 31 97) 20] [(91 87 3 0) 0] [(29 20 35 40) 20] [(90 2 62 54) 2] [(52 0 69 33) 0] [(37 91 86 6) 6] [(20 53 22 48) 20] [(18 83 34 93) 18] [(15 42 56 42) 15] [(22 54 86 87) 22] [(59 64 9 57) 9] [(74 45 64 13) 13] [(82 43 12 73) 12] [(1 63 99 45) 1] [(85 60 38 6) 6] [(30 40 10 8) 8] [(19 90 100 44) 19] [(2 -35 79 -18) -35] [(-69 -69 -68 95) -69] [(-8 -1 -68 -21) -68] [(22 56 -34 -73) -73] [(14 12 -62 -11) -62] [(88 95 -32 -59) -59] [(-67 6 -64 61) -67] [(30 94 -87 -96) -96] [(-73 83 96 -5) -73] [(-23 80 -16 10) -23] [(-17 -42 -28 56) -42] [(-79 -16 -97 42) -97] [(84 -37 43 17) -37] [(-34 -18 -85 55) -85] [(74 65 -4 -10) -10] [(-90 9 -83 -77) -90] [(23 69 51 -85) -85] [(63 -94 -23 55) -94] [(83 -2 70 54) -2] [(95 57 36 -99) -99] [(82 73 -80 -55) -80] [(30 9 32 -11) -11] [(57 57 -66 -39) -66] [(14 87 95 12) 12] [(28 58 26 -96) -96] [(90 -13 -78 44) -78] [(-47 40 17 -74) -74] [(37 30 -18 -24) -24] [(-71 -67 -46 77) -71] [(-50 -6 -34 -20) -50] [(-2 -66 14 -22) -66] [(14 -14 -79 -78) -79] [(-74 80 52 36) -74] [(40 -86 -56 -59) -86] [(-28 34 -98 23) -98] [(24 77 34 5) 5] [(-28 96 -24 91) -28] [(4 -81 -21 -19) -81] [(69 -20 -48 -93) -93] [(-32 -83 -58 -72) -83] [(36 94 31 9) 9] [(-78 -23 63 -99) -99] [(98 -42 -65 6) -65] [(-88 -47 -32 -71) -88] [(-96 -60 95 -20) -96] [(-9 -74 -54 -35) -74] [(-41 -78 7 15) -78] [(-17 53 35 -97) -97] [(-36 51 24 60) -36] [(-73 -5 63 73) -73] [(-9 -5 -18 -5) -18] [(-42 -80 -8 50) -80] [(10 72 92 -45) -45] [(38 49 -46 -5) -46] [(-76 51 78 -15) -76] [(96 1 90 93) 1] [(-5 -15 68 -34) -34] [(24 86 28 12) 12] [(42 3 -3 88) -3] [(-61 -38 0 -9) -61])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: 47                 
Correct output: -51                 | Program output: 32                 
Correct output: -7                  | Program output: 86                 
Correct output: 58                  | Program output: 91                 
Correct output: -73                 | Program output: 89                 
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: 45                 
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 19                 
Correct output: 2                   | Program output: 22                 
Correct output: 11                  | Program output: 67                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 91                 
Correct output: 20                  | Program output: 29                 
Correct output: 2                   | Program output: 90                 
Correct output: 0                   | Program output: 52                 
Correct output: 6                   | Program output: 37                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 59                 
Correct output: 13                  | Program output: 74                 
Correct output: 12                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 85                 
Correct output: 8                   | Program output: 30                 
Correct output: 19                  | Program output: 19                 
Correct output: -35                 | Program output: 2                  
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -8                 
Correct output: -73                 | Program output: 22                 
Correct output: -62                 | Program output: 14                 
Correct output: -59                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: 30                 
Correct output: -73                 | Program output: -73                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -17                
Correct output: -97                 | Program output: -79                
Correct output: -37                 | Program output: 84                 
Correct output: -85                 | Program output: -34                
Correct output: -10                 | Program output: 74                 
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: 23                 
Correct output: -94                 | Program output: 63                 
Correct output: -2                  | Program output: 83                 
Correct output: -99                 | Program output: 95                 
Correct output: -80                 | Program output: 82                 
Correct output: -11                 | Program output: 30                 
Correct output: -66                 | Program output: 57                 
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: 28                 
Correct output: -78                 | Program output: 90                 
Correct output: -74                 | Program output: -47                
Correct output: -24                 | Program output: 37                 
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: -2                 
Correct output: -79                 | Program output: 14                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: 40                 
Correct output: -98                 | Program output: -28                
Correct output: 5                   | Program output: 24                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: 4                  
Correct output: -93                 | Program output: 69                 
Correct output: -83                 | Program output: -32                
Correct output: 9                   | Program output: 36                 
Correct output: -99                 | Program output: -78                
Correct output: -65                 | Program output: 98                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -9                 
Correct output: -78                 | Program output: -41                
Correct output: -97                 | Program output: -17                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -18                 | Program output: -9                 
Correct output: -80                 | Program output: -42                
Correct output: -45                 | Program output: 10                 
Correct output: -46                 | Program output: 38                 
Correct output: -76                 | Program output: -76                
Correct output: 1                   | Program output: 96                 
Correct output: -34                 | Program output: -5                 
Correct output: 12                  | Program output: 24                 
Correct output: -3                  | Program output: 42                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 1, :instruction tagged_477} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_do*range (integer_yankdup boolean_yankdup boolean_yankdup) exec_y_when_autoconstructing () integer_flush boolean_and exec_shove (exec_when (boolean_flush boolean_flush boolean_xor) exec_dup (integer_dup_times in1 exec_s (exec_y (exec_when () exec_k_when_autoconstructing (print_integer boolean_yankdup) (integer_lte) integer_yank) exec_rot (exec_rot () (integer_dup integer_dup_times integer_dup integer_add exec_when () integer_eq) (boolean_dup_items boolean_rot boolean_not exec_s_when_autoconstructing (integer_rot boolean_or integer_empty exec_s (integer_dec integer_dup exec_swap (exec_empty) (exec_y_when_autoconstructing () boolean_yank boolean_eq) boolean_dup_times) (exec_k (exec_yank boolean_dup) (tagged_477) boolean_frominteger integer_eq boolean_empty boolean_yankdup) (boolean_dup print_boolean integer_empty) exec_k (integer_div boolean_empty) (integer_lt integer_div exec_pop () boolean_frominteger boolean_stackdepth integer_yankdup integer_empty exec_do*range (print_exec () boolean_dup_times) exec_yank integer_div integer_gte boolean_dup_times boolean_or)) () ())) () ()) () ())))
Lexicase best errors: [0 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 112
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 1, :instruction tagged_477} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_do*range (integer_yankdup boolean_yankdup boolean_yankdup) exec_y_when_autoconstructing () integer_flush boolean_and exec_shove (exec_when (boolean_flush boolean_flush boolean_xor) exec_dup (integer_dup_times in1 exec_s (exec_y (exec_when () exec_k_when_autoconstructing (print_integer boolean_yankdup) (integer_lte) integer_yank) exec_rot (exec_rot () (integer_dup integer_dup_times integer_dup integer_add exec_when () integer_eq) (boolean_dup_items boolean_rot boolean_not exec_s_when_autoconstructing (integer_rot boolean_or integer_empty exec_s (integer_dec integer_dup exec_swap (exec_empty) (exec_y_when_autoconstructing () boolean_yank boolean_eq) boolean_dup_times) (exec_k (exec_yank boolean_dup) (tagged_477) boolean_frominteger integer_eq boolean_empty boolean_yankdup) (boolean_dup print_boolean integer_empty) exec_k (integer_div boolean_empty) (integer_lt integer_div exec_pop () boolean_frominteger boolean_stackdepth integer_yankdup integer_empty exec_do*range (print_exec () boolean_dup_times) exec_yank integer_div integer_gte boolean_dup_times boolean_or)) () ())) () ()) () ())))
Zero cases best errors: [0 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 112
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 1 2 7 4 1 1 9 2 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (10 1 2 7 4 1 1 9 2 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gt} {:close 3, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction 91} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_integer_744} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_153} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction 10} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_12} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction 43} {:close 0, :instruction in1})
Best program: (exec_do*while (integer_swap in1 integer_dup integer_dup integer_min print_integer) exec_s (exec_empty exec_do*times (boolean_or exec_stackdepth exec_flush exec_dup_times (exec_dup_times (integer_gt in3))) exec_eq boolean_pop integer_rot) (exec_dup_times () print_boolean) (integer_yank exec_k_when_autoconstructing (print_newline boolean_frominteger) (exec_do*while (integer_shove 91 boolean_eq integer_yank) exec_noop integer_rot tag_integer_744 integer_inc) exec_if (integer_stackdepth integer_add boolean_flush tag_exec_153 (integer_max integer_inc integer_div integer_rot) integer_shove exec_rot (exec_do*while (exec_k () (boolean_swap in2 print_exec () boolean_dup_items integer_yankdup) boolean_xor print_newline boolean_dup exec_do*while (boolean_frominteger) exec_noop) 10 exec_eq in4 integer_dup integer_empty exec_s_when_autoconstructing () (exec_yankdup in4 exec_empty exec_k (boolean_eq) (integer_mod exec_y_when_autoconstructing (boolean_or boolean_and integer_yankdup boolean_and boolean_yankdup) in2 boolean_dup exec_dup (integer_flush exec_if (integer_sub integer_pop print_boolean tagged_12 boolean_pop integer_add) (exec_dup_items boolean_dup_times 43 in1)))) ()) () ()) ()))
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 92
Size: 124
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 9.96
Median total errors in population: 10
Error averages by case: (0.99 0.999 0.998 0.993 0.996 0.999 0.999 0.991 0.998 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.106
Average program size in population (points): 70.349
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 480549
--- Timings ---
Current time: 1559582636560 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 30.6%
Fitness Testing:      1.7 seconds, 65.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: 47                 
Correct output: -51                 | Program output: 32                 
Correct output: -7                  | Program output: 86                 
Correct output: 58                  | Program output: 91                 
Correct output: -73                 | Program output: 89                 
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: 45                 
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 19                 
Correct output: 2                   | Program output: 22                 
Correct output: 11                  | Program output: 67                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 91                 
Correct output: 20                  | Program output: 29                 
Correct output: 2                   | Program output: 90                 
Correct output: 0                   | Program output: 52                 
Correct output: 6                   | Program output: 37                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 59                 
Correct output: 13                  | Program output: 74                 
Correct output: 12                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 85                 
Correct output: 8                   | Program output: 30                 
Correct output: 19                  | Program output: 19                 
Correct output: -35                 | Program output: 2                  
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -8                 
Correct output: -73                 | Program output: 22                 
Correct output: -62                 | Program output: 14                 
Correct output: -59                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: 30                 
Correct output: -73                 | Program output: -73                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -17                
Correct output: -97                 | Program output: -79                
Correct output: -37                 | Program output: 84                 
Correct output: -85                 | Program output: -34                
Correct output: -10                 | Program output: 74                 
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: 23                 
Correct output: -94                 | Program output: 63                 
Correct output: -2                  | Program output: 83                 
Correct output: -99                 | Program output: 95                 
Correct output: -80                 | Program output: 82                 
Correct output: -11                 | Program output: 30                 
Correct output: -66                 | Program output: 57                 
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: 28                 
Correct output: -78                 | Program output: 90                 
Correct output: -74                 | Program output: -47                
Correct output: -24                 | Program output: 37                 
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: -2                 
Correct output: -79                 | Program output: 14                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: 40                 
Correct output: -98                 | Program output: -28                
Correct output: 5                   | Program output: 24                 
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: 4                  
Correct output: -93                 | Program output: 69                 
Correct output: -83                 | Program output: -32                
Correct output: 9                   | Program output: 36                 
Correct output: -99                 | Program output: -78                
Correct output: -65                 | Program output: 98                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -9                 
Correct output: -78                 | Program output: -41                
Correct output: -97                 | Program output: -17                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -18                 | Program output: -9                 
Correct output: -80                 | Program output: -42                
Correct output: -45                 | Program output: 10                 
Correct output: -46                 | Program output: 38                 
Correct output: -76                 | Program output: -76                
Correct output: 1                   | Program output: 96                 
Correct output: -34                 | Program output: -5                 
Correct output: 12                  | Program output: 24                 
Correct output: -3                  | Program output: 42                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 1, :instruction tagged_477} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_do*range (integer_yankdup boolean_yankdup boolean_yankdup) exec_y_when_autoconstructing () integer_flush boolean_and exec_shove (exec_when (boolean_flush boolean_flush boolean_xor) exec_dup (integer_dup_times in1 integer_eq exec_y (exec_when () exec_k_when_autoconstructing (print_integer boolean_yankdup) (integer_lte) integer_yank) exec_rot (exec_rot () (integer_dup integer_dup_times integer_dup integer_add exec_when () integer_eq) (boolean_dup_items boolean_rot boolean_not exec_s_when_autoconstructing (integer_rot boolean_or integer_empty exec_s (integer_dec integer_dup exec_swap (exec_empty) (exec_y_when_autoconstructing () boolean_yank boolean_eq) boolean_dup_times) (exec_k (exec_yank boolean_dup) (tagged_477) boolean_frominteger integer_eq boolean_empty boolean_yankdup) (boolean_dup print_boolean integer_empty) exec_k (integer_div boolean_empty) (integer_lt integer_div exec_pop () boolean_frominteger boolean_stackdepth integer_yankdup integer_empty exec_do*range (print_exec () boolean_dup_times) exec_yank integer_div integer_gte boolean_dup_times boolean_or)) () ())) () ())))
Lexicase best errors: [0 0 1 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 109
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 1, :instruction tagged_477} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_do*range (integer_yankdup boolean_yankdup boolean_yankdup) exec_y_when_autoconstructing () integer_flush boolean_and exec_shove (exec_when (boolean_flush boolean_flush boolean_xor) exec_dup (integer_dup_times in1 integer_eq exec_y (exec_when () exec_k_when_autoconstructing (print_integer boolean_yankdup) (integer_lte) integer_yank) exec_rot (exec_rot () (integer_dup integer_dup_times integer_dup integer_add exec_when () integer_eq) (boolean_dup_items boolean_rot boolean_not exec_s_when_autoconstructing (integer_rot boolean_or integer_empty exec_s (integer_dec integer_dup exec_swap (exec_empty) (exec_y_when_autoconstructing () boolean_yank boolean_eq) boolean_dup_times) (exec_k (exec_yank boolean_dup) (tagged_477) boolean_frominteger integer_eq boolean_empty boolean_yankdup) (boolean_dup print_boolean integer_empty) exec_k (integer_div boolean_empty) (integer_lt integer_div exec_pop () boolean_frominteger boolean_stackdepth integer_yankdup integer_empty exec_do*range (print_exec () boolean_dup_times) exec_yank integer_div integer_gte boolean_dup_times boolean_or)) () ())) () ())))
Zero cases best errors: [0 0 1 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 109
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (389 750 238 121 124 1000 96 249 1000 389)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (389 750 238 121 124 0 96 249 0 389)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 1, :instruction tagged_477} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or})
Best program: (exec_do*range (integer_yankdup boolean_yankdup boolean_yankdup) exec_y_when_autoconstructing () integer_flush boolean_and exec_shove (exec_when (boolean_flush boolean_flush boolean_xor) exec_dup (integer_dup_times in1 exec_s (exec_y (exec_when () exec_k_when_autoconstructing (print_integer boolean_yankdup) (integer_lte) integer_yank) exec_rot (exec_rot () (integer_dup integer_dup_times integer_dup integer_add exec_when () integer_eq) (boolean_dup_items boolean_rot boolean_not exec_s_when_autoconstructing (integer_rot boolean_or integer_empty exec_s (integer_dec integer_dup exec_swap (exec_empty) (exec_y_when_autoconstructing () boolean_yank boolean_eq) boolean_dup_times) (exec_k (exec_yank boolean_dup) (tagged_477) boolean_frominteger integer_eq boolean_empty boolean_yankdup) (boolean_dup print_boolean integer_empty) exec_k (integer_div boolean_empty) (integer_lt integer_div exec_pop () boolean_frominteger boolean_stackdepth integer_yankdup integer_empty exec_do*range (print_exec () boolean_dup_times) exec_yank integer_div integer_gte boolean_dup_times boolean_or)) () ())) () ()) () ())))
Errors: [0 0 1 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 76
Size: 112
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 7.644
Median total errors in population: 7
Error averages by case: (0.611 0.25 0.762 0.879 0.876 1.0 0.904 0.751 1.0 0.611)
Error minima by case: (0 0 0 0 0 1 0 0 1 0)
Average genome size in population (length): 56.962
Average program size in population (points): 80.384
Average percent parens in population: 0.300
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.515
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 205
Genome diversity (% unique genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.004
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 959048
--- Timings ---
Current time: 1559582639431 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.3 seconds, 46.0%
Fitness Testing:      2.3 seconds, 44.7%
Report:               0.4 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 765
Test mean error for best: 0.76500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -45                
Correct output: 3                   | Program output: 0                  
Correct output: -71                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: -8                 
Correct output: 58                  | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -13                
Correct output: -23                 | Program output: -24                
Correct output: 50                  | Program output: 0                  
Correct output: 22                  | Program output: 0                  
Correct output: 33                  | Program output: 0                  
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 0                  
Correct output: 5                   | Program output: 0                  
Correct output: 2                   | Program output: 0                  
Correct output: 11                  | Program output: 0                  
Correct output: 20                  | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 0                  
Correct output: 2                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 0                  
Correct output: 20                  | Program output: 0                  
Correct output: 18                  | Program output: 0                  
Correct output: 15                  | Program output: 0                  
Correct output: 22                  | Program output: 0                  
Correct output: 9                   | Program output: 0                  
Correct output: 13                  | Program output: 0                  
Correct output: 12                  | Program output: 0                  
Correct output: 1                   | Program output: 0                  
Correct output: 6                   | Program output: 0                  
Correct output: 8                   | Program output: 0                  
Correct output: 19                  | Program output: 0                  
Correct output: -35                 | Program output: -18                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -11                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -5                 
Correct output: -23                 | Program output: -17                
Correct output: -42                 | Program output: -29                
Correct output: -97                 | Program output: -98                
Correct output: -37                 | Program output: 0                  
Correct output: -85                 | Program output: -86                
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -24                
Correct output: -2                  | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -39                
Correct output: 12                  | Program output: 0                  
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: -79                
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -47                
Correct output: -50                 | Program output: -20                
Correct output: -66                 | Program output: -22                
Correct output: -79                 | Program output: -78                
Correct output: -74                 | Program output: 0                  
Correct output: -86                 | Program output: -59                
Correct output: -98                 | Program output: -99                
Correct output: 5                   | Program output: 0                  
Correct output: -28                 | Program output: -25                
Correct output: -81                 | Program output: -19                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -72                
Correct output: 9                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -66                
Correct output: -88                 | Program output: -71                
Correct output: -96                 | Program output: -20                
Correct output: -74                 | Program output: -35                
Correct output: -78                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: 0                  
Correct output: -73                 | Program output: 0                  
Correct output: -18                 | Program output: -5                 
Correct output: -80                 | Program output: -9                 
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -5                 
Correct output: -76                 | Program output: -15                
Correct output: 1                   | Program output: 0                  
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 0                  
Correct output: -3                  | Program output: -4                 
Correct output: -61                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_stackdepth exec_do*while (integer_eq) boolean_yank integer_max boolean_frominteger in4 exec_s_when_autoconstructing (boolean_not print_integer) (exec_stackdepth) (exec_y_when_autoconstructing ()))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_stackdepth exec_do*while (integer_eq) boolean_yank integer_max boolean_frominteger in4 exec_s_when_autoconstructing (boolean_not print_integer) (exec_stackdepth) (exec_y_when_autoconstructing ()))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (74 280 470 74 230 278 1 543 74 74)
Population mean number of elite cases: 2.10
Count of perfect (error zero) individuals by case: (74 280 470 74 230 278 1 543 74 74)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction 32} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Best program: (exec_dup_times (boolean_invert_first_then_and in3) integer_sub boolean_rot 32 exec_rot (exec_yank exec_swap (integer_max exec_swap (boolean_xor integer_yankdup exec_do*count (print_integer integer_min exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max) integer_inc integer_mod boolean_pop) in3 exec_yankdup in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty) in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))) ())) ()) () ())
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 66
Size: 92
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.902
Median total errors in population: 8
Error averages by case: (0.926 0.72 0.53 0.926 0.77 0.722 0.999 0.457 0.926 0.926)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.805
Average program size in population (points): 66.073
Average percent parens in population: 0.301
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9965
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 202
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1336854
--- Timings ---
Current time: 1559582642370 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 53.6%
Fitness Testing:      2.7 seconds, 32.5%
Report:               1.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -79                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: 58                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: -23                
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 58                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 31                 
Correct output: 0                   | Program output: 3                  
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 86                 
Correct output: 20                  | Program output: 22                 
Correct output: 18                  | Program output: 34                 
Correct output: 15                  | Program output: 42                 
Correct output: 22                  | Program output: 54                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 63                 
Correct output: 6                   | Program output: 38                 
Correct output: 8                   | Program output: 10                 
Correct output: 19                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -68                
Correct output: -73                 | Program output: -34                
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: -32                
Correct output: -67                 | Program output: -64                
Correct output: -96                 | Program output: -87                
Correct output: -73                 | Program output: 83                 
Correct output: -23                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: -4                 
Correct output: -90                 | Program output: -83                
Correct output: -85                 | Program output: 51                 
Correct output: -94                 | Program output: -94                
Correct output: -2                  | Program output: -2                 
Correct output: -99                 | Program output: 36                 
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 9                  
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 87                 
Correct output: -96                 | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -74                 | Program output: 17                 
Correct output: -24                 | Program output: -18                
Correct output: -71                 | Program output: -67                
Correct output: -50                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: 52                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: 5                   | Program output: 34                 
Correct output: -28                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -48                
Correct output: -83                 | Program output: -83                
Correct output: 9                   | Program output: 31                 
Correct output: -99                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -47                
Correct output: -96                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: 35                 
Correct output: -36                 | Program output: 24                 
Correct output: -73                 | Program output: -5                 
Correct output: -18                 | Program output: -18                
Correct output: -80                 | Program output: -80                
Correct output: -45                 | Program output: 72                 
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: -34                 | Program output: -15                
Correct output: 12                  | Program output: 28                 
Correct output: -3                  | Program output: -3                 
Correct output: -61                 | Program output: -38                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Lexicase best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max) integer_inc integer_mod boolean_pop) (in3 boolean_swap in2) exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 print_integer) boolean_rot exec_empty) in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))) ()) ()))
Lexicase best errors: [0 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 86
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Zero cases best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max) integer_inc integer_mod boolean_pop) (in3 boolean_swap in2) exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 print_integer) boolean_rot exec_empty) in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))) ()) ()))
Zero cases best errors: [0 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 86
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (282 330 1 515 341 336 284 336 333 1)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (282 330 1 515 341 336 284 336 333 1)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max) integer_inc integer_mod boolean_pop) (in3 boolean_swap in2) exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 print_integer) boolean_rot exec_empty) in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))) ()) ()))
Errors: [0 0 1 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 63
Size: 86
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 7.241
Median total errors in population: 8
Error averages by case: (0.718 0.67 0.999 0.485 0.659 0.664 0.716 0.664 0.667 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.67
Average program size in population (points): 63.605
Average percent parens in population: 0.297
Minimum age in population: 3.0
Maximum age in population: 5.5
Average age in population: 4.442
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 260
Genome diversity (% unique genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 264
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1562474
--- Timings ---
Current time: 1559582644965 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.6 seconds, 59.1%
Fitness Testing:      3.1 seconds, 27.5%
Report:               1.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 475
Test mean error for best: 0.47500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: 86                 
Correct output: 58                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: 52                 
Correct output: -23                 | Program output: 45                 
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 48                 
Correct output: 18                  | Program output: 83                 
Correct output: 15                  | Program output: 42                 
Correct output: 22                  | Program output: 54                 
Correct output: 9                   | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 43                 
Correct output: 1                   | Program output: 45                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: 95                 
Correct output: -68                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -11                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -5                 
Correct output: -23                 | Program output: 10                 
Correct output: -42                 | Program output: 56                 
Correct output: -97                 | Program output: 42                 
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: 55                 
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 55                 
Correct output: -2                  | Program output: -2                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 44                 
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 77                 
Correct output: -50                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -78                
Correct output: -74                 | Program output: 36                 
Correct output: -86                 | Program output: -59                
Correct output: -98                 | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: -28                 | Program output: 91                 
Correct output: -81                 | Program output: -19                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -72                
Correct output: 9                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: 6                  
Correct output: -88                 | Program output: -71                
Correct output: -96                 | Program output: -60                
Correct output: -74                 | Program output: -35                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: 51                 
Correct output: -73                 | Program output: -5                 
Correct output: -18                 | Program output: -5                 
Correct output: -80                 | Program output: 50                 
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -5                 
Correct output: -76                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: 88                 
Correct output: -61                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Lexicase best program: (exec_dup_times (integer_empty boolean_not) boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) (in3 exec_yankdup) in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))))))
Lexicase best errors: [0 0 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 89
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Zero cases best program: (exec_dup_times (integer_empty boolean_not) boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) (in3 exec_yankdup) in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))))))
Zero cases best errors: [0 0 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 89
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (305 326 172 172 584 333 310 336 172 333)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (305 326 172 172 584 333 310 336 172 333)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Best program: (exec_dup_times (integer_empty boolean_not) boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) (in3 exec_yankdup) in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))))))
Errors: [0 0 1 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 66
Size: 89
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.957
Median total errors in population: 7
Error averages by case: (0.695 0.674 0.828 0.828 0.416 0.667 0.69 0.664 0.828 0.667)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.037
Average program size in population (points): 73.095
Average percent parens in population: 0.253
Minimum age in population: 4.75
Maximum age in population: 7.5
Average age in population: 6.0035
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1808162
--- Timings ---
Current time: 1559582647583 milliseconds
Total Time:          13.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.6 seconds, 62.9%
Fitness Testing:      3.3 seconds, 24.5%
Report:               1.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -79                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: -7                 
Correct output: 58                  | Program output: 91                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: -23                
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 53                 
Correct output: 20                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 35                 
Correct output: 2                   | Program output: 54                 
Correct output: 0                   | Program output: 33                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 22                 
Correct output: 18                  | Program output: 34                 
Correct output: 15                  | Program output: 42                 
Correct output: 22                  | Program output: 86                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 45                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 44                 
Correct output: -35                 | Program output: -18                
Correct output: -69                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -5                 
Correct output: -23                 | Program output: -16                
Correct output: -42                 | Program output: -28                
Correct output: -97                 | Program output: -97                
Correct output: -37                 | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -83                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -23                
Correct output: -2                  | Program output: 54                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -46                
Correct output: -50                 | Program output: -34                
Correct output: -66                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: 36                 
Correct output: -86                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: 5                   | Program output: 5                  
Correct output: -28                 | Program output: -24                
Correct output: -81                 | Program output: -21                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -72                
Correct output: 9                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -71                
Correct output: -96                 | Program output: -20                
Correct output: -74                 | Program output: -54                
Correct output: -78                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: 24                 
Correct output: -73                 | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: -80                 | Program output: -8                 
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -15                
Correct output: 1                   | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: -61                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Lexicase best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max) integer_inc integer_mod boolean_pop) (in3 boolean_swap boolean_pop) in3 exec_yankdup in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty) in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))) ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 89
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Zero cases best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max) integer_inc integer_mod boolean_pop) (in3 boolean_swap boolean_pop) in3 exec_yankdup in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty) in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))) ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 89
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (405 224 226 398 399 224 223 110 226 825)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (405 224 226 398 399 224 223 110 226 825)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max) integer_inc integer_mod boolean_pop) (in3 boolean_swap boolean_pop) in3 exec_yankdup in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty) in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))) ())))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 66
Size: 89
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.74
Median total errors in population: 8
Error averages by case: (0.595 0.776 0.774 0.602 0.601 0.776 0.777 0.89 0.774 0.175)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.428
Average program size in population (points): 63.832
Average percent parens in population: 0.246
Minimum age in population: 5.875
Maximum age in population: 8.75
Average age in population: 7.1350625
Median age in population: 7.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 206
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 231
Syntactic diversity (% unique Push programs):	 0.549
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2029645
--- Timings ---
Current time: 1559582650057 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.6 seconds, 65.3%
Fitness Testing:      3.6 seconds, 22.3%
Report:               1.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 475
Test mean error for best: 0.47500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: 86                 
Correct output: 58                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: 52                 
Correct output: -23                 | Program output: 45                 
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 48                 
Correct output: 18                  | Program output: 83                 
Correct output: 15                  | Program output: 42                 
Correct output: 22                  | Program output: 54                 
Correct output: 9                   | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 43                 
Correct output: 1                   | Program output: 45                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: 95                 
Correct output: -68                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -11                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -5                 
Correct output: -23                 | Program output: 10                 
Correct output: -42                 | Program output: 56                 
Correct output: -97                 | Program output: 42                 
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: 55                 
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 55                 
Correct output: -2                  | Program output: -2                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 44                 
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 77                 
Correct output: -50                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -78                
Correct output: -74                 | Program output: 36                 
Correct output: -86                 | Program output: -59                
Correct output: -98                 | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: -28                 | Program output: 91                 
Correct output: -81                 | Program output: -19                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -72                
Correct output: 9                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: 6                  
Correct output: -88                 | Program output: -71                
Correct output: -96                 | Program output: -60                
Correct output: -74                 | Program output: -35                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: 51                 
Correct output: -73                 | Program output: -5                 
Correct output: -18                 | Program output: -5                 
Correct output: -80                 | Program output: 50                 
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -5                 
Correct output: -76                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: 88                 
Correct output: -61                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Lexicase best program: (exec_dup_times (integer_empty) boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) (exec_stackdepth exec_yankdup) in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove boolean_shove exec_empty in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min)))))))
Lexicase best errors: [0 1 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 103
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Zero cases best program: (exec_dup_times (integer_empty) boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) (exec_stackdepth exec_yankdup) in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove boolean_shove exec_empty in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min)))))))
Zero cases best errors: [0 1 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 103
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (794 1 560 1000 290 1000 535 286 659 534)
Population mean number of elite cases: 5.66
Count of perfect (error zero) individuals by case: (794 1 560 0 290 0 535 286 659 534)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Best program: (exec_dup_times (integer_empty boolean_not) boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer boolean_xor boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub) print_exec (integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) (in3 exec_yankdup) in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) () boolean_and) integer_min)))))
Errors: [0 1 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 66
Size: 90
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.341
Median total errors in population: 5
Error averages by case: (0.206 0.999 0.44 1.0 0.71 1.0 0.465 0.714 0.341 0.466)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 66.236
Average program size in population (points): 89.791
Average percent parens in population: 0.262
Minimum age in population: 6.875
Maximum age in population: 10.625
Average age in population: 8.90471875
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2325618
--- Timings ---
Current time: 1559582652641 milliseconds
Total Time:          18.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.5 seconds, 66.8%
Fitness Testing:      4.0 seconds, 21.1%
Report:               2.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: 86                 
Correct output: 58                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: 45                 
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 48                 
Correct output: 18                  | Program output: 83                 
Correct output: 15                  | Program output: 42                 
Correct output: 22                  | Program output: 54                 
Correct output: 9                   | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 43                 
Correct output: 1                   | Program output: 45                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -11                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: 6                  
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -5                 
Correct output: -23                 | Program output: 10                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -16                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -18                
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -2                  | Program output: -2                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: -13                
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -67                
Correct output: -50                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -78                
Correct output: -74                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: -28                 | Program output: 91                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: 9                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -42                
Correct output: -88                 | Program output: -71                
Correct output: -96                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: 51                 
Correct output: -73                 | Program output: -5                 
Correct output: -18                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -5                 
Correct output: -76                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: 3                  
Correct output: -61                 | Program output: -38                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Lexicase best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) (exec_stackdepth exec_yankdup) in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min)))))))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 96
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Zero cases best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) (exec_stackdepth exec_yankdup) in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min)))))))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 96
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (484 473 457 80 273 524 629 706 485 473)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (484 473 457 80 273 524 629 706 485 473)
Population mean number of perfect (error zero) cases: 4.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) (exec_stackdepth exec_yankdup) in2) (exec_rot (integer_mult boolean_or integer_dec integer_yank boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min)))))))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 76
Size: 103
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 5.416
Median total errors in population: 5
Error averages by case: (0.516 0.527 0.543 0.92 0.727 0.476 0.371 0.294 0.515 0.527)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.42
Average program size in population (points): 95.422
Average percent parens in population: 0.262
Minimum age in population: 8.1875
Maximum age in population: 12.109375
Average age in population: 10.46434375
Median age in population: 10.5546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2617822
--- Timings ---
Current time: 1559582655231 milliseconds
Total Time:          21.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.4 seconds, 67.8%
Fitness Testing:      4.3 seconds, 20.2%
Report:               2.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -79                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: -7                 
Correct output: 58                  | Program output: 91                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: -23                
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 53                 
Correct output: 20                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 35                 
Correct output: 2                   | Program output: 54                 
Correct output: 0                   | Program output: 33                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 22                 
Correct output: 18                  | Program output: 34                 
Correct output: 15                  | Program output: 42                 
Correct output: 22                  | Program output: 86                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 45                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 44                 
Correct output: -35                 | Program output: -18                
Correct output: -69                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -5                 
Correct output: -23                 | Program output: -16                
Correct output: -42                 | Program output: -28                
Correct output: -97                 | Program output: -97                
Correct output: -37                 | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -83                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -23                
Correct output: -2                  | Program output: 54                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -46                
Correct output: -50                 | Program output: -34                
Correct output: -66                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: 36                 
Correct output: -86                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: 5                   | Program output: 5                  
Correct output: -28                 | Program output: -24                
Correct output: -81                 | Program output: -21                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -72                
Correct output: 9                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -71                
Correct output: -96                 | Program output: -20                
Correct output: -74                 | Program output: -54                
Correct output: -78                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: 24                 
Correct output: -73                 | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: -80                 | Program output: -8                 
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -15                
Correct output: 1                   | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: -61                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Lexicase best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_yank) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max) integer_inc integer_mod boolean_pop) (in3 boolean_swap boolean_pop) in3 exec_yankdup in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty) in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))) ())))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 89
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Zero cases best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_yank) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max) integer_inc integer_mod boolean_pop) (in3 boolean_swap boolean_pop) in3 exec_yankdup in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty) in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))) ())))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 89
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (531 15 248 556 543 252 252 542 15 248)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (531 15 248 556 543 252 252 542 15 248)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min})
Best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max) integer_inc integer_mod integer_yankdup) (in3 boolean_swap boolean_pop) in3 exec_yankdup in2) (exec_rot (boolean_flush boolean_or exec_empty in4 boolean_yank) (in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty) in4 exec_do*count (in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_and) integer_min))) ())))
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 66
Size: 89
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.798
Median total errors in population: 6
Error averages by case: (0.469 0.985 0.752 0.444 0.457 0.748 0.748 0.458 0.985 0.752)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.235
Average program size in population (points): 97.766
Average percent parens in population: 0.261
Minimum age in population: 9.5
Maximum age in population: 13.703125
Average age in population: 12.0264609375
Median age in population: 12.0546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2892775
--- Timings ---
Current time: 1559582657795 milliseconds
Total Time:          23.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.3 seconds, 68.5%
Fitness Testing:      4.6 seconds, 19.5%
Report:               2.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: 86                 
Correct output: 58                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: 45                 
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 48                 
Correct output: 18                  | Program output: 83                 
Correct output: 15                  | Program output: 42                 
Correct output: 22                  | Program output: 54                 
Correct output: 9                   | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 43                 
Correct output: 1                   | Program output: 45                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -11                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: 6                  
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -5                 
Correct output: -23                 | Program output: 10                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -16                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -18                
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -2                  | Program output: -2                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: -13                
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -67                
Correct output: -50                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -78                
Correct output: -74                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: -28                 | Program output: 91                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: 9                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -42                
Correct output: -88                 | Program output: -71                
Correct output: -96                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: 51                 
Correct output: -73                 | Program output: -5                 
Correct output: -18                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -5                 
Correct output: -76                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: 3                  
Correct output: -61                 | Program output: -38                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4})
Lexicase best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) (exec_stackdepth exec_yankdup) in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty in4 exec_do*count (in4)))))))
Lexicase best errors: [1 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 97
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4})
Zero cases best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) (exec_stackdepth exec_yankdup) in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty in4 exec_do*count (in4)))))))
Zero cases best errors: [1 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 97
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (173 180 179 180 454 176 207 443 443 445)
Population mean number of elite cases: 2.88
Count of perfect (error zero) individuals by case: (173 180 179 180 454 176 207 443 443 445)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in4})
Best program: (exec_dup_times (integer_empty exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) (exec_stackdepth exec_yankdup) in2) (exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove) boolean_shove exec_empty in4)))))))
Errors: [1 0 1 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 72
Size: 97
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.12
Median total errors in population: 7
Error averages by case: (0.827 0.82 0.821 0.82 0.546 0.824 0.793 0.557 0.557 0.555)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.68
Average program size in population (points): 94.454
Average percent parens in population: 0.262
Minimum age in population: 10.5
Maximum age in population: 15.3671875
Average age in population: 13.50201953125
Median age in population: 13.5859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3189539
--- Timings ---
Current time: 1559582660364 milliseconds
Total Time:          26.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.3 seconds, 69.2%
Fitness Testing:      5.0 seconds, 18.9%
Report:               3.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: 86                 
Correct output: 58                  | Program output: 91                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: 45                 
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 53                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 29                 
Correct output: 2                   | Program output: 54                 
Correct output: 0                   | Program output: 33                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 73                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: -35                 | Program output: -18                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -11                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -73                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -17                
Correct output: -97                 | Program output: -79                
Correct output: -37                 | Program output: 17                 
Correct output: -85                 | Program output: -34                
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 55                 
Correct output: -2                  | Program output: 54                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 44                 
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: -22                
Correct output: -79                 | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -59                
Correct output: -98                 | Program output: -28                
Correct output: 5                   | Program output: 5                  
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -19                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -72                
Correct output: 9                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -35                
Correct output: -78                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -18                 | Program output: -9                 
Correct output: -80                 | Program output: -42                
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -5                 
Correct output: -76                 | Program output: -76                
Correct output: 1                   | Program output: 93                 
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: 42                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (623 623 424 463 769 469 424 23 725 27)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (623 623 424 463 769 469 424 23 725 27)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot})
Best program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
Errors: [0 0 0 0 0 1 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 53
Size: 74
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 5.43
Median total errors in population: 4
Error averages by case: (0.377 0.377 0.576 0.537 0.231 0.531 0.576 0.977 0.275 0.973)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.368
Average program size in population (points): 88.942
Average percent parens in population: 0.266
Minimum age in population: 12.6875
Maximum age in population: 17.091796875
Average age in population: 15.326759765625
Median age in population: 15.359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3439350
--- Timings ---
Current time: 1559582662946 milliseconds
Total Time:          29.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.3 seconds, 69.9%
Fitness Testing:      5.3 seconds, 18.2%
Report:               3.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: 86                 
Correct output: 58                  | Program output: 91                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: 45                 
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 53                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 29                 
Correct output: 2                   | Program output: 54                 
Correct output: 0                   | Program output: 33                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 73                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: -35                 | Program output: -18                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -11                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -73                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -17                
Correct output: -97                 | Program output: -79                
Correct output: -37                 | Program output: 17                 
Correct output: -85                 | Program output: -34                
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 55                 
Correct output: -2                  | Program output: 54                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 44                 
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: -22                
Correct output: -79                 | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -59                
Correct output: -98                 | Program output: -28                
Correct output: 5                   | Program output: 5                  
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -19                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -72                
Correct output: 9                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -35                
Correct output: -78                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -18                 | Program output: -9                 
Correct output: -80                 | Program output: -42                
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -5                 
Correct output: -76                 | Program output: -76                
Correct output: 1                   | Program output: 93                 
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: 42                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_dup_times (integer_empty integer_lte boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 72
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_dup_times (integer_empty integer_lte boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 72
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (440 450 437 283 354 475 273 651 275 806)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (440 450 437 283 354 475 273 651 275 806)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot})
Best program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing (integer_div) exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 74
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 5.556
Median total errors in population: 5
Error averages by case: (0.56 0.55 0.563 0.717 0.646 0.525 0.727 0.349 0.725 0.194)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.06
Average program size in population (points): 88.171
Average percent parens in population: 0.263
Minimum age in population: 15.03515625
Maximum age in population: 18.7529296875
Average age in population: 16.9337939453125
Median age in population: 17.0576171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.008
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3772614
--- Timings ---
Current time: 1559582665474 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.2 seconds, 70.3%
Fitness Testing:      5.6 seconds, 17.9%
Report:               3.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -79                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: -7                 
Correct output: 58                  | Program output: 91                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: -23                
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 53                 
Correct output: 20                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 35                 
Correct output: 2                   | Program output: 54                 
Correct output: 0                   | Program output: 33                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 22                 
Correct output: 18                  | Program output: 34                 
Correct output: 15                  | Program output: 42                 
Correct output: 22                  | Program output: 86                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 45                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 44                 
Correct output: -35                 | Program output: -18                
Correct output: -69                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -5                 
Correct output: -23                 | Program output: -16                
Correct output: -42                 | Program output: -28                
Correct output: -97                 | Program output: -97                
Correct output: -37                 | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -83                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -23                
Correct output: -2                  | Program output: 54                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -46                
Correct output: -50                 | Program output: -34                
Correct output: -66                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: 36                 
Correct output: -86                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: 5                   | Program output: 5                  
Correct output: -28                 | Program output: -24                
Correct output: -81                 | Program output: -21                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -72                
Correct output: 9                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -71                
Correct output: -96                 | Program output: -20                
Correct output: -74                 | Program output: -54                
Correct output: -78                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: 24                 
Correct output: -73                 | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: -80                 | Program output: -8                 
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -46                
Correct output: -76                 | Program output: -15                
Correct output: 1                   | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: -61                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2})
Lexicase best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_dup (boolean_xor) exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_shove) exec_stackdepth exec_yankdup) (in2)))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2})
Zero cases best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_dup (boolean_xor) exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_shove) exec_stackdepth exec_yankdup) (in2)))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 227 612 238 222 376 610 635 236 376)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (372 227 612 238 222 376 610 635 236 376)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove})
Best program: (exec_dup_times (integer_empty boolean_not boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq boolean_xor) (integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_xor) exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max integer_inc integer_mod boolean_pop) in3 boolean_swap boolean_pop) exec_stackdepth exec_yankdup) (in2) exec_rot (integer_mult boolean_or integer_dec in4 boolean_yank) (in4) (exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove))))))
Errors: [0 0 1 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 72
Size: 96
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.096
Median total errors in population: 6
Error averages by case: (0.628 0.773 0.388 0.762 0.778 0.624 0.39 0.365 0.764 0.624)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.502
Average program size in population (points): 84.462
Average percent parens in population: 0.260
Minimum age in population: 16.123046875
Maximum age in population: 20.34814453125
Average age in population: 18.08407275390625
Median age in population: 18.1181640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.008
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4064142
--- Timings ---
Current time: 1559582668006 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.1 seconds, 70.8%
Fitness Testing:      6.0 seconds, 17.5%
Report:               3.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: 86                 
Correct output: 58                  | Program output: 91                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: 45                 
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 53                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 29                 
Correct output: 2                   | Program output: 54                 
Correct output: 0                   | Program output: 33                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 73                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: -35                 | Program output: -18                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -11                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -73                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -17                
Correct output: -97                 | Program output: -79                
Correct output: -37                 | Program output: 17                 
Correct output: -85                 | Program output: -34                
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 55                 
Correct output: -2                  | Program output: 54                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 44                 
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: -22                
Correct output: -79                 | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -59                
Correct output: -98                 | Program output: -28                
Correct output: 5                   | Program output: 5                  
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -19                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -72                
Correct output: 9                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -35                
Correct output: -78                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -18                 | Program output: -9                 
Correct output: -80                 | Program output: -42                
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -5                 
Correct output: -76                 | Program output: -76                
Correct output: 1                   | Program output: 93                 
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: 42                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min})
Lexicase best program: (exec_dup_times (integer_empty exec_swap (exec_rot (integer_min boolean_dup print_integer exec_do*times (boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max) integer_inc exec_flush) (integer_pop exec_do*while (boolean_and boolean_xor) integer_mult tagged_983 boolean_and integer_inc integer_mod boolean_pop) (in3 boolean_swap boolean_pop) in3 exec_yankdup in2) (exec_rot (integer_mult exec_do*times (integer_dec in4 boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_k () (exec_y (exec_while (exec_noop integer_min)))) ())))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 89
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction 69} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_983} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min})
Zero cases best program: (exec_dup_times (integer_empty exec_swap (exec_rot (integer_min boolean_dup print_integer exec_do*times (boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (in2 exec_yank exec_y () exec_flush integer_div boolean_dup_items) 69 exec_when (tagged_983 boolean_and integer_sub integer_mult integer_max) integer_inc exec_flush) (integer_pop exec_do*while (boolean_and boolean_xor) integer_mult tagged_983 boolean_and integer_inc integer_mod boolean_pop) (in3 boolean_swap boolean_pop) in3 exec_yankdup in2) (exec_rot (integer_mult exec_do*times (integer_dec in4 boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) (in4 exec_k () (exec_y (exec_while (exec_noop integer_min)))) ())))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 89
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (460 501 501 394 524 795 453 395 89 59)
Population mean number of elite cases: 4.17
Count of perfect (error zero) individuals by case: (460 501 501 394 524 795 453 395 89 59)
Population mean number of perfect (error zero) cases: 4.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot})
Best program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
Errors: [0 0 0 1 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 53
Size: 74
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 5.829
Median total errors in population: 5
Error averages by case: (0.54 0.499 0.499 0.606 0.476 0.205 0.547 0.605 0.911 0.941)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.017
Average program size in population (points): 83.562
Average percent parens in population: 0.271
Minimum age in population: 17.33349609375
Maximum age in population: 21.88037109375
Average age in population: 19.79818286132812
Median age in population: 19.8607177734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.752
Total error diversity:				 0.007
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4343260
--- Timings ---
Current time: 1559582670491 milliseconds
Total Time:          36.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.0 seconds, 71.1%
Fitness Testing:      6.3 seconds, 17.2%
Report:               4.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 422
Test mean error for best: 0.42200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: 86                 
Correct output: 58                  | Program output: 91                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: 45                 
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 53                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 29                 
Correct output: 2                   | Program output: 54                 
Correct output: 0                   | Program output: 33                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 73                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: -35                 | Program output: -18                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -11                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -73                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -17                
Correct output: -97                 | Program output: -79                
Correct output: -37                 | Program output: 17                 
Correct output: -85                 | Program output: -34                
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 55                 
Correct output: -2                  | Program output: 54                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 44                 
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: -22                
Correct output: -79                 | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -59                
Correct output: -98                 | Program output: -28                
Correct output: 5                   | Program output: 5                  
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -19                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -72                
Correct output: 9                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -35                
Correct output: -78                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -18                 | Program output: -9                 
Correct output: -80                 | Program output: -42                
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -5                 
Correct output: -76                 | Program output: -76                
Correct output: 1                   | Program output: 93                 
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: 42                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 print_integer) boolean_rot exec_empty) in4 in4 in4) exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove))))) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 82
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction -79} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 print_integer) boolean_rot exec_empty) in4 in4 in4) exec_k () (exec_pop (exec_while (exec_noop in2 integer_div -79 boolean_shove))))) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 82
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (436 433 768 433 349 431 727 581 348 433)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (436 433 768 433 349 431 727 581 348 433)
Population mean number of perfect (error zero) cases: 4.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction -79} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot})
Best program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 53
Size: 74
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 5.061
Median total errors in population: 5
Error averages by case: (0.564 0.567 0.232 0.567 0.651 0.569 0.273 0.419 0.652 0.567)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.534
Average program size in population (points): 88.138
Average percent parens in population: 0.268
Minimum age in population: 18.5927734375
Maximum age in population: 23.321044921875
Average age in population: 21.19987878417969
Median age in population: 21.23040771484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.01
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4631332
--- Timings ---
Current time: 1559582672999 milliseconds
Total Time:          39.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.9 seconds, 71.4%
Fitness Testing:      6.6 seconds, 16.9%
Report:               4.4 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 74


Auto-simplifying with starting size: 74
step: 0
program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 500
program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 1000
program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 1500
program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 2000
program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 2500
program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 3000
program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 3500
program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 4000
program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 4500
program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 5000
program: (exec_dup_times (integer_empty exec_k (boolean_and exec_swap (exec_rot (integer_min boolean_dup print_integer exec_eq) (boolean_xor) (integer_inc integer_max exec_if (in1) (integer_min exec_do*while (print_integer exec_eq boolean_xor) integer_inc boolean_dup_times exec_if (in1) (exec_y_when_autoconstructing () integer_div exec_flush) integer_pop exec_do*while (boolean_and boolean_yank) integer_mult boolean_or integer_dec in4 boolean_yank) in4 exec_k () (exec_pop (exec_while (exec_noop in2 integer_max -79 print_integer) boolean_rot exec_empty) in4 in4 exec_do*count (in4 print_integer) boolean_rot))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 422
Test mean error for best: 0.42200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -71                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -7                  | Program output: 86                 
Correct output: 58                  | Program output: 91                 
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -23                 | Program output: 45                 
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: -93                 | Program output: -93                
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 53                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 29                 
Correct output: 2                   | Program output: 54                 
Correct output: 0                   | Program output: 33                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 73                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: -35                 | Program output: -18                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -62                 | Program output: -11                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: -73                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -17                
Correct output: -97                 | Program output: -79                
Correct output: -37                 | Program output: 17                 
Correct output: -85                 | Program output: -34                
Correct output: -10                 | Program output: -10                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 55                 
Correct output: -2                  | Program output: 54                 
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -66                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 44                 
Correct output: -74                 | Program output: -74                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: -22                
Correct output: -79                 | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -59                
Correct output: -98                 | Program output: -28                
Correct output: 5                   | Program output: 5                  
Correct output: -28                 | Program output: -28                
Correct output: -81                 | Program output: -19                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -72                
Correct output: 9                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -35                
Correct output: -78                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -18                 | Program output: -9                 
Correct output: -80                 | Program output: -42                
Correct output: -45                 | Program output: -45                
Correct output: -46                 | Program output: -5                 
Correct output: -76                 | Program output: -76                
Correct output: 1                   | Program output: 93                 
Correct output: -34                 | Program output: -34                
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: 42                 
Correct output: -61                 | Program output: -61                
;;******************************
