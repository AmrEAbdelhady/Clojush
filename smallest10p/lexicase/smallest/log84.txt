Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-88 28 28 28] -88] [[73 73 86 73] 73] [[-91 9 9 9] -91] [[-58 -96 -58 -58] -96] [[-59 9 9 9] -59] [[-90 -90 -90 66] -90] [[-51 -51 -51 -92] -92] [[79 79 -17 79] -17] [[-51 -12 -51 -51] -51] [[-67 55 55 55] -67] [(-30 -30 -30 -30) -30] [(-89 -89 -89 -89) -89] [(67 67 67 67) 67] [(50 50 50 50) 50] [(29 29 29 29) 29] [(24 64 17 91) 17] [(96 3 50 24) 3] [(88 80 27 31) 27] [(16 86 22 62) 16] [(99 81 69 71) 69] [(84 71 29 91) 29] [(51 95 42 83) 42] [(25 13 96 100) 13] [(55 2 79 81) 2] [(9 66 28 12) 9] [(44 34 99 25) 25] [(71 22 91 19) 19] [(35 78 68 19) 19] [(27 50 41 15) 15] [(90 60 40 60) 40] [(50 70 67 100) 50] [(28 71 61 68) 28] [(78 58 11 41) 11] [(66 50 38 33) 33] [(72 43 4 42) 4] [(89 100 -24 24) -24] [(78 -2 -42 -57) -57] [(-5 -32 -97 28) -97] [(-90 21 76 -48) -90] [(75 -98 88 -48) -98] [(-5 64 -56 -6) -56] [(32 24 30 55) 24] [(-33 -69 77 -45) -69] [(0 87 77 -98) -98] [(-68 26 -79 -81) -81] [(-8 51 -24 11) -24] [(0 9 95 -15) -15] [(32 -95 13 -92) -95] [(7 -6 93 50) -6] [(41 98 35 -94) -94] [(-41 -100 12 46) -100] [(5 31 47 56) 5] [(20 98 56 64) 20] [(-54 -52 72 51) -54] [(-14 9 -75 -34) -75] [(11 16 -71 -49) -71] [(-80 -79 95 -5) -80] [(-95 -41 -74 44) -95] [(-66 38 35 -54) -66] [(-21 -3 27 49) -21] [(-9 -100 -38 29) -100] [(67 10 -39 -86) -86] [(-28 -61 -81 5) -81] [(64 -25 -40 -12) -40] [(-93 -12 76 -23) -93] [(-15 40 -11 48) -15] [(2 -99 97 -49) -99] [(-74 83 2 -47) -74] [(81 77 22 40) 22] [(70 75 15 27) 15] [(73 -71 -19 -46) -71] [(90 -79 87 64) -79] [(44 -2 69 53) -2] [(55 -31 -85 -51) -85] [(58 42 86 -33) -33] [(-10 82 -55 47) -55] [(27 -44 99 56) -44] [(-67 56 8 89) -67] [(85 7 71 99) 7] [(27 -2 -72 -75) -75] [(9 -98 55 11) -98] [(-72 56 51 -39) -72] [(25 60 74 -46) -46] [(-3 4 85 84) -3] [(57 -79 -78 28) -79] [(52 -5 -85 -43) -85] [(-99 -43 -29 -70) -99] [(53 47 -49 33) -49] [(-25 24 65 98) -25] [(-67 43 -15 -18) -67] [(94 38 90 -49) -49] [(1 -56 19 -85) -85] [(41 -24 -34 -27) -34] [(-9 54 -46 10) -46] [(-68 -92 72 -92) -92])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-88 28 28 28] -88]
Train Case:   6 | Input/Output: [[73 73 86 73] 73]
Train Case:   7 | Input/Output: [[-91 9 9 9] -91]
Train Case:   8 | Input/Output: [[-58 -96 -58 -58] -96]
Train Case:   9 | Input/Output: [[-59 9 9 9] -59]
Train Case:  10 | Input/Output: [[-90 -90 -90 66] -90]
Train Case:  11 | Input/Output: [[-51 -51 -51 -92] -92]
Train Case:  12 | Input/Output: [[79 79 -17 79] -17]
Train Case:  13 | Input/Output: [[-51 -12 -51 -51] -51]
Train Case:  14 | Input/Output: [[-67 55 55 55] -67]
Train Case:  15 | Input/Output: [(-30 -30 -30 -30) -30]
Train Case:  16 | Input/Output: [(-89 -89 -89 -89) -89]
Train Case:  17 | Input/Output: [(67 67 67 67) 67]
Train Case:  18 | Input/Output: [(50 50 50 50) 50]
Train Case:  19 | Input/Output: [(29 29 29 29) 29]
Train Case:  20 | Input/Output: [(24 64 17 91) 17]
Train Case:  21 | Input/Output: [(96 3 50 24) 3]
Train Case:  22 | Input/Output: [(88 80 27 31) 27]
Train Case:  23 | Input/Output: [(16 86 22 62) 16]
Train Case:  24 | Input/Output: [(99 81 69 71) 69]
Train Case:  25 | Input/Output: [(84 71 29 91) 29]
Train Case:  26 | Input/Output: [(51 95 42 83) 42]
Train Case:  27 | Input/Output: [(25 13 96 100) 13]
Train Case:  28 | Input/Output: [(55 2 79 81) 2]
Train Case:  29 | Input/Output: [(9 66 28 12) 9]
Train Case:  30 | Input/Output: [(44 34 99 25) 25]
Train Case:  31 | Input/Output: [(71 22 91 19) 19]
Train Case:  32 | Input/Output: [(35 78 68 19) 19]
Train Case:  33 | Input/Output: [(27 50 41 15) 15]
Train Case:  34 | Input/Output: [(90 60 40 60) 40]
Train Case:  35 | Input/Output: [(50 70 67 100) 50]
Train Case:  36 | Input/Output: [(28 71 61 68) 28]
Train Case:  37 | Input/Output: [(78 58 11 41) 11]
Train Case:  38 | Input/Output: [(66 50 38 33) 33]
Train Case:  39 | Input/Output: [(72 43 4 42) 4]
Train Case:  40 | Input/Output: [(89 100 -24 24) -24]
Train Case:  41 | Input/Output: [(78 -2 -42 -57) -57]
Train Case:  42 | Input/Output: [(-5 -32 -97 28) -97]
Train Case:  43 | Input/Output: [(-90 21 76 -48) -90]
Train Case:  44 | Input/Output: [(75 -98 88 -48) -98]
Train Case:  45 | Input/Output: [(-5 64 -56 -6) -56]
Train Case:  46 | Input/Output: [(32 24 30 55) 24]
Train Case:  47 | Input/Output: [(-33 -69 77 -45) -69]
Train Case:  48 | Input/Output: [(0 87 77 -98) -98]
Train Case:  49 | Input/Output: [(-68 26 -79 -81) -81]
Train Case:  50 | Input/Output: [(-8 51 -24 11) -24]
Train Case:  51 | Input/Output: [(0 9 95 -15) -15]
Train Case:  52 | Input/Output: [(32 -95 13 -92) -95]
Train Case:  53 | Input/Output: [(7 -6 93 50) -6]
Train Case:  54 | Input/Output: [(41 98 35 -94) -94]
Train Case:  55 | Input/Output: [(-41 -100 12 46) -100]
Train Case:  56 | Input/Output: [(5 31 47 56) 5]
Train Case:  57 | Input/Output: [(20 98 56 64) 20]
Train Case:  58 | Input/Output: [(-54 -52 72 51) -54]
Train Case:  59 | Input/Output: [(-14 9 -75 -34) -75]
Train Case:  60 | Input/Output: [(11 16 -71 -49) -71]
Train Case:  61 | Input/Output: [(-80 -79 95 -5) -80]
Train Case:  62 | Input/Output: [(-95 -41 -74 44) -95]
Train Case:  63 | Input/Output: [(-66 38 35 -54) -66]
Train Case:  64 | Input/Output: [(-21 -3 27 49) -21]
Train Case:  65 | Input/Output: [(-9 -100 -38 29) -100]
Train Case:  66 | Input/Output: [(67 10 -39 -86) -86]
Train Case:  67 | Input/Output: [(-28 -61 -81 5) -81]
Train Case:  68 | Input/Output: [(64 -25 -40 -12) -40]
Train Case:  69 | Input/Output: [(-93 -12 76 -23) -93]
Train Case:  70 | Input/Output: [(-15 40 -11 48) -15]
Train Case:  71 | Input/Output: [(2 -99 97 -49) -99]
Train Case:  72 | Input/Output: [(-74 83 2 -47) -74]
Train Case:  73 | Input/Output: [(81 77 22 40) 22]
Train Case:  74 | Input/Output: [(70 75 15 27) 15]
Train Case:  75 | Input/Output: [(73 -71 -19 -46) -71]
Train Case:  76 | Input/Output: [(90 -79 87 64) -79]
Train Case:  77 | Input/Output: [(44 -2 69 53) -2]
Train Case:  78 | Input/Output: [(55 -31 -85 -51) -85]
Train Case:  79 | Input/Output: [(58 42 86 -33) -33]
Train Case:  80 | Input/Output: [(-10 82 -55 47) -55]
Train Case:  81 | Input/Output: [(27 -44 99 56) -44]
Train Case:  82 | Input/Output: [(-67 56 8 89) -67]
Train Case:  83 | Input/Output: [(85 7 71 99) 7]
Train Case:  84 | Input/Output: [(27 -2 -72 -75) -75]
Train Case:  85 | Input/Output: [(9 -98 55 11) -98]
Train Case:  86 | Input/Output: [(-72 56 51 -39) -72]
Train Case:  87 | Input/Output: [(25 60 74 -46) -46]
Train Case:  88 | Input/Output: [(-3 4 85 84) -3]
Train Case:  89 | Input/Output: [(57 -79 -78 28) -79]
Train Case:  90 | Input/Output: [(52 -5 -85 -43) -85]
Train Case:  91 | Input/Output: [(-99 -43 -29 -70) -99]
Train Case:  92 | Input/Output: [(53 47 -49 33) -49]
Train Case:  93 | Input/Output: [(-25 24 65 98) -25]
Train Case:  94 | Input/Output: [(-67 43 -15 -18) -67]
Train Case:  95 | Input/Output: [(94 38 90 -49) -49]
Train Case:  96 | Input/Output: [(1 -56 19 -85) -85]
Train Case:  97 | Input/Output: [(41 -24 -34 -27) -34]
Train Case:  98 | Input/Output: [(-9 54 -46 10) -46]
Train Case:  99 | Input/Output: [(-68 -92 72 -92) -92]
Test Case:   0 | Input/Output: [[-67 57 -67 -67] -67]
Test Case:   1 | Input/Output: [[-67 57 -67 -67] -67]
Test Case:   2 | Input/Output: [[-24 -14 -24 -24] -24]
Test Case:   3 | Input/Output: [[-4 -4 63 -4] -4]
Test Case:   4 | Input/Output: [[-49 -49 97 -49] -49]
Test Case:   5 | Input/Output: [[-2 -2 -2 86] -2]
Test Case:   6 | Input/Output: [[65 78 78 78] 65]
Test Case:   7 | Input/Output: [[81 81 81 81] 81]
Test Case:   8 | Input/Output: [[25 -78 25 25] -78]
Test Case:   9 | Input/Output: [[-95 -95 87 -95] -95]
Test Case:  10 | Input/Output: [[-58 31 -58 -58] -58]
Test Case:  11 | Input/Output: [[15 85 15 15] 15]
Test Case:  12 | Input/Output: [[-6 -6 -78 -6] -78]
Test Case:  13 | Input/Output: [[80 14 14 14] 14]
Test Case:  14 | Input/Output: [[19 97 19 19] 19]
Test Case:  15 | Input/Output: [[67 66 67 67] 66]
Test Case:  16 | Input/Output: [[-73 77 77 77] -73]
Test Case:  17 | Input/Output: [[-43 -35 -35 -35] -43]
Test Case:  18 | Input/Output: [[81 81 -41 81] -41]
Test Case:  19 | Input/Output: [[70 -45 70 70] -45]
Test Case:  20 | Input/Output: [[-8 -8 41 -8] -8]
Test Case:  21 | Input/Output: [[-48 -48 75 -48] -48]
Test Case:  22 | Input/Output: [[81 -82 -82 -82] -82]
Test Case:  23 | Input/Output: [[-72 -72 -12 -72] -72]
Test Case:  24 | Input/Output: [[98 3 3 3] 3]
Test Case:  25 | Input/Output: [[-38 77 77 77] -38]
Test Case:  26 | Input/Output: [[72 -98 72 72] -98]
Test Case:  27 | Input/Output: [[18 -23 18 18] -23]
Test Case:  28 | Input/Output: [[-76 -5 -76 -76] -76]
Test Case:  29 | Input/Output: [[87 77 87 87] 77]
Test Case:  30 | Input/Output: [[-17 -17 32 -17] -17]
Test Case:  31 | Input/Output: [[21 21 -27 21] -27]
Test Case:  32 | Input/Output: [[-4 -4 -3 -4] -4]
Test Case:  33 | Input/Output: [[-94 -94 -94 -24] -94]
Test Case:  34 | Input/Output: [[88 88 63 88] 63]
Test Case:  35 | Input/Output: [[60 -55 -55 -55] -55]
Test Case:  36 | Input/Output: [[77 47 47 47] 47]
Test Case:  37 | Input/Output: [[13 85 85 85] 13]
Test Case:  38 | Input/Output: [[38 3 3 3] 3]
Test Case:  39 | Input/Output: [[35 35 35 -10] -10]
Test Case:  40 | Input/Output: [[19 -47 19 19] -47]
Test Case:  41 | Input/Output: [[77 11 77 77] 11]
Test Case:  42 | Input/Output: [[59 14 59 59] 14]
Test Case:  43 | Input/Output: [[-28 26 26 26] -28]
Test Case:  44 | Input/Output: [[-2 -4 -2 -2] -4]
Test Case:  45 | Input/Output: [[-89 71 -89 -89] -89]
Test Case:  46 | Input/Output: [[37 -34 37 37] -34]
Test Case:  47 | Input/Output: [[95 88 88 88] 88]
Test Case:  48 | Input/Output: [[65 31 65 65] 31]
Test Case:  49 | Input/Output: [[-46 -46 -46 -25] -46]
Test Case:  50 | Input/Output: [[23 -2 23 23] -2]
Test Case:  51 | Input/Output: [[63 63 63 3] 3]
Test Case:  52 | Input/Output: [[-48 -48 -48 -5] -48]
Test Case:  53 | Input/Output: [[90 90 23 90] 23]
Test Case:  54 | Input/Output: [[99 -64 -64 -64] -64]
Test Case:  55 | Input/Output: [[67 67 -60 67] -60]
Test Case:  56 | Input/Output: [[99 37 99 99] 37]
Test Case:  57 | Input/Output: [[-56 -56 -56 -59] -59]
Test Case:  58 | Input/Output: [[19 19 80 19] 19]
Test Case:  59 | Input/Output: [[-90 -90 -90 39] -90]
Test Case:  60 | Input/Output: [[-36 -36 -36 -63] -63]
Test Case:  61 | Input/Output: [[68 -63 68 68] -63]
Test Case:  62 | Input/Output: [[-63 -63 -63 83] -63]
Test Case:  63 | Input/Output: [[13 13 13 -10] -10]
Test Case:  64 | Input/Output: [[40 40 40 -8] -8]
Test Case:  65 | Input/Output: [[-94 -37 -37 -37] -94]
Test Case:  66 | Input/Output: [[70 70 70 69] 69]
Test Case:  67 | Input/Output: [[-80 -80 52 -80] -80]
Test Case:  68 | Input/Output: [[9 9 38 9] 9]
Test Case:  69 | Input/Output: [[56 -84 56 56] -84]
Test Case:  70 | Input/Output: [[19 19 19 71] 19]
Test Case:  71 | Input/Output: [[99 99 22 99] 22]
Test Case:  72 | Input/Output: [[-64 -64 22 -64] -64]
Test Case:  73 | Input/Output: [[-17 -92 -17 -17] -92]
Test Case:  74 | Input/Output: [[80 80 -66 80] -66]
Test Case:  75 | Input/Output: [[84 98 98 98] 84]
Test Case:  76 | Input/Output: [[34 -89 -89 -89] -89]
Test Case:  77 | Input/Output: [[27 27 27 -42] -42]
Test Case:  78 | Input/Output: [[-71 -71 -71 -39] -71]
Test Case:  79 | Input/Output: [[14 -41 14 14] -41]
Test Case:  80 | Input/Output: [[-79 -79 -79 48] -79]
Test Case:  81 | Input/Output: [[-90 -90 66 -90] -90]
Test Case:  82 | Input/Output: [[58 41 58 58] 41]
Test Case:  83 | Input/Output: [[91 -28 -28 -28] -28]
Test Case:  84 | Input/Output: [[-93 -93 -77 -93] -93]
Test Case:  85 | Input/Output: [[-43 -51 -51 -51] -51]
Test Case:  86 | Input/Output: [[13 87 87 87] 13]
Test Case:  87 | Input/Output: [[50 50 50 22] 22]
Test Case:  88 | Input/Output: [[0 -17 0 0] -17]
Test Case:  89 | Input/Output: [[-77 -77 -61 -77] -77]
Test Case:  90 | Input/Output: [[99 99 99 47] 47]
Test Case:  91 | Input/Output: [[66 66 -60 66] -60]
Test Case:  92 | Input/Output: [[65 65 65 33] 33]
Test Case:  93 | Input/Output: [[91 91 91 -36] -36]
Test Case:  94 | Input/Output: [[-80 -80 -80 -16] -80]
Test Case:  95 | Input/Output: [[96 72 96 96] 72]
Test Case:  96 | Input/Output: [[40 40 -44 40] -44]
Test Case:  97 | Input/Output: [[90 -3 90 90] -3]
Test Case:  98 | Input/Output: [[52 52 -73 52] -73]
Test Case:  99 | Input/Output: [[-94 -94 39 -94] -94]
Test Case: 100 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 101 | Input/Output: [(24 24 24 24) 24]
Test Case: 102 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 103 | Input/Output: [(40 40 40 40) 40]
Test Case: 104 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 105 | Input/Output: [(77 77 77 77) 77]
Test Case: 106 | Input/Output: [(65 65 65 65) 65]
Test Case: 107 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 108 | Input/Output: [(27 27 27 27) 27]
Test Case: 109 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 110 | Input/Output: [(18 18 18 18) 18]
Test Case: 111 | Input/Output: [(21 21 21 21) 21]
Test Case: 112 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 113 | Input/Output: [(66 66 66 66) 66]
Test Case: 114 | Input/Output: [(41 41 41 41) 41]
Test Case: 115 | Input/Output: [(80 80 80 80) 80]
Test Case: 116 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 117 | Input/Output: [(12 12 12 12) 12]
Test Case: 118 | Input/Output: [(91 91 91 91) 91]
Test Case: 119 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 120 | Input/Output: [(52 52 52 52) 52]
Test Case: 121 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 122 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 123 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 124 | Input/Output: [(31 31 31 31) 31]
Test Case: 125 | Input/Output: [(71 71 71 71) 71]
Test Case: 126 | Input/Output: [(30 30 30 30) 30]
Test Case: 127 | Input/Output: [(20 20 20 20) 20]
Test Case: 128 | Input/Output: [(75 75 75 75) 75]
Test Case: 129 | Input/Output: [(25 25 25 25) 25]
Test Case: 130 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 131 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 132 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 133 | Input/Output: [(60 60 60 60) 60]
Test Case: 134 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 135 | Input/Output: [(11 11 11 11) 11]
Test Case: 136 | Input/Output: [(18 18 18 18) 18]
Test Case: 137 | Input/Output: [(72 72 72 72) 72]
Test Case: 138 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 139 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 140 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 141 | Input/Output: [(34 34 34 34) 34]
Test Case: 142 | Input/Output: [(72 72 72 72) 72]
Test Case: 143 | Input/Output: [(80 80 80 80) 80]
Test Case: 144 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 145 | Input/Output: [(29 29 29 29) 29]
Test Case: 146 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 147 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 148 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 149 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 150 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 151 | Input/Output: [(97 97 97 97) 97]
Test Case: 152 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 153 | Input/Output: [(4 4 4 4) 4]
Test Case: 154 | Input/Output: [(48 48 48 48) 48]
Test Case: 155 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 156 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 157 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 158 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 159 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 160 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 161 | Input/Output: [(70 70 70 70) 70]
Test Case: 162 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 163 | Input/Output: [(65 65 65 65) 65]
Test Case: 164 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 165 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 166 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 167 | Input/Output: [(57 57 57 57) 57]
Test Case: 168 | Input/Output: [(57 57 57 57) 57]
Test Case: 169 | Input/Output: [(8 8 8 8) 8]
Test Case: 170 | Input/Output: [(85 85 85 85) 85]
Test Case: 171 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 172 | Input/Output: [(22 22 22 22) 22]
Test Case: 173 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 174 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 175 | Input/Output: [(49 49 49 49) 49]
Test Case: 176 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 177 | Input/Output: [(98 98 98 98) 98]
Test Case: 178 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 179 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 180 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 181 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 182 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 183 | Input/Output: [(58 58 58 58) 58]
Test Case: 184 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 185 | Input/Output: [(25 25 25 25) 25]
Test Case: 186 | Input/Output: [(19 19 19 19) 19]
Test Case: 187 | Input/Output: [(55 55 55 55) 55]
Test Case: 188 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 189 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 190 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 191 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 192 | Input/Output: [(7 7 7 7) 7]
Test Case: 193 | Input/Output: [(49 49 49 49) 49]
Test Case: 194 | Input/Output: [(32 32 32 32) 32]
Test Case: 195 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 196 | Input/Output: [(67 67 67 67) 67]
Test Case: 197 | Input/Output: [(53 53 53 53) 53]
Test Case: 198 | Input/Output: [(10 10 10 10) 10]
Test Case: 199 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 200 | Input/Output: [(28 33 96 44) 28]
Test Case: 201 | Input/Output: [(44 53 80 8) 8]
Test Case: 202 | Input/Output: [(8 62 80 8) 8]
Test Case: 203 | Input/Output: [(40 59 16 53) 16]
Test Case: 204 | Input/Output: [(90 64 10 32) 10]
Test Case: 205 | Input/Output: [(70 42 16 9) 9]
Test Case: 206 | Input/Output: [(64 98 32 39) 32]
Test Case: 207 | Input/Output: [(33 13 48 56) 13]
Test Case: 208 | Input/Output: [(44 100 87 60) 44]
Test Case: 209 | Input/Output: [(29 74 23 11) 11]
Test Case: 210 | Input/Output: [(55 42 19 69) 19]
Test Case: 211 | Input/Output: [(44 88 59 61) 44]
Test Case: 212 | Input/Output: [(89 87 71 95) 71]
Test Case: 213 | Input/Output: [(83 11 61 8) 8]
Test Case: 214 | Input/Output: [(92 82 39 49) 39]
Test Case: 215 | Input/Output: [(100 1 63 21) 1]
Test Case: 216 | Input/Output: [(17 49 44 58) 17]
Test Case: 217 | Input/Output: [(2 34 71 100) 2]
Test Case: 218 | Input/Output: [(56 97 59 47) 47]
Test Case: 219 | Input/Output: [(71 29 14 91) 14]
Test Case: 220 | Input/Output: [(15 48 12 7) 7]
Test Case: 221 | Input/Output: [(89 3 66 23) 3]
Test Case: 222 | Input/Output: [(43 72 86 8) 8]
Test Case: 223 | Input/Output: [(14 98 64 30) 14]
Test Case: 224 | Input/Output: [(62 84 66 8) 8]
Test Case: 225 | Input/Output: [(94 53 26 94) 26]
Test Case: 226 | Input/Output: [(56 66 66 87) 56]
Test Case: 227 | Input/Output: [(95 9 59 91) 9]
Test Case: 228 | Input/Output: [(64 58 50 38) 38]
Test Case: 229 | Input/Output: [(96 64 78 29) 29]
Test Case: 230 | Input/Output: [(72 86 4 88) 4]
Test Case: 231 | Input/Output: [(63 63 88 93) 63]
Test Case: 232 | Input/Output: [(24 73 94 95) 24]
Test Case: 233 | Input/Output: [(50 97 39 1) 1]
Test Case: 234 | Input/Output: [(0 22 2 74) 0]
Test Case: 235 | Input/Output: [(58 17 79 93) 17]
Test Case: 236 | Input/Output: [(59 45 82 76) 45]
Test Case: 237 | Input/Output: [(7 34 39 5) 5]
Test Case: 238 | Input/Output: [(55 47 87 83) 47]
Test Case: 239 | Input/Output: [(33 87 60 50) 33]
Test Case: 240 | Input/Output: [(36 94 10 32) 10]
Test Case: 241 | Input/Output: [(95 65 15 27) 15]
Test Case: 242 | Input/Output: [(89 3 31 63) 3]
Test Case: 243 | Input/Output: [(48 89 81 59) 48]
Test Case: 244 | Input/Output: [(73 62 98 47) 47]
Test Case: 245 | Input/Output: [(78 40 31 1) 1]
Test Case: 246 | Input/Output: [(30 95 12 51) 12]
Test Case: 247 | Input/Output: [(88 53 32 34) 32]
Test Case: 248 | Input/Output: [(94 96 6 86) 6]
Test Case: 249 | Input/Output: [(25 30 21 44) 21]
Test Case: 250 | Input/Output: [(2 13 84 33) 2]
Test Case: 251 | Input/Output: [(0 96 12 60) 0]
Test Case: 252 | Input/Output: [(89 22 74 41) 22]
Test Case: 253 | Input/Output: [(5 18 10 7) 5]
Test Case: 254 | Input/Output: [(29 55 76 75) 29]
Test Case: 255 | Input/Output: [(2 32 19 33) 2]
Test Case: 256 | Input/Output: [(98 63 17 39) 17]
Test Case: 257 | Input/Output: [(17 63 20 95) 17]
Test Case: 258 | Input/Output: [(73 54 81 35) 35]
Test Case: 259 | Input/Output: [(12 60 70 42) 12]
Test Case: 260 | Input/Output: [(42 47 53 95) 42]
Test Case: 261 | Input/Output: [(99 78 43 9) 9]
Test Case: 262 | Input/Output: [(3 96 44 52) 3]
Test Case: 263 | Input/Output: [(17 50 86 72) 17]
Test Case: 264 | Input/Output: [(99 0 75 59) 0]
Test Case: 265 | Input/Output: [(21 0 29 11) 0]
Test Case: 266 | Input/Output: [(49 64 44 30) 30]
Test Case: 267 | Input/Output: [(73 80 55 61) 55]
Test Case: 268 | Input/Output: [(14 40 84 54) 14]
Test Case: 269 | Input/Output: [(38 16 14 54) 14]
Test Case: 270 | Input/Output: [(97 78 17 49) 17]
Test Case: 271 | Input/Output: [(89 94 64 21) 21]
Test Case: 272 | Input/Output: [(98 67 4 9) 4]
Test Case: 273 | Input/Output: [(75 76 79 77) 75]
Test Case: 274 | Input/Output: [(34 61 13 31) 13]
Test Case: 275 | Input/Output: [(85 96 37 45) 37]
Test Case: 276 | Input/Output: [(95 46 29 48) 29]
Test Case: 277 | Input/Output: [(5 57 95 7) 5]
Test Case: 278 | Input/Output: [(68 9 51 38) 9]
Test Case: 279 | Input/Output: [(60 96 23 62) 23]
Test Case: 280 | Input/Output: [(74 23 99 64) 23]
Test Case: 281 | Input/Output: [(49 13 12 26) 12]
Test Case: 282 | Input/Output: [(55 13 90 81) 13]
Test Case: 283 | Input/Output: [(45 99 53 16) 16]
Test Case: 284 | Input/Output: [(31 60 85 74) 31]
Test Case: 285 | Input/Output: [(44 17 13 47) 13]
Test Case: 286 | Input/Output: [(54 67 71 69) 54]
Test Case: 287 | Input/Output: [(28 27 10 25) 10]
Test Case: 288 | Input/Output: [(69 7 60 45) 7]
Test Case: 289 | Input/Output: [(72 71 15 70) 15]
Test Case: 290 | Input/Output: [(56 27 91 99) 27]
Test Case: 291 | Input/Output: [(92 57 40 12) 12]
Test Case: 292 | Input/Output: [(91 60 1 12) 1]
Test Case: 293 | Input/Output: [(88 79 40 9) 9]
Test Case: 294 | Input/Output: [(38 53 44 82) 38]
Test Case: 295 | Input/Output: [(10 17 55 30) 10]
Test Case: 296 | Input/Output: [(75 59 28 45) 28]
Test Case: 297 | Input/Output: [(15 76 16 79) 15]
Test Case: 298 | Input/Output: [(53 45 45 43) 43]
Test Case: 299 | Input/Output: [(46 49 72 12) 12]
Test Case: 300 | Input/Output: [(0 35 10 36) 0]
Test Case: 301 | Input/Output: [(6 45 27 56) 6]
Test Case: 302 | Input/Output: [(77 1 61 57) 1]
Test Case: 303 | Input/Output: [(67 97 41 58) 41]
Test Case: 304 | Input/Output: [(82 60 50 57) 50]
Test Case: 305 | Input/Output: [(86 61 24 86) 24]
Test Case: 306 | Input/Output: [(95 76 73 77) 73]
Test Case: 307 | Input/Output: [(79 38 40 33) 33]
Test Case: 308 | Input/Output: [(30 27 99 82) 27]
Test Case: 309 | Input/Output: [(5 95 66 50) 5]
Test Case: 310 | Input/Output: [(30 92 9 9) 9]
Test Case: 311 | Input/Output: [(58 37 37 27) 27]
Test Case: 312 | Input/Output: [(91 46 37 45) 37]
Test Case: 313 | Input/Output: [(68 70 12 1) 1]
Test Case: 314 | Input/Output: [(27 22 92 19) 19]
Test Case: 315 | Input/Output: [(28 12 71 15) 12]
Test Case: 316 | Input/Output: [(82 58 84 54) 54]
Test Case: 317 | Input/Output: [(10 7 20 61) 7]
Test Case: 318 | Input/Output: [(32 6 97 62) 6]
Test Case: 319 | Input/Output: [(71 4 24 0) 0]
Test Case: 320 | Input/Output: [(60 1 16 81) 1]
Test Case: 321 | Input/Output: [(92 49 58 89) 49]
Test Case: 322 | Input/Output: [(45 26 54 80) 26]
Test Case: 323 | Input/Output: [(90 54 75 8) 8]
Test Case: 324 | Input/Output: [(93 17 86 72) 17]
Test Case: 325 | Input/Output: [(89 96 97 85) 85]
Test Case: 326 | Input/Output: [(95 91 53 50) 50]
Test Case: 327 | Input/Output: [(51 41 99 66) 41]
Test Case: 328 | Input/Output: [(68 37 71 34) 34]
Test Case: 329 | Input/Output: [(77 68 20 17) 17]
Test Case: 330 | Input/Output: [(100 75 88 81) 75]
Test Case: 331 | Input/Output: [(63 36 48 6) 6]
Test Case: 332 | Input/Output: [(72 71 60 70) 60]
Test Case: 333 | Input/Output: [(27 56 80 72) 27]
Test Case: 334 | Input/Output: [(42 77 42 9) 9]
Test Case: 335 | Input/Output: [(81 57 53 94) 53]
Test Case: 336 | Input/Output: [(18 75 76 46) 18]
Test Case: 337 | Input/Output: [(14 100 61 62) 14]
Test Case: 338 | Input/Output: [(94 52 70 76) 52]
Test Case: 339 | Input/Output: [(16 8 50 61) 8]
Test Case: 340 | Input/Output: [(4 99 61 54) 4]
Test Case: 341 | Input/Output: [(80 59 56 29) 29]
Test Case: 342 | Input/Output: [(24 20 49 56) 20]
Test Case: 343 | Input/Output: [(88 55 98 89) 55]
Test Case: 344 | Input/Output: [(9 37 53 28) 9]
Test Case: 345 | Input/Output: [(70 34 57 19) 19]
Test Case: 346 | Input/Output: [(85 9 46 63) 9]
Test Case: 347 | Input/Output: [(54 42 17 12) 12]
Test Case: 348 | Input/Output: [(14 11 21 100) 11]
Test Case: 349 | Input/Output: [(94 28 76 75) 28]
Test Case: 350 | Input/Output: [(14 85 30 65) 14]
Test Case: 351 | Input/Output: [(60 55 89 55) 55]
Test Case: 352 | Input/Output: [(22 7 99 6) 6]
Test Case: 353 | Input/Output: [(40 99 100 31) 31]
Test Case: 354 | Input/Output: [(83 87 7 56) 7]
Test Case: 355 | Input/Output: [(96 72 61 11) 11]
Test Case: 356 | Input/Output: [(98 0 49 41) 0]
Test Case: 357 | Input/Output: [(3 87 6 13) 3]
Test Case: 358 | Input/Output: [(41 30 89 63) 30]
Test Case: 359 | Input/Output: [(35 35 80 7) 7]
Test Case: 360 | Input/Output: [(44 25 32 77) 25]
Test Case: 361 | Input/Output: [(63 72 87 83) 63]
Test Case: 362 | Input/Output: [(99 59 59 59) 59]
Test Case: 363 | Input/Output: [(86 48 56 69) 48]
Test Case: 364 | Input/Output: [(15 28 74 87) 15]
Test Case: 365 | Input/Output: [(20 82 49 19) 19]
Test Case: 366 | Input/Output: [(53 58 88 52) 52]
Test Case: 367 | Input/Output: [(57 91 51 34) 34]
Test Case: 368 | Input/Output: [(40 40 70 46) 40]
Test Case: 369 | Input/Output: [(29 65 5 87) 5]
Test Case: 370 | Input/Output: [(19 31 82 24) 19]
Test Case: 371 | Input/Output: [(59 61 81 5) 5]
Test Case: 372 | Input/Output: [(10 46 65 33) 10]
Test Case: 373 | Input/Output: [(89 81 1 3) 1]
Test Case: 374 | Input/Output: [(84 35 65 53) 35]
Test Case: 375 | Input/Output: [(57 70 74 88) 57]
Test Case: 376 | Input/Output: [(70 8 1 78) 1]
Test Case: 377 | Input/Output: [(49 86 58 46) 46]
Test Case: 378 | Input/Output: [(79 83 24 13) 13]
Test Case: 379 | Input/Output: [(77 44 90 60) 44]
Test Case: 380 | Input/Output: [(92 64 11 42) 11]
Test Case: 381 | Input/Output: [(66 66 96 49) 49]
Test Case: 382 | Input/Output: [(49 57 14 9) 9]
Test Case: 383 | Input/Output: [(24 75 3 94) 3]
Test Case: 384 | Input/Output: [(48 75 44 100) 44]
Test Case: 385 | Input/Output: [(13 35 84 64) 13]
Test Case: 386 | Input/Output: [(97 54 94 56) 54]
Test Case: 387 | Input/Output: [(2 19 6 19) 2]
Test Case: 388 | Input/Output: [(57 37 77 80) 37]
Test Case: 389 | Input/Output: [(43 7 41 50) 7]
Test Case: 390 | Input/Output: [(9 69 64 99) 9]
Test Case: 391 | Input/Output: [(11 98 82 54) 11]
Test Case: 392 | Input/Output: [(53 17 27 88) 17]
Test Case: 393 | Input/Output: [(82 57 11 99) 11]
Test Case: 394 | Input/Output: [(4 62 58 62) 4]
Test Case: 395 | Input/Output: [(6 54 7 100) 6]
Test Case: 396 | Input/Output: [(75 39 36 22) 22]
Test Case: 397 | Input/Output: [(37 8 20 63) 8]
Test Case: 398 | Input/Output: [(75 14 69 12) 12]
Test Case: 399 | Input/Output: [(88 49 100 62) 49]
Test Case: 400 | Input/Output: [(-58 -1 13 -60) -60]
Test Case: 401 | Input/Output: [(-72 66 -56 97) -72]
Test Case: 402 | Input/Output: [(-25 -11 -59 -61) -61]
Test Case: 403 | Input/Output: [(-65 -53 90 -69) -69]
Test Case: 404 | Input/Output: [(-65 -88 91 -68) -88]
Test Case: 405 | Input/Output: [(-17 34 37 81) -17]
Test Case: 406 | Input/Output: [(-6 69 -30 77) -30]
Test Case: 407 | Input/Output: [(-86 -31 -7 -19) -86]
Test Case: 408 | Input/Output: [(54 43 76 -65) -65]
Test Case: 409 | Input/Output: [(54 -16 -13 -44) -44]
Test Case: 410 | Input/Output: [(-97 -33 22 -31) -97]
Test Case: 411 | Input/Output: [(14 -70 92 85) -70]
Test Case: 412 | Input/Output: [(41 -25 -85 -6) -85]
Test Case: 413 | Input/Output: [(4 93 19 -97) -97]
Test Case: 414 | Input/Output: [(52 -75 -28 88) -75]
Test Case: 415 | Input/Output: [(-97 30 75 -54) -97]
Test Case: 416 | Input/Output: [(-18 60 57 78) -18]
Test Case: 417 | Input/Output: [(97 -16 -96 -7) -96]
Test Case: 418 | Input/Output: [(92 56 -51 63) -51]
Test Case: 419 | Input/Output: [(-57 -33 0 -64) -64]
Test Case: 420 | Input/Output: [(78 -13 40 -38) -38]
Test Case: 421 | Input/Output: [(51 -26 91 9) -26]
Test Case: 422 | Input/Output: [(-60 71 42 -55) -60]
Test Case: 423 | Input/Output: [(-46 -37 59 14) -46]
Test Case: 424 | Input/Output: [(-20 -52 -17 60) -52]
Test Case: 425 | Input/Output: [(-47 88 43 31) -47]
Test Case: 426 | Input/Output: [(-87 53 17 -77) -87]
Test Case: 427 | Input/Output: [(72 77 -51 -59) -59]
Test Case: 428 | Input/Output: [(-46 -48 -70 -22) -70]
Test Case: 429 | Input/Output: [(37 82 94 52) 37]
Test Case: 430 | Input/Output: [(-52 -57 29 31) -57]
Test Case: 431 | Input/Output: [(61 99 30 18) 18]
Test Case: 432 | Input/Output: [(17 -14 64 86) -14]
Test Case: 433 | Input/Output: [(-16 23 -70 70) -70]
Test Case: 434 | Input/Output: [(38 -71 72 42) -71]
Test Case: 435 | Input/Output: [(36 26 -94 5) -94]
Test Case: 436 | Input/Output: [(52 -83 -99 12) -99]
Test Case: 437 | Input/Output: [(-5 -59 -67 -44) -67]
Test Case: 438 | Input/Output: [(18 83 -5 -39) -39]
Test Case: 439 | Input/Output: [(4 33 4 -24) -24]
Test Case: 440 | Input/Output: [(66 8 -29 -36) -36]
Test Case: 441 | Input/Output: [(46 96 -9 -100) -100]
Test Case: 442 | Input/Output: [(19 -15 59 -34) -34]
Test Case: 443 | Input/Output: [(-48 11 -9 1) -48]
Test Case: 444 | Input/Output: [(-19 -63 -51 83) -63]
Test Case: 445 | Input/Output: [(-78 69 6 57) -78]
Test Case: 446 | Input/Output: [(100 -23 -8 -91) -91]
Test Case: 447 | Input/Output: [(77 -13 67 -28) -28]
Test Case: 448 | Input/Output: [(49 -3 30 84) -3]
Test Case: 449 | Input/Output: [(3 0 -23 -69) -69]
Test Case: 450 | Input/Output: [(-68 92 -65 51) -68]
Test Case: 451 | Input/Output: [(-17 34 19 94) -17]
Test Case: 452 | Input/Output: [(-97 -27 5 88) -97]
Test Case: 453 | Input/Output: [(-89 81 -42 30) -89]
Test Case: 454 | Input/Output: [(7 99 45 -93) -93]
Test Case: 455 | Input/Output: [(-80 -60 -9 42) -80]
Test Case: 456 | Input/Output: [(10 -11 -7 -46) -46]
Test Case: 457 | Input/Output: [(-51 -53 19 54) -53]
Test Case: 458 | Input/Output: [(-79 -61 69 78) -79]
Test Case: 459 | Input/Output: [(25 3 74 3) 3]
Test Case: 460 | Input/Output: [(-58 99 -47 -8) -58]
Test Case: 461 | Input/Output: [(-54 -81 -65 83) -81]
Test Case: 462 | Input/Output: [(82 -71 -33 11) -71]
Test Case: 463 | Input/Output: [(92 -43 -96 -22) -96]
Test Case: 464 | Input/Output: [(88 -14 -77 -2) -77]
Test Case: 465 | Input/Output: [(82 -5 67 -49) -49]
Test Case: 466 | Input/Output: [(-35 0 -82 -6) -82]
Test Case: 467 | Input/Output: [(33 -41 2 64) -41]
Test Case: 468 | Input/Output: [(37 -19 52 36) -19]
Test Case: 469 | Input/Output: [(9 -35 -99 19) -99]
Test Case: 470 | Input/Output: [(-73 -42 50 -85) -85]
Test Case: 471 | Input/Output: [(53 -31 -22 -40) -40]
Test Case: 472 | Input/Output: [(-49 37 83 -6) -49]
Test Case: 473 | Input/Output: [(64 21 3 86) 3]
Test Case: 474 | Input/Output: [(-73 66 0 39) -73]
Test Case: 475 | Input/Output: [(94 -65 73 65) -65]
Test Case: 476 | Input/Output: [(100 41 14 -43) -43]
Test Case: 477 | Input/Output: [(-90 -95 73 36) -95]
Test Case: 478 | Input/Output: [(-45 -84 -62 -95) -95]
Test Case: 479 | Input/Output: [(29 96 -16 -19) -19]
Test Case: 480 | Input/Output: [(-52 52 -65 67) -65]
Test Case: 481 | Input/Output: [(-81 6 -74 41) -81]
Test Case: 482 | Input/Output: [(37 -34 -85 31) -85]
Test Case: 483 | Input/Output: [(-70 -79 64 31) -79]
Test Case: 484 | Input/Output: [(31 -89 -66 -63) -89]
Test Case: 485 | Input/Output: [(-23 52 33 28) -23]
Test Case: 486 | Input/Output: [(-66 94 60 -18) -66]
Test Case: 487 | Input/Output: [(41 -78 -97 -78) -97]
Test Case: 488 | Input/Output: [(-99 -6 -57 -37) -99]
Test Case: 489 | Input/Output: [(-3 23 26 -69) -69]
Test Case: 490 | Input/Output: [(71 35 -57 22) -57]
Test Case: 491 | Input/Output: [(72 96 -58 49) -58]
Test Case: 492 | Input/Output: [(-90 -40 92 37) -90]
Test Case: 493 | Input/Output: [(27 -22 -92 -58) -92]
Test Case: 494 | Input/Output: [(-15 -79 -42 -23) -79]
Test Case: 495 | Input/Output: [(37 -58 39 35) -58]
Test Case: 496 | Input/Output: [(-40 48 -55 -98) -98]
Test Case: 497 | Input/Output: [(61 43 75 25) 25]
Test Case: 498 | Input/Output: [(-26 80 -3 24) -26]
Test Case: 499 | Input/Output: [(67 78 0 56) 0]
Test Case: 500 | Input/Output: [(71 -82 -42 -52) -82]
Test Case: 501 | Input/Output: [(-42 8 88 8) -42]
Test Case: 502 | Input/Output: [(-50 74 -65 76) -65]
Test Case: 503 | Input/Output: [(-1 93 41 44) -1]
Test Case: 504 | Input/Output: [(-61 88 49 55) -61]
Test Case: 505 | Input/Output: [(13 51 -60 -15) -60]
Test Case: 506 | Input/Output: [(19 48 33 27) 19]
Test Case: 507 | Input/Output: [(20 -75 -82 -74) -82]
Test Case: 508 | Input/Output: [(-81 -87 -5 -7) -87]
Test Case: 509 | Input/Output: [(63 -84 -74 -28) -84]
Test Case: 510 | Input/Output: [(63 54 -38 77) -38]
Test Case: 511 | Input/Output: [(55 -84 -39 67) -84]
Test Case: 512 | Input/Output: [(42 76 -2 16) -2]
Test Case: 513 | Input/Output: [(-83 82 80 -91) -91]
Test Case: 514 | Input/Output: [(72 64 -48 32) -48]
Test Case: 515 | Input/Output: [(-68 42 -24 25) -68]
Test Case: 516 | Input/Output: [(24 52 -27 -55) -55]
Test Case: 517 | Input/Output: [(69 -37 -6 51) -37]
Test Case: 518 | Input/Output: [(66 -58 -89 -82) -89]
Test Case: 519 | Input/Output: [(-80 -64 27 -38) -80]
Test Case: 520 | Input/Output: [(47 88 37 17) 17]
Test Case: 521 | Input/Output: [(-48 51 42 -32) -48]
Test Case: 522 | Input/Output: [(30 57 33 22) 22]
Test Case: 523 | Input/Output: [(38 -53 -6 62) -53]
Test Case: 524 | Input/Output: [(-71 -90 -69 27) -90]
Test Case: 525 | Input/Output: [(22 36 98 31) 22]
Test Case: 526 | Input/Output: [(92 47 63 -37) -37]
Test Case: 527 | Input/Output: [(-59 4 -75 -30) -75]
Test Case: 528 | Input/Output: [(17 45 51 37) 17]
Test Case: 529 | Input/Output: [(48 36 10 9) 9]
Test Case: 530 | Input/Output: [(-39 -48 89 41) -48]
Test Case: 531 | Input/Output: [(84 -87 -97 -52) -97]
Test Case: 532 | Input/Output: [(32 64 45 -83) -83]
Test Case: 533 | Input/Output: [(43 10 -7 48) -7]
Test Case: 534 | Input/Output: [(30 70 -81 -31) -81]
Test Case: 535 | Input/Output: [(37 -56 -98 -83) -98]
Test Case: 536 | Input/Output: [(4 -2 -76 -66) -76]
Test Case: 537 | Input/Output: [(27 -19 48 96) -19]
Test Case: 538 | Input/Output: [(-37 44 -74 2) -74]
Test Case: 539 | Input/Output: [(-95 26 93 -1) -95]
Test Case: 540 | Input/Output: [(-77 16 13 -47) -77]
Test Case: 541 | Input/Output: [(-35 21 -70 2) -70]
Test Case: 542 | Input/Output: [(26 23 -60 -81) -81]
Test Case: 543 | Input/Output: [(70 -51 -33 -26) -51]
Test Case: 544 | Input/Output: [(3 4 -37 -57) -57]
Test Case: 545 | Input/Output: [(2 -16 37 71) -16]
Test Case: 546 | Input/Output: [(83 98 -44 64) -44]
Test Case: 547 | Input/Output: [(91 24 8 -9) -9]
Test Case: 548 | Input/Output: [(97 -79 44 -93) -93]
Test Case: 549 | Input/Output: [(77 18 67 -19) -19]
Test Case: 550 | Input/Output: [(57 -5 46 -70) -70]
Test Case: 551 | Input/Output: [(61 -87 -41 -95) -95]
Test Case: 552 | Input/Output: [(32 -42 -96 0) -96]
Test Case: 553 | Input/Output: [(-83 63 -51 -31) -83]
Test Case: 554 | Input/Output: [(76 -67 -19 -89) -89]
Test Case: 555 | Input/Output: [(1 83 34 -36) -36]
Test Case: 556 | Input/Output: [(21 5 88 -91) -91]
Test Case: 557 | Input/Output: [(-82 -63 96 92) -82]
Test Case: 558 | Input/Output: [(70 99 10 50) 10]
Test Case: 559 | Input/Output: [(-35 -4 97 26) -35]
Test Case: 560 | Input/Output: [(70 -77 -30 65) -77]
Test Case: 561 | Input/Output: [(-51 85 -7 84) -51]
Test Case: 562 | Input/Output: [(91 31 60 -1) -1]
Test Case: 563 | Input/Output: [(6 61 -72 -49) -72]
Test Case: 564 | Input/Output: [(52 -26 -68 76) -68]
Test Case: 565 | Input/Output: [(-95 13 88 -20) -95]
Test Case: 566 | Input/Output: [(-82 28 -23 75) -82]
Test Case: 567 | Input/Output: [(-13 -53 -96 -78) -96]
Test Case: 568 | Input/Output: [(81 -50 11 -22) -50]
Test Case: 569 | Input/Output: [(96 -66 13 -13) -66]
Test Case: 570 | Input/Output: [(-54 -90 14 100) -90]
Test Case: 571 | Input/Output: [(54 -42 -9 -21) -42]
Test Case: 572 | Input/Output: [(-58 -44 -26 -95) -95]
Test Case: 573 | Input/Output: [(81 -66 20 2) -66]
Test Case: 574 | Input/Output: [(59 14 68 -67) -67]
Test Case: 575 | Input/Output: [(-76 -65 -75 -94) -94]
Test Case: 576 | Input/Output: [(-15 -63 84 -35) -63]
Test Case: 577 | Input/Output: [(-36 80 -95 -51) -95]
Test Case: 578 | Input/Output: [(-15 70 -95 70) -95]
Test Case: 579 | Input/Output: [(-65 -72 92 -65) -72]
Test Case: 580 | Input/Output: [(-42 -27 -100 -83) -100]
Test Case: 581 | Input/Output: [(-8 -47 -99 -23) -99]
Test Case: 582 | Input/Output: [(100 45 -100 -59) -100]
Test Case: 583 | Input/Output: [(-46 100 79 -41) -46]
Test Case: 584 | Input/Output: [(88 -100 25 94) -100]
Test Case: 585 | Input/Output: [(-34 8 -93 24) -93]
Test Case: 586 | Input/Output: [(25 7 80 80) 7]
Test Case: 587 | Input/Output: [(52 -92 83 46) -92]
Test Case: 588 | Input/Output: [(-37 -67 13 -53) -67]
Test Case: 589 | Input/Output: [(34 30 68 45) 30]
Test Case: 590 | Input/Output: [(-89 -19 -57 -17) -89]
Test Case: 591 | Input/Output: [(-25 -54 -88 -71) -88]
Test Case: 592 | Input/Output: [(-28 -44 -15 30) -44]
Test Case: 593 | Input/Output: [(-82 11 -30 82) -82]
Test Case: 594 | Input/Output: [(30 -6 -17 83) -17]
Test Case: 595 | Input/Output: [(31 -58 -66 49) -66]
Test Case: 596 | Input/Output: [(-10 -38 93 47) -38]
Test Case: 597 | Input/Output: [(-22 -43 -23 20) -43]
Test Case: 598 | Input/Output: [(67 83 -22 53) -22]
Test Case: 599 | Input/Output: [(-15 41 -49 -80) -80]
Test Case: 600 | Input/Output: [(-52 90 7 -26) -52]
Test Case: 601 | Input/Output: [(89 -90 85 39) -90]
Test Case: 602 | Input/Output: [(-96 -9 -88 -15) -96]
Test Case: 603 | Input/Output: [(25 21 42 27) 21]
Test Case: 604 | Input/Output: [(-92 -79 80 5) -92]
Test Case: 605 | Input/Output: [(-86 24 63 0) -86]
Test Case: 606 | Input/Output: [(33 -53 -49 38) -53]
Test Case: 607 | Input/Output: [(75 35 -48 2) -48]
Test Case: 608 | Input/Output: [(-80 6 -17 14) -80]
Test Case: 609 | Input/Output: [(30 -51 -35 15) -51]
Test Case: 610 | Input/Output: [(-42 -6 -44 -41) -44]
Test Case: 611 | Input/Output: [(7 76 -2 58) -2]
Test Case: 612 | Input/Output: [(48 -95 -18 59) -95]
Test Case: 613 | Input/Output: [(51 78 39 83) 39]
Test Case: 614 | Input/Output: [(-90 45 -33 68) -90]
Test Case: 615 | Input/Output: [(38 100 10 43) 10]
Test Case: 616 | Input/Output: [(-70 -58 26 -72) -72]
Test Case: 617 | Input/Output: [(-31 30 -19 8) -31]
Test Case: 618 | Input/Output: [(76 17 -1 84) -1]
Test Case: 619 | Input/Output: [(-79 -36 48 -16) -79]
Test Case: 620 | Input/Output: [(94 24 -61 20) -61]
Test Case: 621 | Input/Output: [(65 -18 13 66) -18]
Test Case: 622 | Input/Output: [(16 81 53 -87) -87]
Test Case: 623 | Input/Output: [(66 -89 -78 -65) -89]
Test Case: 624 | Input/Output: [(78 -87 -15 -18) -87]
Test Case: 625 | Input/Output: [(-42 45 79 23) -42]
Test Case: 626 | Input/Output: [(28 100 -76 44) -76]
Test Case: 627 | Input/Output: [(8 13 -6 46) -6]
Test Case: 628 | Input/Output: [(91 99 -22 -7) -22]
Test Case: 629 | Input/Output: [(-85 5 -38 5) -85]
Test Case: 630 | Input/Output: [(71 35 -14 39) -14]
Test Case: 631 | Input/Output: [(-96 -79 -16 -71) -96]
Test Case: 632 | Input/Output: [(46 -7 -51 -18) -51]
Test Case: 633 | Input/Output: [(59 22 -31 34) -31]
Test Case: 634 | Input/Output: [(32 -80 30 -33) -80]
Test Case: 635 | Input/Output: [(-14 -5 60 -82) -82]
Test Case: 636 | Input/Output: [(-38 -78 -38 14) -78]
Test Case: 637 | Input/Output: [(85 6 71 83) 6]
Test Case: 638 | Input/Output: [(41 -76 14 -5) -76]
Test Case: 639 | Input/Output: [(-76 18 51 29) -76]
Test Case: 640 | Input/Output: [(2 -85 -100 -97) -100]
Test Case: 641 | Input/Output: [(52 -63 24 -52) -63]
Test Case: 642 | Input/Output: [(22 -53 3 -67) -67]
Test Case: 643 | Input/Output: [(-99 65 -37 22) -99]
Test Case: 644 | Input/Output: [(33 68 -37 -92) -92]
Test Case: 645 | Input/Output: [(83 65 -6 -69) -69]
Test Case: 646 | Input/Output: [(78 68 -10 -47) -47]
Test Case: 647 | Input/Output: [(31 -89 -46 -50) -89]
Test Case: 648 | Input/Output: [(88 -56 -14 48) -56]
Test Case: 649 | Input/Output: [(66 -91 7 -60) -91]
Test Case: 650 | Input/Output: [(-36 91 -89 -52) -89]
Test Case: 651 | Input/Output: [(-94 -28 -23 -4) -94]
Test Case: 652 | Input/Output: [(-23 -16 18 -80) -80]
Test Case: 653 | Input/Output: [(12 100 20 81) 12]
Test Case: 654 | Input/Output: [(-35 16 15 -42) -42]
Test Case: 655 | Input/Output: [(79 59 -33 5) -33]
Test Case: 656 | Input/Output: [(-61 43 -60 11) -61]
Test Case: 657 | Input/Output: [(-43 -99 19 -3) -99]
Test Case: 658 | Input/Output: [(58 -97 72 21) -97]
Test Case: 659 | Input/Output: [(-2 28 58 -97) -97]
Test Case: 660 | Input/Output: [(91 32 35 44) 32]
Test Case: 661 | Input/Output: [(53 -58 57 37) -58]
Test Case: 662 | Input/Output: [(12 87 71 74) 12]
Test Case: 663 | Input/Output: [(52 -93 -50 -30) -93]
Test Case: 664 | Input/Output: [(68 -67 69 61) -67]
Test Case: 665 | Input/Output: [(-20 -87 23 62) -87]
Test Case: 666 | Input/Output: [(-94 25 -79 -73) -94]
Test Case: 667 | Input/Output: [(97 89 -16 -78) -78]
Test Case: 668 | Input/Output: [(-37 -100 -18 -33) -100]
Test Case: 669 | Input/Output: [(53 -82 -22 -42) -82]
Test Case: 670 | Input/Output: [(61 -23 -12 97) -23]
Test Case: 671 | Input/Output: [(-10 48 79 95) -10]
Test Case: 672 | Input/Output: [(-89 72 -26 9) -89]
Test Case: 673 | Input/Output: [(-89 65 -2 65) -89]
Test Case: 674 | Input/Output: [(-43 1 94 26) -43]
Test Case: 675 | Input/Output: [(57 -7 86 -87) -87]
Test Case: 676 | Input/Output: [(-33 56 -81 1) -81]
Test Case: 677 | Input/Output: [(-91 -1 -83 -22) -91]
Test Case: 678 | Input/Output: [(-81 -93 83 -7) -93]
Test Case: 679 | Input/Output: [(31 -49 -39 -18) -49]
Test Case: 680 | Input/Output: [(8 -87 87 -84) -87]
Test Case: 681 | Input/Output: [(-61 -100 48 -69) -100]
Test Case: 682 | Input/Output: [(72 92 19 -43) -43]
Test Case: 683 | Input/Output: [(-34 10 35 25) -34]
Test Case: 684 | Input/Output: [(-84 -16 -42 53) -84]
Test Case: 685 | Input/Output: [(-63 -67 -94 76) -94]
Test Case: 686 | Input/Output: [(-29 90 -79 61) -79]
Test Case: 687 | Input/Output: [(20 -41 41 -28) -41]
Test Case: 688 | Input/Output: [(84 87 -83 95) -83]
Test Case: 689 | Input/Output: [(45 32 -83 14) -83]
Test Case: 690 | Input/Output: [(2 -98 -94 75) -98]
Test Case: 691 | Input/Output: [(-36 34 46 27) -36]
Test Case: 692 | Input/Output: [(-47 -79 82 5) -79]
Test Case: 693 | Input/Output: [(-35 -45 -7 37) -45]
Test Case: 694 | Input/Output: [(14 55 38 -48) -48]
Test Case: 695 | Input/Output: [(-91 97 94 0) -91]
Test Case: 696 | Input/Output: [(96 -67 -85 29) -85]
Test Case: 697 | Input/Output: [(39 -100 43 63) -100]
Test Case: 698 | Input/Output: [(-5 -78 -29 -79) -79]
Test Case: 699 | Input/Output: [(8 48 45 15) 8]
Test Case: 700 | Input/Output: [(8 -78 -42 -24) -78]
Test Case: 701 | Input/Output: [(-27 16 -38 80) -38]
Test Case: 702 | Input/Output: [(-22 -84 -1 25) -84]
Test Case: 703 | Input/Output: [(56 46 7 11) 7]
Test Case: 704 | Input/Output: [(71 38 -96 17) -96]
Test Case: 705 | Input/Output: [(63 59 96 2) 2]
Test Case: 706 | Input/Output: [(33 15 -83 -13) -83]
Test Case: 707 | Input/Output: [(-99 -24 -85 -88) -99]
Test Case: 708 | Input/Output: [(41 97 -10 -22) -22]
Test Case: 709 | Input/Output: [(0 -62 -16 49) -62]
Test Case: 710 | Input/Output: [(94 -76 -95 -84) -95]
Test Case: 711 | Input/Output: [(22 79 54 30) 22]
Test Case: 712 | Input/Output: [(47 -15 52 95) -15]
Test Case: 713 | Input/Output: [(-5 58 -45 -59) -59]
Test Case: 714 | Input/Output: [(-72 11 -29 -28) -72]
Test Case: 715 | Input/Output: [(88 -5 18 28) -5]
Test Case: 716 | Input/Output: [(-8 90 42 -94) -94]
Test Case: 717 | Input/Output: [(11 -63 8 90) -63]
Test Case: 718 | Input/Output: [(79 35 -27 11) -27]
Test Case: 719 | Input/Output: [(27 12 -69 52) -69]
Test Case: 720 | Input/Output: [(50 11 -75 78) -75]
Test Case: 721 | Input/Output: [(43 24 -99 -55) -99]
Test Case: 722 | Input/Output: [(34 -96 45 64) -96]
Test Case: 723 | Input/Output: [(17 19 59 23) 17]
Test Case: 724 | Input/Output: [(-90 -2 92 88) -90]
Test Case: 725 | Input/Output: [(-41 -32 -94 61) -94]
Test Case: 726 | Input/Output: [(98 -30 -95 26) -95]
Test Case: 727 | Input/Output: [(-92 -13 11 99) -92]
Test Case: 728 | Input/Output: [(-8 31 -89 -31) -89]
Test Case: 729 | Input/Output: [(57 -28 -39 13) -39]
Test Case: 730 | Input/Output: [(66 31 28 98) 28]
Test Case: 731 | Input/Output: [(-86 80 57 -90) -90]
Test Case: 732 | Input/Output: [(-35 -29 61 -61) -61]
Test Case: 733 | Input/Output: [(-18 -14 -59 67) -59]
Test Case: 734 | Input/Output: [(55 64 0 74) 0]
Test Case: 735 | Input/Output: [(-12 -4 36 -12) -12]
Test Case: 736 | Input/Output: [(-100 -21 -85 -99) -100]
Test Case: 737 | Input/Output: [(-85 -8 14 -69) -85]
Test Case: 738 | Input/Output: [(-35 79 51 -7) -35]
Test Case: 739 | Input/Output: [(35 -15 100 -1) -15]
Test Case: 740 | Input/Output: [(12 -53 -49 41) -53]
Test Case: 741 | Input/Output: [(1 96 -7 3) -7]
Test Case: 742 | Input/Output: [(72 65 50 70) 50]
Test Case: 743 | Input/Output: [(19 75 -37 -85) -85]
Test Case: 744 | Input/Output: [(43 77 -8 83) -8]
Test Case: 745 | Input/Output: [(-80 82 52 47) -80]
Test Case: 746 | Input/Output: [(-100 41 31 -51) -100]
Test Case: 747 | Input/Output: [(85 -97 -37 -80) -97]
Test Case: 748 | Input/Output: [(-69 -22 -27 -15) -69]
Test Case: 749 | Input/Output: [(56 -60 69 -57) -60]
Test Case: 750 | Input/Output: [(25 34 -58 -73) -73]
Test Case: 751 | Input/Output: [(43 -67 -70 -60) -70]
Test Case: 752 | Input/Output: [(-17 -3 -39 46) -39]
Test Case: 753 | Input/Output: [(86 40 -72 82) -72]
Test Case: 754 | Input/Output: [(76 -9 -87 44) -87]
Test Case: 755 | Input/Output: [(88 -1 -89 -6) -89]
Test Case: 756 | Input/Output: [(-85 60 -64 47) -85]
Test Case: 757 | Input/Output: [(95 -88 -37 21) -88]
Test Case: 758 | Input/Output: [(-43 71 66 24) -43]
Test Case: 759 | Input/Output: [(-36 18 60 -50) -50]
Test Case: 760 | Input/Output: [(56 63 -13 -38) -38]
Test Case: 761 | Input/Output: [(-48 -34 28 -32) -48]
Test Case: 762 | Input/Output: [(-36 -8 -91 -36) -91]
Test Case: 763 | Input/Output: [(81 70 -34 41) -34]
Test Case: 764 | Input/Output: [(-53 -47 81 79) -53]
Test Case: 765 | Input/Output: [(12 73 -89 35) -89]
Test Case: 766 | Input/Output: [(83 -75 -24 73) -75]
Test Case: 767 | Input/Output: [(-83 -85 37 -72) -85]
Test Case: 768 | Input/Output: [(35 -18 10 49) -18]
Test Case: 769 | Input/Output: [(64 -99 39 68) -99]
Test Case: 770 | Input/Output: [(-39 -32 65 97) -39]
Test Case: 771 | Input/Output: [(-38 -59 29 -35) -59]
Test Case: 772 | Input/Output: [(-62 -67 13 38) -67]
Test Case: 773 | Input/Output: [(-61 39 65 -20) -61]
Test Case: 774 | Input/Output: [(-34 91 50 -39) -39]
Test Case: 775 | Input/Output: [(-21 32 -40 3) -40]
Test Case: 776 | Input/Output: [(72 11 17 37) 11]
Test Case: 777 | Input/Output: [(85 -15 51 99) -15]
Test Case: 778 | Input/Output: [(-66 17 -43 66) -66]
Test Case: 779 | Input/Output: [(0 -88 84 13) -88]
Test Case: 780 | Input/Output: [(37 94 -93 73) -93]
Test Case: 781 | Input/Output: [(-44 2 -26 -77) -77]
Test Case: 782 | Input/Output: [(-59 87 -31 44) -59]
Test Case: 783 | Input/Output: [(-55 -76 -67 33) -76]
Test Case: 784 | Input/Output: [(-13 90 -68 -36) -68]
Test Case: 785 | Input/Output: [(-80 -98 -8 93) -98]
Test Case: 786 | Input/Output: [(86 52 3 -89) -89]
Test Case: 787 | Input/Output: [(-27 -36 -34 97) -36]
Test Case: 788 | Input/Output: [(-2 -36 -67 36) -67]
Test Case: 789 | Input/Output: [(-33 -74 -4 67) -74]
Test Case: 790 | Input/Output: [(-71 61 -37 -57) -71]
Test Case: 791 | Input/Output: [(14 -70 69 60) -70]
Test Case: 792 | Input/Output: [(21 -77 -37 -61) -77]
Test Case: 793 | Input/Output: [(-90 -76 -94 -99) -99]
Test Case: 794 | Input/Output: [(-3 77 97 33) -3]
Test Case: 795 | Input/Output: [(62 78 -19 -25) -25]
Test Case: 796 | Input/Output: [(-53 -35 57 75) -53]
Test Case: 797 | Input/Output: [(65 52 54 -52) -52]
Test Case: 798 | Input/Output: [(-46 -85 90 -9) -85]
Test Case: 799 | Input/Output: [(-20 -87 56 10) -87]
Test Case: 800 | Input/Output: [(44 -36 -33 21) -36]
Test Case: 801 | Input/Output: [(3 82 -26 41) -26]
Test Case: 802 | Input/Output: [(63 -7 33 -81) -81]
Test Case: 803 | Input/Output: [(-84 91 85 48) -84]
Test Case: 804 | Input/Output: [(75 -57 -45 73) -57]
Test Case: 805 | Input/Output: [(-45 16 12 95) -45]
Test Case: 806 | Input/Output: [(6 48 89 33) 6]
Test Case: 807 | Input/Output: [(-3 -86 88 61) -86]
Test Case: 808 | Input/Output: [(98 -87 38 89) -87]
Test Case: 809 | Input/Output: [(98 55 -3 -92) -92]
Test Case: 810 | Input/Output: [(30 82 1 -50) -50]
Test Case: 811 | Input/Output: [(62 85 14 -7) -7]
Test Case: 812 | Input/Output: [(11 80 35 58) 11]
Test Case: 813 | Input/Output: [(15 13 28 32) 13]
Test Case: 814 | Input/Output: [(49 -50 10 -3) -50]
Test Case: 815 | Input/Output: [(62 -68 28 59) -68]
Test Case: 816 | Input/Output: [(63 -59 -91 3) -91]
Test Case: 817 | Input/Output: [(17 62 4 -99) -99]
Test Case: 818 | Input/Output: [(38 -2 45 98) -2]
Test Case: 819 | Input/Output: [(-34 10 -37 38) -37]
Test Case: 820 | Input/Output: [(28 -65 69 51) -65]
Test Case: 821 | Input/Output: [(-65 -73 50 36) -73]
Test Case: 822 | Input/Output: [(-70 -38 87 35) -70]
Test Case: 823 | Input/Output: [(-81 98 -73 -1) -81]
Test Case: 824 | Input/Output: [(27 94 45 80) 27]
Test Case: 825 | Input/Output: [(91 95 -84 -57) -84]
Test Case: 826 | Input/Output: [(-53 28 -80 95) -80]
Test Case: 827 | Input/Output: [(-50 86 -75 34) -75]
Test Case: 828 | Input/Output: [(67 11 -1 -47) -47]
Test Case: 829 | Input/Output: [(38 -8 53 -12) -12]
Test Case: 830 | Input/Output: [(9 30 9 -2) -2]
Test Case: 831 | Input/Output: [(76 63 -90 -9) -90]
Test Case: 832 | Input/Output: [(-48 -26 70 -20) -48]
Test Case: 833 | Input/Output: [(63 -66 -80 6) -80]
Test Case: 834 | Input/Output: [(70 55 -61 -22) -61]
Test Case: 835 | Input/Output: [(-45 -60 -58 -56) -60]
Test Case: 836 | Input/Output: [(-52 74 -81 -35) -81]
Test Case: 837 | Input/Output: [(-9 -20 56 -15) -20]
Test Case: 838 | Input/Output: [(-40 -46 -66 -87) -87]
Test Case: 839 | Input/Output: [(69 -31 -6 -80) -80]
Test Case: 840 | Input/Output: [(-20 69 72 75) -20]
Test Case: 841 | Input/Output: [(-31 -50 38 -36) -50]
Test Case: 842 | Input/Output: [(-14 -47 46 -82) -82]
Test Case: 843 | Input/Output: [(-8 -13 72 -7) -13]
Test Case: 844 | Input/Output: [(30 -1 68 71) -1]
Test Case: 845 | Input/Output: [(-33 72 -16 -78) -78]
Test Case: 846 | Input/Output: [(-28 88 -55 89) -55]
Test Case: 847 | Input/Output: [(47 -41 4 -92) -92]
Test Case: 848 | Input/Output: [(-80 -94 -81 -56) -94]
Test Case: 849 | Input/Output: [(-90 21 -46 74) -90]
Test Case: 850 | Input/Output: [(-73 -60 57 -22) -73]
Test Case: 851 | Input/Output: [(4 17 39 -41) -41]
Test Case: 852 | Input/Output: [(-68 41 -81 -29) -81]
Test Case: 853 | Input/Output: [(21 -86 7 -27) -86]
Test Case: 854 | Input/Output: [(18 76 46 48) 18]
Test Case: 855 | Input/Output: [(-18 -41 -32 87) -41]
Test Case: 856 | Input/Output: [(31 -53 -43 -21) -53]
Test Case: 857 | Input/Output: [(82 16 -44 -20) -44]
Test Case: 858 | Input/Output: [(-14 -35 100 66) -35]
Test Case: 859 | Input/Output: [(-80 91 -17 77) -80]
Test Case: 860 | Input/Output: [(-61 29 21 42) -61]
Test Case: 861 | Input/Output: [(-82 85 -51 -53) -82]
Test Case: 862 | Input/Output: [(24 -53 72 19) -53]
Test Case: 863 | Input/Output: [(-58 -85 -10 45) -85]
Test Case: 864 | Input/Output: [(13 9 -79 -39) -79]
Test Case: 865 | Input/Output: [(72 89 -31 -84) -84]
Test Case: 866 | Input/Output: [(97 -36 32 -69) -69]
Test Case: 867 | Input/Output: [(-62 58 -9 -4) -62]
Test Case: 868 | Input/Output: [(75 -63 4 -57) -63]
Test Case: 869 | Input/Output: [(-76 91 17 -55) -76]
Test Case: 870 | Input/Output: [(-49 21 -3 43) -49]
Test Case: 871 | Input/Output: [(14 -60 -19 89) -60]
Test Case: 872 | Input/Output: [(42 41 -36 10) -36]
Test Case: 873 | Input/Output: [(79 -60 99 -32) -60]
Test Case: 874 | Input/Output: [(90 -84 97 -39) -84]
Test Case: 875 | Input/Output: [(-2 76 -90 -11) -90]
Test Case: 876 | Input/Output: [(-17 59 -93 -91) -93]
Test Case: 877 | Input/Output: [(-80 -49 50 -47) -80]
Test Case: 878 | Input/Output: [(-54 -26 11 36) -54]
Test Case: 879 | Input/Output: [(1 -18 31 -2) -18]
Test Case: 880 | Input/Output: [(28 -43 -37 57) -43]
Test Case: 881 | Input/Output: [(-34 68 8 -11) -34]
Test Case: 882 | Input/Output: [(89 -11 36 94) -11]
Test Case: 883 | Input/Output: [(-43 -57 -48 78) -57]
Test Case: 884 | Input/Output: [(79 32 47 38) 32]
Test Case: 885 | Input/Output: [(36 -77 -5 77) -77]
Test Case: 886 | Input/Output: [(48 -29 56 85) -29]
Test Case: 887 | Input/Output: [(23 -3 -57 44) -57]
Test Case: 888 | Input/Output: [(9 10 -27 6) -27]
Test Case: 889 | Input/Output: [(-5 27 -79 78) -79]
Test Case: 890 | Input/Output: [(-100 80 16 -57) -100]
Test Case: 891 | Input/Output: [(48 -1 -97 -71) -97]
Test Case: 892 | Input/Output: [(-18 -84 -93 42) -93]
Test Case: 893 | Input/Output: [(40 -83 -3 15) -83]
Test Case: 894 | Input/Output: [(10 -40 16 37) -40]
Test Case: 895 | Input/Output: [(-74 -62 75 -8) -74]
Test Case: 896 | Input/Output: [(-15 78 54 -89) -89]
Test Case: 897 | Input/Output: [(-61 47 -41 -1) -61]
Test Case: 898 | Input/Output: [(-71 -74 39 89) -74]
Test Case: 899 | Input/Output: [(-14 -82 -67 -81) -82]
Test Case: 900 | Input/Output: [(-62 73 -32 63) -62]
Test Case: 901 | Input/Output: [(70 -9 -1 -43) -43]
Test Case: 902 | Input/Output: [(-59 81 60 71) -59]
Test Case: 903 | Input/Output: [(-44 -99 17 91) -99]
Test Case: 904 | Input/Output: [(100 77 -77 68) -77]
Test Case: 905 | Input/Output: [(-46 15 -19 6) -46]
Test Case: 906 | Input/Output: [(6 67 86 -28) -28]
Test Case: 907 | Input/Output: [(-99 -64 50 -56) -99]
Test Case: 908 | Input/Output: [(-61 45 -52 -41) -61]
Test Case: 909 | Input/Output: [(72 36 19 -6) -6]
Test Case: 910 | Input/Output: [(2 27 -90 -6) -90]
Test Case: 911 | Input/Output: [(-87 -91 -87 47) -91]
Test Case: 912 | Input/Output: [(-71 62 -68 64) -71]
Test Case: 913 | Input/Output: [(-66 18 66 -12) -66]
Test Case: 914 | Input/Output: [(-85 -85 61 -48) -85]
Test Case: 915 | Input/Output: [(-22 -94 88 43) -94]
Test Case: 916 | Input/Output: [(56 85 -59 -29) -59]
Test Case: 917 | Input/Output: [(-44 -93 13 87) -93]
Test Case: 918 | Input/Output: [(-59 -7 -50 -35) -59]
Test Case: 919 | Input/Output: [(80 -41 -95 -39) -95]
Test Case: 920 | Input/Output: [(16 -42 -70 85) -70]
Test Case: 921 | Input/Output: [(93 67 7 -96) -96]
Test Case: 922 | Input/Output: [(7 75 86 -87) -87]
Test Case: 923 | Input/Output: [(90 -52 -49 -23) -52]
Test Case: 924 | Input/Output: [(91 46 97 -11) -11]
Test Case: 925 | Input/Output: [(-71 -44 99 77) -71]
Test Case: 926 | Input/Output: [(-41 -71 93 94) -71]
Test Case: 927 | Input/Output: [(-30 90 -40 -11) -40]
Test Case: 928 | Input/Output: [(83 -4 -42 -93) -93]
Test Case: 929 | Input/Output: [(8 -87 87 65) -87]
Test Case: 930 | Input/Output: [(77 33 -64 -71) -71]
Test Case: 931 | Input/Output: [(19 -94 67 34) -94]
Test Case: 932 | Input/Output: [(79 -12 73 30) -12]
Test Case: 933 | Input/Output: [(86 -17 -22 -1) -22]
Test Case: 934 | Input/Output: [(-70 -58 85 87) -70]
Test Case: 935 | Input/Output: [(34 -58 -19 74) -58]
Test Case: 936 | Input/Output: [(-81 -14 -49 -60) -81]
Test Case: 937 | Input/Output: [(-69 -50 -18 50) -69]
Test Case: 938 | Input/Output: [(-87 -54 82 -83) -87]
Test Case: 939 | Input/Output: [(-7 54 50 39) -7]
Test Case: 940 | Input/Output: [(-56 -30 6 81) -56]
Test Case: 941 | Input/Output: [(81 28 -70 -38) -70]
Test Case: 942 | Input/Output: [(97 22 -8 92) -8]
Test Case: 943 | Input/Output: [(80 36 26 -17) -17]
Test Case: 944 | Input/Output: [(13 90 -69 66) -69]
Test Case: 945 | Input/Output: [(-90 8 -84 45) -90]
Test Case: 946 | Input/Output: [(64 35 39 -75) -75]
Test Case: 947 | Input/Output: [(-51 57 46 -93) -93]
Test Case: 948 | Input/Output: [(9 0 -10 -88) -88]
Test Case: 949 | Input/Output: [(-69 31 -25 87) -69]
Test Case: 950 | Input/Output: [(70 76 -82 29) -82]
Test Case: 951 | Input/Output: [(88 97 42 -69) -69]
Test Case: 952 | Input/Output: [(-68 91 -47 73) -68]
Test Case: 953 | Input/Output: [(-37 -97 -50 -43) -97]
Test Case: 954 | Input/Output: [(92 -26 52 -32) -32]
Test Case: 955 | Input/Output: [(-72 -18 -10 -79) -79]
Test Case: 956 | Input/Output: [(-21 -76 63 93) -76]
Test Case: 957 | Input/Output: [(46 84 -62 56) -62]
Test Case: 958 | Input/Output: [(-60 -84 25 -49) -84]
Test Case: 959 | Input/Output: [(56 95 -72 79) -72]
Test Case: 960 | Input/Output: [(-44 -80 68 -24) -80]
Test Case: 961 | Input/Output: [(-67 -80 39 -96) -96]
Test Case: 962 | Input/Output: [(-19 55 -46 87) -46]
Test Case: 963 | Input/Output: [(78 -30 -35 55) -35]
Test Case: 964 | Input/Output: [(-72 59 -59 -19) -72]
Test Case: 965 | Input/Output: [(5 -43 -27 18) -43]
Test Case: 966 | Input/Output: [(-31 -79 -89 -29) -89]
Test Case: 967 | Input/Output: [(69 18 -31 -61) -61]
Test Case: 968 | Input/Output: [(60 55 -22 14) -22]
Test Case: 969 | Input/Output: [(-49 36 -87 27) -87]
Test Case: 970 | Input/Output: [(92 89 24 -4) -4]
Test Case: 971 | Input/Output: [(-29 74 67 -53) -53]
Test Case: 972 | Input/Output: [(-33 23 37 -83) -83]
Test Case: 973 | Input/Output: [(43 81 -65 -39) -65]
Test Case: 974 | Input/Output: [(93 56 91 23) 23]
Test Case: 975 | Input/Output: [(-55 42 -73 93) -73]
Test Case: 976 | Input/Output: [(-51 54 -49 -6) -51]
Test Case: 977 | Input/Output: [(69 -45 -96 -23) -96]
Test Case: 978 | Input/Output: [(-83 -16 23 31) -83]
Test Case: 979 | Input/Output: [(30 86 30 -45) -45]
Test Case: 980 | Input/Output: [(59 99 -66 -32) -66]
Test Case: 981 | Input/Output: [(29 -5 -62 -33) -62]
Test Case: 982 | Input/Output: [(47 6 -89 91) -89]
Test Case: 983 | Input/Output: [(84 46 89 5) 5]
Test Case: 984 | Input/Output: [(-8 96 41 33) -8]
Test Case: 985 | Input/Output: [(85 81 67 95) 67]
Test Case: 986 | Input/Output: [(39 -53 26 -11) -53]
Test Case: 987 | Input/Output: [(-36 -27 13 65) -36]
Test Case: 988 | Input/Output: [(-44 -82 -93 -97) -97]
Test Case: 989 | Input/Output: [(29 70 23 -76) -76]
Test Case: 990 | Input/Output: [(43 -53 -100 -86) -100]
Test Case: 991 | Input/Output: [(-18 20 86 -23) -23]
Test Case: 992 | Input/Output: [(-70 -21 -22 84) -70]
Test Case: 993 | Input/Output: [(-10 -70 100 16) -70]
Test Case: 994 | Input/Output: [(-93 8 89 -76) -93]
Test Case: 995 | Input/Output: [(23 -38 54 8) -38]
Test Case: 996 | Input/Output: [(27 47 -72 -8) -72]
Test Case: 997 | Input/Output: [(55 37 -21 -81) -81]
Test Case: 998 | Input/Output: [(61 -7 25 -20) -20]
Test Case: 999 | Input/Output: [(-73 17 -78 -24) -78]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -83 31 -110 53 -41 82 94 -63 -2 -88 35 8 117 8 -27 -81
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-88 28 28 28] -88] [[73 73 86 73] 73] [[-91 9 9 9] -91] [[-58 -96 -58 -58] -96] [[-59 9 9 9] -59] [[-90 -90 -90 66] -90] [[-51 -51 -51 -92] -92] [[79 79 -17 79] -17] [[-51 -12 -51 -51] -51] [[-67 55 55 55] -67] [(-30 -30 -30 -30) -30] [(-89 -89 -89 -89) -89] [(67 67 67 67) 67] [(50 50 50 50) 50] [(29 29 29 29) 29] [(24 64 17 91) 17] [(96 3 50 24) 3] [(88 80 27 31) 27] [(16 86 22 62) 16] [(99 81 69 71) 69] [(84 71 29 91) 29] [(51 95 42 83) 42] [(25 13 96 100) 13] [(55 2 79 81) 2] [(9 66 28 12) 9] [(44 34 99 25) 25] [(71 22 91 19) 19] [(35 78 68 19) 19] [(27 50 41 15) 15] [(90 60 40 60) 40] [(50 70 67 100) 50] [(28 71 61 68) 28] [(78 58 11 41) 11] [(66 50 38 33) 33] [(72 43 4 42) 4] [(89 100 -24 24) -24] [(78 -2 -42 -57) -57] [(-5 -32 -97 28) -97] [(-90 21 76 -48) -90] [(75 -98 88 -48) -98] [(-5 64 -56 -6) -56] [(32 24 30 55) 24] [(-33 -69 77 -45) -69] [(0 87 77 -98) -98] [(-68 26 -79 -81) -81] [(-8 51 -24 11) -24] [(0 9 95 -15) -15] [(32 -95 13 -92) -95] [(7 -6 93 50) -6] [(41 98 35 -94) -94] [(-41 -100 12 46) -100] [(5 31 47 56) 5] [(20 98 56 64) 20] [(-54 -52 72 51) -54] [(-14 9 -75 -34) -75] [(11 16 -71 -49) -71] [(-80 -79 95 -5) -80] [(-95 -41 -74 44) -95] [(-66 38 35 -54) -66] [(-21 -3 27 49) -21] [(-9 -100 -38 29) -100] [(67 10 -39 -86) -86] [(-28 -61 -81 5) -81] [(64 -25 -40 -12) -40] [(-93 -12 76 -23) -93] [(-15 40 -11 48) -15] [(2 -99 97 -49) -99] [(-74 83 2 -47) -74] [(81 77 22 40) 22] [(70 75 15 27) 15] [(73 -71 -19 -46) -71] [(90 -79 87 64) -79] [(44 -2 69 53) -2] [(55 -31 -85 -51) -85] [(58 42 86 -33) -33] [(-10 82 -55 47) -55] [(27 -44 99 56) -44] [(-67 56 8 89) -67] [(85 7 71 99) 7] [(27 -2 -72 -75) -75] [(9 -98 55 11) -98] [(-72 56 51 -39) -72] [(25 60 74 -46) -46] [(-3 4 85 84) -3] [(57 -79 -78 28) -79] [(52 -5 -85 -43) -85] [(-99 -43 -29 -70) -99] [(53 47 -49 33) -49] [(-25 24 65 98) -25] [(-67 43 -15 -18) -67] [(94 38 90 -49) -49] [(1 -56 19 -85) -85] [(41 -24 -34 -27) -34] [(-9 54 -46 10) -46] [(-68 -92 72 -92) -92])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -12                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 86                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 66                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 50                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 70                 
Correct output: 28                  | Program output: 71                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 100                
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 64                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 87                 
Correct output: -81                 | Program output: 26                 
Correct output: -24                 | Program output: 51                 
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 98                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 98                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: 9                  
Correct output: -71                 | Program output: 16                 
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -41                
Correct output: -66                 | Program output: 38                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: 40                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 83                 
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 75                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: 82                 
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 56                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: 43                 
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: 54                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_89} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_not integer_flush tag_boolean_89 integer_lte integer_stackdepth integer_empty integer_mult integer_max exec_while () integer_flush exec_when (integer_dec) exec_do*times (boolean_eq boolean_flush boolean_dup_times boolean_invert_second_then_and exec_do*range () exec_if (boolean_frominteger exec_y_when_autoconstructing (integer_eq exec_dup (in2 boolean_rot boolean_yankdup) print_integer)) ()))
Lexicase best errors: [1 0 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_89} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_not integer_flush tag_boolean_89 integer_lte integer_stackdepth integer_empty integer_mult integer_max exec_while () integer_flush exec_when (integer_dec) exec_do*times (boolean_eq boolean_flush boolean_dup_times boolean_invert_second_then_and exec_do*range () exec_if (boolean_frominteger exec_y_when_autoconstructing (integer_eq exec_dup (in2 boolean_rot boolean_yankdup) print_integer)) ()))
Zero cases best errors: [1 0 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 2 3 2 2 3 2 3 6)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (2 2 2 3 2 2 3 2 3 6)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction tagged_400} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_271} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction 93} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction tagged_693} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if})
Best program: (exec_yank integer_mult boolean_xor boolean_rot exec_do*times () boolean_dup_items boolean_dup boolean_eq exec_k () (integer_mod boolean_and in3 in3 integer_add) exec_rot () (boolean_frominteger) (integer_dec in2) boolean_dup_times exec_dup_items integer_flush exec_eq tagged_440 exec_do*range (exec_swap () () integer_add integer_yankdup in2 integer_add print_integer) boolean_rot integer_yankdup boolean_flush integer_shove exec_dup_items exec_pop () in4 tagged_400 boolean_invert_first_then_and integer_lte exec_s_when_autoconstructing (integer_empty exec_s_when_autoconstructing () () (integer_mult exec_if (integer_dec integer_flush boolean_or print_newline exec_shove () print_exec (exec_empty) boolean_frominteger boolean_rot integer_lt tagged_271 exec_stackdepth boolean_not integer_min) (exec_k_when_autoconstructing () (integer_sub exec_do*range (exec_y (boolean_empty) boolean_or integer_div integer_lte exec_noop boolean_dup_times integer_stackdepth in1 integer_lte 93) integer_pop exec_do*range (exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_shove) (tagged_693) (exec_do*range (print_newline in2 integer_shove exec_noop exec_s (exec_y_when_autoconstructing (boolean_invert_first_then_and exec_dup (integer_rot exec_empty exec_rot () (exec_dup_times (boolean_eq exec_if () ())) ()))) () ()))) () ()))))) () ())
Errors: [1 0 0 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 94
Size: 138
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 9.973
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.998 0.997 0.998 0.998 0.997 0.998 0.997 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.837
Average program size in population (points): 67.307
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 480831
--- Timings ---
Current time: 1559584405252 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 28.3%
Fitness Testing:      1.8 seconds, 68.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 91                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 31                 
Correct output: 16                  | Program output: 62                 
Correct output: 69                  | Program output: 71                 
Correct output: 29                  | Program output: 91                 
Correct output: 42                  | Program output: 83                 
Correct output: 13                  | Program output: 100                
Correct output: 2                   | Program output: 81                 
Correct output: 9                   | Program output: 12                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 100                
Correct output: 28                  | Program output: 68                 
Correct output: 11                  | Program output: 41                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: -24                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 28                 
Correct output: -90                 | Program output: -48                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -6                 
Correct output: 24                  | Program output: 55                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: 11                 
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 50                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 46                 
Correct output: 5                   | Program output: 56                 
Correct output: 20                  | Program output: 64                 
Correct output: -54                 | Program output: 51                 
Correct output: -75                 | Program output: -34                
Correct output: -71                 | Program output: -49                
Correct output: -80                 | Program output: -5                 
Correct output: -95                 | Program output: 44                 
Correct output: -66                 | Program output: -54                
Correct output: -21                 | Program output: 49                 
Correct output: -100                | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: 5                  
Correct output: -40                 | Program output: -12                
Correct output: -93                 | Program output: -23                
Correct output: -15                 | Program output: 48                 
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -47                
Correct output: 22                  | Program output: 40                 
Correct output: 15                  | Program output: 27                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 53                 
Correct output: -85                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 47                 
Correct output: -44                 | Program output: 56                 
Correct output: -67                 | Program output: 89                 
Correct output: 7                   | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 11                 
Correct output: -72                 | Program output: -39                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: 84                 
Correct output: -79                 | Program output: 28                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -70                
Correct output: -49                 | Program output: 33                 
Correct output: -25                 | Program output: 98                 
Correct output: -67                 | Program output: -18                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -27                
Correct output: -46                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 2, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if})
Lexicase best program: (exec_k (integer_lte boolean_yankdup exec_k_when_autoconstructing () (integer_inc) exec_noop integer_dup_items) (in4 in2) boolean_yankdup boolean_flush integer_gt exec_when (integer_dup exec_pop ()) exec_yankdup in4 print_integer exec_dup_items integer_empty integer_yankdup in4 integer_shove boolean_swap integer_div exec_do*count (exec_do*times () exec_do*count (integer_mod boolean_rot boolean_empty) integer_yankdup) integer_lte exec_do*while (boolean_flush exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 boolean_dup exec_noop integer_min integer_yank integer_mult exec_swap () () exec_shove () boolean_eq) (exec_yankdup) boolean_dup_times in3 integer_lt integer_dup_times) boolean_invert_second_then_and integer_sub exec_noop exec_empty print_newline boolean_shove exec_if () (integer_yankdup integer_mult boolean_not integer_mod integer_empty) boolean_dup_items integer_flush boolean_invert_first_then_and print_newline boolean_invert_first_then_and print_boolean in2 integer_lt integer_yank integer_lte boolean_swap exec_if (exec_do*while (exec_k_when_autoconstructing (integer_fromboolean) (exec_yankdup) exec_yank exec_if () ())) ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 112
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 2, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if})
Zero cases best program: (exec_k (integer_lte boolean_yankdup exec_k_when_autoconstructing () (integer_inc) exec_noop integer_dup_items) (in4 in2) boolean_yankdup boolean_flush integer_gt exec_when (integer_dup exec_pop ()) exec_yankdup in4 print_integer exec_dup_items integer_empty integer_yankdup in4 integer_shove boolean_swap integer_div exec_do*count (exec_do*times () exec_do*count (integer_mod boolean_rot boolean_empty) integer_yankdup) integer_lte exec_do*while (boolean_flush exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 boolean_dup exec_noop integer_min integer_yank integer_mult exec_swap () () exec_shove () boolean_eq) (exec_yankdup) boolean_dup_times in3 integer_lt integer_dup_times) boolean_invert_second_then_and integer_sub exec_noop exec_empty print_newline boolean_shove exec_if () (integer_yankdup integer_mult boolean_not integer_mod integer_empty) boolean_dup_items integer_flush boolean_invert_first_then_and print_newline boolean_invert_first_then_and print_boolean in2 integer_lt integer_yank integer_lte boolean_swap exec_if (exec_do*while (exec_k_when_autoconstructing (integer_fromboolean) (exec_yankdup) exec_yank exec_if () ())) ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 112
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 74 708 159 74 324 163 163 326 74)
Population mean number of elite cases: 2.23
Count of perfect (error zero) individuals by case: (163 74 708 159 74 324 163 163 326 74)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc})
Best program: (in4 exec_k (in4 boolean_invert_second_then_and print_integer boolean_and) (boolean_dup_times exec_stackdepth) integer_max print_boolean exec_dup (integer_mult integer_min integer_inc))
Errors: [1 1 0 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.772
Median total errors in population: 7
Error averages by case: (0.837 0.926 0.292 0.841 0.926 0.676 0.837 0.837 0.674 0.926)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.404
Average program size in population (points): 71.847
Average percent parens in population: 0.275
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.482
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1203733
--- Timings ---
Current time: 1559584408175 milliseconds
Total Time:           6.2 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.5 seconds, 39.4%
Fitness Testing:      2.8 seconds, 45.1%
Report:               0.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 91                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 31                 
Correct output: 16                  | Program output: 62                 
Correct output: 69                  | Program output: 71                 
Correct output: 29                  | Program output: 91                 
Correct output: 42                  | Program output: 83                 
Correct output: 13                  | Program output: 100                
Correct output: 2                   | Program output: 81                 
Correct output: 9                   | Program output: 12                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 100                
Correct output: 28                  | Program output: 68                 
Correct output: 11                  | Program output: 41                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: -24                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 28                 
Correct output: -90                 | Program output: -48                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -6                 
Correct output: 24                  | Program output: 55                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: 11                 
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 50                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 46                 
Correct output: 5                   | Program output: 56                 
Correct output: 20                  | Program output: 64                 
Correct output: -54                 | Program output: 51                 
Correct output: -75                 | Program output: -34                
Correct output: -71                 | Program output: -49                
Correct output: -80                 | Program output: -5                 
Correct output: -95                 | Program output: 44                 
Correct output: -66                 | Program output: -54                
Correct output: -21                 | Program output: 49                 
Correct output: -100                | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: 5                  
Correct output: -40                 | Program output: -12                
Correct output: -93                 | Program output: -23                
Correct output: -15                 | Program output: 48                 
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -47                
Correct output: 22                  | Program output: 40                 
Correct output: 15                  | Program output: 27                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 53                 
Correct output: -85                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 47                 
Correct output: -44                 | Program output: 56                 
Correct output: -67                 | Program output: 89                 
Correct output: 7                   | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 11                 
Correct output: -72                 | Program output: -39                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: 84                 
Correct output: -79                 | Program output: 28                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -70                
Correct output: -49                 | Program output: 33                 
Correct output: -25                 | Program output: 98                 
Correct output: -67                 | Program output: -18                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -27                
Correct output: -46                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 2, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_280} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_pop})
Lexicase best program: (exec_k (integer_lte boolean_yankdup exec_k_when_autoconstructing () (integer_inc) exec_noop integer_dup_items) (in4 in2) boolean_yankdup boolean_flush integer_gt exec_when (integer_dup exec_pop ()) exec_yankdup in4 print_integer exec_while (integer_empty) integer_yankdup in4 integer_shove boolean_swap integer_div exec_do*count (exec_do*times () exec_do*count (integer_mod boolean_rot boolean_empty) integer_yankdup) integer_lte exec_do*while (boolean_flush exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 boolean_dup exec_noop integer_min integer_yank integer_mult exec_swap () () exec_shove () boolean_eq) (exec_yankdup) boolean_dup_times in3 integer_lt integer_dup_times) boolean_invert_second_then_and integer_sub exec_noop integer_dec integer_mult tag_exec_280 (integer_eq) exec_empty exec_rot (exec_dup_items boolean_empty) (exec_do*times () exec_do*times (boolean_and boolean_shove in3 boolean_swap) integer_pop) ())
Lexicase best errors: [0 1 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 98
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 2, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_280} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_pop})
Zero cases best program: (exec_k (integer_lte boolean_yankdup exec_k_when_autoconstructing () (integer_inc) exec_noop integer_dup_items) (in4 in2) boolean_yankdup boolean_flush integer_gt exec_when (integer_dup exec_pop ()) exec_yankdup in4 print_integer exec_while (integer_empty) integer_yankdup in4 integer_shove boolean_swap integer_div exec_do*count (exec_do*times () exec_do*count (integer_mod boolean_rot boolean_empty) integer_yankdup) integer_lte exec_do*while (boolean_flush exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 boolean_dup exec_noop integer_min integer_yank integer_mult exec_swap () () exec_shove () boolean_eq) (exec_yankdup) boolean_dup_times in3 integer_lt integer_dup_times) boolean_invert_second_then_and integer_sub exec_noop integer_dec integer_mult tag_exec_280 (integer_eq) exec_empty exec_rot (exec_dup_items boolean_empty) (exec_do*times () exec_do*times (boolean_and boolean_shove in3 boolean_swap) integer_pop) ())
Zero cases best errors: [0 1 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 98
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 102 284 280 186 282 103 280 285 100)
Population mean number of elite cases: 2.19
Count of perfect (error zero) individuals by case: (290 102 284 280 186 282 103 280 285 100)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc})
Best program: (in4 exec_k (in4 boolean_invert_second_then_and print_integer boolean_and) (boolean_dup_times exec_stackdepth) integer_max print_boolean exec_dup (integer_mult integer_min integer_inc))
Errors: [0 1 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.808
Median total errors in population: 8
Error averages by case: (0.71 0.898 0.716 0.72 0.814 0.718 0.897 0.72 0.715 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.233
Average program size in population (points): 70.212
Average percent parens in population: 0.271
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9935
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1830261
--- Timings ---
Current time: 1559584411456 milliseconds
Total Time:           9.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.8 seconds, 49.9%
Fitness Testing:      3.6 seconds, 37.3%
Report:               1.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 91                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 31                 
Correct output: 16                  | Program output: 62                 
Correct output: 69                  | Program output: 71                 
Correct output: 29                  | Program output: 91                 
Correct output: 42                  | Program output: 83                 
Correct output: 13                  | Program output: 100                
Correct output: 2                   | Program output: 81                 
Correct output: 9                   | Program output: 12                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 100                
Correct output: 28                  | Program output: 68                 
Correct output: 11                  | Program output: 41                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: -24                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 28                 
Correct output: -90                 | Program output: -48                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -6                 
Correct output: 24                  | Program output: 55                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: 11                 
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 50                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 46                 
Correct output: 5                   | Program output: 56                 
Correct output: 20                  | Program output: 64                 
Correct output: -54                 | Program output: 51                 
Correct output: -75                 | Program output: -34                
Correct output: -71                 | Program output: -49                
Correct output: -80                 | Program output: -5                 
Correct output: -95                 | Program output: 44                 
Correct output: -66                 | Program output: -54                
Correct output: -21                 | Program output: 49                 
Correct output: -100                | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: 5                  
Correct output: -40                 | Program output: -12                
Correct output: -93                 | Program output: -23                
Correct output: -15                 | Program output: 48                 
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -47                
Correct output: 22                  | Program output: 40                 
Correct output: 15                  | Program output: 27                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 53                 
Correct output: -85                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 47                 
Correct output: -44                 | Program output: 56                 
Correct output: -67                 | Program output: 89                 
Correct output: 7                   | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 11                 
Correct output: -72                 | Program output: -39                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: 84                 
Correct output: -79                 | Program output: 28                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -70                
Correct output: -49                 | Program output: 33                 
Correct output: -25                 | Program output: 98                 
Correct output: -67                 | Program output: -18                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -27                
Correct output: -46                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc})
Lexicase best program: (in4 exec_k (in4 boolean_invert_second_then_and print_integer boolean_and) (boolean_dup_times exec_stackdepth) integer_max print_boolean exec_dup (integer_mult integer_min integer_inc))
Lexicase best errors: [0 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc})
Zero cases best program: (in4 exec_k (in4 boolean_invert_second_then_and print_integer boolean_and) (boolean_dup_times exec_stackdepth) integer_max print_boolean exec_dup (integer_mult integer_min integer_inc))
Zero cases best errors: [0 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (369 369 369 880 149 877 287 76 149 360)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (369 369 369 880 149 877 287 76 149 360)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc})
Best program: (in4 exec_k (in4 boolean_invert_second_then_and print_integer boolean_and) (boolean_dup_times exec_stackdepth) integer_max print_boolean exec_dup (integer_mult integer_min integer_inc))
Errors: [0 0 0 0 1 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.115
Median total errors in population: 6
Error averages by case: (0.631 0.631 0.631 0.12 0.851 0.123 0.713 0.924 0.851 0.64)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.101
Average program size in population (points): 65.176
Average percent parens in population: 0.269
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4725
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2499924
--- Timings ---
Current time: 1559584414884 milliseconds
Total Time:          13.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.2 seconds, 55.7%
Fitness Testing:      4.3 seconds, 33.2%
Report:               1.3 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -12                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 86                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 66                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 50                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 70                 
Correct output: 28                  | Program output: 71                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 100                
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 64                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 87                 
Correct output: -81                 | Program output: 26                 
Correct output: -24                 | Program output: 51                 
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 98                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 98                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: 9                  
Correct output: -71                 | Program output: 16                 
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -41                
Correct output: -66                 | Program output: 38                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: 40                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 83                 
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 75                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: 82                 
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 56                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: 43                 
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: 54                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_boolean_89} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_not boolean_eq tag_boolean_89 integer_lte integer_stackdepth integer_empty integer_mult integer_max exec_while () integer_flush exec_when (integer_dec) exec_do*times (boolean_eq boolean_flush boolean_dup_times boolean_invert_second_then_and integer_div) exec_if (boolean_frominteger exec_y_when_autoconstructing (integer_eq exec_dup (in2 boolean_rot boolean_yankdup) print_integer)) ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_boolean_89} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_not boolean_eq tag_boolean_89 integer_lte integer_stackdepth integer_empty integer_mult integer_max exec_while () integer_flush exec_when (integer_dec) exec_do*times (boolean_eq boolean_flush boolean_dup_times boolean_invert_second_then_and integer_div) exec_if (boolean_frominteger exec_y_when_autoconstructing (integer_eq exec_dup (in2 boolean_rot boolean_yankdup) print_integer)) ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 204 321 156 371 164 156 156 361 361)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (204 204 321 156 371 164 156 156 361 361)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_271} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 1, :instruction 93} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if})
Best program: (exec_yankdup integer_mult boolean_xor boolean_rot exec_do*times () boolean_dup_items boolean_dup boolean_eq exec_k () (integer_mod boolean_and in3 in3 integer_add) exec_rot () (boolean_frominteger) (integer_dec in2) boolean_dup_times exec_dup_items integer_flush exec_eq tagged_440 exec_do*range (exec_swap () () integer_add integer_yankdup in2 integer_add print_integer) integer_lte exec_do*while (boolean_flush exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 boolean_dup exec_noop integer_min integer_yank integer_mult exec_swap () () exec_shove () boolean_eq) (exec_yankdup) boolean_dup_times in3 integer_lt integer_dup_times) boolean_rot integer_lt tagged_271 exec_stackdepth boolean_not integer_min exec_k_when_autoconstructing (integer_sub exec_do*range (exec_y (boolean_empty boolean_or boolean_dup_times integer_lte exec_y (boolean_empty) boolean_or integer_div in2 integer_lt integer_yank boolean_or boolean_dup_times integer_lte exec_y (boolean_empty) boolean_or integer_div integer_lte exec_noop boolean_dup_times integer_stackdepth in1 integer_lte) 93) integer_pop exec_do*range (exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_shove) (exec_k_when_autoconstructing (integer_fromboolean) (exec_yankdup) exec_yank) (exec_if () ())) () ())) ())
Errors: [1 1 0 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 98
Size: 133
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.546
Median total errors in population: 7
Error averages by case: (0.796 0.796 0.679 0.844 0.629 0.836 0.844 0.844 0.639 0.639)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.727
Average program size in population (points): 61.951
Average percent parens in population: 0.267
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.976
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3115438
--- Timings ---
Current time: 1559584418876 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.7 seconds, 59.5%
Fitness Testing:      4.9 seconds, 30.3%
Report:               1.6 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -12                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 86                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 66                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 50                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 70                 
Correct output: 28                  | Program output: 71                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 100                
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 64                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 87                 
Correct output: -81                 | Program output: 26                 
Correct output: -24                 | Program output: 51                 
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 98                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 98                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: 9                  
Correct output: -71                 | Program output: 16                 
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -41                
Correct output: -66                 | Program output: 38                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: 40                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 83                 
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 75                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: 82                 
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 56                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: 43                 
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: 54                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction tagged_400} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_271} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if})
Lexicase best program: (exec_yank integer_mult boolean_xor boolean_rot exec_do*times () boolean_dup_items boolean_dup boolean_eq exec_k () (integer_mod boolean_and in3 in3 integer_add) exec_rot () (boolean_frominteger) (integer_dec in2) boolean_dup_times boolean_swap integer_flush integer_shove tagged_440 exec_do*range (exec_swap () () integer_add integer_yankdup in2 integer_add print_integer) boolean_rot integer_yankdup boolean_flush integer_shove exec_dup_items exec_pop () in4 tagged_400 boolean_invert_first_then_and integer_lte exec_s_when_autoconstructing (integer_empty integer_flush) () (integer_mult exec_if (integer_dec integer_flush boolean_or print_newline exec_shove () print_exec (exec_empty) boolean_frominteger boolean_rot integer_lt tagged_271 exec_stackdepth integer_gte integer_min) (exec_k_when_autoconstructing () (integer_sub exec_do*range (exec_y (boolean_empty) boolean_or integer_div integer_lte exec_noop boolean_dup_times boolean_dup_items integer_flush boolean_invert_first_then_and print_newline) boolean_invert_first_then_and) print_boolean) in2 integer_lt) integer_yank integer_lte boolean_swap exec_if (exec_do*while (exec_k_when_autoconstructing (integer_fromboolean) (exec_yankdup) exec_yank exec_if () ())) ())
Lexicase best errors: [0 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 116
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction tagged_400} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_271} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if})
Zero cases best program: (exec_yank integer_mult boolean_xor boolean_rot exec_do*times () boolean_dup_items boolean_dup boolean_eq exec_k () (integer_mod boolean_and in3 in3 integer_add) exec_rot () (boolean_frominteger) (integer_dec in2) boolean_dup_times boolean_swap integer_flush integer_shove tagged_440 exec_do*range (exec_swap () () integer_add integer_yankdup in2 integer_add print_integer) boolean_rot integer_yankdup boolean_flush integer_shove exec_dup_items exec_pop () in4 tagged_400 boolean_invert_first_then_and integer_lte exec_s_when_autoconstructing (integer_empty integer_flush) () (integer_mult exec_if (integer_dec integer_flush boolean_or print_newline exec_shove () print_exec (exec_empty) boolean_frominteger boolean_rot integer_lt tagged_271 exec_stackdepth integer_gte integer_min) (exec_k_when_autoconstructing () (integer_sub exec_do*range (exec_y (boolean_empty) boolean_or integer_div integer_lte exec_noop boolean_dup_times boolean_dup_items integer_flush boolean_invert_first_then_and print_newline) boolean_invert_first_then_and) print_boolean) in2 integer_lt) integer_yank integer_lte boolean_swap exec_if (exec_do*while (exec_k_when_autoconstructing (integer_fromboolean) (exec_yankdup) exec_yank exec_if () ())) ())
Zero cases best errors: [0 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 116
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (320 316 355 187 319 318 185 174 849 174)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (320 316 355 187 319 318 185 174 849 174)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_89} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer})
Best program: (boolean_not integer_flush tag_boolean_89 integer_lte integer_stackdepth integer_empty integer_mult integer_max exec_while () integer_flush exec_when (integer_dec) exec_do*times (boolean_eq boolean_flush boolean_dup_times boolean_invert_second_then_and exec_do*range () exec_if (boolean_frominteger exec_y_when_autoconstructing (exec_k (exec_dup (in2 boolean_rot boolean_yankdup) print_integer) ())) ()))
Errors: [0 0 1 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 38
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 6.803
Median total errors in population: 7
Error averages by case: (0.68 0.684 0.645 0.813 0.681 0.682 0.815 0.826 0.151 0.826)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.333
Average program size in population (points): 63.231
Average percent parens in population: 0.273
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.45625
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3700843
--- Timings ---
Current time: 1559584422325 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.3 seconds, 60.3%
Fitness Testing:      5.5 seconds, 27.2%
Report:               2.5 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0
(exec_empty)     
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 96
(exec_empty)
(exec_empty)
Correct output: 27                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 99                 
Correct output: 29                  | Program output: 84                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 90                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 78                 
Correct output: 33                  | Program output: 66                 
Correct output: 4                   | Program output: 72                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: 78                 
Correct output: -97                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 32                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 32                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -9                 
Correct output: -86                 | Program output: 67                 
Correct output: -81                 | Program output: -28                
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 81                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: 73                 
Correct output: -79                 | Program output: 90                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: 55                 
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 85
(exec_empty)
(exec_empty)
Correct output: -75                 | Program output: 27                 
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3
(exec_empty)    
Correct output: -79                 | Program output: 57                 
Correct output: -85                 | Program output: 52                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 53                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 94                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: 41                 
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_103} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 65} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_invert_first_then_and in1 print_integer exec_s (boolean_and integer_fromboolean boolean_eq boolean_invert_first_then_and tagged_103 boolean_flush boolean_yank boolean_invert_first_then_and exec_do*count (boolean_shove exec_y (integer_lt) boolean_or boolean_yank exec_y (integer_add integer_lte) integer_dup_items exec_rot (65 exec_eq) (exec_dup_times (exec_pop (boolean_empty exec_rot () (exec_do*range () boolean_not) (in4 exec_if () (integer_max exec_y_when_autoconstructing ()))))) ())) () ())
Lexicase best errors: [0 1 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.352
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_103} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 65} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_invert_first_then_and in1 print_integer exec_s (boolean_and integer_fromboolean boolean_eq boolean_invert_first_then_and tagged_103 boolean_flush boolean_yank boolean_invert_first_then_and exec_do*count (boolean_shove exec_y (integer_lt) boolean_or boolean_yank exec_y (integer_add integer_lte) integer_dup_items exec_rot (65 exec_eq) (exec_dup_times (exec_pop (boolean_empty exec_rot () (exec_do*range () boolean_not) (in4 exec_if () (integer_max exec_y_when_autoconstructing ()))))) ())) () ())
Zero cases best errors: [0 1 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.352
--- Lexicase Population Statistics ---
Count of elite individuals by case: (880 192 687 295 299 883 1000 192 1 1000)
Population mean number of elite cases: 5.43
Count of perfect (error zero) individuals by case: (880 192 687 295 299 883 0 192 1 0)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction tagged_400} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_271} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction 93} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction tagged_693} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction integer_shove})
Best program: (in1 exec_empty exec_k (print_integer integer_lt) (print_integer) integer_yankdup integer_dup_items boolean_swap boolean_empty boolean_dup in1 integer_dec in2 boolean_dup_times exec_dup_items integer_flush exec_eq tagged_440 exec_do*range (exec_swap () () integer_add integer_yankdup in2 integer_add in1) boolean_rot integer_yankdup boolean_flush integer_shove exec_dup_items exec_pop () in4 tagged_400 boolean_invert_first_then_and integer_lte exec_s_when_autoconstructing (integer_empty exec_s_when_autoconstructing () () (integer_mult exec_if (integer_dec integer_flush boolean_or print_newline exec_shove () print_exec (exec_empty) boolean_frominteger boolean_rot integer_lt tagged_271 exec_stackdepth boolean_not integer_min) (exec_k_when_autoconstructing () (integer_gt) exec_do*range (exec_y (boolean_empty) boolean_or integer_div integer_lte exec_noop boolean_dup_times integer_stackdepth integer_lte exec_noop boolean_dup_times integer_stackdepth) in1 integer_lte 93 integer_pop exec_do*range (exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_shove) (tagged_693) (exec_do*range (print_newline in2 integer_shove))) () ())))) () ())
Errors: [0 1 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 83
Size: 112
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 6.571
Median total errors in population: 7
Error averages by case: (0.12 0.808 0.313 0.705 0.701 0.117 1.0 0.808 0.999 1.0)
Error minima by case: (0 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 42.81
Average program size in population (points): 59.433
Average percent parens in population: 0.271
Minimum age in population: 6.0
Maximum age in population: 10.875
Average age in population: 8.91765625
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4341038
--- Timings ---
Current time: 1559584425665 milliseconds
Total Time:          23.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.3 seconds, 61.4%
Fitness Testing:      6.2 seconds, 26.4%
Report:               2.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 96                 
Correct output: 27                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 99                 
Correct output: 29                  | Program output: 84                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 90                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 78                 
Correct output: 33                  | Program output: 66                 
Correct output: 4                   | Program output: 72                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: 78                 
Correct output: -97                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 32                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 32                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -9                 
Correct output: -86                 | Program output: 67                 
Correct output: -81                 | Program output: -28                
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 81                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: 73                 
Correct output: -79                 | Program output: 90                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: 55                 
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 85                 
Correct output: -75                 | Program output: 27                 
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: 57                 
Correct output: -85                 | Program output: 52                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 53                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 94                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: 41                 
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_103} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 65} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div})
Lexicase best program: (exec_s () (exec_y (exec_s (in1 exec_when (exec_rot (in1 print_integer exec_s (boolean_and) (integer_fromboolean boolean_eq boolean_invert_first_then_and tagged_103 boolean_flush boolean_yank boolean_invert_first_then_and exec_do*count (boolean_shove exec_y (integer_lt) boolean_or boolean_yank exec_y (integer_add integer_lte) integer_dup_items exec_rot (65 exec_eq) (exec_dup_times (exec_pop (boolean_empty exec_rot () (exec_do*range () integer_min) (in4 exec_if (exec_do*while () exec_do*times (integer_div)) ())))) ())) ()) () ())) () ())) ())
Lexicase best errors: [1 1 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 72
Percent parens: 0.431
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_103} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 65} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div})
Zero cases best program: (exec_s () (exec_y (exec_s (in1 exec_when (exec_rot (in1 print_integer exec_s (boolean_and) (integer_fromboolean boolean_eq boolean_invert_first_then_and tagged_103 boolean_flush boolean_yank boolean_invert_first_then_and exec_do*count (boolean_shove exec_y (integer_lt) boolean_or boolean_yank exec_y (integer_add integer_lte) integer_dup_items exec_rot (65 exec_eq) (exec_dup_times (exec_pop (boolean_empty exec_rot () (exec_do*range () integer_min) (in4 exec_if (exec_do*while () exec_do*times (integer_div)) ())))) ())) ()) () ())) () ())) ())
Zero cases best errors: [1 1 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 72
Percent parens: 0.431
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1 319 3 319 319 459 459 104 461)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (0 1 319 3 319 319 459 459 104 461)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction 88} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction 82} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction -2} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction tagged_400} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt})
Best program: (in1 exec_empty exec_k (print_integer integer_lt) (integer_pop) integer_yankdup boolean_swap boolean_swap boolean_empty boolean_dup in1 in1 integer_yankdup boolean_swap boolean_swap boolean_empty boolean_dup in1 in1 exec_do*range (boolean_pop in2) boolean_flush exec_do*count () integer_stackdepth integer_pop exec_while () 88 exec_flush boolean_pop exec_noop print_newline boolean_eq exec_swap (82 integer_div integer_fromboolean -2 integer_add print_integer) (boolean_rot integer_yankdup) boolean_flush integer_shove exec_dup_items exec_pop () in4 tagged_400 boolean_invert_first_then_and integer_lte exec_s_when_autoconstructing (integer_empty exec_s_when_autoconstructing () () (integer_mult exec_if (integer_dec integer_flush boolean_or print_newline exec_shove () integer_swap exec_empty) (boolean_frominteger boolean_rot integer_lt))) () ())
Errors: [1 1 1 1 1 1 0 0 1 0]
Total: 7
Mean: 0.7
Genome size: 66
Size: 84
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.556
Median total errors in population: 7
Error averages by case: (1.0 0.999 0.681 0.997 0.681 0.681 0.541 0.541 0.896 0.539)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.762
Average program size in population (points): 54.172
Average percent parens in population: 0.276
Minimum age in population: 7.0
Maximum age in population: 12.0625
Average age in population: 10.402453125
Median age in population: 10.453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5053289
--- Timings ---
Current time: 1559584428943 milliseconds
Total Time:          26.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.5 seconds, 61.4%
Fitness Testing:      6.9 seconds, 25.6%
Report:               3.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 91                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 31                 
Correct output: 16                  | Program output: 62                 
Correct output: 69                  | Program output: 71                 
Correct output: 29                  | Program output: 91                 
Correct output: 42                  | Program output: 83                 
Correct output: 13                  | Program output: 100                
Correct output: 2                   | Program output: 81                 
Correct output: 9                   | Program output: 12                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 100                
Correct output: 28                  | Program output: 68                 
Correct output: 11                  | Program output: 41                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: -24                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 28                 
Correct output: -90                 | Program output: -48                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -6                 
Correct output: 24                  | Program output: 55                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: 11                 
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 50                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 46                 
Correct output: 5                   | Program output: 56                 
Correct output: 20                  | Program output: 64                 
Correct output: -54                 | Program output: 51                 
Correct output: -75                 | Program output: -34                
Correct output: -71                 | Program output: -49                
Correct output: -80                 | Program output: -5                 
Correct output: -95                 | Program output: 44                 
Correct output: -66                 | Program output: -54                
Correct output: -21                 | Program output: 49                 
Correct output: -100                | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: 5                  
Correct output: -40                 | Program output: -12                
Correct output: -93                 | Program output: -23                
Correct output: -15                 | Program output: 48                 
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -47                
Correct output: 22                  | Program output: 40                 
Correct output: 15                  | Program output: 27                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 53                 
Correct output: -85                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 47                 
Correct output: -44                 | Program output: 56                 
Correct output: -67                 | Program output: 89                 
Correct output: 7                   | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 11                 
Correct output: -72                 | Program output: -39                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: 84                 
Correct output: -79                 | Program output: 28                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -70                
Correct output: -49                 | Program output: 33                 
Correct output: -25                 | Program output: 98                 
Correct output: -67                 | Program output: -18                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -27                
Correct output: -46                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 65} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times})
Lexicase best program: (in4 exec_k (in4 boolean_invert_second_then_and print_integer integer_gt) (exec_y (exec_stackdepth) integer_max print_boolean exec_dup (integer_mult integer_min exec_do*times (integer_lt) boolean_or boolean_yank exec_y (integer_add integer_lte) integer_dup_items exec_rot (65 exec_eq) (exec_dup_times ()) ())))
Lexicase best errors: [0 1 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 65} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times})
Zero cases best program: (in4 exec_k (in4 boolean_invert_second_then_and print_integer integer_gt) (exec_y (exec_stackdepth) integer_max print_boolean exec_dup (integer_mult integer_min exec_do*times (integer_lt) boolean_or boolean_yank exec_y (integer_add integer_lte) integer_dup_items exec_rot (65 exec_eq) (exec_dup_times ()) ())))
Zero cases best errors: [0 1 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 266 281 541 312 1000 1000 852 311 1000)
Population mean number of elite cases: 5.87
Count of perfect (error zero) individuals by case: (311 266 281 541 312 0 0 852 311 0)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq})
Best program: (in4 integer_eq in4 boolean_invert_second_then_and print_integer boolean_and boolean_dup_times exec_stackdepth integer_max boolean_pop exec_dup (exec_if (integer_min integer_eq) ()))
Errors: [0 1 1 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.126
Median total errors in population: 7
Error averages by case: (0.689 0.734 0.719 0.459 0.688 1.0 1.0 0.148 0.689 1.0)
Error minima by case: (0 0 0 0 0 1 1 0 0 1)
Average genome size in population (length): 34.45
Average program size in population (points): 47.953
Average percent parens in population: 0.274
Minimum age in population: 9.28125
Maximum age in population: 13.578125
Average age in population: 12.07953125
Median age in population: 12.03515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5704262
--- Timings ---
Current time: 1559584431933 milliseconds
Total Time:          30.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.7 seconds, 62.1%
Fitness Testing:      7.5 seconds, 25.0%
Report:               3.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 96                 
Correct output: 27                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 99                 
Correct output: 29                  | Program output: 84                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 90                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 78                 
Correct output: 33                  | Program output: 66                 
Correct output: 4                   | Program output: 72                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: 78                 
Correct output: -97                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 32                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 32                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -9                 
Correct output: -86                 | Program output: 67                 
Correct output: -81                 | Program output: -28                
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 81                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: 73                 
Correct output: -79                 | Program output: 90                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: 55                 
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 85                 
Correct output: -75                 | Program output: 27                 
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: 57                 
Correct output: -85                 | Program output: 52                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 53                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 94                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: 41                 
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction 88} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction 88} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 65} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction 84} {:close 1, :instruction boolean_eq} {:close 0, :instruction tag_integer_41} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_exec_280} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*times})
Lexicase best program: (in1 integer_fromboolean exec_k (print_integer integer_lt print_integer integer_yankdup boolean_swap boolean_swap boolean_empty boolean_dup) (in1 in1) exec_do*range (boolean_pop integer_pop) boolean_flush exec_do*count () integer_stackdepth integer_pop exec_while () 88 exec_flush boolean_pop integer_yank 88 exec_flush boolean_pop exec_y (integer_lt) integer_min boolean_yank exec_y (integer_add integer_lte) integer_dup_items exec_rot (65 integer_yankdup in2 integer_add print_integer) (integer_lte exec_do*while (boolean_flush exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 boolean_dup exec_noop integer_add 84 boolean_eq) (tag_integer_41 exec_yank integer_sub in4 boolean_pop integer_dec integer_mult)) tag_exec_280 (integer_eq) exec_empty exec_rot () (exec_dup_items boolean_empty) (exec_do*times ())) ())
Lexicase best errors: [0 0 1 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 92
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction 88} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction 88} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 65} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction 84} {:close 1, :instruction boolean_eq} {:close 0, :instruction tag_integer_41} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_exec_280} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*times})
Zero cases best program: (in1 integer_fromboolean exec_k (print_integer integer_lt print_integer integer_yankdup boolean_swap boolean_swap boolean_empty boolean_dup) (in1 in1) exec_do*range (boolean_pop integer_pop) boolean_flush exec_do*count () integer_stackdepth integer_pop exec_while () 88 exec_flush boolean_pop integer_yank 88 exec_flush boolean_pop exec_y (integer_lt) integer_min boolean_yank exec_y (integer_add integer_lte) integer_dup_items exec_rot (65 integer_yankdup in2 integer_add print_integer) (integer_lte exec_do*while (boolean_flush exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 boolean_dup exec_noop integer_add 84 boolean_eq) (tag_integer_41 exec_yank integer_sub in4 boolean_pop integer_dec integer_mult)) tag_exec_280 (integer_eq) exec_empty exec_rot () (exec_dup_items boolean_empty) (exec_do*times ())) ())
Zero cases best errors: [0 0 1 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 92
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (377 216 161 377 479 1000 857 1000 1000 1000)
Population mean number of elite cases: 6.47
Count of perfect (error zero) individuals by case: (377 216 161 377 479 0 857 0 0 0)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_103} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_swap} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if})
Best program: (exec_s () (exec_y (exec_yank boolean_or exec_when (boolean_invert_first_then_and in1 print_integer exec_s (boolean_and integer_fromboolean boolean_eq boolean_invert_first_then_and tagged_103 boolean_flush boolean_yank boolean_invert_first_then_and exec_do*count (exec_do*times () exec_do*count (integer_mod boolean_rot boolean_empty) integer_yankdup) integer_lte exec_do*while (exec_do*while (boolean_flush exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 boolean_dup exec_noop integer_min integer_yank integer_mult exec_swap () () exec_swap () () exec_shove () boolean_eq) (exec_yankdup) boolean_dup_times in3 integer_lt exec_shove () integer_dup_times) boolean_invert_second_then_and) integer_sub exec_noop exec_empty print_newline boolean_shove exec_if () (integer_yankdup integer_mult boolean_not integer_mod integer_empty) integer_empty integer_flush boolean_invert_first_then_and print_newline) (boolean_invert_first_then_and) (exec_noop) in2 integer_lt) integer_yank integer_lte boolean_swap integer_eq in2 exec_k_when_autoconstructing (integer_fromboolean) (exec_yankdup) exec_yank exec_if () ())) ())
Errors: [0 0 1 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 80
Size: 110
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.533
Median total errors in population: 8
Error averages by case: (0.623 0.784 0.839 0.623 0.521 1.0 0.143 1.0 1.0 1.0)
Error minima by case: (0 0 0 0 0 1 0 1 1 1)
Average genome size in population (length): 32.173
Average program size in population (points): 44.095
Average percent parens in population: 0.261
Minimum age in population: 10.625
Maximum age in population: 15.1640625
Average age in population: 13.4989921875
Median age in population: 13.517578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6304384
--- Timings ---
Current time: 1559584435945 milliseconds
Total Time:          33.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.0 seconds, 63.3%
Fitness Testing:      8.1 seconds, 24.4%
Report:               4.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 86                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 96                 
Correct output: 2                   | Program output: 79                 
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 99                 
Correct output: 19                  | Program output: 91                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -98                 | Program output: 88                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: 77                 
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 95                 
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 93                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: 12                 
Correct output: 5                   | Program output: 47                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: 72                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: 95                 
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: 27                 
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 76                 
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: 97                 
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 86                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 99                 
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 55                 
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 74                 
Correct output: -3                  | Program output: 85                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -29                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 65                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 19                 
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: 72                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 in4 boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [1 0 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 in4 boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [1 0 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (346 281 281 282 283 204 1000 346 281 832)
Population mean number of elite cases: 4.14
Count of perfect (error zero) individuals by case: (346 281 281 282 283 204 0 346 281 832)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 1, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (integer_rot exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 in4 boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ()))))
Errors: [1 0 0 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 45
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 6.864
Median total errors in population: 7
Error averages by case: (0.654 0.719 0.719 0.718 0.717 0.796 1.0 0.654 0.719 0.168)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 34.166
Average program size in population (points): 47.585
Average percent parens in population: 0.275
Minimum age in population: 12.34375
Maximum age in population: 16.83203125
Average age in population: 15.0624375
Median age in population: 15.1396484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6967341
--- Timings ---
Current time: 1559584439081 milliseconds
Total Time:          37.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 62.3%
Fitness Testing:      8.8 seconds, 23.7%
Report:               5.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 86                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 96                 
Correct output: 2                   | Program output: 79                 
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 99                 
Correct output: 19                  | Program output: 91                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -98                 | Program output: 88                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: 77                 
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 95                 
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 93                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: 12                 
Correct output: 5                   | Program output: 47                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: 72                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: 95                 
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: 27                 
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 76                 
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: 97                 
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 86                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 99                 
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 55                 
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 74                 
Correct output: -3                  | Program output: 85                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -29                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 65                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 19                 
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: 72                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (exec_rot (exec_do*count (boolean_shove integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 in4 boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [1 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (exec_rot (exec_do*count (boolean_shove integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 in4 boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [1 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 231 479 112 232 1000 713 474 708 479)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (109 231 479 112 232 0 713 474 708 479)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 exec_pop (boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ())))) () ()))
Errors: [1 1 0 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.463
Median total errors in population: 6
Error averages by case: (0.891 0.769 0.521 0.888 0.768 1.0 0.287 0.526 0.292 0.521)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 33.735
Average program size in population (points): 47.193
Average percent parens in population: 0.280
Minimum age in population: 13.875
Maximum age in population: 18.591796875
Average age in population: 16.5453583984375
Median age in population: 16.6025390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 196
Genome diversity (% unique genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7654616
--- Timings ---
Current time: 1559584442398 milliseconds
Total Time:          40.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.3 seconds, 62.7%
Fitness Testing:      9.4 seconds, 23.4%
Report:               5.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 86                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 96                 
Correct output: 2                   | Program output: 79                 
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 99                 
Correct output: 19                  | Program output: 91                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -98                 | Program output: 88                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: 77                 
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 95                 
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 93                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: 12                 
Correct output: 5                   | Program output: 47                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: 72                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: 95                 
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: 27                 
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 76                 
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: 97                 
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 86                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 99                 
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 55                 
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 74                 
Correct output: -3                  | Program output: 85                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -29                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 65                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 19                 
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: 72                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (in4) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 in4 boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [1 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (in4) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 in4 boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [1 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (275 208 332 1000 208 815 332 330 815 276)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (275 208 332 0 208 815 332 330 815 276)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min integer_add exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_lte integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 in4 boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Errors: [1 1 0 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 48
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.409
Median total errors in population: 6
Error averages by case: (0.725 0.792 0.668 1.0 0.792 0.185 0.668 0.67 0.185 0.724)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 32.684
Average program size in population (points): 45.37
Average percent parens in population: 0.272
Minimum age in population: 14.875
Maximum age in population: 19.8720703125
Average age in population: 17.9497373046875
Median age in population: 17.997314453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8303419
--- Timings ---
Current time: 1559584445437 milliseconds
Total Time:          43.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.3 seconds, 63.0%
Fitness Testing:     10.1 seconds, 23.3%
Report:               5.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 96                 
Correct output: 27                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 99                 
Correct output: 29                  | Program output: 84                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 90                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 78                 
Correct output: 33                  | Program output: 66                 
Correct output: 4                   | Program output: 72                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: 78                 
Correct output: -97                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 32                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 32                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -9                 
Correct output: -86                 | Program output: 67                 
Correct output: -81                 | Program output: -28                
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 81                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: 73                 
Correct output: -79                 | Program output: 90                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: 55                 
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 85                 
Correct output: -75                 | Program output: 27                 
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: 57                 
Correct output: -85                 | Program output: 52                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 53                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 94                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: 41                 
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction 88} {:close 0, :instruction exec_flush})
Lexicase best program: (in1 exec_empty exec_k (print_integer boolean_eq) (print_integer) integer_yankdup boolean_swap boolean_swap boolean_empty boolean_dup in1 in1 exec_do*range (boolean_pop in2) boolean_flush exec_do*count () integer_stackdepth integer_pop exec_while () 88 exec_flush)
Lexicase best errors: [1 0 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction 88} {:close 0, :instruction exec_flush})
Zero cases best program: (in1 exec_empty exec_k (print_integer boolean_eq) (print_integer) integer_yankdup boolean_swap boolean_swap boolean_empty boolean_dup in1 in1 exec_do*range (boolean_pop in2) boolean_flush exec_do*count () integer_stackdepth integer_pop exec_while () 88 exec_flush)
Zero cases best errors: [1 0 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (315 239 290 239 235 240 844 238 1000 1000)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (315 239 290 239 235 240 844 238 0 0)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_103} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction 65} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_stackdepth})
Best program: (exec_s () (exec_y (exec_yank in1 exec_when (boolean_invert_first_then_and in1 print_integer exec_s (boolean_and integer_fromboolean boolean_eq boolean_invert_first_then_and tagged_103 boolean_invert_first_then_and boolean_yank boolean_invert_first_then_and exec_do*count (boolean_shove exec_y (integer_lt) boolean_or boolean_yank exec_y (integer_add integer_lte) integer_dup_items integer_sub 65 exec_eq) exec_dup_times (exec_pop (boolean_empty exec_rot () (exec_do*range () boolean_stackdepth) ()))) () ()))) ())
Errors: [1 0 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 36
Size: 54
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.36
Median total errors in population: 8
Error averages by case: (0.685 0.761 0.71 0.761 0.765 0.76 0.156 0.762 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 31.25
Average program size in population (points): 43.246
Average percent parens in population: 0.267
Minimum age in population: 15.875
Maximum age in population: 21.295654296875
Average age in population: 19.40815234375
Median age in population: 19.4866943359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8899949
--- Timings ---
Current time: 1559584448852 milliseconds
Total Time:          46.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.5 seconds, 63.4%
Fitness Testing:     10.7 seconds, 22.9%
Report:               6.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 769
Test mean error for best: 0.76900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -88                 | Program output:                    
Correct output: 73                  | Program output:                    
Correct output: -91                 | Program output: 5                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 5                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output:                    
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output:                    
Correct output: 50                  | Program output:                    
Correct output: 29                  | Program output:                    
Correct output: 17                  | Program output: 13                 
Correct output: 3                   | Program output:                    
Correct output: 27                  | Program output:                    
Correct output: 16                  | Program output: 18                 
Correct output: 69                  | Program output:                    
Correct output: 29                  | Program output:                    
Correct output: 42                  | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 2                   | Program output:                    
Correct output: 9                   | Program output:                    
Correct output: 25                  | Program output:                    
Correct output: 19                  | Program output:                    
Correct output: 19                  | Program output:                    
Correct output: 15                  | Program output:                    
Correct output: 40                  | Program output:                    
Correct output: 50                  | Program output:                    
Correct output: 28                  | Program output:                    
Correct output: 11                  | Program output: 7                  
Correct output: 33                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output:                    
Correct output: -98                 | Program output:                    
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output:                    
Correct output: -69                 | Program output:                    
Correct output: -98                 | Program output:                    
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output:                    
Correct output: -95                 | Program output: 9                  
Correct output: -6                  | Program output:                    
Correct output: -94                 | Program output:                    
Correct output: -100                | Program output: 8                  
Correct output: 5                   | Program output:                    
Correct output: 20                  | Program output:                    
Correct output: -54                 | Program output:                    
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output:                    
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output:                    
Correct output: -21                 | Program output:                    
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output:                    
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output:                    
Correct output: -74                 | Program output:                    
Correct output: 22                  | Program output: 18                 
Correct output: 15                  | Program output: 11                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output:                    
Correct output: -2                  | Program output:                    
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output:                    
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output:                    
Correct output: -67                 | Program output: 4                  
Correct output: 7                   | Program output:                    
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output:                    
Correct output: -72                 | Program output:                    
Correct output: -46                 | Program output:                    
Correct output: -3                  | Program output:                    
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -29                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output:                    
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output:                    
Correct output: -85                 | Program output: 15                 
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output:                    
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 in4 boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [0 1 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 in4 boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [0 1 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (48 1000 1 652 1000 787 99 1000 149 48)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (48 0 1 652 0 787 99 0 149 48)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 in4 boolean_dup exec_yank tag_boolean_166 exec_do*count ()) integer_mod integer_max) () ()))
Errors: [0 1 1 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 35
Size: 45
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 8.216
Median total errors in population: 8
Error averages by case: (0.952 1.0 0.999 0.348 1.0 0.213 0.901 1.0 0.851 0.952)
Error minima by case: (0 1 0 0 1 0 0 1 0 0)
Average genome size in population (length): 33.897
Average program size in population (points): 47.181
Average percent parens in population: 0.273
Minimum age in population: 18.443359375
Maximum age in population: 22.985107421875
Average age in population: 20.86616589355469
Median age in population: 20.8765869140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 9573215
--- Timings ---
Current time: 1559584452004 milliseconds
Total Time:          49.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.5 seconds, 63.2%
Fitness Testing:     11.3 seconds, 22.8%
Report:               6.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 96                 
Correct output: 27                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 99                 
Correct output: 29                  | Program output: 84                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 90                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 78                 
Correct output: 33                  | Program output: 66                 
Correct output: 4                   | Program output: 72                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: 78                 
Correct output: -97                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 32                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 32                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -9                 
Correct output: -86                 | Program output: 67                 
Correct output: -81                 | Program output: -28                
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 81                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: 73                 
Correct output: -79                 | Program output: 90                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: 55                 
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 85                 
Correct output: -75                 | Program output: 27                 
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: 57                 
Correct output: -85                 | Program output: 52                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 53                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 94                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: 41                 
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_103} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 0, :instruction tagged_400} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_271} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_integer_884} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction 93} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction tagged_693} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if})
Lexicase best program: (in1 exec_empty exec_k (print_integer integer_lt) (boolean_rot in1 print_integer exec_s (boolean_swap integer_fromboolean boolean_eq boolean_invert_first_then_and tagged_103 boolean_flush boolean_yank exec_dup_items exec_do*count (exec_when (exec_y (integer_lt) boolean_or in4) tagged_400 boolean_invert_first_then_and integer_lte exec_s_when_autoconstructing (integer_empty exec_do*while ()) (integer_mult exec_if (integer_dec integer_flush boolean_or print_newline exec_shove () print_exec (exec_empty) boolean_frominteger boolean_rot integer_lt tagged_271 print_exec (boolean_empty integer_min) exec_k_when_autoconstructing () (integer_sub exec_do*range (exec_y (boolean_empty) tag_integer_884 integer_div integer_empty exec_noop integer_empty integer_mod in1 integer_lte 93) integer_pop exec_do*range (exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_shove) (tagged_693) (exec_do*range (print_newline in2 integer_shove integer_fromboolean integer_lt) integer_yank integer_lte boolean_swap exec_if (exec_do*while (exec_k_when_autoconstructing (integer_fromboolean) (exec_yankdup) exec_yank exec_if () ())) ())) () ()))) ()) ())) () ()))
Lexicase best errors: [1 1 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 118
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_103} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 0, :instruction tagged_400} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_271} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_integer_884} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction 93} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction tagged_693} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if})
Zero cases best program: (in1 exec_empty exec_k (print_integer integer_lt) (boolean_rot in1 print_integer exec_s (boolean_swap integer_fromboolean boolean_eq boolean_invert_first_then_and tagged_103 boolean_flush boolean_yank exec_dup_items exec_do*count (exec_when (exec_y (integer_lt) boolean_or in4) tagged_400 boolean_invert_first_then_and integer_lte exec_s_when_autoconstructing (integer_empty exec_do*while ()) (integer_mult exec_if (integer_dec integer_flush boolean_or print_newline exec_shove () print_exec (exec_empty) boolean_frominteger boolean_rot integer_lt tagged_271 print_exec (boolean_empty integer_min) exec_k_when_autoconstructing () (integer_sub exec_do*range (exec_y (boolean_empty) tag_integer_884 integer_div integer_empty exec_noop integer_empty integer_mod in1 integer_lte 93) integer_pop exec_do*range (exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_shove) (tagged_693) (exec_do*range (print_newline in2 integer_shove integer_fromboolean integer_lt) integer_yank integer_lte boolean_swap exec_if (exec_do*while (exec_k_when_autoconstructing (integer_fromboolean) (exec_yankdup) exec_yank exec_if () ())) ())) () ()))) ()) ())) () ()))
Zero cases best errors: [1 1 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 118
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 1 386 142 159 689 142 520 142 291)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (170 1 386 142 159 689 142 520 142 291)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction 88} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction -2} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 2, :instruction print_exec} {:close 0, :instruction tagged_275} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Best program: (in1 exec_empty print_integer integer_lt print_integer integer_yankdup boolean_swap boolean_swap boolean_empty boolean_dup in1 boolean_eq exec_do*range (boolean_pop in2) boolean_flush exec_do*count () integer_stackdepth integer_pop exec_while () 88 exec_flush boolean_pop integer_yank integer_fromboolean -2 boolean_yank print_newline integer_mod boolean_dup integer_dup_items exec_dup_items exec_do*while (integer_pop) integer_mult integer_mod boolean_dup integer_dup_items exec_dup_items exec_do*while (in1 integer_mult) boolean_shove boolean_dup_items exec_pop (integer_add) integer_min boolean_pop integer_mult exec_pop (print_exec ()) tagged_275 boolean_yankdup integer_sub integer_mod boolean_pop integer_dec boolean_rot integer_lt print_boolean exec_stackdepth boolean_not integer_min exec_k_when_autoconstructing () (integer_sub exec_do*range (exec_y (boolean_empty) boolean_or integer_div integer_lte exec_noop boolean_dup_times integer_stackdepth)))
Errors: [1 1 1 0 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 74
Size: 87
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 7.358
Median total errors in population: 7
Error averages by case: (0.83 0.999 0.614 0.858 0.841 0.311 0.858 0.48 0.858 0.709)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.373
Average program size in population (points): 44.805
Average percent parens in population: 0.271
Minimum age in population: 19.748046875
Maximum age in population: 24.23974609375
Average age in population: 22.31081237792969
Median age in population: 22.3326416015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 10304888
--- Timings ---
Current time: 1559584455015 milliseconds
Total Time:          53.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.4 seconds, 63.1%
Fitness Testing:     12.1 seconds, 22.7%
Report:               7.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 86                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 96                 
Correct output: 2                   | Program output: 79                 
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 99                 
Correct output: 19                  | Program output: 91                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -98                 | Program output: 88                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: 77                 
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 95                 
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 93                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: 12                 
Correct output: 5                   | Program output: 47                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: 72                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: 95                 
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: 27                 
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 76                 
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: 97                 
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 86                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 99                 
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 55                 
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 74                 
Correct output: -3                  | Program output: 85                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -29                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 65                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 19                 
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: 72                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 exec_pop (boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ())))) () ()))
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 exec_pop (boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ())))) () ()))
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (356 564 105 308 311 105 105 105 310 105)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (356 564 105 308 311 105 105 105 310 105)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_rot) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gte print_integer in3 in4 boolean_dup exec_yank tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 48
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 7.626
Median total errors in population: 8
Error averages by case: (0.644 0.436 0.895 0.692 0.689 0.895 0.895 0.895 0.69 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.786
Average program size in population (points): 41.918
Average percent parens in population: 0.255
Minimum age in population: 20.748046875
Maximum age in population: 25.77725219726562
Average age in population: 23.90892477416992
Median age in population: 24.0128173828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 10984480
--- Timings ---
Current time: 1559584458696 milliseconds
Total Time:          56.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.1 seconds, 63.7%
Fitness Testing:     12.7 seconds, 22.5%
Report:               7.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -12                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 86                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 66                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 50                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 70                 
Correct output: 28                  | Program output: 71                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 100                
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 64                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 87                 
Correct output: -81                 | Program output: 26                 
Correct output: -24                 | Program output: 51                 
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 98                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 98                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: 9                  
Correct output: -71                 | Program output: 16                 
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -41                
Correct output: -66                 | Program output: 38                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: 40                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 83                 
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 75                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: 82                 
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 56                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: 43                 
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: 54                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank})
Lexicase best program: (exec_yank integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_yankdup boolean_and print_integer exec_dup_items integer_empty integer_yankdup in4 integer_shove boolean_swap integer_div exec_do*count (exec_do*times () exec_do*count (integer_mod boolean_rot boolean_empty) exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 integer_add exec_noop integer_min integer_yank) ()))
Lexicase best errors: [1 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.178
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank})
Zero cases best program: (exec_yank integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_yankdup boolean_and print_integer exec_dup_items integer_empty integer_yankdup in4 integer_shove boolean_swap integer_div exec_do*count (exec_do*times () exec_do*count (integer_mod boolean_rot boolean_empty) exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 integer_add exec_noop integer_min integer_yank) ()))
Zero cases best errors: [1 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 100 355 267 101 100 267 350 101 117)
Population mean number of elite cases: 2.11
Count of perfect (error zero) individuals by case: (352 100 355 267 101 100 267 350 101 117)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_867} {:close 2, :instruction exec_swap})
Best program: (exec_yank integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_yankdup boolean_and print_integer exec_dup_items integer_empty integer_yankdup in4 integer_shove boolean_swap integer_div exec_do*count (exec_do*times () exec_do*count (integer_mod boolean_rot boolean_empty) exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 integer_add exec_noop integer_min integer_yank tagged_867 exec_swap () ()) ()))
Errors: [1 0 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 7.89
Median total errors in population: 8
Error averages by case: (0.648 0.9 0.645 0.733 0.899 0.9 0.733 0.65 0.899 0.883)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.617
Average program size in population (points): 41.493
Average percent parens in population: 0.253
Minimum age in population: 22.57666015625
Maximum age in population: 27.24679565429688
Average age in population: 25.37258836364746
Median age in population: 25.47865295410156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 11652415
--- Timings ---
Current time: 1559584462134 milliseconds
Total Time:          59.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.2 seconds, 63.9%
Fitness Testing:     13.4 seconds, 22.3%
Report:               8.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 96                 
Correct output: 27                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 99                 
Correct output: 29                  | Program output: 84                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 90                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 78                 
Correct output: 33                  | Program output: 66                 
Correct output: 4                   | Program output: 72                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: 78                 
Correct output: -97                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 32                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 32                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -9                 
Correct output: -86                 | Program output: 67                 
Correct output: -81                 | Program output: -28                
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 81                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: 73                 
Correct output: -79                 | Program output: 90                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: 55                 
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 85                 
Correct output: -75                 | Program output: 27                 
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: 57                 
Correct output: -85                 | Program output: 52                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 53                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 94                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: 41                 
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_452} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tagged_103} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y})
Lexicase best program: (exec_s () (integer_min exec_yank in1 exec_if (boolean_invert_first_then_and print_integer print_integer exec_s (boolean_and integer_fromboolean tag_integer_452 boolean_invert_first_then_and tagged_103) (boolean_flush boolean_yank boolean_invert_first_then_and exec_do*count (boolean_shove exec_y ())) ()) ()) ())
Lexicase best errors: [0 1 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.355
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_452} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tagged_103} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y})
Zero cases best program: (exec_s () (integer_min exec_yank in1 exec_if (boolean_invert_first_then_and print_integer print_integer exec_s (boolean_and integer_fromboolean tag_integer_452 boolean_invert_first_then_and tagged_103) (boolean_flush boolean_yank boolean_invert_first_then_and exec_do*count (boolean_shove exec_y ())) ()) ()) ())
Zero cases best errors: [0 1 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.355
--- Lexicase Population Statistics ---
Count of elite individuals by case: (816 221 307 394 803 86 90 87 222 221)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (816 221 307 394 803 86 90 87 222 221)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_867} {:close 2, :instruction exec_swap})
Best program: (integer_dup integer_mult boolean_xor boolean_rot exec_do*times () boolean_dup_items boolean_dup boolean_eq print_boolean integer_inc integer_inc exec_dup (integer_lte boolean_or integer_rot integer_lte in1 integer_stackdepth integer_empty boolean_frominteger integer_gte print_integer integer_dup in4 integer_mod boolean_rot boolean_empty) exec_do*count () integer_mod integer_max exec_y (integer_div integer_max in2 integer_add exec_noop integer_min integer_yank tagged_867 exec_swap () ()))
Errors: [0 1 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 40
Size: 47
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 6.753
Median total errors in population: 6
Error averages by case: (0.184 0.779 0.693 0.606 0.197 0.914 0.91 0.913 0.778 0.779)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.901
Average program size in population (points): 43.281
Average percent parens in population: 0.235
Minimum age in population: 23.9501953125
Maximum age in population: 28.604736328125
Average age in population: 26.94215175628662
Median age in population: 27.01297378540039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 12518538
--- Timings ---
Current time: 1559584465819 milliseconds
Total Time:          63.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.4 seconds, 63.7%
Fitness Testing:     14.2 seconds, 22.3%
Report:               8.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 96                 
Correct output: 27                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 99                 
Correct output: 29                  | Program output: 84                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 90                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 78                 
Correct output: 33                  | Program output: 66                 
Correct output: 4                   | Program output: 72                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: 78                 
Correct output: -97                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 32                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 32                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -9                 
Correct output: -86                 | Program output: 67                 
Correct output: -81                 | Program output: -28                
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 81                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: 73                 
Correct output: -79                 | Program output: 90                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: 55                 
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 85                 
Correct output: -75                 | Program output: 27                 
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: 57                 
Correct output: -85                 | Program output: 52                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 53                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 94                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: 41                 
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_103} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_265} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction 65} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_while})
Lexicase best program: (integer_min boolean_xor boolean_invert_first_then_and in1 print_integer exec_s (boolean_and integer_fromboolean boolean_eq boolean_invert_first_then_and tagged_103 integer_gte boolean_yank boolean_invert_first_then_and exec_do*count () boolean_shove exec_y (integer_lt tagged_265 boolean_yank boolean_eq) integer_add integer_lte) (integer_dup_items) (exec_rot (65) (exec_eq exec_dup_times (exec_pop (boolean_empty) exec_rot () (exec_do*range () boolean_not) (exec_empty exec_if () (exec_do*while (exec_do*times (exec_rot (boolean_stackdepth) (integer_yank) () exec_pop (exec_if () (exec_do*while () exec_do*times (integer_div) exec_while ())))))))) ()))
Lexicase best errors: [1 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_103} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_265} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction 65} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_while})
Zero cases best program: (integer_min boolean_xor boolean_invert_first_then_and in1 print_integer exec_s (boolean_and integer_fromboolean boolean_eq boolean_invert_first_then_and tagged_103 integer_gte boolean_yank boolean_invert_first_then_and exec_do*count () boolean_shove exec_y (integer_lt tagged_265 boolean_yank boolean_eq) integer_add integer_lte) (integer_dup_items) (exec_rot (65) (exec_eq exec_dup_times (exec_pop (boolean_empty) exec_rot () (exec_do*range () boolean_not) (exec_empty exec_if () (exec_do*while (exec_do*times (exec_rot (boolean_stackdepth) (integer_yank) () exec_pop (exec_if () (exec_do*while () exec_do*times (integer_div) exec_while ())))))))) ()))
Zero cases best errors: [1 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (111 440 277 442 276 444 442 111 442 2)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (111 440 277 442 276 444 442 111 442 2)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tagged_103} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty})
Best program: (exec_s () (exec_y (exec_dup_times (in1 exec_if (boolean_invert_first_then_and integer_dup_times print_integer exec_s (boolean_and integer_fromboolean integer_dup_times boolean_invert_first_then_and tagged_103) (boolean_flush boolean_dup_items boolean_invert_first_then_and exec_do*count (boolean_shove exec_y (integer_lt boolean_or boolean_yank exec_y (integer_add boolean_invert_second_then_and) integer_dup_items exec_rot () (boolean_shove exec_eq) (exec_dup_times (exec_pop (boolean_empty)))))) ()) ()))) ())
Errors: [1 0 1 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 52
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 7.013
Median total errors in population: 8
Error averages by case: (0.889 0.56 0.723 0.558 0.724 0.556 0.558 0.889 0.558 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.037
Average program size in population (points): 46.648
Average percent parens in population: 0.268
Minimum age in population: 25.1171875
Maximum age in population: 30.2885627746582
Average age in population: 28.43358574295044
Median age in population: 28.51531791687012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 13313477
--- Timings ---
Current time: 1559584469390 milliseconds
Total Time:          67.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.5 seconds, 63.5%
Fitness Testing:     14.9 seconds, 22.3%
Report:               9.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 96                 
Correct output: 2                   | Program output: 79                 
Correct output: 9                   | Program output: 12                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -48                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 50                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 12                 
Correct output: 5                   | Program output: 47                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -5                 
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: -54                
Correct output: -21                 | Program output: 27                 
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -23                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -47                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 53                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 56                 
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 11                 
Correct output: -72                 | Program output: -39                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: 84                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 65                 
Correct output: -67                 | Program output: -18                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [0 0 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [0 0 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (786 202 420 160 202 243 160 422 205 205)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (786 202 420 160 202 243 160 422 205 205)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Errors: [0 0 1 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 48
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.995
Median total errors in population: 7
Error averages by case: (0.214 0.798 0.58 0.84 0.798 0.757 0.84 0.578 0.795 0.795)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.704
Average program size in population (points): 47.302
Average percent parens in population: 0.265
Minimum age in population: 27.54890441894531
Maximum age in population: 31.70754051208496
Average age in population: 29.79916547584534
Median age in population: 29.82912635803223
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 14155905
--- Timings ---
Current time: 1559584472690 milliseconds
Total Time:          70.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.6 seconds, 63.2%
Fitness Testing:     15.7 seconds, 22.3%
Report:              10.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -12                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 86                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 66                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 50                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 70                 
Correct output: 28                  | Program output: 71                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 100                
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 64                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 87                 
Correct output: -81                 | Program output: 26                 
Correct output: -24                 | Program output: 51                 
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 98                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 98                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: 9                  
Correct output: -71                 | Program output: 16                 
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -41                
Correct output: -66                 | Program output: 38                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: 40                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 83                 
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 75                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: 82                 
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 56                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: 43                 
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: 54                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_867} {:close 2, :instruction exec_swap})
Lexicase best program: (exec_yank integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_yankdup boolean_and print_integer exec_dup_items integer_empty integer_yankdup in4 integer_shove boolean_swap in1 exec_do*count (exec_do*times () exec_do*count (integer_mod) integer_min boolean_empty) exec_do*count () integer_mod integer_max exec_y (integer_div exec_swap (in2 integer_add exec_noop integer_min integer_yank tagged_867 exec_swap () ()) ()))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_867} {:close 2, :instruction exec_swap})
Zero cases best program: (exec_yank integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_yankdup boolean_and print_integer exec_dup_items integer_empty integer_yankdup in4 integer_shove boolean_swap in1 exec_do*count (exec_do*times () exec_do*count (integer_mod) integer_min boolean_empty) exec_do*count () integer_mod integer_max exec_y (integer_div exec_swap (in2 integer_add exec_noop integer_min integer_yank tagged_867 exec_swap () ()) ()))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (400 188 402 190 393 188 203 410 400 187)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (400 188 402 190 393 188 203 410 400 187)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_867} {:close 2, :instruction exec_swap})
Best program: (exec_yank integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_yankdup boolean_and print_integer exec_pop (integer_empty integer_yankdup in4 integer_shove boolean_swap) in1 exec_do*count (exec_do*times () exec_do*count (integer_mod) boolean_rot boolean_empty) exec_do*count () integer_mod integer_max exec_y (integer_div exec_swap (in2 integer_add exec_noop integer_min integer_yank tagged_867 exec_swap () ()) ()))
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 7.039
Median total errors in population: 6
Error averages by case: (0.6 0.812 0.598 0.81 0.607 0.812 0.797 0.59 0.6 0.813)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.03
Average program size in population (points): 47.866
Average percent parens in population: 0.267
Minimum age in population: 28.60624694824219
Maximum age in population: 33.02689552307129
Average age in population: 31.11662549304962
Median age in population: 31.20741987228394
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 272
Genome diversity (% unique genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 282
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 15023612
--- Timings ---
Current time: 1559584476261 milliseconds
Total Time:          73.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.7 seconds, 63.2%
Fitness Testing:     16.6 seconds, 22.4%
Report:              10.6 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 96                 
Correct output: 2                   | Program output: 79                 
Correct output: 9                   | Program output: 12                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -48                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 50                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 12                 
Correct output: 5                   | Program output: 47                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -5                 
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: -54                
Correct output: -21                 | Program output: 27                 
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -23                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -47                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 53                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 56                 
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 11                 
Correct output: -72                 | Program output: -39                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: 84                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 65                 
Correct output: -67                 | Program output: -18                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_867})
Lexicase best program: (exec_yank integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_yankdup boolean_and print_integer exec_dup_items integer_empty integer_yankdup in4 integer_shove boolean_swap integer_div exec_do*count (exec_do*times () exec_do*count (integer_mod boolean_rot boolean_empty) exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 integer_add exec_noop integer_min integer_yank tagged_867) ()))
Lexicase best errors: [1 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 46
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_867})
Zero cases best program: (exec_yank integer_min boolean_xor exec_noop exec_noop boolean_stackdepth integer_rot integer_dup_items boolean_dup exec_stackdepth exec_yankdup boolean_and print_integer exec_dup_items integer_empty integer_yankdup in4 integer_shove boolean_swap integer_div exec_do*count (exec_do*times () exec_do*count (integer_mod boolean_rot boolean_empty) exec_do*count ()) integer_mod integer_max exec_y (integer_div exec_swap (in2 integer_add exec_noop integer_min integer_yank tagged_867) ()))
Zero cases best errors: [1 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 46
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 326 108 382 108 327 329 820 379 379)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (108 326 108 382 108 327 329 820 379 379)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Errors: [1 0 1 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 34
Size: 48
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.734
Median total errors in population: 6
Error averages by case: (0.892 0.674 0.892 0.618 0.892 0.673 0.671 0.18 0.621 0.621)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.102
Average program size in population (points): 48.063
Average percent parens in population: 0.248
Minimum age in population: 30.17507934570312
Maximum age in population: 34.50044584274292
Average age in population: 32.60600078058243
Median age in population: 32.6698694229126
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 16030724
--- Timings ---
Current time: 1559584479534 milliseconds
Total Time:          77.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.7 seconds, 62.9%
Fitness Testing:     17.5 seconds, 22.5%
Report:              11.2 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 96                 
Correct output: 2                   | Program output: 79                 
Correct output: 9                   | Program output: 12                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -48                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 50                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 12                 
Correct output: 5                   | Program output: 47                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -5                 
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: -54                
Correct output: -21                 | Program output: 27                 
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -23                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -47                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 53                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 56                 
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 11                 
Correct output: -72                 | Program output: -39                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: 84                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 65                 
Correct output: -67                 | Program output: -18                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [1 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [1 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (294 236 231 231 236 295 295 804 279 810)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (294 236 231 231 236 295 295 804 279 810)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min exec_k (exec_if () (exec_rot () () ())) ())) () ()))
Errors: [1 0 0 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 50
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 6.289
Median total errors in population: 5
Error averages by case: (0.706 0.764 0.769 0.769 0.764 0.705 0.705 0.196 0.721 0.19)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.322
Average program size in population (points): 47.488
Average percent parens in population: 0.256
Minimum age in population: 31.17507934570312
Maximum age in population: 35.85344362258911
Average age in population: 34.09794304561615
Median age in population: 34.1803013086319
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 16984768
--- Timings ---
Current time: 1559584482808 milliseconds
Total Time:          80.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.7 seconds, 62.8%
Fitness Testing:     18.4 seconds, 22.7%
Report:              11.6 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 96                 
Correct output: 2                   | Program output: 79                 
Correct output: 9                   | Program output: 12                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -48                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 50                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 12                 
Correct output: 5                   | Program output: 47                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -5                 
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: -54                
Correct output: -21                 | Program output: 27                 
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -23                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -47                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 53                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 56                 
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 11                 
Correct output: -72                 | Program output: -39                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: 84                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 65                 
Correct output: -67                 | Program output: -18                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (342 384 343 390 383 391 391 390 383 384)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (342 384 343 390 383 391 391 390 383 384)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 48
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.219
Median total errors in population: 8
Error averages by case: (0.658 0.616 0.657 0.61 0.617 0.609 0.609 0.61 0.617 0.616)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.523
Average program size in population (points): 46.186
Average percent parens in population: 0.274
Minimum age in population: 32.17507934570312
Maximum age in population: 37.45648682117462
Average age in population: 35.54535487771034
Median age in population: 35.61540997028351
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 17782026
--- Timings ---
Current time: 1559584486113 milliseconds
Total Time:          84.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 62.9%
Fitness Testing:     19.1 seconds, 22.8%
Report:              12.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 96                 
Correct output: 2                   | Program output: 79                 
Correct output: 9                   | Program output: 12                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -48                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 50                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 12                 
Correct output: 5                   | Program output: 47                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -5                 
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: -54                
Correct output: -21                 | Program output: 27                 
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -23                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -47                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 53                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 56                 
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 11                 
Correct output: -72                 | Program output: -39                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: 84                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 65                 
Correct output: -67                 | Program output: -18                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [0 0 1 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [0 0 1 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (622 620 1000 619 175 619 175 619 175 1000)
Population mean number of elite cases: 5.62
Count of perfect (error zero) individuals by case: (622 620 0 619 175 619 175 619 175 0)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_dup_items boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in4 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Errors: [0 0 1 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 48
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.376
Median total errors in population: 5
Error averages by case: (0.378 0.38 1.0 0.381 0.825 0.381 0.825 0.381 0.825 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 33.327
Average program size in population (points): 46.647
Average percent parens in population: 0.285
Minimum age in population: 33.90703582763672
Maximum age in population: 39.2548702955246
Average age in population: 37.00374929469824
Median age in population: 37.06539860367775
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 180
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 18497083
--- Timings ---
Current time: 1559584489208 milliseconds
Total Time:          87.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.8 seconds, 63.0%
Fitness Testing:     19.8 seconds, 22.7%
Report:              12.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 325 326 799 477 477 477 477 468 801)
Population mean number of elite cases: 5.63
Count of perfect (error zero) individuals by case: (0 325 326 799 477 477 477 477 468 801)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 5.373
Median total errors in population: 6
Error averages by case: (1.0 0.675 0.674 0.201 0.523 0.523 0.523 0.523 0.532 0.199)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.637
Average program size in population (points): 45.64
Average percent parens in population: 0.284
Minimum age in population: 35.730055809021
Maximum age in population: 40.65172669291496
Average age in population: 38.55302437835932
Median age in population: 38.63194100558758
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 19191855
--- Timings ---
Current time: 1559584492382 milliseconds
Total Time:          90.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.9 seconds, 63.1%
Fitness Testing:     20.5 seconds, 22.7%
Report:              12.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 519 1 784 1 519 1 519 519 519)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (1 519 1 784 1 519 1 519 519 519)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.617
Median total errors in population: 4
Error averages by case: (0.999 0.481 0.999 0.216 0.999 0.481 0.999 0.481 0.481 0.481)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.046
Average program size in population (points): 48.419
Average percent parens in population: 0.296
Minimum age in population: 37.11174297332764
Maximum age in population: 41.85239574313164
Average age in population: 40.45210959739983
Median age in population: 40.20960894972086
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 410
Genome diversity (% unique genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 417
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 19906062
--- Timings ---
Current time: 1559584495400 milliseconds
Total Time:          93.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.9 seconds, 63.1%
Fitness Testing:     21.2 seconds, 22.7%
Report:              13.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 143 144 605 1000 763 745 742 745 742)
Population mean number of elite cases: 5.77
Count of perfect (error zero) individuals by case: (142 143 144 605 0 763 745 742 745 742)
Population mean number of perfect (error zero) cases: 4.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 5.229
Median total errors in population: 4
Error averages by case: (0.858 0.857 0.856 0.395 1.0 0.237 0.255 0.258 0.255 0.258)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 33.997
Average program size in population (points): 48.92
Average percent parens in population: 0.305
Minimum age in population: 40.34350118041039
Maximum age in population: 43.36070448160172
Average age in population: 42.57433127186447
Median age in population: 42.19804680347443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 453
Genome diversity (% unique genomes):	 0.421
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 456
Syntactic diversity (% unique Push programs):	 0.415
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 20632221
--- Timings ---
Current time: 1559584498714 milliseconds
Total Time:          96.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.1 seconds, 63.2%
Fitness Testing:     21.9 seconds, 22.7%
Report:              13.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [1 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [1 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 787 193 787 789 1000 194 1 194 588)
Population mean number of elite cases: 5.53
Count of perfect (error zero) individuals by case: (0 787 193 787 789 0 194 1 194 588)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Errors: [1 0 0 0 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.467
Median total errors in population: 6
Error averages by case: (1.0 0.213 0.807 0.213 0.211 1.0 0.806 0.999 0.806 0.412)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 33.834
Average program size in population (points): 48.497
Average percent parens in population: 0.302
Minimum age in population: 41.34350118041039
Maximum age in population: 45.19804680347443
Average age in population: 43.8360630595088
Median age in population: 43.94804680347443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 300
Genome diversity (% unique genomes):	 0.434
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 311
Syntactic diversity (% unique Push programs):	 0.425
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 21333555
--- Timings ---
Current time: 1559584501881 milliseconds
Total Time:          99.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.1 seconds, 63.3%
Fitness Testing:     22.5 seconds, 22.6%
Report:              14.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if (exec_rot () () ()) ())) () ()))
Lexicase best errors: [1 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if (exec_rot () () ()) ())) () ()))
Zero cases best errors: [1 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 656 656 161 656 491 656 490 1000 491)
Population mean number of elite cases: 6.26
Count of perfect (error zero) individuals by case: (0 656 656 161 656 491 656 490 0 491)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_lte integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Errors: [1 0 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 5.743
Median total errors in population: 5
Error averages by case: (1.0 0.344 0.344 0.839 0.344 0.509 0.344 0.51 1.0 0.509)
Error minima by case: (1 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 32.968
Average program size in population (points): 46.622
Average percent parens in population: 0.289
Minimum age in population: 42.34350118041039
Maximum age in population: 47.07304680347443
Average age in population: 45.45026251996867
Median age in population: 45.57304680347443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 194
Genome diversity (% unique genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 21985896
--- Timings ---
Current time: 1559584504825 milliseconds
Total Time:         102.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.0 seconds, 63.3%
Fitness Testing:     23.2 seconds, 22.6%
Report:              14.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [0 1 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [0 1 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 564 777 778 197 1000 787 787 565 197)
Population mean number of elite cases: 5.85
Count of perfect (error zero) individuals by case: (199 564 777 778 197 0 787 787 565 197)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc)) (exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) ()))
Errors: [0 1 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 5.149
Median total errors in population: 4
Error averages by case: (0.801 0.436 0.223 0.222 0.803 1.0 0.213 0.213 0.435 0.803)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 34.006
Average program size in population (points): 48.555
Average percent parens in population: 0.299
Minimum age in population: 44.19804680347443
Maximum age in population: 48.51054680347443
Average age in population: 46.90420551082306
Median age in population: 46.94804680347443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 22685367
--- Timings ---
Current time: 1559584507862 milliseconds
Total Time:         105.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.0 seconds, 63.3%
Fitness Testing:     23.8 seconds, 22.5%
Report:              14.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [0 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (302 1000 302 768 1000 451 451 302 756 757)
Population mean number of elite cases: 6.09
Count of perfect (error zero) individuals by case: (302 0 302 768 0 451 451 302 756 757)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 37
Size: 52
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 5.911
Median total errors in population: 5
Error averages by case: (0.698 1.0 0.698 0.232 1.0 0.549 0.549 0.698 0.244 0.243)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 33.893
Average program size in population (points): 48.159
Average percent parens in population: 0.295
Minimum age in population: 45.19804680347443
Maximum age in population: 50.13991123111919
Average age in population: 48.3315834404747
Median age in population: 48.41024109697901
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 23375019
--- Timings ---
Current time: 1559584511029 milliseconds
Total Time:         108.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.1 seconds, 63.4%
Fitness Testing:     24.5 seconds, 22.5%
Report:              15.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (461 468 783 465 1000 464 465 770 1000 770)
Population mean number of elite cases: 6.65
Count of perfect (error zero) individuals by case: (461 468 783 465 0 464 465 770 0 770)
Population mean number of perfect (error zero) cases: 4.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (exec_do*count (boolean_xor exec_noop exec_noop exec_do*range (boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_yankdup exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))))))
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 47
Size: 61
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 5.354
Median total errors in population: 7
Error averages by case: (0.539 0.532 0.217 0.535 1.0 0.536 0.535 0.23 1.0 0.23)
Error minima by case: (0 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 33.904
Average program size in population (points): 48.229
Average percent parens in population: 0.295
Minimum age in population: 46.19804680347443
Maximum age in population: 51.62210401729681
Average age in population: 49.78259230034798
Median age in population: 49.85429680347443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 24056366
--- Timings ---
Current time: 1559584514187 milliseconds
Total Time:         112.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.1 seconds, 63.5%
Fitness Testing:     25.2 seconds, 22.5%
Report:              15.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min boolean_xor exec_noop boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () exec_yankdup exec_stackdepth exec_rot (boolean_and) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Lexicase best errors: [0 0 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min boolean_xor exec_noop boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () exec_yankdup exec_stackdepth exec_rot (boolean_and) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ()))
Zero cases best errors: [0 0 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (773 783 1000 782 1 1 774 1000 774 1)
Population mean number of elite cases: 5.89
Count of perfect (error zero) individuals by case: (773 783 0 782 1 1 774 0 774 1)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ())) () ()))
Errors: [0 0 1 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 37
Size: 58
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 6.111
Median total errors in population: 5
Error averages by case: (0.227 0.217 1.0 0.218 0.999 0.999 0.226 1.0 0.226 0.999)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 34.004
Average program size in population (points): 48.322
Average percent parens in population: 0.295
Minimum age in population: 48.19804680347443
Maximum age in population: 53.18346697837114
Average age in population: 51.28988416340621
Median age in population: 51.36896708438871
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 24730099
--- Timings ---
Current time: 1559584517296 milliseconds
Total Time:         115.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 63.5%
Fitness Testing:     25.8 seconds, 22.4%
Report:              16.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Lexicase best errors: [0 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Zero cases best errors: [0 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (240 512 505 240 1000 512 1000 1000 1 246)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (240 512 505 240 0 512 0 0 1 246)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Errors: [0 0 1 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 58
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 7.744
Median total errors in population: 7
Error averages by case: (0.76 0.488 0.495 0.76 1.0 0.488 1.0 1.0 0.999 0.754)
Error minima by case: (0 0 0 0 1 0 1 1 0 0)
Average genome size in population (length): 38.68
Average program size in population (points): 51.485
Average percent parens in population: 0.253
Minimum age in population: 50.26870009768754
Maximum age in population: 54.63646816683467
Average age in population: 52.58668008838681
Median age in population: 52.68904806976207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 188
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 25487855
--- Timings ---
Current time: 1559584520271 milliseconds
Total Time:         118.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.0 seconds, 63.5%
Fitness Testing:     26.5 seconds, 22.5%
Report:              16.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 58
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 58
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (476 605 470 166 605 606 166 470 471 1000)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (476 605 470 166 605 606 166 470 471 0)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Errors: [0 0 0 1 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 48
Size: 58
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 5.965
Median total errors in population: 5
Error averages by case: (0.524 0.395 0.53 0.834 0.395 0.394 0.834 0.53 0.529 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 43.944
Average program size in population (points): 55.528
Average percent parens in population: 0.212
Minimum age in population: 52.05742180347443
Maximum age in population: 55.91461860071286
Average age in population: 54.49777953665151
Median age in population: 54.41154144836764
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 319
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 320
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 26328571
--- Timings ---
Current time: 1559584523539 milliseconds
Total Time:         121.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.0 seconds, 63.4%
Fitness Testing:     27.3 seconds, 22.5%
Report:              17.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer integer_gt print_integer in2 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte) () ()))
Lexicase best errors: [1 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer integer_gt print_integer in2 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte) () ()))
Zero cases best errors: [1 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 489 730 489 1000 267 268 729 267)
Population mean number of elite cases: 6.24
Count of perfect (error zero) individuals by case: (0 0 489 730 489 0 267 268 729 267)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_lt boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if () (exec_rot () () ()))) () ())))
Errors: [1 1 1 0 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.761
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.511 0.27 0.511 1.0 0.733 0.732 0.271 0.733)
Error minima by case: (1 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 43.084
Average program size in population (points): 54.498
Average percent parens in population: 0.213
Minimum age in population: 53.35429680347443
Maximum age in population: 57.67567779828096
Average age in population: 56.06064625953548
Median age in population: 56.19933564081293
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 234
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 235
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 27150578
--- Timings ---
Current time: 1559584526793 milliseconds
Total Time:         124.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.0 seconds, 63.4%
Fitness Testing:     28.1 seconds, 22.5%
Report:              17.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_min exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if (exec_rot () () ()) ())) () ()))
Lexicase best errors: [0 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_166} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_min exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_166 exec_if (exec_rot () () ()) ())) () ()))
Zero cases best errors: [0 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (466 749 293 472 749 774 468 293 751 293)
Population mean number of elite cases: 5.31
Count of perfect (error zero) individuals by case: (466 749 293 472 749 774 468 293 751 293)
Population mean number of perfect (error zero) cases: 5.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Errors: [1 0 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 48
Size: 58
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 4.692
Median total errors in population: 3
Error averages by case: (0.534 0.251 0.707 0.528 0.251 0.226 0.532 0.707 0.249 0.707)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.782
Average program size in population (points): 51.105
Average percent parens in population: 0.245
Minimum age in population: 54.59321725275367
Maximum age in population: 59.2583048606466
Average age in population: 57.49016392653429
Median age in population: 57.55799806493815
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 27889050
--- Timings ---
Current time: 1559584530118 milliseconds
Total Time:         128.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.2 seconds, 63.5%
Fitness Testing:     28.8 seconds, 22.5%
Report:              17.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer integer_gt print_integer in2 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer integer_gt print_integer in2 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (764 411 414 764 764 411 762 1000 355 352)
Population mean number of elite cases: 6.00
Count of perfect (error zero) individuals by case: (764 411 414 764 764 411 762 0 355 352)
Population mean number of perfect (error zero) cases: 5.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_314} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot})
Best program: (integer_min boolean_xor exec_noop exec_noop exec_noop boolean_invert_first_then_and integer_rot boolean_not boolean_dup exec_stackdepth exec_rot (integer_inc) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2 in1 boolean_dup integer_min tag_boolean_314 exec_if (exec_rot () () ()) ())) () ()))
Errors: [0 0 0 0 0 0 0 1 1 1]
Total: 3
Mean: 0.3
Genome size: 35
Size: 49
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.003
Median total errors in population: 4
Error averages by case: (0.236 0.589 0.586 0.236 0.236 0.589 0.238 1.0 0.645 0.648)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 40.08
Average program size in population (points): 51.931
Average percent parens in population: 0.232
Minimum age in population: 55.59321725275367
Maximum age in population: 61.02858744806508
Average age in population: 58.97270692337323
Median age in population: 59.03824085087763
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 28637563
--- Timings ---
Current time: 1559584533334 milliseconds
Total Time:         131.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.3 seconds, 63.5%
Fitness Testing:     29.5 seconds, 22.4%
Report:              18.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Lexicase best errors: [0 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Zero cases best errors: [0 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 607 1000 530 367 524 363 610 1000 1000)
Population mean number of elite cases: 6.37
Count of perfect (error zero) individuals by case: (367 607 0 530 367 524 363 610 0 0)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Errors: [0 0 1 1 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 48
Size: 58
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 6.632
Median total errors in population: 6
Error averages by case: (0.633 0.393 1.0 0.47 0.633 0.476 0.637 0.39 1.0 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 1 1)
Average genome size in population (length): 40.688
Average program size in population (points): 52.487
Average percent parens in population: 0.229
Minimum age in population: 57.61417646252085
Maximum age in population: 62.15541030343593
Average age in population: 60.47779075990352
Median age in population: 60.49809617747087
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 29409451
--- Timings ---
Current time: 1559584536565 milliseconds
Total Time:         134.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.4 seconds, 63.5%
Fitness Testing:     30.2 seconds, 22.5%
Report:              18.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and in3 exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and in3 exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 426 755 546 465 465 1000 546 558 1000)
Population mean number of elite cases: 6.76
Count of perfect (error zero) individuals by case: (0 426 755 546 465 465 0 546 558 0)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min integer_lte integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (integer_mod exec_do*count (integer_gte integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in1 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2))
Errors: [1 1 0 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 50
Size: 57
Percent parens: 0.123
--- Population Statistics ---
Average total errors in population: 6.239
Median total errors in population: 5
Error averages by case: (1.0 0.574 0.245 0.454 0.535 0.535 1.0 0.454 0.442 1.0)
Error minima by case: (1 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 43.986
Average program size in population (points): 54.675
Average percent parens in population: 0.198
Minimum age in population: 59.31016816661577
Maximum age in population: 63.72958220095006
Average age in population: 62.00923021109385
Median age in population: 62.13137846084373
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 30225576
--- Timings ---
Current time: 1559584539753 milliseconds
Total Time:         137.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.3 seconds, 63.5%
Fitness Testing:     30.9 seconds, 22.5%
Report:              19.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 63
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 63
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (308 749 1000 593 590 722 757 590 1000 308)
Population mean number of elite cases: 6.62
Count of perfect (error zero) individuals by case: (308 749 0 593 590 722 757 590 0 308)
Population mean number of perfect (error zero) cases: 4.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (integer_eq exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2))
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 49
Size: 56
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 5.383
Median total errors in population: 4
Error averages by case: (0.692 0.251 1.0 0.407 0.41 0.278 0.243 0.41 1.0 0.692)
Error minima by case: (0 0 1 0 0 0 0 0 1 0)
Average genome size in population (length): 44.458
Average program size in population (points): 54.945
Average percent parens in population: 0.192
Minimum age in population: 60.88582153610332
Maximum age in population: 65.0932635672757
Average age in population: 63.45392610985096
Median age in population: 63.54387741439905
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 31037732
--- Timings ---
Current time: 1559584542985 milliseconds
Total Time:         140.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.4 seconds, 63.5%
Fitness Testing:     31.7 seconds, 22.5%
Report:              19.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer) (in2) ()))
Lexicase best errors: [1 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.169
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer) (in2) ()))
Zero cases best errors: [1 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.169
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 705 710 14 728 728 18 717 730 1000)
Population mean number of elite cases: 6.35
Count of perfect (error zero) individuals by case: (0 705 710 14 728 728 18 717 730 0)
Population mean number of perfect (error zero) cases: 4.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (integer_add) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Errors: [1 0 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 55
Size: 65
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 5.65
Median total errors in population: 4
Error averages by case: (1.0 0.295 0.29 0.986 0.272 0.272 0.982 0.283 0.27 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 47.363
Average program size in population (points): 57.312
Average percent parens in population: 0.173
Minimum age in population: 61.88582153610332
Maximum age in population: 66.85879321747598
Average age in population: 64.88865692873244
Median age in population: 64.96998340773337
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 31924415
--- Timings ---
Current time: 1559584546471 milliseconds
Total Time:         144.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.5 seconds, 63.4%
Fitness Testing:     32.5 seconds, 22.5%
Report:              20.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_eq boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Lexicase best errors: [0 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot integer_eq boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Zero cases best errors: [0 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (743 430 1000 310 1000 431 1000 701 1000 432)
Population mean number of elite cases: 7.05
Count of perfect (error zero) individuals by case: (743 430 0 310 0 431 0 701 0 432)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer exec_while ()) () ()))
Errors: [0 0 1 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 59
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 6.953
Median total errors in population: 7
Error averages by case: (0.257 0.57 1.0 0.69 1.0 0.569 1.0 0.299 1.0 0.568)
Error minima by case: (0 0 1 0 1 0 1 0 1 0)
Average genome size in population (length): 45.392
Average program size in population (points): 55.325
Average percent parens in population: 0.179
Minimum age in population: 62.88582153610332
Maximum age in population: 68.2242563576259
Average age in population: 66.38645576489724
Median age in population: 66.43368400065856
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 204
Genome diversity (% unique genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 32761329
--- Timings ---
Current time: 1559584549616 milliseconds
Total Time:         147.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.5 seconds, 63.4%
Fitness Testing:     33.3 seconds, 22.5%
Report:              20.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth) () ()))
Lexicase best errors: [0 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth) () ()))
Zero cases best errors: [0 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (740 1 746 178 1000 176 550 550 548 746)
Population mean number of elite cases: 5.24
Count of perfect (error zero) individuals by case: (740 1 746 178 0 176 550 550 548 746)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (boolean_and exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2))
Errors: [0 1 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 55
Percent parens: 0.127
--- Population Statistics ---
Average total errors in population: 5.765
Median total errors in population: 4
Error averages by case: (0.26 0.999 0.254 0.822 1.0 0.824 0.45 0.45 0.452 0.254)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 46.158
Average program size in population (points): 56.074
Average percent parens in population: 0.176
Minimum age in population: 65.12356036052324
Maximum age in population: 69.6148209126676
Average age in population: 67.83162318554767
Median age in population: 67.9415559555091
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.145
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 33625787
--- Timings ---
Current time: 1559584553120 milliseconds
Total Time:         151.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.7 seconds, 63.4%
Fitness Testing:     34.0 seconds, 22.5%
Report:              21.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 53
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 53
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (584 684 277 277 278 457 678 1000 388 277)
Population mean number of elite cases: 4.90
Count of perfect (error zero) individuals by case: (584 684 277 277 278 457 678 0 388 277)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Errors: [0 0 0 0 0 1 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 43
Size: 53
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 6.1
Median total errors in population: 5
Error averages by case: (0.416 0.316 0.723 0.723 0.722 0.543 0.322 1.0 0.612 0.723)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 45.193
Average program size in population (points): 54.694
Average percent parens in population: 0.173
Minimum age in population: 66.34916026146311
Maximum age in population: 71.21452691993352
Average age in population: 69.23113868103611
Median age in population: 69.26188655085224
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 34445498
--- Timings ---
Current time: 1559584556363 milliseconds
Total Time:         154.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.8 seconds, 63.4%
Fitness Testing:     34.8 seconds, 22.6%
Report:              21.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop integer_yank integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Lexicase best errors: [1 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 53
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop integer_yank integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Zero cases best errors: [1 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 53
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 476 1000 1000 660 478 735 476 657 660)
Population mean number of elite cases: 7.14
Count of perfect (error zero) individuals by case: (0 476 0 0 660 478 735 476 657 660)
Population mean number of perfect (error zero) cases: 4.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (boolean_rot integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Errors: [1 0 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 43
Size: 53
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 5.858
Median total errors in population: 6
Error averages by case: (1.0 0.524 1.0 1.0 0.34 0.522 0.265 0.524 0.343 0.34)
Error minima by case: (1 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 44.646
Average program size in population (points): 54.549
Average percent parens in population: 0.181
Minimum age in population: 67.34916026146311
Maximum age in population: 72.48045996555483
Average age in population: 70.68899458273756
Median age in population: 70.7300361792954
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 35275143
--- Timings ---
Current time: 1559584559544 milliseconds
Total Time:         157.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.8 seconds, 63.4%
Fitness Testing:     35.5 seconds, 22.6%
Report:              22.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (boolean_empty integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 51
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (boolean_empty integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (722 725 723 718 722 756 698 697 763 1000)
Population mean number of elite cases: 7.52
Count of perfect (error zero) individuals by case: (722 725 723 718 722 756 698 697 763 0)
Population mean number of perfect (error zero) cases: 6.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor exec_noop exec_noop exec_do*count (integer_rot exec_dup_times () boolean_dup exec_rot (boolean_xor) () (exec_shove (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2))))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 41
Size: 50
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 3.476
Median total errors in population: 1
Error averages by case: (0.278 0.275 0.277 0.282 0.278 0.244 0.302 0.303 0.237 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 43.283
Average program size in population (points): 53.121
Average percent parens in population: 0.185
Minimum age in population: 69.2761049062496
Maximum age in population: 73.9264333024861
Average age in population: 72.12988316267705
Median age in population: 72.18738797597916
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 178
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 36062905
--- Timings ---
Current time: 1559584562810 milliseconds
Total Time:         160.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.1 seconds, 63.5%
Fitness Testing:     36.3 seconds, 22.6%
Report:              22.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 86                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 96                 
Correct output: 2                   | Program output: 79                 
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 99                 
Correct output: 19                  | Program output: 91                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -98                 | Program output: 88                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: 77                 
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 95                 
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 93                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: 12                 
Correct output: 5                   | Program output: 47                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: 72                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: 95                 
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: 27                 
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 76                 
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: 97                 
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 86                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 99                 
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 55                 
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 74                 
Correct output: -3                  | Program output: 85                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -29                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 65                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 19                 
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: 72                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction 59} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot exec_s_when_autoconstructing (in1 in2 boolean_dup in1 integer_stackdepth 59 boolean_frominteger integer_gt integer_min) (in3 integer_swap boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) ())) () ()))
Lexicase best errors: [0 1 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction 59} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot exec_s_when_autoconstructing (in1 in2 boolean_dup in1 integer_stackdepth 59 boolean_frominteger integer_gt integer_min) (in3 integer_swap boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) ())) () ()))
Zero cases best errors: [0 1 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (21 705 23 687 1000 21 21 21 708 21)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (21 705 23 687 0 21 21 21 708 21)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor exec_noop integer_flush boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Errors: [0 1 0 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 7.772
Median total errors in population: 7
Error averages by case: (0.979 0.295 0.977 0.313 1.0 0.979 0.979 0.979 0.292 0.979)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 43.205
Average program size in population (points): 52.973
Average percent parens in population: 0.184
Minimum age in population: 70.48825151850173
Maximum age in population: 75.62229978129854
Average age in population: 73.52659052534365
Median age in population: 73.61487370869673
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 36833017
--- Timings ---
Current time: 1559584565744 milliseconds
Total Time:         163.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.9 seconds, 63.5%
Fitness Testing:     37.0 seconds, 22.6%
Report:              22.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)) (in3 integer_lte boolean_invert_second_then_and print_integer in2) ()))
Lexicase best errors: [0 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)) (in3 integer_lte boolean_invert_second_then_and print_integer in2) ()))
Zero cases best errors: [0 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (272 610 501 272 272 298 1000 149 167 272)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (272 610 501 272 272 298 0 149 167 272)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Errors: [0 1 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 43
Size: 53
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 7.187
Median total errors in population: 8
Error averages by case: (0.728 0.39 0.499 0.728 0.728 0.702 1.0 0.851 0.833 0.728)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 43.119
Average program size in population (points): 53.344
Average percent parens in population: 0.191
Minimum age in population: 73.03521930881291
Maximum age in population: 76.89449993923925
Average age in population: 75.19906818466973
Median age in population: 75.25926489045735
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 37571810
--- Timings ---
Current time: 1559584568867 milliseconds
Total Time:         166.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       106.0 seconds, 63.5%
Fitness Testing:     37.7 seconds, 22.6%
Report:              23.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 86                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 66                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 50                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 70                 
Correct output: 28                  | Program output: 71                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 100                
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: 77                 
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 98                 
Correct output: -100                | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 98                 
Correct output: -54                 | Program output: 72                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: 16                 
Correct output: -80                 | Program output: 95                 
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: 27                 
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: 76                 
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output:                    
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 75                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -29                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: 65                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: 19                 
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: 72                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor exec_pop (exec_noop exec_noop boolean_invert_first_then_and) integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_dup_times boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_lte print_integer in2) () ()))
Lexicase best errors: [1 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor exec_pop (exec_noop exec_noop boolean_invert_first_then_and) integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_dup_times boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_lte print_integer in2) () ()))
Zero cases best errors: [1 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 289 648 1000 426 720 795 291 702 1000)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (76 289 648 0 426 720 795 291 702 0)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor exec_pop (exec_noop exec_noop boolean_invert_first_then_and) integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_dup_times boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_lte print_integer in2) () ()))
Errors: [1 0 0 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 43
Size: 54
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 6.053
Median total errors in population: 5
Error averages by case: (0.924 0.711 0.352 1.0 0.574 0.28 0.205 0.709 0.298 1.0)
Error minima by case: (0 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 42.774
Average program size in population (points): 52.929
Average percent parens in population: 0.190
Minimum age in population: 74.03521930881291
Maximum age in population: 78.23443943170399
Average age in population: 76.4220759226106
Median age in population: 76.4816849056905
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 38326189
--- Timings ---
Current time: 1559584572295 milliseconds
Total Time:         170.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.3 seconds, 63.6%
Fitness Testing:     38.4 seconds, 22.5%
Report:              23.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor exec_pop (exec_noop exec_eq boolean_invert_first_then_and) integer_rot exec_dup_times () boolean_dup integer_flush exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Lexicase best errors: [0 0 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 58
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor exec_pop (exec_noop exec_eq boolean_invert_first_then_and) integer_rot exec_dup_times () boolean_dup integer_flush exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Zero cases best errors: [0 0 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 58
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (545 544 796 250 1 250 713 710 171 172)
Population mean number of elite cases: 4.15
Count of perfect (error zero) individuals by case: (545 544 796 250 1 250 713 710 171 172)
Population mean number of perfect (error zero) cases: 4.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) exec_stackdepth integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ())))
Errors: [0 0 0 0 1 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 47
Size: 57
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 5.848
Median total errors in population: 5
Error averages by case: (0.455 0.456 0.204 0.75 0.999 0.75 0.287 0.29 0.829 0.828)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.444
Average program size in population (points): 50.994
Average percent parens in population: 0.182
Minimum age in population: 75.5032592074729
Maximum age in population: 79.67345275783495
Average age in population: 77.96365326344495
Median age in population: 77.99864636255575
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 39071674
--- Timings ---
Current time: 1559584575460 milliseconds
Total Time:         173.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       110.3 seconds, 63.6%
Fitness Testing:     39.1 seconds, 22.5%
Report:              23.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_dup boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ())))
Lexicase best errors: [0 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 60
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_dup boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ())))
Zero cases best errors: [0 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 60
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (299 114 301 113 323 113 711 300 299 297)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (299 114 301 113 323 113 711 300 299 297)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ())))
Errors: [0 1 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 60
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.13
Median total errors in population: 8
Error averages by case: (0.701 0.886 0.699 0.887 0.677 0.887 0.289 0.7 0.701 0.703)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.053
Average program size in population (points): 55.017
Average percent parens in population: 0.180
Minimum age in population: 77.16561174387166
Maximum age in population: 81.27596968402601
Average age in population: 80.03275245668596
Median age in population: 79.94027455764031
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 39882165
--- Timings ---
Current time: 1559584578649 milliseconds
Total Time:         176.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       112.3 seconds, 63.6%
Fitness Testing:     39.8 seconds, 22.6%
Report:              24.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor integer_min boolean_xor exec_pop (exec_noop exec_noop boolean_invert_first_then_and) integer_rot exec_dup_times () integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_stackdepth boolean_stackdepth in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Lexicase best errors: [1 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor integer_min boolean_xor exec_pop (exec_noop exec_noop boolean_invert_first_then_and) integer_rot exec_dup_times () integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_stackdepth boolean_stackdepth in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Zero cases best errors: [1 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 284 234 458 233 260 284 260 234 260)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (283 284 234 458 233 260 284 260 234 260)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank})
Best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_if () () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 boolean_frominteger integer_gt print_integer integer_yank) () ()))
Errors: [1 1 0 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 41
Size: 52
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 7.21
Median total errors in population: 7
Error averages by case: (0.717 0.716 0.766 0.542 0.767 0.74 0.716 0.74 0.766 0.74)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.247
Average program size in population (points): 54.507
Average percent parens in population: 0.208
Minimum age in population: 79.75085516651357
Maximum age in population: 83.03536020102533
Average age in population: 81.8485231186764
Median age in population: 81.92951071964477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 40671757
--- Timings ---
Current time: 1559584581851 milliseconds
Total Time:         179.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       114.3 seconds, 63.6%
Fitness Testing:     40.6 seconds, 22.6%
Report:              24.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 96                 
Correct output: 2                   | Program output: 79                 
Correct output: 9                   | Program output: 12                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -48                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 50                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 12                 
Correct output: 5                   | Program output: 47                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -5                 
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: -54                
Correct output: -21                 | Program output: 27                 
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -23                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -47                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 53                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 56                 
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 11                 
Correct output: -72                 | Program output: -39                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: 84                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 65                 
Correct output: -67                 | Program output: -18                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in4 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ()) () ()))
Lexicase best errors: [1 0 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in4 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ()) () ()))
Zero cases best errors: [1 0 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (393 431 378 240 433 239 240 389 378 752)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (393 431 378 240 433 239 240 389 378 752)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in4 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ()) () ()))
Errors: [1 0 1 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 51
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.127
Median total errors in population: 5
Error averages by case: (0.607 0.569 0.622 0.76 0.567 0.761 0.76 0.611 0.622 0.248)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.842
Average program size in population (points): 52.83
Average percent parens in population: 0.207
Minimum age in population: 80.91105530145936
Maximum age in population: 84.7499612676792
Average age in population: 83.45145013144818
Median age in population: 83.52936013734902
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 41434196
--- Timings ---
Current time: 1559584585026 milliseconds
Total Time:         182.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       116.4 seconds, 63.6%
Fitness Testing:     41.2 seconds, 22.5%
Report:              25.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop integer_stackdepth boolean_invert_first_then_and boolean_xor exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ()) () ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop integer_stackdepth boolean_invert_first_then_and boolean_xor exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ()) () ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (276 588 311 311 771 589 588 311 276 317)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (276 588 311 311 771 589 588 311 276 317)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor integer_min boolean_xor boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger boolean_dup print_integer in2) () ()))
Errors: [1 0 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 43
Size: 53
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 5.662
Median total errors in population: 5
Error averages by case: (0.724 0.412 0.689 0.689 0.229 0.411 0.412 0.689 0.724 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.249
Average program size in population (points): 52.438
Average percent parens in population: 0.214
Minimum age in population: 81.99346906960615
Maximum age in population: 86.62675107992865
Average age in population: 84.95878927853599
Median age in population: 85.02936013734902
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 165
Genome diversity (% unique genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 42206034
--- Timings ---
Current time: 1559584588223 milliseconds
Total Time:         186.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       118.5 seconds, 63.7%
Fitness Testing:     42.0 seconds, 22.5%
Report:              25.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 53
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 53
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (784 453 778 464 348 348 594 750 455 348)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (784 453 778 464 348 348 594 750 455 348)
Population mean number of perfect (error zero) cases: 5.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in1 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ())))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 50
Size: 60
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 4.678
Median total errors in population: 4
Error averages by case: (0.216 0.547 0.222 0.536 0.652 0.652 0.406 0.25 0.545 0.652)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.832
Average program size in population (points): 52.776
Average percent parens in population: 0.208
Minimum age in population: 82.99346906960615
Maximum age in population: 88.15436013734902
Average age in population: 86.34596651581253
Median age in population: 86.38685145506015
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.01
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 42987848
--- Timings ---
Current time: 1559584591620 milliseconds
Total Time:         189.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       120.7 seconds, 63.7%
Fitness Testing:     42.7 seconds, 22.5%
Report:              26.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_388} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop exec_noop tagged_388 integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger) () ())))
Lexicase best errors: [1 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_388} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop exec_noop tagged_388 integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger) () ())))
Zero cases best errors: [1 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (504 313 648 314 505 312 503 646 646 314)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (504 313 648 314 505 312 503 646 646 314)
Population mean number of perfect (error zero) cases: 4.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor integer_min boolean_xor boolean_xor exec_noop exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ())))
Errors: [1 0 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 52
Size: 62
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 5.295
Median total errors in population: 4
Error averages by case: (0.496 0.687 0.352 0.686 0.495 0.688 0.497 0.354 0.354 0.686)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.49
Average program size in population (points): 53.525
Average percent parens in population: 0.186
Minimum age in population: 83.99346906960615
Maximum age in population: 89.87620467091237
Average age in population: 87.72294896207792
Median age in population: 87.80597731251112
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 43766123
--- Timings ---
Current time: 1559584594939 milliseconds
Total Time:         192.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       122.8 seconds, 63.7%
Fitness Testing:     43.4 seconds, 22.5%
Report:              26.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ())))
Lexicase best errors: [1 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ())))
Zero cases best errors: [1 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (454 1000 430 560 428 1000 560 564 428 561)
Population mean number of elite cases: 5.99
Count of perfect (error zero) individuals by case: (454 0 430 560 428 0 560 564 428 561)
Population mean number of perfect (error zero) cases: 3.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ())))
Errors: [1 1 0 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 51
Size: 64
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 6.015
Median total errors in population: 5
Error averages by case: (0.546 1.0 0.57 0.44 0.572 1.0 0.44 0.436 0.572 0.439)
Error minima by case: (0 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 42.519
Average program size in population (points): 52.89
Average percent parens in population: 0.196
Minimum age in population: 85.75781886847005
Maximum age in population: 91.21742116892707
Average age in population: 89.19523192963948
Median age in population: 89.2940855005685
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.711
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 44539818
--- Timings ---
Current time: 1559584598146 milliseconds
Total Time:         196.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.8 seconds, 63.7%
Fitness Testing:     44.1 seconds, 22.5%
Report:              27.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 50                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 44                 
Correct output: 19                  | Program output: 71                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -33                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: 13                 
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -19                
Correct output: -79                 | Program output: 87                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 90                 
Correct output: -85                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_while () boolean_dup exec_stackdepth exec_rot (exec_rot () (boolean_xor) () exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ()) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_while () boolean_dup exec_stackdepth exec_rot (exec_rot () (boolean_xor) () exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ()) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (241 767 616 627 242 241 592 245 1000 591)
Population mean number of elite cases: 5.16
Count of perfect (error zero) individuals by case: (241 767 616 627 242 241 592 245 0 591)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ()) () ()))
Errors: [0 0 0 0 0 0 1 0 1 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 51
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.838
Median total errors in population: 5
Error averages by case: (0.759 0.233 0.384 0.373 0.758 0.759 0.408 0.755 1.0 0.409)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 45.138
Average program size in population (points): 55.33
Average percent parens in population: 0.184
Minimum age in population: 87.81171977388561
Maximum age in population: 92.646868670137
Average age in population: 90.69371568412463
Median age in population: 90.78615589898396
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 45369927
--- Timings ---
Current time: 1559584601320 milliseconds
Total Time:         199.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.8 seconds, 63.6%
Fitness Testing:     44.9 seconds, 22.5%
Report:              27.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1})
Lexicase best program: (integer_min boolean_xor boolean_xor integer_min boolean_xor boolean_xor exec_noop exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1) () ())))
Lexicase best errors: [1 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1})
Zero cases best program: (integer_min boolean_xor boolean_xor integer_min boolean_xor boolean_xor exec_noop exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1) () ())))
Zero cases best errors: [1 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 435 621 621 748 436 422 423 423 437)
Population mean number of elite cases: 5.57
Count of perfect (error zero) individuals by case: (0 435 621 621 748 436 422 423 423 437)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop exec_noop boolean_invert_first_then_and integer_rot exec_dup_times (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 boolean_eq boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer boolean_invert_first_then_and) () ())))
Errors: [1 0 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 60
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 5.434
Median total errors in population: 4
Error averages by case: (1.0 0.565 0.379 0.379 0.252 0.564 0.578 0.577 0.577 0.563)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.378
Average program size in population (points): 49.944
Average percent parens in population: 0.188
Minimum age in population: 88.81171977388561
Maximum age in population: 93.91930992302215
Average age in population: 92.10570321266661
Median age in population: 92.15538575686413
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 46073254
--- Timings ---
Current time: 1559584604421 milliseconds
Total Time:         202.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.8 seconds, 63.7%
Fitness Testing:     45.5 seconds, 22.5%
Report:              27.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 81                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 35                 
Correct output: 15                  | Program output: 27                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 50                 
Correct output: 4                   | Program output: 43                 
Correct output: -24                 | Program output: 89                 
Correct output: -57                 | Program output: -2                 
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -5                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 0                  
Correct output: -81                 | Program output: -68                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 41                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -14                
Correct output: -71                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 10                 
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -31                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: 25                 
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -24                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction 30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor print_boolean integer_inc integer_inc exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) 30 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2)
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.059
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction 30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor print_boolean integer_inc integer_inc exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) 30 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2)
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.059
--- Lexicase Population Statistics ---
Count of elite individuals by case: (412 482 412 545 412 545 412 482 482 489)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (412 482 412 545 412 545 412 482 482 489)
Population mean number of perfect (error zero) cases: 4.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction 30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_min boolean_xor boolean_xor print_boolean integer_inc integer_inc exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) 30 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2)
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 34
Percent parens: 0.059
--- Population Statistics ---
Average total errors in population: 5.327
Median total errors in population: 4
Error averages by case: (0.588 0.518 0.588 0.455 0.588 0.455 0.588 0.518 0.518 0.511)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.661
Average program size in population (points): 52.754
Average percent parens in population: 0.190
Minimum age in population: 90.76386929078033
Maximum age in population: 95.80575313345658
Average age in population: 93.5581109148386
Median age in population: 93.58355449964155
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 46841933
--- Timings ---
Current time: 1559584607636 milliseconds
Total Time:         205.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.0 seconds, 63.7%
Fitness Testing:     46.2 seconds, 22.5%
Report:              28.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -51                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 22                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 28                 
Correct output: 25                  | Program output: 34                 
Correct output: 19                  | Program output: 22                 
Correct output: 19                  | Program output: 68                 
Correct output: 15                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 67                 
Correct output: 28                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 77                 
Correct output: -81                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 9                  
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 31                 
Correct output: 20                  | Program output: 56                 
Correct output: -54                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -79                
Correct output: -95                 | Program output: -74                
Correct output: -66                 | Program output: 35                 
Correct output: -21                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -12                
Correct output: -15                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: 51                 
Correct output: -46                 | Program output: 60                 
Correct output: -3                  | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: 24                 
Correct output: -67                 | Program output: -15                
Correct output: -49                 | Program output: 38                 
Correct output: -85                 | Program output: -56                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_while () integer_dup exec_stackdepth exec_rot (exec_noop exec_noop boolean_invert_first_then_and) (boolean_xor exec_dup_times () boolean_dup integer_dup_items exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ()) () ())) ())
Lexicase best errors: [0 0 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_while () integer_dup exec_stackdepth exec_rot (exec_noop exec_noop boolean_invert_first_then_and) (boolean_xor exec_dup_times () boolean_dup integer_dup_items exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ()) () ())) ())
Zero cases best errors: [0 0 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (351 773 568 350 351 549 1000 550 1000 568)
Population mean number of elite cases: 6.06
Count of perfect (error zero) individuals by case: (351 773 568 350 351 549 0 550 0 568)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_flush boolean_xor boolean_xor exec_noop exec_noop integer_fromboolean boolean_xor exec_dup_times () boolean_dup exec_stackdepth exec_rot (boolean_dup exec_stackdepth exec_rot (boolean_xor) () (exec_rot (exec_do*count (print_boolean integer_inc integer_inc) exec_dup (integer_lte boolean_invert_second_then_and integer_rot integer_lte integer_gt print_integer in3 in2 boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and integer_rot integer_lte in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt print_integer in2) () ())) () ())
Errors: [0 0 1 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 52
Size: 65
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.94
Median total errors in population: 5
Error averages by case: (0.649 0.227 0.432 0.65 0.649 0.451 1.0 0.45 1.0 0.432)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 41.115
Average program size in population (points): 50.332
Average percent parens in population: 0.179
Minimum age in population: 92.48700562354546
Maximum age in population: 97.1052106853575
Average age in population: 95.05305710113115
Median age in population: 95.14508547275453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 47553163
--- Timings ---
Current time: 1559584611438 milliseconds
Total Time:         209.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.6 seconds, 63.9%
Fitness Testing:     46.9 seconds, 22.4%
Report:              28.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -88                 | Program output: 28                 
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: 9                  
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: 9                  
Correct output: -90                 | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 55                 
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 91                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 31                 
Correct output: 16                  | Program output: 62                 
Correct output: 69                  | Program output: 71                 
Correct output: 29                  | Program output: 91                 
Correct output: 42                  | Program output: 83                 
Correct output: 13                  | Program output: 100                
Correct output: 2                   | Program output: 81                 
Correct output: 9                   | Program output: 12                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 100                
Correct output: 28                  | Program output: 68                 
Correct output: 11                  | Program output: 41                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: -24                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 28                 
Correct output: -90                 | Program output: -48                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -6                 
Correct output: 24                  | Program output: 55                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: 11                 
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 50                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 46                 
Correct output: 5                   | Program output: 56                 
Correct output: 20                  | Program output: 64                 
Correct output: -54                 | Program output: 51                 
Correct output: -75                 | Program output: -34                
Correct output: -71                 | Program output: -49                
Correct output: -80                 | Program output: -5                 
Correct output: -95                 | Program output: 44                 
Correct output: -66                 | Program output: -54                
Correct output: -21                 | Program output: 49                 
Correct output: -100                | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: 5                  
Correct output: -40                 | Program output: -12                
Correct output: -93                 | Program output: -23                
Correct output: -15                 | Program output: 48                 
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -47                
Correct output: 22                  | Program output: 40                 
Correct output: 15                  | Program output: 27                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 53                 
Correct output: -85                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 47                 
Correct output: -44                 | Program output: 56                 
Correct output: -67                 | Program output: 89                 
Correct output: 7                   | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 11                 
Correct output: -72                 | Program output: -39                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: 84                 
Correct output: -79                 | Program output: 28                 
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -70                
Correct output: -49                 | Program output: 33                 
Correct output: -25                 | Program output: 98                 
Correct output: -67                 | Program output: -18                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -27                
Correct output: -46                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ())
Lexicase best errors: [0 0 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.128
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ())
Zero cases best errors: [0 0 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 761 1 563 1 562 562 1 1 448)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (1 761 1 563 1 562 562 1 1 448)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) in3 integer_lte boolean_invert_second_then_and boolean_stackdepth boolean_frominteger exec_swap (print_integer in2) ())
Errors: [0 0 0 1 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 34
Size: 39
Percent parens: 0.128
--- Population Statistics ---
Average total errors in population: 7.099
Median total errors in population: 6
Error averages by case: (0.999 0.239 0.999 0.437 0.999 0.438 0.438 0.999 0.999 0.552)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.853
Average program size in population (points): 51.75
Average percent parens in population: 0.189
Minimum age in population: 93.92074175507413
Maximum age in population: 98.55732293752287
Average age in population: 96.52947908413407
Median age in population: 96.5633866309744
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 48307543
--- Timings ---
Current time: 1559584614959 milliseconds
Total Time:         213.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.1 seconds, 63.9%
Fitness Testing:     47.6 seconds, 22.3%
Report:              29.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 235
Test mean error for best: 0.23500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 54
Percent parens: 0.056
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 54
Percent parens: 0.056
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 421 420 818 351 820 374 373 351 7)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (7 421 420 818 351 820 374 373 351 7)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min})
Best program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Errors: [1 0 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 51
Size: 54
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 6.058
Median total errors in population: 6
Error averages by case: (0.993 0.579 0.58 0.182 0.649 0.18 0.626 0.627 0.649 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.615
Average program size in population (points): 42.928
Average percent parens in population: 0.165
Minimum age in population: 95.18763804106925
Maximum age in population: 99.80207658372561
Average age in population: 98.04371968762088
Median age in population: 98.04540091124129
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 320
Genome diversity (% unique genomes):	 0.523
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 328
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 48861570
--- Timings ---
Current time: 1559584618294 milliseconds
Total Time:         216.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.6 seconds, 64.1%
Fitness Testing:     48.1 seconds, 22.3%
Report:              29.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 235
Test mean error for best: 0.23500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_908} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_908 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 54
Percent parens: 0.056
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_908} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_908 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 54
Percent parens: 0.056
--- Lexicase Population Statistics ---
Count of elite individuals by case: (659 863 663 201 200 662 666 660 607 666)
Population mean number of elite cases: 5.85
Count of perfect (error zero) individuals by case: (659 863 663 201 200 662 666 660 607 666)
Population mean number of perfect (error zero) cases: 5.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min})
Best program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 51
Size: 54
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 4.153
Median total errors in population: 2
Error averages by case: (0.341 0.137 0.337 0.799 0.8 0.338 0.334 0.34 0.393 0.334)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.114
Average program size in population (points): 51.909
Average percent parens in population: 0.096
Minimum age in population: 97.6989879054314
Maximum age in population: 101.2170304623461
Average age in population: 98.64726647977703
Median age in population: 98.6989879054314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 362
Genome diversity (% unique genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 391
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 49504554
--- Timings ---
Current time: 1559584621289 milliseconds
Total Time:         219.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.6 seconds, 64.1%
Fitness Testing:     48.7 seconds, 22.2%
Report:              29.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 235
Test mean error for best: 0.23500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 2                   | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 40                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -48                
Correct output: -56                 | Program output: -56                
Correct output: 24                  | Program output: 30                 
Correct output: -69                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -92                
Correct output: -6                  | Program output: 7                  
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -41                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -38                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -49                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -46                
Correct output: -79                 | Program output: 64                 
Correct output: -2                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: 9                  
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -78                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_or integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Lexicase best errors: [1 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.056
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_or integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Zero cases best errors: [1 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.056
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 857 675 180 687 180 664 695 180 684)
Population mean number of elite cases: 4.98
Count of perfect (error zero) individuals by case: (180 857 675 180 687 180 664 695 180 684)
Population mean number of perfect (error zero) cases: 4.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min})
Best program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in3 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Errors: [1 0 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 54
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 5.018
Median total errors in population: 4
Error averages by case: (0.82 0.143 0.325 0.82 0.313 0.82 0.336 0.305 0.82 0.316)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.301
Average program size in population (points): 51.87
Average percent parens in population: 0.092
Minimum age in population: 98.6989879054314
Maximum age in population: 102.2431772258556
Average age in population: 100.0394431074475
Median age in population: 100.1211710864031
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 236
Genome diversity (% unique genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 266
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 50148553
--- Timings ---
Current time: 1559584624386 milliseconds
Total Time:         222.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.7 seconds, 64.2%
Fitness Testing:     49.3 seconds, 22.2%
Report:              30.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 211
Test mean error for best: 0.21100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 31                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 71                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 41                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: -24                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -6                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -34                
Correct output: -71                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 40                 
Correct output: 15                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 33                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -27                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min})
Lexicase best program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 57
Percent parens: 0.053
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min})
Zero cases best program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 57
Percent parens: 0.053
--- Lexicase Population Statistics ---
Count of elite individuals by case: (851 346 487 497 401 505 347 400 347 482)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (851 346 487 497 401 505 347 400 347 482)
Population mean number of perfect (error zero) cases: 4.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_725} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_min})
Best program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 54
Size: 57
Percent parens: 0.053
--- Population Statistics ---
Average total errors in population: 5.337
Median total errors in population: 6
Error averages by case: (0.149 0.654 0.513 0.503 0.599 0.495 0.653 0.6 0.653 0.518)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.584
Average program size in population (points): 49.367
Average percent parens in population: 0.122
Minimum age in population: 99.6989879054314
Maximum age in population: 103.7533545992557
Average age in population: 101.6483700028006
Median age in population: 101.6993071822704
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 50771167
--- Timings ---
Current time: 1559584627371 milliseconds
Total Time:         225.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.7 seconds, 64.2%
Fitness Testing:     49.9 seconds, 22.1%
Report:              30.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 68
Successful program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 57


Auto-simplifying with starting size: 57
step: 0
program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 500
program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 1000
program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 1500
program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 2000
program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 2500
program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 3000
program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 3500
program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 4000
program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 4500
program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 5000
program: (integer_min boolean_xor boolean_xor exec_noop integer_mult boolean_xor boolean_yankdup exec_noop exec_noop boolean_invert_first_then_and boolean_xor exec_noop boolean_invert_first_then_and boolean_xor integer_lte exec_do*count (print_boolean boolean_yank integer_inc) exec_dup (integer_lte boolean_invert_second_then_and in4 integer_lte in1 in2 boolean_dup in1 integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min) integer_min print_integer in3 in2 boolean_dup boolean_dup in1 integer_stackdepth in2 tag_boolean_725 integer_gt in1 integer_stackdepth in2 tag_boolean_725 integer_gt integer_stackdepth boolean_stackdepth boolean_frominteger integer_gt integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 211
Test mean error for best: 0.21100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: 73                  | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -17                 | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: 67                  | Program output: 67                 
Correct output: 50                  | Program output: 50                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 31                 
Correct output: 16                  | Program output: 16                 
Correct output: 69                  | Program output: 71                 
Correct output: 29                  | Program output: 71                 
Correct output: 42                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 60                 
Correct output: 50                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 41                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 42                 
Correct output: -24                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -6                 
Correct output: 24                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -24                 | Program output: -8                 
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -6                  | Program output: -6                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -75                 | Program output: -34                
Correct output: -71                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -21                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -61                
Correct output: -40                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: 22                  | Program output: 40                 
Correct output: 15                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: 7                   | Program output: 7                  
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -98                
Correct output: -72                 | Program output: -72                
Correct output: -46                 | Program output: -46                
Correct output: -3                  | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -49                 | Program output: 33                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -34                 | Program output: -27                
Correct output: -46                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
;;******************************
