Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[40 40 40 -90] -90] [[-20 -20 -20 -9] -20] [[-71 -87 -87 -87] -87] [[21 21 90 21] 21] [[-99 92 -99 -99] -99] [[88 88 -68 88] -68] [[51 51 94 51] 51] [[54 -80 54 54] -80] [[-68 -68 20 -68] -68] [[-94 44 44 44] -94] [(49 49 49 49) 49] [(94 94 94 94) 94] [(63 63 63 63) 63] [(91 91 91 91) 91] [(82 82 82 82) 82] [(96 16 41 85) 16] [(17 12 91 69) 12] [(46 57 41 9) 9] [(40 5 68 7) 5] [(32 5 37 54) 5] [(52 42 32 84) 32] [(40 95 41 91) 40] [(13 38 31 31) 13] [(83 13 80 19) 13] [(32 92 80 14) 14] [(57 66 55 5) 5] [(86 39 23 50) 23] [(13 16 6 81) 6] [(41 18 70 54) 18] [(66 86 73 11) 11] [(100 17 26 99) 17] [(77 77 68 0) 0] [(64 87 70 30) 30] [(4 96 0 17) 0] [(74 85 71 32) 32] [(5 81 55 -64) -64] [(-27 87 39 -58) -58] [(71 75 10 -21) -21] [(-98 -72 -54 26) -98] [(-34 -92 100 -11) -92] [(51 -29 79 36) -29] [(-59 -48 -29 -88) -88] [(-67 -48 -42 18) -67] [(-30 52 -47 9) -47] [(19 -84 -37 -3) -84] [(75 -29 -7 -53) -53] [(-74 84 -40 -62) -74] [(-90 -95 -45 -28) -95] [(-65 -96 96 65) -96] [(-55 46 -69 93) -69] [(4 -26 -41 -51) -51] [(88 -22 78 70) -22] [(-89 -94 85 36) -94] [(71 -85 44 -76) -85] [(-75 98 73 86) -75] [(-55 -7 -15 100) -55] [(22 -14 -74 -48) -74] [(84 -78 -75 48) -78] [(26 66 45 -54) -54] [(-17 -52 29 76) -52] [(-25 -21 31 10) -25] [(-27 30 -88 21) -88] [(-100 -56 41 -56) -100] [(70 78 65 -85) -85] [(23 -46 68 47) -46] [(-48 64 -27 -51) -51] [(100 2 -73 33) -73] [(64 -8 13 79) -8] [(-60 67 -10 -76) -76] [(97 -82 -63 84) -82] [(-97 -59 39 91) -97] [(42 -49 100 77) -49] [(40 76 54 3) 3] [(-64 -6 69 48) -64] [(-80 -38 -33 -13) -80] [(-20 -77 87 -87) -87] [(-75 78 13 -6) -75] [(-83 54 100 9) -83] [(-63 -59 -13 -88) -88] [(99 18 -68 46) -68] [(68 -62 -21 -96) -96] [(37 -25 8 91) -25] [(-1 -14 -8 9) -14] [(97 1 4 97) 1] [(-55 -86 -100 -59) -100] [(46 35 96 -84) -84] [(78 -4 -67 98) -67] [(12 -63 -44 -3) -63] [(-8 12 79 -23) -23] [(8 84 -56 60) -56] [(63 -52 39 -58) -58] [(7 -36 31 -53) -53] [(82 92 1 44) 1] [(-38 36 12 10) -38] [(83 13 -6 -60) -60])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[40 40 40 -90] -90]
Train Case:   6 | Input/Output: [[-20 -20 -20 -9] -20]
Train Case:   7 | Input/Output: [[-71 -87 -87 -87] -87]
Train Case:   8 | Input/Output: [[21 21 90 21] 21]
Train Case:   9 | Input/Output: [[-99 92 -99 -99] -99]
Train Case:  10 | Input/Output: [[88 88 -68 88] -68]
Train Case:  11 | Input/Output: [[51 51 94 51] 51]
Train Case:  12 | Input/Output: [[54 -80 54 54] -80]
Train Case:  13 | Input/Output: [[-68 -68 20 -68] -68]
Train Case:  14 | Input/Output: [[-94 44 44 44] -94]
Train Case:  15 | Input/Output: [(49 49 49 49) 49]
Train Case:  16 | Input/Output: [(94 94 94 94) 94]
Train Case:  17 | Input/Output: [(63 63 63 63) 63]
Train Case:  18 | Input/Output: [(91 91 91 91) 91]
Train Case:  19 | Input/Output: [(82 82 82 82) 82]
Train Case:  20 | Input/Output: [(96 16 41 85) 16]
Train Case:  21 | Input/Output: [(17 12 91 69) 12]
Train Case:  22 | Input/Output: [(46 57 41 9) 9]
Train Case:  23 | Input/Output: [(40 5 68 7) 5]
Train Case:  24 | Input/Output: [(32 5 37 54) 5]
Train Case:  25 | Input/Output: [(52 42 32 84) 32]
Train Case:  26 | Input/Output: [(40 95 41 91) 40]
Train Case:  27 | Input/Output: [(13 38 31 31) 13]
Train Case:  28 | Input/Output: [(83 13 80 19) 13]
Train Case:  29 | Input/Output: [(32 92 80 14) 14]
Train Case:  30 | Input/Output: [(57 66 55 5) 5]
Train Case:  31 | Input/Output: [(86 39 23 50) 23]
Train Case:  32 | Input/Output: [(13 16 6 81) 6]
Train Case:  33 | Input/Output: [(41 18 70 54) 18]
Train Case:  34 | Input/Output: [(66 86 73 11) 11]
Train Case:  35 | Input/Output: [(100 17 26 99) 17]
Train Case:  36 | Input/Output: [(77 77 68 0) 0]
Train Case:  37 | Input/Output: [(64 87 70 30) 30]
Train Case:  38 | Input/Output: [(4 96 0 17) 0]
Train Case:  39 | Input/Output: [(74 85 71 32) 32]
Train Case:  40 | Input/Output: [(5 81 55 -64) -64]
Train Case:  41 | Input/Output: [(-27 87 39 -58) -58]
Train Case:  42 | Input/Output: [(71 75 10 -21) -21]
Train Case:  43 | Input/Output: [(-98 -72 -54 26) -98]
Train Case:  44 | Input/Output: [(-34 -92 100 -11) -92]
Train Case:  45 | Input/Output: [(51 -29 79 36) -29]
Train Case:  46 | Input/Output: [(-59 -48 -29 -88) -88]
Train Case:  47 | Input/Output: [(-67 -48 -42 18) -67]
Train Case:  48 | Input/Output: [(-30 52 -47 9) -47]
Train Case:  49 | Input/Output: [(19 -84 -37 -3) -84]
Train Case:  50 | Input/Output: [(75 -29 -7 -53) -53]
Train Case:  51 | Input/Output: [(-74 84 -40 -62) -74]
Train Case:  52 | Input/Output: [(-90 -95 -45 -28) -95]
Train Case:  53 | Input/Output: [(-65 -96 96 65) -96]
Train Case:  54 | Input/Output: [(-55 46 -69 93) -69]
Train Case:  55 | Input/Output: [(4 -26 -41 -51) -51]
Train Case:  56 | Input/Output: [(88 -22 78 70) -22]
Train Case:  57 | Input/Output: [(-89 -94 85 36) -94]
Train Case:  58 | Input/Output: [(71 -85 44 -76) -85]
Train Case:  59 | Input/Output: [(-75 98 73 86) -75]
Train Case:  60 | Input/Output: [(-55 -7 -15 100) -55]
Train Case:  61 | Input/Output: [(22 -14 -74 -48) -74]
Train Case:  62 | Input/Output: [(84 -78 -75 48) -78]
Train Case:  63 | Input/Output: [(26 66 45 -54) -54]
Train Case:  64 | Input/Output: [(-17 -52 29 76) -52]
Train Case:  65 | Input/Output: [(-25 -21 31 10) -25]
Train Case:  66 | Input/Output: [(-27 30 -88 21) -88]
Train Case:  67 | Input/Output: [(-100 -56 41 -56) -100]
Train Case:  68 | Input/Output: [(70 78 65 -85) -85]
Train Case:  69 | Input/Output: [(23 -46 68 47) -46]
Train Case:  70 | Input/Output: [(-48 64 -27 -51) -51]
Train Case:  71 | Input/Output: [(100 2 -73 33) -73]
Train Case:  72 | Input/Output: [(64 -8 13 79) -8]
Train Case:  73 | Input/Output: [(-60 67 -10 -76) -76]
Train Case:  74 | Input/Output: [(97 -82 -63 84) -82]
Train Case:  75 | Input/Output: [(-97 -59 39 91) -97]
Train Case:  76 | Input/Output: [(42 -49 100 77) -49]
Train Case:  77 | Input/Output: [(40 76 54 3) 3]
Train Case:  78 | Input/Output: [(-64 -6 69 48) -64]
Train Case:  79 | Input/Output: [(-80 -38 -33 -13) -80]
Train Case:  80 | Input/Output: [(-20 -77 87 -87) -87]
Train Case:  81 | Input/Output: [(-75 78 13 -6) -75]
Train Case:  82 | Input/Output: [(-83 54 100 9) -83]
Train Case:  83 | Input/Output: [(-63 -59 -13 -88) -88]
Train Case:  84 | Input/Output: [(99 18 -68 46) -68]
Train Case:  85 | Input/Output: [(68 -62 -21 -96) -96]
Train Case:  86 | Input/Output: [(37 -25 8 91) -25]
Train Case:  87 | Input/Output: [(-1 -14 -8 9) -14]
Train Case:  88 | Input/Output: [(97 1 4 97) 1]
Train Case:  89 | Input/Output: [(-55 -86 -100 -59) -100]
Train Case:  90 | Input/Output: [(46 35 96 -84) -84]
Train Case:  91 | Input/Output: [(78 -4 -67 98) -67]
Train Case:  92 | Input/Output: [(12 -63 -44 -3) -63]
Train Case:  93 | Input/Output: [(-8 12 79 -23) -23]
Train Case:  94 | Input/Output: [(8 84 -56 60) -56]
Train Case:  95 | Input/Output: [(63 -52 39 -58) -58]
Train Case:  96 | Input/Output: [(7 -36 31 -53) -53]
Train Case:  97 | Input/Output: [(82 92 1 44) 1]
Train Case:  98 | Input/Output: [(-38 36 12 10) -38]
Train Case:  99 | Input/Output: [(83 13 -6 -60) -60]
Test Case:   0 | Input/Output: [[-82 -9 -82 -82] -82]
Test Case:   1 | Input/Output: [[48 62 48 48] 48]
Test Case:   2 | Input/Output: [[11 28 28 28] 11]
Test Case:   3 | Input/Output: [[66 92 66 66] 66]
Test Case:   4 | Input/Output: [[-72 95 95 95] -72]
Test Case:   5 | Input/Output: [[-66 -66 -66 -14] -66]
Test Case:   6 | Input/Output: [[86 86 86 -44] -44]
Test Case:   7 | Input/Output: [[33 33 33 -34] -34]
Test Case:   8 | Input/Output: [[-61 -81 -81 -81] -81]
Test Case:   9 | Input/Output: [[-70 45 -70 -70] -70]
Test Case:  10 | Input/Output: [[-63 -63 98 -63] -63]
Test Case:  11 | Input/Output: [[-28 80 80 80] -28]
Test Case:  12 | Input/Output: [[-95 64 64 64] -95]
Test Case:  13 | Input/Output: [[-60 -60 -60 -56] -60]
Test Case:  14 | Input/Output: [[41 -36 41 41] -36]
Test Case:  15 | Input/Output: [[30 30 30 -71] -71]
Test Case:  16 | Input/Output: [[-24 -70 -24 -24] -70]
Test Case:  17 | Input/Output: [[26 7 7 7] 7]
Test Case:  18 | Input/Output: [[-68 -68 -99 -68] -99]
Test Case:  19 | Input/Output: [[-38 -38 -38 -47] -47]
Test Case:  20 | Input/Output: [[13 2 13 13] 2]
Test Case:  21 | Input/Output: [[67 42 42 42] 42]
Test Case:  22 | Input/Output: [[-23 -44 -44 -44] -44]
Test Case:  23 | Input/Output: [[0 -98 0 0] -98]
Test Case:  24 | Input/Output: [[35 55 35 35] 35]
Test Case:  25 | Input/Output: [[14 22 14 14] 14]
Test Case:  26 | Input/Output: [[18 31 18 18] 18]
Test Case:  27 | Input/Output: [[-16 -16 -16 -84] -84]
Test Case:  28 | Input/Output: [[-35 -35 -35 -62] -62]
Test Case:  29 | Input/Output: [[-93 92 92 92] -93]
Test Case:  30 | Input/Output: [[41 9 41 41] 9]
Test Case:  31 | Input/Output: [[14 14 14 1] 1]
Test Case:  32 | Input/Output: [[-5 -5 -5 -68] -68]
Test Case:  33 | Input/Output: [[58 -3 -3 -3] -3]
Test Case:  34 | Input/Output: [[-74 38 -74 -74] -74]
Test Case:  35 | Input/Output: [[55 55 68 55] 55]
Test Case:  36 | Input/Output: [[49 49 -83 49] -83]
Test Case:  37 | Input/Output: [[-64 -64 -83 -64] -83]
Test Case:  38 | Input/Output: [[-37 -16 -37 -37] -37]
Test Case:  39 | Input/Output: [[4 -94 4 4] -94]
Test Case:  40 | Input/Output: [[13 13 13 25] 13]
Test Case:  41 | Input/Output: [[74 34 34 34] 34]
Test Case:  42 | Input/Output: [[-60 -54 -60 -60] -60]
Test Case:  43 | Input/Output: [[-61 -61 -21 -61] -61]
Test Case:  44 | Input/Output: [[76 76 76 -43] -43]
Test Case:  45 | Input/Output: [[-34 -34 -34 39] -34]
Test Case:  46 | Input/Output: [[-6 -6 -6 -84] -84]
Test Case:  47 | Input/Output: [[87 87 87 58] 58]
Test Case:  48 | Input/Output: [[-21 -21 -21 -74] -74]
Test Case:  49 | Input/Output: [[34 73 73 73] 34]
Test Case:  50 | Input/Output: [[72 -1 72 72] -1]
Test Case:  51 | Input/Output: [[4 4 -33 4] -33]
Test Case:  52 | Input/Output: [[-52 14 -52 -52] -52]
Test Case:  53 | Input/Output: [[88 88 88 -99] -99]
Test Case:  54 | Input/Output: [[-23 55 55 55] -23]
Test Case:  55 | Input/Output: [[2 -44 -44 -44] -44]
Test Case:  56 | Input/Output: [[79 -86 79 79] -86]
Test Case:  57 | Input/Output: [[83 83 15 83] 15]
Test Case:  58 | Input/Output: [[59 32 59 59] 32]
Test Case:  59 | Input/Output: [[-61 60 -61 -61] -61]
Test Case:  60 | Input/Output: [[-45 -45 -45 26] -45]
Test Case:  61 | Input/Output: [[27 65 27 27] 27]
Test Case:  62 | Input/Output: [[99 89 99 99] 89]
Test Case:  63 | Input/Output: [[86 86 -27 86] -27]
Test Case:  64 | Input/Output: [[35 35 35 -96] -96]
Test Case:  65 | Input/Output: [[-77 -22 -77 -77] -77]
Test Case:  66 | Input/Output: [[-38 98 -38 -38] -38]
Test Case:  67 | Input/Output: [[82 18 82 82] 18]
Test Case:  68 | Input/Output: [[43 -43 -43 -43] -43]
Test Case:  69 | Input/Output: [[-72 23 -72 -72] -72]
Test Case:  70 | Input/Output: [[-72 -72 -72 -13] -72]
Test Case:  71 | Input/Output: [[73 73 73 -100] -100]
Test Case:  72 | Input/Output: [[40 40 -72 40] -72]
Test Case:  73 | Input/Output: [[62 62 62 -91] -91]
Test Case:  74 | Input/Output: [[-99 -99 -21 -99] -99]
Test Case:  75 | Input/Output: [[-70 9 9 9] -70]
Test Case:  76 | Input/Output: [[-13 81 -13 -13] -13]
Test Case:  77 | Input/Output: [[92 92 92 -20] -20]
Test Case:  78 | Input/Output: [[87 -15 87 87] -15]
Test Case:  79 | Input/Output: [[7 -13 -13 -13] -13]
Test Case:  80 | Input/Output: [[-43 -43 -63 -43] -63]
Test Case:  81 | Input/Output: [[100 100 40 100] 40]
Test Case:  82 | Input/Output: [[92 92 63 92] 63]
Test Case:  83 | Input/Output: [[1 1 1 78] 1]
Test Case:  84 | Input/Output: [[89 98 89 89] 89]
Test Case:  85 | Input/Output: [[-37 -37 76 -37] -37]
Test Case:  86 | Input/Output: [[75 90 90 90] 75]
Test Case:  87 | Input/Output: [[-92 -79 -79 -79] -92]
Test Case:  88 | Input/Output: [[93 100 93 93] 93]
Test Case:  89 | Input/Output: [[67 -86 -86 -86] -86]
Test Case:  90 | Input/Output: [[55 55 -84 55] -84]
Test Case:  91 | Input/Output: [[-39 -31 -39 -39] -39]
Test Case:  92 | Input/Output: [[27 27 -58 27] -58]
Test Case:  93 | Input/Output: [[34 49 49 49] 34]
Test Case:  94 | Input/Output: [[100 -63 -63 -63] -63]
Test Case:  95 | Input/Output: [[-49 -49 -49 22] -49]
Test Case:  96 | Input/Output: [[-89 -89 68 -89] -89]
Test Case:  97 | Input/Output: [[-62 -62 58 -62] -62]
Test Case:  98 | Input/Output: [[-64 71 71 71] -64]
Test Case:  99 | Input/Output: [[-90 75 -90 -90] -90]
Test Case: 100 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 101 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 102 | Input/Output: [(90 90 90 90) 90]
Test Case: 103 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 104 | Input/Output: [(96 96 96 96) 96]
Test Case: 105 | Input/Output: [(2 2 2 2) 2]
Test Case: 106 | Input/Output: [(92 92 92 92) 92]
Test Case: 107 | Input/Output: [(53 53 53 53) 53]
Test Case: 108 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 109 | Input/Output: [(46 46 46 46) 46]
Test Case: 110 | Input/Output: [(0 0 0 0) 0]
Test Case: 111 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 112 | Input/Output: [(88 88 88 88) 88]
Test Case: 113 | Input/Output: [(38 38 38 38) 38]
Test Case: 114 | Input/Output: [(12 12 12 12) 12]
Test Case: 115 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 116 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 117 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 118 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 119 | Input/Output: [(27 27 27 27) 27]
Test Case: 120 | Input/Output: [(90 90 90 90) 90]
Test Case: 121 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 122 | Input/Output: [(76 76 76 76) 76]
Test Case: 123 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 124 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 125 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 126 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 127 | Input/Output: [(20 20 20 20) 20]
Test Case: 128 | Input/Output: [(38 38 38 38) 38]
Test Case: 129 | Input/Output: [(79 79 79 79) 79]
Test Case: 130 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 131 | Input/Output: [(98 98 98 98) 98]
Test Case: 132 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 133 | Input/Output: [(26 26 26 26) 26]
Test Case: 134 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 135 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 136 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 137 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 138 | Input/Output: [(92 92 92 92) 92]
Test Case: 139 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 140 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 141 | Input/Output: [(52 52 52 52) 52]
Test Case: 142 | Input/Output: [(85 85 85 85) 85]
Test Case: 143 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 144 | Input/Output: [(71 71 71 71) 71]
Test Case: 145 | Input/Output: [(32 32 32 32) 32]
Test Case: 146 | Input/Output: [(47 47 47 47) 47]
Test Case: 147 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 148 | Input/Output: [(19 19 19 19) 19]
Test Case: 149 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 150 | Input/Output: [(24 24 24 24) 24]
Test Case: 151 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 152 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 153 | Input/Output: [(19 19 19 19) 19]
Test Case: 154 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 155 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 156 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 157 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 158 | Input/Output: [(87 87 87 87) 87]
Test Case: 159 | Input/Output: [(39 39 39 39) 39]
Test Case: 160 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 161 | Input/Output: [(52 52 52 52) 52]
Test Case: 162 | Input/Output: [(21 21 21 21) 21]
Test Case: 163 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 164 | Input/Output: [(73 73 73 73) 73]
Test Case: 165 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 166 | Input/Output: [(91 91 91 91) 91]
Test Case: 167 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 168 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 169 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 170 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 171 | Input/Output: [(31 31 31 31) 31]
Test Case: 172 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 173 | Input/Output: [(53 53 53 53) 53]
Test Case: 174 | Input/Output: [(90 90 90 90) 90]
Test Case: 175 | Input/Output: [(55 55 55 55) 55]
Test Case: 176 | Input/Output: [(32 32 32 32) 32]
Test Case: 177 | Input/Output: [(95 95 95 95) 95]
Test Case: 178 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 179 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 180 | Input/Output: [(88 88 88 88) 88]
Test Case: 181 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 182 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 183 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 184 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 185 | Input/Output: [(92 92 92 92) 92]
Test Case: 186 | Input/Output: [(74 74 74 74) 74]
Test Case: 187 | Input/Output: [(42 42 42 42) 42]
Test Case: 188 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 189 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 190 | Input/Output: [(54 54 54 54) 54]
Test Case: 191 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 192 | Input/Output: [(83 83 83 83) 83]
Test Case: 193 | Input/Output: [(62 62 62 62) 62]
Test Case: 194 | Input/Output: [(44 44 44 44) 44]
Test Case: 195 | Input/Output: [(66 66 66 66) 66]
Test Case: 196 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 197 | Input/Output: [(26 26 26 26) 26]
Test Case: 198 | Input/Output: [(93 93 93 93) 93]
Test Case: 199 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 200 | Input/Output: [(43 36 100 26) 26]
Test Case: 201 | Input/Output: [(88 29 59 48) 29]
Test Case: 202 | Input/Output: [(25 14 96 49) 14]
Test Case: 203 | Input/Output: [(77 53 71 7) 7]
Test Case: 204 | Input/Output: [(42 22 53 57) 22]
Test Case: 205 | Input/Output: [(30 76 98 46) 30]
Test Case: 206 | Input/Output: [(55 21 43 42) 21]
Test Case: 207 | Input/Output: [(39 40 100 87) 39]
Test Case: 208 | Input/Output: [(91 15 78 2) 2]
Test Case: 209 | Input/Output: [(99 47 78 79) 47]
Test Case: 210 | Input/Output: [(31 50 98 46) 31]
Test Case: 211 | Input/Output: [(33 91 44 7) 7]
Test Case: 212 | Input/Output: [(89 95 56 100) 56]
Test Case: 213 | Input/Output: [(90 99 31 32) 31]
Test Case: 214 | Input/Output: [(46 3 9 52) 3]
Test Case: 215 | Input/Output: [(63 93 78 85) 63]
Test Case: 216 | Input/Output: [(58 49 12 87) 12]
Test Case: 217 | Input/Output: [(9 64 92 30) 9]
Test Case: 218 | Input/Output: [(87 34 97 50) 34]
Test Case: 219 | Input/Output: [(33 59 33 9) 9]
Test Case: 220 | Input/Output: [(61 99 21 21) 21]
Test Case: 221 | Input/Output: [(35 56 11 45) 11]
Test Case: 222 | Input/Output: [(55 57 95 9) 9]
Test Case: 223 | Input/Output: [(13 98 20 85) 13]
Test Case: 224 | Input/Output: [(69 1 93 22) 1]
Test Case: 225 | Input/Output: [(54 60 72 58) 54]
Test Case: 226 | Input/Output: [(42 96 44 48) 42]
Test Case: 227 | Input/Output: [(60 81 76 95) 60]
Test Case: 228 | Input/Output: [(32 44 71 88) 32]
Test Case: 229 | Input/Output: [(35 3 5 76) 3]
Test Case: 230 | Input/Output: [(44 48 46 70) 44]
Test Case: 231 | Input/Output: [(48 45 32 85) 32]
Test Case: 232 | Input/Output: [(70 59 55 19) 19]
Test Case: 233 | Input/Output: [(65 83 20 85) 20]
Test Case: 234 | Input/Output: [(12 71 46 64) 12]
Test Case: 235 | Input/Output: [(58 47 25 36) 25]
Test Case: 236 | Input/Output: [(55 15 49 2) 2]
Test Case: 237 | Input/Output: [(60 98 89 87) 60]
Test Case: 238 | Input/Output: [(65 10 42 71) 10]
Test Case: 239 | Input/Output: [(92 44 26 10) 10]
Test Case: 240 | Input/Output: [(65 4 97 78) 4]
Test Case: 241 | Input/Output: [(84 31 65 33) 31]
Test Case: 242 | Input/Output: [(6 89 100 53) 6]
Test Case: 243 | Input/Output: [(16 20 33 67) 16]
Test Case: 244 | Input/Output: [(15 54 84 54) 15]
Test Case: 245 | Input/Output: [(60 83 13 65) 13]
Test Case: 246 | Input/Output: [(51 8 72 47) 8]
Test Case: 247 | Input/Output: [(38 86 63 63) 38]
Test Case: 248 | Input/Output: [(61 58 18 79) 18]
Test Case: 249 | Input/Output: [(99 70 11 96) 11]
Test Case: 250 | Input/Output: [(89 44 70 2) 2]
Test Case: 251 | Input/Output: [(20 54 14 37) 14]
Test Case: 252 | Input/Output: [(6 15 34 37) 6]
Test Case: 253 | Input/Output: [(39 12 78 53) 12]
Test Case: 254 | Input/Output: [(64 93 40 68) 40]
Test Case: 255 | Input/Output: [(34 56 73 62) 34]
Test Case: 256 | Input/Output: [(62 32 45 15) 15]
Test Case: 257 | Input/Output: [(98 23 29 12) 12]
Test Case: 258 | Input/Output: [(75 7 58 35) 7]
Test Case: 259 | Input/Output: [(77 2 8 13) 2]
Test Case: 260 | Input/Output: [(41 64 42 53) 41]
Test Case: 261 | Input/Output: [(42 59 8 12) 8]
Test Case: 262 | Input/Output: [(27 56 28 14) 14]
Test Case: 263 | Input/Output: [(91 22 73 28) 22]
Test Case: 264 | Input/Output: [(98 4 8 87) 4]
Test Case: 265 | Input/Output: [(30 6 43 30) 6]
Test Case: 266 | Input/Output: [(7 11 2 50) 2]
Test Case: 267 | Input/Output: [(26 24 55 89) 24]
Test Case: 268 | Input/Output: [(30 3 4 71) 3]
Test Case: 269 | Input/Output: [(42 40 47 69) 40]
Test Case: 270 | Input/Output: [(0 69 10 23) 0]
Test Case: 271 | Input/Output: [(20 58 12 78) 12]
Test Case: 272 | Input/Output: [(85 51 6 33) 6]
Test Case: 273 | Input/Output: [(93 52 46 31) 31]
Test Case: 274 | Input/Output: [(28 63 75 45) 28]
Test Case: 275 | Input/Output: [(17 55 76 81) 17]
Test Case: 276 | Input/Output: [(2 74 79 81) 2]
Test Case: 277 | Input/Output: [(100 40 19 53) 19]
Test Case: 278 | Input/Output: [(59 80 25 20) 20]
Test Case: 279 | Input/Output: [(60 62 14 73) 14]
Test Case: 280 | Input/Output: [(65 24 78 52) 24]
Test Case: 281 | Input/Output: [(28 29 28 76) 28]
Test Case: 282 | Input/Output: [(91 20 76 79) 20]
Test Case: 283 | Input/Output: [(59 73 11 90) 11]
Test Case: 284 | Input/Output: [(69 45 26 8) 8]
Test Case: 285 | Input/Output: [(67 20 50 92) 20]
Test Case: 286 | Input/Output: [(79 14 3 100) 3]
Test Case: 287 | Input/Output: [(1 21 47 34) 1]
Test Case: 288 | Input/Output: [(21 100 3 90) 3]
Test Case: 289 | Input/Output: [(38 95 9 74) 9]
Test Case: 290 | Input/Output: [(60 41 91 11) 11]
Test Case: 291 | Input/Output: [(68 63 49 73) 49]
Test Case: 292 | Input/Output: [(74 69 67 25) 25]
Test Case: 293 | Input/Output: [(42 16 97 6) 6]
Test Case: 294 | Input/Output: [(59 45 10 17) 10]
Test Case: 295 | Input/Output: [(31 94 44 71) 31]
Test Case: 296 | Input/Output: [(64 1 74 68) 1]
Test Case: 297 | Input/Output: [(35 34 6 98) 6]
Test Case: 298 | Input/Output: [(35 37 57 59) 35]
Test Case: 299 | Input/Output: [(69 81 63 60) 60]
Test Case: 300 | Input/Output: [(93 45 34 37) 34]
Test Case: 301 | Input/Output: [(54 98 82 99) 54]
Test Case: 302 | Input/Output: [(15 46 74 30) 15]
Test Case: 303 | Input/Output: [(15 74 4 10) 4]
Test Case: 304 | Input/Output: [(96 51 40 50) 40]
Test Case: 305 | Input/Output: [(25 18 15 44) 15]
Test Case: 306 | Input/Output: [(64 82 31 33) 31]
Test Case: 307 | Input/Output: [(56 55 66 59) 55]
Test Case: 308 | Input/Output: [(87 88 89 95) 87]
Test Case: 309 | Input/Output: [(9 72 93 4) 4]
Test Case: 310 | Input/Output: [(40 58 96 97) 40]
Test Case: 311 | Input/Output: [(28 77 22 70) 22]
Test Case: 312 | Input/Output: [(12 48 22 93) 12]
Test Case: 313 | Input/Output: [(59 86 61 29) 29]
Test Case: 314 | Input/Output: [(66 84 86 84) 66]
Test Case: 315 | Input/Output: [(0 88 23 8) 0]
Test Case: 316 | Input/Output: [(34 32 91 76) 32]
Test Case: 317 | Input/Output: [(96 24 88 66) 24]
Test Case: 318 | Input/Output: [(17 79 34 87) 17]
Test Case: 319 | Input/Output: [(75 22 61 0) 0]
Test Case: 320 | Input/Output: [(34 3 2 63) 2]
Test Case: 321 | Input/Output: [(57 56 71 1) 1]
Test Case: 322 | Input/Output: [(80 35 29 13) 13]
Test Case: 323 | Input/Output: [(8 55 45 40) 8]
Test Case: 324 | Input/Output: [(9 39 84 29) 9]
Test Case: 325 | Input/Output: [(98 58 100 25) 25]
Test Case: 326 | Input/Output: [(93 28 12 92) 12]
Test Case: 327 | Input/Output: [(52 38 67 100) 38]
Test Case: 328 | Input/Output: [(78 42 72 62) 42]
Test Case: 329 | Input/Output: [(78 36 67 32) 32]
Test Case: 330 | Input/Output: [(85 88 12 47) 12]
Test Case: 331 | Input/Output: [(72 64 41 35) 35]
Test Case: 332 | Input/Output: [(4 71 10 67) 4]
Test Case: 333 | Input/Output: [(31 64 11 59) 11]
Test Case: 334 | Input/Output: [(49 26 84 84) 26]
Test Case: 335 | Input/Output: [(53 47 46 54) 46]
Test Case: 336 | Input/Output: [(28 70 64 30) 28]
Test Case: 337 | Input/Output: [(24 16 94 35) 16]
Test Case: 338 | Input/Output: [(16 56 26 41) 16]
Test Case: 339 | Input/Output: [(52 93 36 51) 36]
Test Case: 340 | Input/Output: [(16 82 29 29) 16]
Test Case: 341 | Input/Output: [(27 26 77 21) 21]
Test Case: 342 | Input/Output: [(24 32 41 9) 9]
Test Case: 343 | Input/Output: [(34 93 49 35) 34]
Test Case: 344 | Input/Output: [(19 90 45 58) 19]
Test Case: 345 | Input/Output: [(21 46 8 59) 8]
Test Case: 346 | Input/Output: [(28 59 40 44) 28]
Test Case: 347 | Input/Output: [(93 25 71 35) 25]
Test Case: 348 | Input/Output: [(32 81 60 69) 32]
Test Case: 349 | Input/Output: [(81 16 27 4) 4]
Test Case: 350 | Input/Output: [(3 77 2 27) 2]
Test Case: 351 | Input/Output: [(47 62 5 69) 5]
Test Case: 352 | Input/Output: [(61 81 31 22) 22]
Test Case: 353 | Input/Output: [(69 33 31 69) 31]
Test Case: 354 | Input/Output: [(34 40 22 32) 22]
Test Case: 355 | Input/Output: [(35 73 38 48) 35]
Test Case: 356 | Input/Output: [(15 6 34 70) 6]
Test Case: 357 | Input/Output: [(15 86 100 37) 15]
Test Case: 358 | Input/Output: [(98 12 55 55) 12]
Test Case: 359 | Input/Output: [(33 33 34 27) 27]
Test Case: 360 | Input/Output: [(36 58 80 18) 18]
Test Case: 361 | Input/Output: [(58 93 4 27) 4]
Test Case: 362 | Input/Output: [(59 90 84 75) 59]
Test Case: 363 | Input/Output: [(73 79 93 3) 3]
Test Case: 364 | Input/Output: [(3 24 16 95) 3]
Test Case: 365 | Input/Output: [(60 18 43 100) 18]
Test Case: 366 | Input/Output: [(7 6 82 7) 6]
Test Case: 367 | Input/Output: [(19 84 44 10) 10]
Test Case: 368 | Input/Output: [(41 32 60 82) 32]
Test Case: 369 | Input/Output: [(57 79 100 7) 7]
Test Case: 370 | Input/Output: [(61 75 34 71) 34]
Test Case: 371 | Input/Output: [(16 86 37 98) 16]
Test Case: 372 | Input/Output: [(52 34 98 93) 34]
Test Case: 373 | Input/Output: [(52 26 2 76) 2]
Test Case: 374 | Input/Output: [(31 25 94 38) 25]
Test Case: 375 | Input/Output: [(44 51 96 78) 44]
Test Case: 376 | Input/Output: [(51 79 69 68) 51]
Test Case: 377 | Input/Output: [(97 29 23 82) 23]
Test Case: 378 | Input/Output: [(99 43 78 57) 43]
Test Case: 379 | Input/Output: [(28 12 80 45) 12]
Test Case: 380 | Input/Output: [(100 60 14 31) 14]
Test Case: 381 | Input/Output: [(62 17 62 1) 1]
Test Case: 382 | Input/Output: [(48 21 43 5) 5]
Test Case: 383 | Input/Output: [(29 65 78 57) 29]
Test Case: 384 | Input/Output: [(4 6 64 42) 4]
Test Case: 385 | Input/Output: [(100 15 90 50) 15]
Test Case: 386 | Input/Output: [(21 42 99 25) 21]
Test Case: 387 | Input/Output: [(69 66 87 13) 13]
Test Case: 388 | Input/Output: [(84 20 13 99) 13]
Test Case: 389 | Input/Output: [(58 61 66 54) 54]
Test Case: 390 | Input/Output: [(97 3 21 68) 3]
Test Case: 391 | Input/Output: [(40 6 76 31) 6]
Test Case: 392 | Input/Output: [(84 94 36 66) 36]
Test Case: 393 | Input/Output: [(27 17 67 53) 17]
Test Case: 394 | Input/Output: [(8 19 20 10) 8]
Test Case: 395 | Input/Output: [(50 85 63 14) 14]
Test Case: 396 | Input/Output: [(45 16 34 25) 16]
Test Case: 397 | Input/Output: [(47 60 52 4) 4]
Test Case: 398 | Input/Output: [(0 60 10 55) 0]
Test Case: 399 | Input/Output: [(19 38 92 40) 19]
Test Case: 400 | Input/Output: [(6 42 8 -64) -64]
Test Case: 401 | Input/Output: [(-58 -21 -49 -75) -75]
Test Case: 402 | Input/Output: [(-26 -1 -84 91) -84]
Test Case: 403 | Input/Output: [(-75 -27 -35 -1) -75]
Test Case: 404 | Input/Output: [(25 -62 -6 -13) -62]
Test Case: 405 | Input/Output: [(-10 4 11 36) -10]
Test Case: 406 | Input/Output: [(-91 4 53 24) -91]
Test Case: 407 | Input/Output: [(-36 -47 -56 70) -56]
Test Case: 408 | Input/Output: [(-79 97 18 26) -79]
Test Case: 409 | Input/Output: [(-94 25 66 -82) -94]
Test Case: 410 | Input/Output: [(32 -46 54 51) -46]
Test Case: 411 | Input/Output: [(-63 -43 -5 -59) -63]
Test Case: 412 | Input/Output: [(-2 52 -28 -53) -53]
Test Case: 413 | Input/Output: [(27 41 85 -93) -93]
Test Case: 414 | Input/Output: [(-39 -57 26 76) -57]
Test Case: 415 | Input/Output: [(42 -78 -38 77) -78]
Test Case: 416 | Input/Output: [(-18 39 -43 57) -43]
Test Case: 417 | Input/Output: [(-36 83 -69 -10) -69]
Test Case: 418 | Input/Output: [(83 15 41 -3) -3]
Test Case: 419 | Input/Output: [(-89 40 -11 21) -89]
Test Case: 420 | Input/Output: [(-65 -71 -11 81) -71]
Test Case: 421 | Input/Output: [(73 91 52 -91) -91]
Test Case: 422 | Input/Output: [(-24 -100 -94 -34) -100]
Test Case: 423 | Input/Output: [(-25 15 -66 -20) -66]
Test Case: 424 | Input/Output: [(68 -75 4 9) -75]
Test Case: 425 | Input/Output: [(7 -43 -18 -4) -43]
Test Case: 426 | Input/Output: [(21 -1 90 81) -1]
Test Case: 427 | Input/Output: [(99 69 65 -13) -13]
Test Case: 428 | Input/Output: [(3 32 10 53) 3]
Test Case: 429 | Input/Output: [(70 9 51 -53) -53]
Test Case: 430 | Input/Output: [(39 -2 18 5) -2]
Test Case: 431 | Input/Output: [(-8 -89 13 99) -89]
Test Case: 432 | Input/Output: [(-94 -78 99 -59) -94]
Test Case: 433 | Input/Output: [(-47 14 33 99) -47]
Test Case: 434 | Input/Output: [(32 -57 10 3) -57]
Test Case: 435 | Input/Output: [(45 -74 17 46) -74]
Test Case: 436 | Input/Output: [(67 -85 -22 95) -85]
Test Case: 437 | Input/Output: [(82 -71 52 32) -71]
Test Case: 438 | Input/Output: [(80 83 -48 32) -48]
Test Case: 439 | Input/Output: [(-54 51 -16 -57) -57]
Test Case: 440 | Input/Output: [(-53 -83 -43 32) -83]
Test Case: 441 | Input/Output: [(-74 -48 18 38) -74]
Test Case: 442 | Input/Output: [(61 90 41 -100) -100]
Test Case: 443 | Input/Output: [(92 98 -48 10) -48]
Test Case: 444 | Input/Output: [(-99 67 36 -92) -99]
Test Case: 445 | Input/Output: [(-27 22 99 -35) -35]
Test Case: 446 | Input/Output: [(-38 -95 -23 46) -95]
Test Case: 447 | Input/Output: [(-91 -4 78 7) -91]
Test Case: 448 | Input/Output: [(59 -19 -65 -1) -65]
Test Case: 449 | Input/Output: [(4 -12 -75 94) -75]
Test Case: 450 | Input/Output: [(33 -4 -39 -75) -75]
Test Case: 451 | Input/Output: [(-8 -24 61 -35) -35]
Test Case: 452 | Input/Output: [(45 75 -76 19) -76]
Test Case: 453 | Input/Output: [(16 10 97 -84) -84]
Test Case: 454 | Input/Output: [(-47 -24 -65 99) -65]
Test Case: 455 | Input/Output: [(-79 -46 8 -77) -79]
Test Case: 456 | Input/Output: [(-98 -25 -21 -96) -98]
Test Case: 457 | Input/Output: [(-21 -53 -67 26) -67]
Test Case: 458 | Input/Output: [(17 35 -84 -77) -84]
Test Case: 459 | Input/Output: [(3 6 15 -43) -43]
Test Case: 460 | Input/Output: [(12 -75 99 42) -75]
Test Case: 461 | Input/Output: [(24 -66 42 82) -66]
Test Case: 462 | Input/Output: [(21 96 40 91) 21]
Test Case: 463 | Input/Output: [(-45 -37 -99 67) -99]
Test Case: 464 | Input/Output: [(89 -81 59 -53) -81]
Test Case: 465 | Input/Output: [(81 26 -67 74) -67]
Test Case: 466 | Input/Output: [(-9 -63 -3 -66) -66]
Test Case: 467 | Input/Output: [(-48 78 -28 -14) -48]
Test Case: 468 | Input/Output: [(92 81 -10 91) -10]
Test Case: 469 | Input/Output: [(-30 25 -33 48) -33]
Test Case: 470 | Input/Output: [(17 -6 -19 35) -19]
Test Case: 471 | Input/Output: [(16 46 -40 -29) -40]
Test Case: 472 | Input/Output: [(-7 -44 85 -84) -84]
Test Case: 473 | Input/Output: [(81 -56 21 -7) -56]
Test Case: 474 | Input/Output: [(11 64 -30 90) -30]
Test Case: 475 | Input/Output: [(24 -28 -66 -98) -98]
Test Case: 476 | Input/Output: [(50 20 27 96) 20]
Test Case: 477 | Input/Output: [(31 90 -82 57) -82]
Test Case: 478 | Input/Output: [(10 65 -66 -94) -94]
Test Case: 479 | Input/Output: [(81 24 59 -83) -83]
Test Case: 480 | Input/Output: [(-63 -62 -69 -3) -69]
Test Case: 481 | Input/Output: [(41 2 59 72) 2]
Test Case: 482 | Input/Output: [(-87 80 -78 23) -87]
Test Case: 483 | Input/Output: [(-26 0 46 -34) -34]
Test Case: 484 | Input/Output: [(-77 -67 -20 -79) -79]
Test Case: 485 | Input/Output: [(66 -3 -36 -31) -36]
Test Case: 486 | Input/Output: [(-62 -27 84 65) -62]
Test Case: 487 | Input/Output: [(21 -63 81 -5) -63]
Test Case: 488 | Input/Output: [(-48 -48 52 -68) -68]
Test Case: 489 | Input/Output: [(45 65 81 -18) -18]
Test Case: 490 | Input/Output: [(-25 96 5 2) -25]
Test Case: 491 | Input/Output: [(-38 -68 39 -44) -68]
Test Case: 492 | Input/Output: [(79 21 -67 -31) -67]
Test Case: 493 | Input/Output: [(-98 -13 46 67) -98]
Test Case: 494 | Input/Output: [(88 -57 -70 72) -70]
Test Case: 495 | Input/Output: [(68 42 70 -59) -59]
Test Case: 496 | Input/Output: [(84 5 -86 36) -86]
Test Case: 497 | Input/Output: [(-79 -75 58 48) -79]
Test Case: 498 | Input/Output: [(7 62 -46 -59) -59]
Test Case: 499 | Input/Output: [(-40 25 19 44) -40]
Test Case: 500 | Input/Output: [(23 -60 90 -68) -68]
Test Case: 501 | Input/Output: [(-77 54 -24 -5) -77]
Test Case: 502 | Input/Output: [(73 37 7 -16) -16]
Test Case: 503 | Input/Output: [(83 -5 81 97) -5]
Test Case: 504 | Input/Output: [(-37 26 26 48) -37]
Test Case: 505 | Input/Output: [(93 -54 -100 52) -100]
Test Case: 506 | Input/Output: [(95 -20 45 16) -20]
Test Case: 507 | Input/Output: [(-19 86 13 -84) -84]
Test Case: 508 | Input/Output: [(-19 53 -42 12) -42]
Test Case: 509 | Input/Output: [(-89 -56 81 34) -89]
Test Case: 510 | Input/Output: [(-77 13 -32 -34) -77]
Test Case: 511 | Input/Output: [(-60 -78 90 80) -78]
Test Case: 512 | Input/Output: [(-5 67 -91 98) -91]
Test Case: 513 | Input/Output: [(74 -11 42 -13) -13]
Test Case: 514 | Input/Output: [(-87 -40 -37 70) -87]
Test Case: 515 | Input/Output: [(66 -6 -5 -74) -74]
Test Case: 516 | Input/Output: [(-34 -11 39 67) -34]
Test Case: 517 | Input/Output: [(100 -93 53 68) -93]
Test Case: 518 | Input/Output: [(76 -55 8 38) -55]
Test Case: 519 | Input/Output: [(39 41 -45 15) -45]
Test Case: 520 | Input/Output: [(-29 -51 -24 40) -51]
Test Case: 521 | Input/Output: [(-60 -57 95 70) -60]
Test Case: 522 | Input/Output: [(13 -46 -66 -90) -90]
Test Case: 523 | Input/Output: [(51 65 40 58) 40]
Test Case: 524 | Input/Output: [(-25 26 18 -34) -34]
Test Case: 525 | Input/Output: [(-84 -4 63 54) -84]
Test Case: 526 | Input/Output: [(-39 -15 49 -3) -39]
Test Case: 527 | Input/Output: [(-39 57 -54 23) -54]
Test Case: 528 | Input/Output: [(-22 51 -90 41) -90]
Test Case: 529 | Input/Output: [(56 100 88 -59) -59]
Test Case: 530 | Input/Output: [(-7 -72 -35 -98) -98]
Test Case: 531 | Input/Output: [(-52 77 40 -84) -84]
Test Case: 532 | Input/Output: [(-52 -97 -63 -71) -97]
Test Case: 533 | Input/Output: [(26 -84 -49 -72) -84]
Test Case: 534 | Input/Output: [(19 5 69 78) 5]
Test Case: 535 | Input/Output: [(-95 7 68 22) -95]
Test Case: 536 | Input/Output: [(25 59 -1 32) -1]
Test Case: 537 | Input/Output: [(-39 67 47 4) -39]
Test Case: 538 | Input/Output: [(-10 -86 -45 -84) -86]
Test Case: 539 | Input/Output: [(80 -24 -79 48) -79]
Test Case: 540 | Input/Output: [(-76 82 77 -12) -76]
Test Case: 541 | Input/Output: [(96 70 -80 92) -80]
Test Case: 542 | Input/Output: [(64 74 52 -67) -67]
Test Case: 543 | Input/Output: [(-17 -29 -15 57) -29]
Test Case: 544 | Input/Output: [(53 4 -96 22) -96]
Test Case: 545 | Input/Output: [(50 77 67 69) 50]
Test Case: 546 | Input/Output: [(-5 -73 18 59) -73]
Test Case: 547 | Input/Output: [(-43 40 98 2) -43]
Test Case: 548 | Input/Output: [(4 -34 -48 29) -48]
Test Case: 549 | Input/Output: [(0 11 -83 -76) -83]
Test Case: 550 | Input/Output: [(8 -93 77 88) -93]
Test Case: 551 | Input/Output: [(35 -66 12 24) -66]
Test Case: 552 | Input/Output: [(42 -70 -8 -99) -99]
Test Case: 553 | Input/Output: [(12 20 64 -89) -89]
Test Case: 554 | Input/Output: [(-85 0 -40 -44) -85]
Test Case: 555 | Input/Output: [(39 60 91 -14) -14]
Test Case: 556 | Input/Output: [(97 35 2 85) 2]
Test Case: 557 | Input/Output: [(-90 -20 -47 49) -90]
Test Case: 558 | Input/Output: [(1 -28 98 46) -28]
Test Case: 559 | Input/Output: [(26 -94 -17 99) -94]
Test Case: 560 | Input/Output: [(-67 -19 -50 -43) -67]
Test Case: 561 | Input/Output: [(-15 -30 52 72) -30]
Test Case: 562 | Input/Output: [(-64 -38 -25 -46) -64]
Test Case: 563 | Input/Output: [(-79 50 72 -85) -85]
Test Case: 564 | Input/Output: [(-2 2 100 -49) -49]
Test Case: 565 | Input/Output: [(95 89 -16 -77) -77]
Test Case: 566 | Input/Output: [(-62 33 70 -39) -62]
Test Case: 567 | Input/Output: [(83 8 -19 -44) -44]
Test Case: 568 | Input/Output: [(4 -88 -34 64) -88]
Test Case: 569 | Input/Output: [(-5 -91 23 -36) -91]
Test Case: 570 | Input/Output: [(-36 -9 52 -52) -52]
Test Case: 571 | Input/Output: [(-68 97 -55 -7) -68]
Test Case: 572 | Input/Output: [(26 3 75 -23) -23]
Test Case: 573 | Input/Output: [(-30 -35 13 -22) -35]
Test Case: 574 | Input/Output: [(-20 19 39 -88) -88]
Test Case: 575 | Input/Output: [(8 -25 3 -47) -47]
Test Case: 576 | Input/Output: [(-1 -33 30 7) -33]
Test Case: 577 | Input/Output: [(-43 -39 30 92) -43]
Test Case: 578 | Input/Output: [(99 -8 75 -81) -81]
Test Case: 579 | Input/Output: [(64 -63 47 -82) -82]
Test Case: 580 | Input/Output: [(-78 74 64 84) -78]
Test Case: 581 | Input/Output: [(92 98 -12 -89) -89]
Test Case: 582 | Input/Output: [(-81 2 -72 71) -81]
Test Case: 583 | Input/Output: [(-56 -42 -59 4) -59]
Test Case: 584 | Input/Output: [(13 -5 -20 -97) -97]
Test Case: 585 | Input/Output: [(-97 43 100 -100) -100]
Test Case: 586 | Input/Output: [(-54 85 57 7) -54]
Test Case: 587 | Input/Output: [(-12 30 -19 76) -19]
Test Case: 588 | Input/Output: [(-79 2 23 42) -79]
Test Case: 589 | Input/Output: [(-42 -11 45 -67) -67]
Test Case: 590 | Input/Output: [(-8 -25 38 -90) -90]
Test Case: 591 | Input/Output: [(-70 -46 29 53) -70]
Test Case: 592 | Input/Output: [(83 99 74 59) 59]
Test Case: 593 | Input/Output: [(-52 70 74 -63) -63]
Test Case: 594 | Input/Output: [(95 -50 -57 63) -57]
Test Case: 595 | Input/Output: [(-24 40 -19 58) -24]
Test Case: 596 | Input/Output: [(-68 89 29 -76) -76]
Test Case: 597 | Input/Output: [(-31 -18 0 -44) -44]
Test Case: 598 | Input/Output: [(61 -44 19 12) -44]
Test Case: 599 | Input/Output: [(-39 -68 -63 76) -68]
Test Case: 600 | Input/Output: [(-80 -50 -9 48) -80]
Test Case: 601 | Input/Output: [(-54 -56 -70 -32) -70]
Test Case: 602 | Input/Output: [(75 84 46 -79) -79]
Test Case: 603 | Input/Output: [(68 4 61 -99) -99]
Test Case: 604 | Input/Output: [(59 -22 -81 45) -81]
Test Case: 605 | Input/Output: [(-84 -48 -90 -22) -90]
Test Case: 606 | Input/Output: [(-26 -1 56 89) -26]
Test Case: 607 | Input/Output: [(-50 -48 -99 53) -99]
Test Case: 608 | Input/Output: [(38 43 22 -39) -39]
Test Case: 609 | Input/Output: [(-98 49 93 -53) -98]
Test Case: 610 | Input/Output: [(29 82 -39 27) -39]
Test Case: 611 | Input/Output: [(25 -91 96 56) -91]
Test Case: 612 | Input/Output: [(-59 -4 -90 -96) -96]
Test Case: 613 | Input/Output: [(94 -90 64 21) -90]
Test Case: 614 | Input/Output: [(-21 -68 -96 -21) -96]
Test Case: 615 | Input/Output: [(-42 -89 41 50) -89]
Test Case: 616 | Input/Output: [(-19 -47 -70 -15) -70]
Test Case: 617 | Input/Output: [(-16 30 67 -67) -67]
Test Case: 618 | Input/Output: [(-54 19 75 95) -54]
Test Case: 619 | Input/Output: [(72 -94 99 5) -94]
Test Case: 620 | Input/Output: [(-11 -82 96 -60) -82]
Test Case: 621 | Input/Output: [(-41 -6 -54 -38) -54]
Test Case: 622 | Input/Output: [(-56 4 -99 10) -99]
Test Case: 623 | Input/Output: [(-4 43 -34 -48) -48]
Test Case: 624 | Input/Output: [(64 -34 75 -25) -34]
Test Case: 625 | Input/Output: [(-66 20 97 -84) -84]
Test Case: 626 | Input/Output: [(-41 69 97 36) -41]
Test Case: 627 | Input/Output: [(100 39 61 16) 16]
Test Case: 628 | Input/Output: [(-96 28 42 94) -96]
Test Case: 629 | Input/Output: [(-15 28 78 35) -15]
Test Case: 630 | Input/Output: [(-1 98 53 34) -1]
Test Case: 631 | Input/Output: [(-14 2 -13 -91) -91]
Test Case: 632 | Input/Output: [(37 -82 -88 -54) -88]
Test Case: 633 | Input/Output: [(49 -24 -80 -49) -80]
Test Case: 634 | Input/Output: [(81 -11 8 92) -11]
Test Case: 635 | Input/Output: [(-58 49 -25 -4) -58]
Test Case: 636 | Input/Output: [(-33 -58 -57 95) -58]
Test Case: 637 | Input/Output: [(-65 43 -8 91) -65]
Test Case: 638 | Input/Output: [(83 21 -68 -21) -68]
Test Case: 639 | Input/Output: [(-18 9 -27 26) -27]
Test Case: 640 | Input/Output: [(4 -12 22 54) -12]
Test Case: 641 | Input/Output: [(-9 77 99 78) -9]
Test Case: 642 | Input/Output: [(23 69 100 -10) -10]
Test Case: 643 | Input/Output: [(-60 81 63 -63) -63]
Test Case: 644 | Input/Output: [(-91 89 -85 -32) -91]
Test Case: 645 | Input/Output: [(-81 75 13 -67) -81]
Test Case: 646 | Input/Output: [(91 11 -75 -83) -83]
Test Case: 647 | Input/Output: [(79 -78 52 -77) -78]
Test Case: 648 | Input/Output: [(-23 92 -100 60) -100]
Test Case: 649 | Input/Output: [(68 -96 44 -42) -96]
Test Case: 650 | Input/Output: [(6 -78 13 -84) -84]
Test Case: 651 | Input/Output: [(0 -20 18 82) -20]
Test Case: 652 | Input/Output: [(-81 100 56 -93) -93]
Test Case: 653 | Input/Output: [(-97 -86 67 78) -97]
Test Case: 654 | Input/Output: [(-10 -44 65 2) -44]
Test Case: 655 | Input/Output: [(-42 -99 -15 19) -99]
Test Case: 656 | Input/Output: [(83 95 -88 -2) -88]
Test Case: 657 | Input/Output: [(-50 94 -54 -64) -64]
Test Case: 658 | Input/Output: [(53 76 -34 50) -34]
Test Case: 659 | Input/Output: [(-30 12 7 -69) -69]
Test Case: 660 | Input/Output: [(40 -87 -14 -78) -87]
Test Case: 661 | Input/Output: [(82 72 -57 72) -57]
Test Case: 662 | Input/Output: [(79 -28 40 -60) -60]
Test Case: 663 | Input/Output: [(-51 -60 -21 -8) -60]
Test Case: 664 | Input/Output: [(-62 99 90 -82) -82]
Test Case: 665 | Input/Output: [(58 -36 52 73) -36]
Test Case: 666 | Input/Output: [(75 49 -25 -75) -75]
Test Case: 667 | Input/Output: [(67 -99 94 -86) -99]
Test Case: 668 | Input/Output: [(-69 1 -76 77) -76]
Test Case: 669 | Input/Output: [(8 -92 82 -38) -92]
Test Case: 670 | Input/Output: [(99 8 -54 29) -54]
Test Case: 671 | Input/Output: [(-100 42 39 18) -100]
Test Case: 672 | Input/Output: [(57 -46 78 17) -46]
Test Case: 673 | Input/Output: [(-12 -15 17 92) -15]
Test Case: 674 | Input/Output: [(-16 -69 97 -89) -89]
Test Case: 675 | Input/Output: [(21 -41 -62 28) -62]
Test Case: 676 | Input/Output: [(75 -47 -84 -76) -84]
Test Case: 677 | Input/Output: [(87 61 -11 94) -11]
Test Case: 678 | Input/Output: [(13 98 96 -95) -95]
Test Case: 679 | Input/Output: [(78 87 46 38) 38]
Test Case: 680 | Input/Output: [(72 -9 17 -58) -58]
Test Case: 681 | Input/Output: [(-10 23 71 -98) -98]
Test Case: 682 | Input/Output: [(100 74 46 44) 44]
Test Case: 683 | Input/Output: [(-81 -87 -84 -57) -87]
Test Case: 684 | Input/Output: [(69 86 58 -37) -37]
Test Case: 685 | Input/Output: [(-17 -33 4 68) -33]
Test Case: 686 | Input/Output: [(34 -55 94 -64) -64]
Test Case: 687 | Input/Output: [(90 -1 60 80) -1]
Test Case: 688 | Input/Output: [(-42 -11 72 84) -42]
Test Case: 689 | Input/Output: [(38 -26 45 -9) -26]
Test Case: 690 | Input/Output: [(88 -20 3 -66) -66]
Test Case: 691 | Input/Output: [(-45 56 -80 -22) -80]
Test Case: 692 | Input/Output: [(-79 95 -3 37) -79]
Test Case: 693 | Input/Output: [(-29 92 5 -50) -50]
Test Case: 694 | Input/Output: [(-75 2 -73 -35) -75]
Test Case: 695 | Input/Output: [(-34 -59 4 85) -59]
Test Case: 696 | Input/Output: [(52 37 45 94) 37]
Test Case: 697 | Input/Output: [(-10 -52 -5 -19) -52]
Test Case: 698 | Input/Output: [(99 -71 -51 -24) -71]
Test Case: 699 | Input/Output: [(74 87 0 71) 0]
Test Case: 700 | Input/Output: [(23 -41 -97 -89) -97]
Test Case: 701 | Input/Output: [(45 -69 -85 -100) -100]
Test Case: 702 | Input/Output: [(91 64 25 -13) -13]
Test Case: 703 | Input/Output: [(-60 -51 -54 99) -60]
Test Case: 704 | Input/Output: [(47 73 64 77) 47]
Test Case: 705 | Input/Output: [(-46 -15 -57 37) -57]
Test Case: 706 | Input/Output: [(71 29 -59 14) -59]
Test Case: 707 | Input/Output: [(26 -66 90 36) -66]
Test Case: 708 | Input/Output: [(49 -28 5 54) -28]
Test Case: 709 | Input/Output: [(26 -84 -76 59) -84]
Test Case: 710 | Input/Output: [(-57 59 28 26) -57]
Test Case: 711 | Input/Output: [(-98 -77 84 88) -98]
Test Case: 712 | Input/Output: [(-54 80 -31 64) -54]
Test Case: 713 | Input/Output: [(67 -24 26 45) -24]
Test Case: 714 | Input/Output: [(71 66 89 14) 14]
Test Case: 715 | Input/Output: [(84 -60 73 8) -60]
Test Case: 716 | Input/Output: [(-65 4 68 -25) -65]
Test Case: 717 | Input/Output: [(-95 -23 -38 -31) -95]
Test Case: 718 | Input/Output: [(-85 28 86 33) -85]
Test Case: 719 | Input/Output: [(-50 -49 90 -79) -79]
Test Case: 720 | Input/Output: [(-59 -66 79 73) -66]
Test Case: 721 | Input/Output: [(-14 -66 63 -59) -66]
Test Case: 722 | Input/Output: [(31 93 -52 -70) -70]
Test Case: 723 | Input/Output: [(-94 77 -5 6) -94]
Test Case: 724 | Input/Output: [(-94 -88 -58 6) -94]
Test Case: 725 | Input/Output: [(-23 67 77 29) -23]
Test Case: 726 | Input/Output: [(-92 70 -24 0) -92]
Test Case: 727 | Input/Output: [(-94 18 -13 3) -94]
Test Case: 728 | Input/Output: [(-61 90 -26 -38) -61]
Test Case: 729 | Input/Output: [(17 -22 89 -38) -38]
Test Case: 730 | Input/Output: [(78 61 -46 21) -46]
Test Case: 731 | Input/Output: [(82 37 8 54) 8]
Test Case: 732 | Input/Output: [(-60 -46 -32 88) -60]
Test Case: 733 | Input/Output: [(-54 -86 -46 -33) -86]
Test Case: 734 | Input/Output: [(78 3 -21 -61) -61]
Test Case: 735 | Input/Output: [(54 40 61 3) 3]
Test Case: 736 | Input/Output: [(-59 10 -40 -39) -59]
Test Case: 737 | Input/Output: [(76 -54 93 6) -54]
Test Case: 738 | Input/Output: [(18 61 60 -26) -26]
Test Case: 739 | Input/Output: [(-36 -79 33 2) -79]
Test Case: 740 | Input/Output: [(73 -76 66 -60) -76]
Test Case: 741 | Input/Output: [(-8 9 -90 77) -90]
Test Case: 742 | Input/Output: [(73 13 57 24) 13]
Test Case: 743 | Input/Output: [(27 -1 -62 91) -62]
Test Case: 744 | Input/Output: [(45 73 -93 11) -93]
Test Case: 745 | Input/Output: [(29 -44 -61 -15) -61]
Test Case: 746 | Input/Output: [(51 91 45 -72) -72]
Test Case: 747 | Input/Output: [(-88 -66 -61 -81) -88]
Test Case: 748 | Input/Output: [(21 -42 -73 -79) -79]
Test Case: 749 | Input/Output: [(-29 79 50 -14) -29]
Test Case: 750 | Input/Output: [(-11 -25 32 64) -25]
Test Case: 751 | Input/Output: [(6 68 59 -48) -48]
Test Case: 752 | Input/Output: [(-45 70 -39 -41) -45]
Test Case: 753 | Input/Output: [(94 11 -44 -28) -44]
Test Case: 754 | Input/Output: [(-55 -70 33 -69) -70]
Test Case: 755 | Input/Output: [(-88 12 -11 16) -88]
Test Case: 756 | Input/Output: [(-45 -92 -7 96) -92]
Test Case: 757 | Input/Output: [(28 29 -78 -42) -78]
Test Case: 758 | Input/Output: [(75 35 28 -67) -67]
Test Case: 759 | Input/Output: [(-32 -69 94 -45) -69]
Test Case: 760 | Input/Output: [(7 -74 -33 21) -74]
Test Case: 761 | Input/Output: [(65 -89 -16 59) -89]
Test Case: 762 | Input/Output: [(1 75 97 -95) -95]
Test Case: 763 | Input/Output: [(5 -57 -45 22) -57]
Test Case: 764 | Input/Output: [(70 -9 -43 -30) -43]
Test Case: 765 | Input/Output: [(9 -39 -97 -19) -97]
Test Case: 766 | Input/Output: [(-42 -97 22 -10) -97]
Test Case: 767 | Input/Output: [(44 -97 -39 46) -97]
Test Case: 768 | Input/Output: [(21 13 -2 -7) -7]
Test Case: 769 | Input/Output: [(-41 12 90 35) -41]
Test Case: 770 | Input/Output: [(85 24 17 -24) -24]
Test Case: 771 | Input/Output: [(26 87 96 -17) -17]
Test Case: 772 | Input/Output: [(52 58 1 6) 1]
Test Case: 773 | Input/Output: [(88 -65 -39 67) -65]
Test Case: 774 | Input/Output: [(28 -41 64 -30) -41]
Test Case: 775 | Input/Output: [(-72 -84 15 73) -84]
Test Case: 776 | Input/Output: [(-50 92 16 42) -50]
Test Case: 777 | Input/Output: [(78 88 75 -20) -20]
Test Case: 778 | Input/Output: [(-68 43 93 -90) -90]
Test Case: 779 | Input/Output: [(99 94 -86 -22) -86]
Test Case: 780 | Input/Output: [(-98 58 -94 -10) -98]
Test Case: 781 | Input/Output: [(-39 -39 63 72) -39]
Test Case: 782 | Input/Output: [(13 -15 -81 -46) -81]
Test Case: 783 | Input/Output: [(-23 -23 -9 -35) -35]
Test Case: 784 | Input/Output: [(11 24 78 -6) -6]
Test Case: 785 | Input/Output: [(-66 38 47 -39) -66]
Test Case: 786 | Input/Output: [(-92 -21 -35 -52) -92]
Test Case: 787 | Input/Output: [(12 -97 -59 58) -97]
Test Case: 788 | Input/Output: [(-94 16 57 66) -94]
Test Case: 789 | Input/Output: [(-83 61 83 12) -83]
Test Case: 790 | Input/Output: [(-70 33 76 -67) -70]
Test Case: 791 | Input/Output: [(-57 -27 -51 -39) -57]
Test Case: 792 | Input/Output: [(99 48 -3 -20) -20]
Test Case: 793 | Input/Output: [(98 -17 96 -71) -71]
Test Case: 794 | Input/Output: [(22 31 77 26) 22]
Test Case: 795 | Input/Output: [(17 -80 77 43) -80]
Test Case: 796 | Input/Output: [(-85 80 -36 81) -85]
Test Case: 797 | Input/Output: [(14 -50 -98 -78) -98]
Test Case: 798 | Input/Output: [(-24 96 -3 -96) -96]
Test Case: 799 | Input/Output: [(-73 -32 -1 66) -73]
Test Case: 800 | Input/Output: [(44 63 -80 37) -80]
Test Case: 801 | Input/Output: [(0 61 -22 46) -22]
Test Case: 802 | Input/Output: [(-54 -12 53 -68) -68]
Test Case: 803 | Input/Output: [(74 84 -1 8) -1]
Test Case: 804 | Input/Output: [(-14 -2 63 2) -14]
Test Case: 805 | Input/Output: [(-33 98 -46 -6) -46]
Test Case: 806 | Input/Output: [(-23 -69 -19 -42) -69]
Test Case: 807 | Input/Output: [(70 -39 64 2) -39]
Test Case: 808 | Input/Output: [(-29 50 6 -97) -97]
Test Case: 809 | Input/Output: [(88 41 82 -55) -55]
Test Case: 810 | Input/Output: [(68 -39 -87 -97) -97]
Test Case: 811 | Input/Output: [(75 -56 -59 -34) -59]
Test Case: 812 | Input/Output: [(-79 -57 54 -75) -79]
Test Case: 813 | Input/Output: [(-97 58 91 -19) -97]
Test Case: 814 | Input/Output: [(79 94 -94 40) -94]
Test Case: 815 | Input/Output: [(98 90 44 48) 44]
Test Case: 816 | Input/Output: [(54 -35 64 42) -35]
Test Case: 817 | Input/Output: [(78 97 -97 -15) -97]
Test Case: 818 | Input/Output: [(-1 -84 70 -30) -84]
Test Case: 819 | Input/Output: [(-2 95 -94 -76) -94]
Test Case: 820 | Input/Output: [(100 -20 -83 43) -83]
Test Case: 821 | Input/Output: [(-49 66 92 -24) -49]
Test Case: 822 | Input/Output: [(24 100 21 98) 21]
Test Case: 823 | Input/Output: [(-49 88 -59 -70) -70]
Test Case: 824 | Input/Output: [(84 -8 -91 -57) -91]
Test Case: 825 | Input/Output: [(1 -94 -43 -94) -94]
Test Case: 826 | Input/Output: [(-11 85 -10 13) -11]
Test Case: 827 | Input/Output: [(-38 -25 -97 -51) -97]
Test Case: 828 | Input/Output: [(29 -51 18 32) -51]
Test Case: 829 | Input/Output: [(90 -97 -26 50) -97]
Test Case: 830 | Input/Output: [(-2 55 3 53) -2]
Test Case: 831 | Input/Output: [(-42 67 -9 48) -42]
Test Case: 832 | Input/Output: [(-3 2 99 47) -3]
Test Case: 833 | Input/Output: [(-37 82 -61 40) -61]
Test Case: 834 | Input/Output: [(24 87 88 -64) -64]
Test Case: 835 | Input/Output: [(87 17 -80 -84) -84]
Test Case: 836 | Input/Output: [(9 -32 50 45) -32]
Test Case: 837 | Input/Output: [(9 -57 13 -46) -57]
Test Case: 838 | Input/Output: [(96 96 -100 17) -100]
Test Case: 839 | Input/Output: [(-28 40 11 -25) -28]
Test Case: 840 | Input/Output: [(-87 -44 60 24) -87]
Test Case: 841 | Input/Output: [(-41 -25 -39 -19) -41]
Test Case: 842 | Input/Output: [(-12 32 65 -14) -14]
Test Case: 843 | Input/Output: [(-94 56 30 70) -94]
Test Case: 844 | Input/Output: [(43 -6 -64 66) -64]
Test Case: 845 | Input/Output: [(-6 53 100 96) -6]
Test Case: 846 | Input/Output: [(86 18 -57 -92) -92]
Test Case: 847 | Input/Output: [(20 89 54 76) 20]
Test Case: 848 | Input/Output: [(-25 96 24 -25) -25]
Test Case: 849 | Input/Output: [(-68 -48 91 20) -68]
Test Case: 850 | Input/Output: [(12 -82 36 64) -82]
Test Case: 851 | Input/Output: [(-6 -78 71 -55) -78]
Test Case: 852 | Input/Output: [(-86 -36 -4 37) -86]
Test Case: 853 | Input/Output: [(-40 -56 -72 97) -72]
Test Case: 854 | Input/Output: [(-62 -51 10 -98) -98]
Test Case: 855 | Input/Output: [(62 18 -34 63) -34]
Test Case: 856 | Input/Output: [(81 -18 98 81) -18]
Test Case: 857 | Input/Output: [(-70 28 -48 -10) -70]
Test Case: 858 | Input/Output: [(69 -69 -83 58) -83]
Test Case: 859 | Input/Output: [(14 -6 12 -78) -78]
Test Case: 860 | Input/Output: [(54 31 72 -42) -42]
Test Case: 861 | Input/Output: [(-81 -17 -43 83) -81]
Test Case: 862 | Input/Output: [(68 89 25 11) 11]
Test Case: 863 | Input/Output: [(-88 -90 -88 -91) -91]
Test Case: 864 | Input/Output: [(29 21 -19 -12) -19]
Test Case: 865 | Input/Output: [(-91 -11 73 -59) -91]
Test Case: 866 | Input/Output: [(19 -62 -94 0) -94]
Test Case: 867 | Input/Output: [(-15 -13 -56 -57) -57]
Test Case: 868 | Input/Output: [(-47 -61 -91 31) -91]
Test Case: 869 | Input/Output: [(80 0 70 -42) -42]
Test Case: 870 | Input/Output: [(-52 -45 61 -11) -52]
Test Case: 871 | Input/Output: [(79 -67 17 17) -67]
Test Case: 872 | Input/Output: [(19 -8 69 -68) -68]
Test Case: 873 | Input/Output: [(-75 8 -10 49) -75]
Test Case: 874 | Input/Output: [(-69 11 38 -91) -91]
Test Case: 875 | Input/Output: [(-61 67 -97 -30) -97]
Test Case: 876 | Input/Output: [(-1 -88 -72 -3) -88]
Test Case: 877 | Input/Output: [(13 -65 86 -22) -65]
Test Case: 878 | Input/Output: [(88 77 76 -74) -74]
Test Case: 879 | Input/Output: [(-82 8 -63 5) -82]
Test Case: 880 | Input/Output: [(-66 -26 -67 90) -67]
Test Case: 881 | Input/Output: [(73 83 73 -1) -1]
Test Case: 882 | Input/Output: [(14 -84 -100 87) -100]
Test Case: 883 | Input/Output: [(-4 -65 84 29) -65]
Test Case: 884 | Input/Output: [(49 -16 97 20) -16]
Test Case: 885 | Input/Output: [(82 -35 -24 -21) -35]
Test Case: 886 | Input/Output: [(82 -2 56 -25) -25]
Test Case: 887 | Input/Output: [(-37 23 43 42) -37]
Test Case: 888 | Input/Output: [(39 -10 35 -23) -23]
Test Case: 889 | Input/Output: [(97 12 -55 -19) -55]
Test Case: 890 | Input/Output: [(-3 -57 -78 57) -78]
Test Case: 891 | Input/Output: [(70 34 -68 46) -68]
Test Case: 892 | Input/Output: [(45 -94 73 68) -94]
Test Case: 893 | Input/Output: [(84 63 16 21) 16]
Test Case: 894 | Input/Output: [(-12 71 6 72) -12]
Test Case: 895 | Input/Output: [(-100 68 57 41) -100]
Test Case: 896 | Input/Output: [(-71 2 11 -50) -71]
Test Case: 897 | Input/Output: [(-86 -16 14 0) -86]
Test Case: 898 | Input/Output: [(15 55 20 51) 15]
Test Case: 899 | Input/Output: [(95 34 59 -28) -28]
Test Case: 900 | Input/Output: [(-80 -5 -23 -16) -80]
Test Case: 901 | Input/Output: [(79 -59 -6 -97) -97]
Test Case: 902 | Input/Output: [(-8 80 -29 52) -29]
Test Case: 903 | Input/Output: [(-74 81 57 -64) -74]
Test Case: 904 | Input/Output: [(-77 76 -29 36) -77]
Test Case: 905 | Input/Output: [(-22 -84 85 80) -84]
Test Case: 906 | Input/Output: [(-36 -14 -72 22) -72]
Test Case: 907 | Input/Output: [(71 -8 89 -11) -11]
Test Case: 908 | Input/Output: [(56 -5 16 -45) -45]
Test Case: 909 | Input/Output: [(8 -61 61 79) -61]
Test Case: 910 | Input/Output: [(-15 29 -14 13) -15]
Test Case: 911 | Input/Output: [(-61 -32 -14 -42) -61]
Test Case: 912 | Input/Output: [(-33 40 -80 97) -80]
Test Case: 913 | Input/Output: [(90 49 -22 -48) -48]
Test Case: 914 | Input/Output: [(54 35 -15 -34) -34]
Test Case: 915 | Input/Output: [(77 5 -30 30) -30]
Test Case: 916 | Input/Output: [(-31 -36 75 -73) -73]
Test Case: 917 | Input/Output: [(35 -36 -51 -88) -88]
Test Case: 918 | Input/Output: [(87 -30 61 41) -30]
Test Case: 919 | Input/Output: [(-35 20 -31 50) -35]
Test Case: 920 | Input/Output: [(96 27 -96 -78) -96]
Test Case: 921 | Input/Output: [(-80 47 65 -55) -80]
Test Case: 922 | Input/Output: [(69 56 19 46) 19]
Test Case: 923 | Input/Output: [(25 -66 -1 -72) -72]
Test Case: 924 | Input/Output: [(-74 -37 -68 -94) -94]
Test Case: 925 | Input/Output: [(-54 32 -28 -72) -72]
Test Case: 926 | Input/Output: [(55 -48 32 20) -48]
Test Case: 927 | Input/Output: [(-74 75 -40 88) -74]
Test Case: 928 | Input/Output: [(26 94 -41 66) -41]
Test Case: 929 | Input/Output: [(88 -12 -97 12) -97]
Test Case: 930 | Input/Output: [(29 36 50 54) 29]
Test Case: 931 | Input/Output: [(81 -93 82 -82) -93]
Test Case: 932 | Input/Output: [(-56 22 17 -56) -56]
Test Case: 933 | Input/Output: [(-90 86 63 9) -90]
Test Case: 934 | Input/Output: [(-48 100 34 -17) -48]
Test Case: 935 | Input/Output: [(86 -15 -1 -78) -78]
Test Case: 936 | Input/Output: [(-28 -77 -80 -87) -87]
Test Case: 937 | Input/Output: [(9 70 -39 96) -39]
Test Case: 938 | Input/Output: [(69 -51 -67 82) -67]
Test Case: 939 | Input/Output: [(79 46 -56 31) -56]
Test Case: 940 | Input/Output: [(54 84 38 99) 38]
Test Case: 941 | Input/Output: [(83 19 -67 65) -67]
Test Case: 942 | Input/Output: [(29 83 -82 57) -82]
Test Case: 943 | Input/Output: [(-17 -64 -91 78) -91]
Test Case: 944 | Input/Output: [(92 11 57 -91) -91]
Test Case: 945 | Input/Output: [(14 -10 -77 -86) -86]
Test Case: 946 | Input/Output: [(8 -67 43 -45) -67]
Test Case: 947 | Input/Output: [(-63 -11 81 44) -63]
Test Case: 948 | Input/Output: [(98 -2 -59 21) -59]
Test Case: 949 | Input/Output: [(68 19 40 33) 19]
Test Case: 950 | Input/Output: [(-98 -37 7 11) -98]
Test Case: 951 | Input/Output: [(30 -20 -43 50) -43]
Test Case: 952 | Input/Output: [(-93 8 84 -93) -93]
Test Case: 953 | Input/Output: [(-61 -53 -40 -82) -82]
Test Case: 954 | Input/Output: [(57 -94 -47 -100) -100]
Test Case: 955 | Input/Output: [(3 21 40 97) 3]
Test Case: 956 | Input/Output: [(3 -56 -41 65) -56]
Test Case: 957 | Input/Output: [(-43 1 48 97) -43]
Test Case: 958 | Input/Output: [(64 -64 -21 46) -64]
Test Case: 959 | Input/Output: [(73 29 90 67) 29]
Test Case: 960 | Input/Output: [(39 76 1 83) 1]
Test Case: 961 | Input/Output: [(-93 -37 -51 -72) -93]
Test Case: 962 | Input/Output: [(49 -85 -83 -83) -85]
Test Case: 963 | Input/Output: [(-11 -99 -77 56) -99]
Test Case: 964 | Input/Output: [(53 -86 22 -79) -86]
Test Case: 965 | Input/Output: [(-26 -27 1 14) -27]
Test Case: 966 | Input/Output: [(40 66 47 39) 39]
Test Case: 967 | Input/Output: [(-80 -68 61 -59) -80]
Test Case: 968 | Input/Output: [(92 26 -18 26) -18]
Test Case: 969 | Input/Output: [(-70 24 60 -86) -86]
Test Case: 970 | Input/Output: [(75 -46 70 79) -46]
Test Case: 971 | Input/Output: [(85 -30 65 -22) -30]
Test Case: 972 | Input/Output: [(-99 -43 88 13) -99]
Test Case: 973 | Input/Output: [(-49 91 -19 -39) -49]
Test Case: 974 | Input/Output: [(97 -41 96 -94) -94]
Test Case: 975 | Input/Output: [(10 67 41 -54) -54]
Test Case: 976 | Input/Output: [(-82 55 -44 32) -82]
Test Case: 977 | Input/Output: [(-22 -25 -51 -3) -51]
Test Case: 978 | Input/Output: [(-94 25 76 47) -94]
Test Case: 979 | Input/Output: [(90 -33 -38 74) -38]
Test Case: 980 | Input/Output: [(84 68 41 -93) -93]
Test Case: 981 | Input/Output: [(7 1 -60 -67) -67]
Test Case: 982 | Input/Output: [(2 -36 34 86) -36]
Test Case: 983 | Input/Output: [(-47 9 -69 -50) -69]
Test Case: 984 | Input/Output: [(79 -16 2 -46) -46]
Test Case: 985 | Input/Output: [(-4 -84 -15 -97) -97]
Test Case: 986 | Input/Output: [(-63 -61 -65 13) -65]
Test Case: 987 | Input/Output: [(99 -5 16 -35) -35]
Test Case: 988 | Input/Output: [(-50 79 -51 -68) -68]
Test Case: 989 | Input/Output: [(13 -71 71 -51) -71]
Test Case: 990 | Input/Output: [(48 60 -78 18) -78]
Test Case: 991 | Input/Output: [(-46 -79 -8 69) -79]
Test Case: 992 | Input/Output: [(-95 47 28 -32) -95]
Test Case: 993 | Input/Output: [(29 15 -71 -11) -71]
Test Case: 994 | Input/Output: [(-37 -72 34 89) -72]
Test Case: 995 | Input/Output: [(-16 4 -26 39) -26]
Test Case: 996 | Input/Output: [(58 -100 -16 -71) -100]
Test Case: 997 | Input/Output: [(40 4 47 -20) -20]
Test Case: 998 | Input/Output: [(93 -7 -57 85) -57]
Test Case: 999 | Input/Output: [(-4 73 -56 21) -56]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 45 31 -6 -26 66 16 -122 77 3 -124 -6 77 -22 42 -114 106
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[40 40 40 -90] -90] [[-20 -20 -20 -9] -20] [[-71 -87 -87 -87] -87] [[21 21 90 21] 21] [[-99 92 -99 -99] -99] [[88 88 -68 88] -68] [[51 51 94 51] 51] [[54 -80 54 54] -80] [[-68 -68 20 -68] -68] [[-94 44 44 44] -94] [(49 49 49 49) 49] [(94 94 94 94) 94] [(63 63 63 63) 63] [(91 91 91 91) 91] [(82 82 82 82) 82] [(96 16 41 85) 16] [(17 12 91 69) 12] [(46 57 41 9) 9] [(40 5 68 7) 5] [(32 5 37 54) 5] [(52 42 32 84) 32] [(40 95 41 91) 40] [(13 38 31 31) 13] [(83 13 80 19) 13] [(32 92 80 14) 14] [(57 66 55 5) 5] [(86 39 23 50) 23] [(13 16 6 81) 6] [(41 18 70 54) 18] [(66 86 73 11) 11] [(100 17 26 99) 17] [(77 77 68 0) 0] [(64 87 70 30) 30] [(4 96 0 17) 0] [(74 85 71 32) 32] [(5 81 55 -64) -64] [(-27 87 39 -58) -58] [(71 75 10 -21) -21] [(-98 -72 -54 26) -98] [(-34 -92 100 -11) -92] [(51 -29 79 36) -29] [(-59 -48 -29 -88) -88] [(-67 -48 -42 18) -67] [(-30 52 -47 9) -47] [(19 -84 -37 -3) -84] [(75 -29 -7 -53) -53] [(-74 84 -40 -62) -74] [(-90 -95 -45 -28) -95] [(-65 -96 96 65) -96] [(-55 46 -69 93) -69] [(4 -26 -41 -51) -51] [(88 -22 78 70) -22] [(-89 -94 85 36) -94] [(71 -85 44 -76) -85] [(-75 98 73 86) -75] [(-55 -7 -15 100) -55] [(22 -14 -74 -48) -74] [(84 -78 -75 48) -78] [(26 66 45 -54) -54] [(-17 -52 29 76) -52] [(-25 -21 31 10) -25] [(-27 30 -88 21) -88] [(-100 -56 41 -56) -100] [(70 78 65 -85) -85] [(23 -46 68 47) -46] [(-48 64 -27 -51) -51] [(100 2 -73 33) -73] [(64 -8 13 79) -8] [(-60 67 -10 -76) -76] [(97 -82 -63 84) -82] [(-97 -59 39 91) -97] [(42 -49 100 77) -49] [(40 76 54 3) 3] [(-64 -6 69 48) -64] [(-80 -38 -33 -13) -80] [(-20 -77 87 -87) -87] [(-75 78 13 -6) -75] [(-83 54 100 9) -83] [(-63 -59 -13 -88) -88] [(99 18 -68 46) -68] [(68 -62 -21 -96) -96] [(37 -25 8 91) -25] [(-1 -14 -8 9) -14] [(97 1 4 97) 1] [(-55 -86 -100 -59) -100] [(46 35 96 -84) -84] [(78 -4 -67 98) -67] [(12 -63 -44 -3) -63] [(-8 12 79 -23) -23] [(8 84 -56 60) -56] [(63 -52 39 -58) -58] [(7 -36 31 -53) -53] [(82 92 1 44) 1] [(-38 36 12 10) -38] [(83 13 -6 -60) -60])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output: 66                 
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 76                 
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_shove) () integer_rot) (exec_dup (integer_rot exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean) (boolean_dup_items boolean_flush) in2 exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) integer_swap boolean_dup_items) ()) ())
Lexicase best errors: [0 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 82
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_shove) () integer_rot) (exec_dup (integer_rot exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean) (boolean_dup_items boolean_flush) in2 exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) integer_swap boolean_dup_items) ()) ())
Zero cases best errors: [0 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 82
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 6 6 7 6 6 6 6 15 21)
Population mean number of elite cases: 0.09
Count of perfect (error zero) individuals by case: (15 6 6 7 6 6 6 6 15 21)
Population mean number of perfect (error zero) cases: 0.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction tag_integer_942} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (print_boolean exec_yankdup in2 integer_inc boolean_swap integer_lt integer_shove exec_y_when_autoconstructing (integer_dec boolean_stackdepth) integer_add boolean_dup_times boolean_dup boolean_flush in3 tag_integer_942 integer_fromboolean exec_rot (integer_mult) (print_integer exec_noop integer_mult integer_yank boolean_dup integer_min boolean_invert_first_then_and) ())
Errors: [0 1 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 26
Size: 31
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 9.906
Median total errors in population: 10
Error averages by case: (0.985 0.994 0.994 0.993 0.994 0.994 0.994 0.994 0.985 0.979)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.786
Average program size in population (points): 68.761
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 497681
--- Timings ---
Current time: 1559582689584 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 30.3%
Fitness Testing:      1.7 seconds, 65.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output: 66                 
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 76                 
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not})
Lexicase best program: (exec_swap (integer_eq integer_dup_items integer_dup_times integer_swap) (integer_inc integer_yankdup boolean_empty exec_yankdup) boolean_yank exec_s (in2 print_integer) (exec_yank integer_yank boolean_flush integer_empty integer_inc exec_yankdup) () boolean_not boolean_dup exec_y_when_autoconstructing (boolean_dup_items integer_gt integer_gt boolean_swap) integer_flush integer_yankdup boolean_empty integer_inc integer_swap boolean_empty boolean_yank boolean_and boolean_empty exec_y_when_autoconstructing (boolean_dup exec_if () (integer_dup_items boolean_not)))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not})
Zero cases best program: (exec_swap (integer_eq integer_dup_items integer_dup_times integer_swap) (integer_inc integer_yankdup boolean_empty exec_yankdup) boolean_yank exec_s (in2 print_integer) (exec_yank integer_yank boolean_flush integer_empty integer_inc exec_yankdup) () boolean_not boolean_dup exec_y_when_autoconstructing (boolean_dup_items integer_gt integer_gt boolean_swap) integer_flush integer_yankdup boolean_empty integer_inc integer_swap boolean_empty boolean_yank boolean_and boolean_empty exec_y_when_autoconstructing (boolean_dup exec_if () (integer_dup_items boolean_not)))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (532 532 1000 1000 534 1 532 866 866 863)
Population mean number of elite cases: 6.73
Count of perfect (error zero) individuals by case: (532 532 0 0 534 1 532 866 866 863)
Population mean number of perfect (error zero) cases: 4.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_shove})
Best program: (integer_rot exec_when () integer_add exec_eq integer_rot boolean_stackdepth exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq in2 integer_max print_integer integer_max -29 exec_pop (boolean_and integer_add boolean_and) integer_add boolean_shove)
Errors: [0 0 1 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 22
Size: 25
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 5.274
Median total errors in population: 3
Error averages by case: (0.468 0.468 1.0 1.0 0.466 0.999 0.468 0.134 0.134 0.137)
Error minima by case: (0 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 39.573
Average program size in population (points): 54.62
Average percent parens in population: 0.268
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.533
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 946128
--- Timings ---
Current time: 1559582691974 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.4 seconds, 47.4%
Fitness Testing:      2.2 seconds, 43.4%
Report:               0.4 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output: 66                 
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 76                 
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not})
Lexicase best program: (exec_swap (integer_eq integer_dup_items integer_dup_times integer_swap integer_inc integer_yankdup boolean_empty exec_yankdup) (boolean_yank exec_s (in2 print_integer exec_yank integer_yank boolean_flush exec_do*range (integer_inc exec_yankdup)) (boolean_not) (boolean_dup integer_sub boolean_dup_items integer_gt integer_gt boolean_swap)) integer_flush integer_yankdup boolean_empty integer_inc integer_swap boolean_empty boolean_yank boolean_and boolean_empty exec_y_when_autoconstructing (boolean_dup exec_if () () integer_dup_items boolean_not))
Lexicase best errors: [1 0 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not})
Zero cases best program: (exec_swap (integer_eq integer_dup_items integer_dup_times integer_swap integer_inc integer_yankdup boolean_empty exec_yankdup) (boolean_yank exec_s (in2 print_integer exec_yank integer_yank boolean_flush exec_do*range (integer_inc exec_yankdup)) (boolean_not) (boolean_dup integer_sub boolean_dup_items integer_gt integer_gt boolean_swap)) integer_flush integer_yankdup boolean_empty integer_inc integer_swap boolean_empty boolean_yank boolean_and boolean_empty exec_y_when_autoconstructing (boolean_dup exec_if () () integer_dup_items boolean_not))
Zero cases best errors: [1 0 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 866 1000 783 1000 1000 786 1000 784 786)
Population mean number of elite cases: 8.01
Count of perfect (error zero) individuals by case: (2 866 0 783 0 0 786 0 784 786)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_shove) () integer_rot) (exec_dup (integer_rot exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean) (boolean_dup_items boolean_flush) in2 exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) integer_swap boolean_dup_items) ()) ())
Errors: [1 0 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 63
Size: 82
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 5.993
Median total errors in population: 5
Error averages by case: (0.998 0.134 1.0 0.217 1.0 1.0 0.214 1.0 0.216 0.214)
Error minima by case: (0 0 1 0 1 1 0 1 0 0)
Average genome size in population (length): 36.881
Average program size in population (points): 48.735
Average percent parens in population: 0.234
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.961
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1286154
--- Timings ---
Current time: 1559582694937 milliseconds
Total Time:           7.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.6 seconds, 58.2%
Fitness Testing:      2.6 seconds, 33.3%
Report:               0.6 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -71                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 96                 
Correct output: 12                  | Program output: 17                 
Correct output: 9                   | Program output: 46                 
Correct output: 5                   | Program output: 40                 
Correct output: 5                   | Program output: 32                 
Correct output: 32                  | Program output: 52                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 83                 
Correct output: 14                  | Program output: 32                 
Correct output: 5                   | Program output: 57                 
Correct output: 23                  | Program output: 86                 
Correct output: 6                   | Program output: 13                 
Correct output: 18                  | Program output: 41                 
Correct output: 11                  | Program output: 66                 
Correct output: 17                  | Program output: 100                
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 64                 
Correct output: 0                   | Program output: 4                  
Correct output: 32                  | Program output: 74                 
Correct output: -64                 | Program output: 5                  
Correct output: -58                 | Program output: -27                
Correct output: -21                 | Program output: 71                 
Correct output: -98                 | Program output: -98                
Correct output: -92                 | Program output: -34                
Correct output: -29                 | Program output: 51                 
Correct output: -88                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -47                 | Program output: -30                
Correct output: -84                 | Program output: 19                 
Correct output: -53                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -90                
Correct output: -96                 | Program output: -65                
Correct output: -69                 | Program output: -55                
Correct output: -51                 | Program output: 4                  
Correct output: -22                 | Program output: 88                 
Correct output: -94                 | Program output: -89                
Correct output: -85                 | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -74                 | Program output: 22                 
Correct output: -78                 | Program output: 84                 
Correct output: -54                 | Program output: 26                 
Correct output: -52                 | Program output: -17                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -27                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 70                 
Correct output: -46                 | Program output: 23                 
Correct output: -51                 | Program output: -48                
Correct output: -73                 | Program output: 100                
Correct output: -8                  | Program output: 64                 
Correct output: -76                 | Program output: -60                
Correct output: -82                 | Program output: 97                 
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: 42                 
Correct output: 3                   | Program output: 40                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -63                
Correct output: -68                 | Program output: 99                 
Correct output: -96                 | Program output: 68                 
Correct output: -25                 | Program output: 37                 
Correct output: -14                 | Program output: -1                 
Correct output: 1                   | Program output: 97                 
Correct output: -100                | Program output: -55                
Correct output: -84                 | Program output: 46                 
Correct output: -67                 | Program output: 78                 
Correct output: -63                 | Program output: 12                 
Correct output: -23                 | Program output: -8                 
Correct output: -56                 | Program output: 8                  
Correct output: -58                 | Program output: 63                 
Correct output: -53                 | Program output: 7                  
Correct output: 1                   | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (exec_when () integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) exec_dup (integer_rot exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (in1 boolean_invert_first_then_and integer_fromboolean) (boolean_dup_items boolean_flush) boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and)) () ()) ())
Lexicase best errors: [1 1 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 79
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (exec_when () integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) exec_dup (integer_rot exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (in1 boolean_invert_first_then_and integer_fromboolean) (boolean_dup_items boolean_flush) boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and)) () ()) ())
Zero cases best errors: [1 1 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 79
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 678 194 1000 194 1000 1000 1000 194 1000)
Population mean number of elite cases: 7.26
Count of perfect (error zero) individuals by case: (0 678 194 0 194 0 0 0 194 0)
Population mean number of perfect (error zero) cases: 1.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) (exec_dup (integer_rot exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean) (boolean_dup_items boolean_flush) boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) integer_swap boolean_dup_items) ()) ())
Errors: [1 1 0 1 0 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 63
Size: 82
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 8.74
Median total errors in population: 9
Error averages by case: (1.0 0.322 0.806 1.0 0.806 1.0 1.0 1.0 0.806 1.0)
Error minima by case: (1 0 0 1 0 1 1 1 0 1)
Average genome size in population (length): 39.874
Average program size in population (points): 52.471
Average percent parens in population: 0.232
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.394
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1654499
--- Timings ---
Current time: 1559582697366 milliseconds
Total Time:          10.3 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.3 seconds, 60.6%
Fitness Testing:      3.0 seconds, 29.2%
Report:               0.9 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output: 66                 
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 76                 
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not})
Lexicase best program: (exec_swap (integer_eq integer_dup_items integer_dup_times integer_swap) (integer_inc integer_yankdup boolean_empty exec_yankdup) boolean_yank exec_s (in2 print_integer) (exec_yank integer_yank boolean_flush exec_do*range (integer_inc exec_yankdup)) (boolean_not) boolean_dup exec_y_when_autoconstructing (boolean_dup_items integer_gt) integer_gt boolean_swap integer_flush integer_yankdup boolean_empty integer_inc integer_swap boolean_empty boolean_yank boolean_and boolean_empty exec_y_when_autoconstructing (boolean_dup exec_if () (exec_when (boolean_not))))
Lexicase best errors: [1 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not})
Zero cases best program: (exec_swap (integer_eq integer_dup_items integer_dup_times integer_swap) (integer_inc integer_yankdup boolean_empty exec_yankdup) boolean_yank exec_s (in2 print_integer) (exec_yank integer_yank boolean_flush exec_do*range (integer_inc exec_yankdup)) (boolean_not) boolean_dup exec_y_when_autoconstructing (boolean_dup_items integer_gt) integer_gt boolean_swap integer_flush integer_yankdup boolean_empty integer_inc integer_swap boolean_empty boolean_yank boolean_and boolean_empty exec_y_when_autoconstructing (boolean_dup exec_if () (exec_when (boolean_not))))
Zero cases best errors: [1 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 614 1000 215 614 215 215 1000 215)
Population mean number of elite cases: 6.09
Count of perfect (error zero) individuals by case: (0 0 614 0 215 614 215 215 0 215)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_shove})
Best program: (integer_rot exec_when () integer_flush exec_eq integer_rot boolean_stackdepth exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq in2 integer_max print_integer integer_max -29 exec_pop (boolean_and integer_add boolean_and) integer_add boolean_shove)
Errors: [1 1 1 1 0 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 22
Size: 25
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 7.912
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.386 1.0 0.785 0.386 0.785 0.785 1.0 0.785)
Error minima by case: (1 1 0 1 0 0 0 0 1 0)
Average genome size in population (length): 54.227
Average program size in population (points): 71.195
Average percent parens in population: 0.236
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.760125
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2158542
--- Timings ---
Current time: 1559582700051 milliseconds
Total Time:          13.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.3 seconds, 62.7%
Fitness Testing:      3.5 seconds, 26.4%
Report:               1.3 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output: 66                 
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 76                 
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty})
Lexicase best program: (exec_while () exec_do*while (integer_mult exec_while (exec_yank) boolean_swap in2 print_integer integer_mult integer_min integer_sub exec_y_when_autoconstructing (exec_flush) integer_dec integer_rot integer_yankdup exec_empty boolean_empty) integer_sub exec_shove (in4) boolean_empty in2 integer_min exec_s_when_autoconstructing (boolean_and boolean_invert_second_then_and) () (boolean_shove exec_yank boolean_dup_items boolean_invert_second_then_and exec_noop exec_stackdepth exec_when (exec_empty)))
Lexicase best errors: [0 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty})
Zero cases best program: (exec_while () exec_do*while (integer_mult exec_while (exec_yank) boolean_swap in2 print_integer integer_mult integer_min integer_sub exec_y_when_autoconstructing (exec_flush) integer_dec integer_rot integer_yankdup exec_empty boolean_empty) integer_sub exec_shove (in4) boolean_empty in2 integer_min exec_s_when_autoconstructing (boolean_and boolean_invert_second_then_and) () (boolean_shove exec_yank boolean_dup_items boolean_invert_second_then_and exec_noop exec_stackdepth exec_when (exec_empty)))
Zero cases best errors: [0 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (585 3 841 1000 1000 586 843 4 258 841)
Population mean number of elite cases: 5.96
Count of perfect (error zero) individuals by case: (585 3 841 0 0 586 843 4 258 841)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_shove})
Best program: (exec_pop () boolean_swap boolean_rot print_integer exec_eq exec_when (integer_rot) exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq in2 integer_max print_integer integer_max -29 exec_pop (boolean_and integer_dup_items boolean_and) integer_add boolean_shove)
Errors: [0 1 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 27
Percent parens: 0.148
--- Population Statistics ---
Average total errors in population: 6.039
Median total errors in population: 5
Error averages by case: (0.415 0.997 0.159 1.0 1.0 0.414 0.157 0.996 0.742 0.159)
Error minima by case: (0 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 41.853
Average program size in population (points): 54.908
Average percent parens in population: 0.231
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.3131875
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2542264
--- Timings ---
Current time: 1559582702379 milliseconds
Total Time:          15.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.0 seconds, 64.7%
Fitness Testing:      3.8 seconds, 24.7%
Report:               1.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output: 66                 
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 76                 
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_rot exec_when () integer_flush exec_eq integer_rot boolean_stackdepth exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq in2 integer_max print_integer integer_max -29 exec_pop (boolean_and integer_add boolean_and) integer_add boolean_shove)
Lexicase best errors: [1 1 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.120
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_rot exec_when () integer_flush exec_eq integer_rot boolean_stackdepth exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq in2 integer_max print_integer integer_max -29 exec_pop (boolean_and integer_add boolean_and) integer_add boolean_shove)
Zero cases best errors: [1 1 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 1000 742 1000 1000 421 423 420 1000 420)
Population mean number of elite cases: 6.62
Count of perfect (error zero) individuals by case: (197 0 742 0 0 421 423 420 0 420)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_flush})
Best program: (exec_swap (integer_eq integer_dup_items integer_dup_times integer_swap) (integer_inc integer_yankdup boolean_empty exec_yankdup) exec_do*while (exec_s (in2 print_integer) (exec_yank integer_yank boolean_flush exec_do*range (integer_inc exec_yankdup)) (boolean_not) boolean_dup exec_y_when_autoconstructing (boolean_dup_items integer_gt integer_gt boolean_swap)) integer_flush)
Errors: [1 1 0 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.377
Median total errors in population: 8
Error averages by case: (0.803 1.0 0.258 1.0 1.0 0.579 0.577 0.58 1.0 0.58)
Error minima by case: (0 1 0 1 1 0 0 0 1 0)
Average genome size in population (length): 42.363
Average program size in population (points): 55.33
Average percent parens in population: 0.230
Minimum age in population: 6.375
Maximum age in population: 10.90625
Average age in population: 8.63678125
Median age in population: 8.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2925486
--- Timings ---
Current time: 1559582704999 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.1 seconds, 66.6%
Fitness Testing:      4.2 seconds, 23.2%
Report:               1.7 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -71                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 96                 
Correct output: 12                  | Program output: 17                 
Correct output: 9                   | Program output: 46                 
Correct output: 5                   | Program output: 40                 
Correct output: 5                   | Program output: 32                 
Correct output: 32                  | Program output: 52                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 83                 
Correct output: 14                  | Program output: 32                 
Correct output: 5                   | Program output: 57                 
Correct output: 23                  | Program output: 86                 
Correct output: 6                   | Program output: 13                 
Correct output: 18                  | Program output: 41                 
Correct output: 11                  | Program output: 66                 
Correct output: 17                  | Program output: 100                
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 64                 
Correct output: 0                   | Program output: 4                  
Correct output: 32                  | Program output: 74                 
Correct output: -64                 | Program output: 5                  
Correct output: -58                 | Program output: -27                
Correct output: -21                 | Program output: 71                 
Correct output: -98                 | Program output: -98                
Correct output: -92                 | Program output: -34                
Correct output: -29                 | Program output: 51                 
Correct output: -88                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -47                 | Program output: -30                
Correct output: -84                 | Program output: 19                 
Correct output: -53                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -90                
Correct output: -96                 | Program output: -65                
Correct output: -69                 | Program output: -55                
Correct output: -51                 | Program output: 4                  
Correct output: -22                 | Program output: 88                 
Correct output: -94                 | Program output: -89                
Correct output: -85                 | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -74                 | Program output: 22                 
Correct output: -78                 | Program output: 84                 
Correct output: -54                 | Program output: 26                 
Correct output: -52                 | Program output: -17                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -27                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 70                 
Correct output: -46                 | Program output: 23                 
Correct output: -51                 | Program output: -48                
Correct output: -73                 | Program output: 100                
Correct output: -8                  | Program output: 64                 
Correct output: -76                 | Program output: -60                
Correct output: -82                 | Program output: 97                 
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: 42                 
Correct output: 3                   | Program output: 40                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -63                
Correct output: -68                 | Program output: 99                 
Correct output: -96                 | Program output: 68                 
Correct output: -25                 | Program output: 37                 
Correct output: -14                 | Program output: -1                 
Correct output: 1                   | Program output: 97                 
Correct output: -100                | Program output: -55                
Correct output: -84                 | Program output: 46                 
Correct output: -67                 | Program output: 78                 
Correct output: -63                 | Program output: 12                 
Correct output: -23                 | Program output: -8                 
Correct output: -56                 | Program output: 8                  
Correct output: -58                 | Program output: 63                 
Correct output: -53                 | Program output: 7                  
Correct output: 1                   | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_while () exec_do*while (integer_mult exec_while () exec_do*while (exec_eq integer_rot boolean_stackdepth) exec_dup_items boolean_xor) integer_eq boolean_invert_first_then_and boolean_eq in2 integer_max print_integer integer_max -29 exec_pop (boolean_and integer_add boolean_frominteger) integer_add boolean_shove)
Lexicase best errors: [1 1 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 30
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_while () exec_do*while (integer_mult exec_while () exec_do*while (exec_eq integer_rot boolean_stackdepth) exec_dup_items boolean_xor) integer_eq boolean_invert_first_then_and boolean_eq in2 integer_max print_integer integer_max -29 exec_pop (boolean_and integer_add boolean_frominteger) integer_add boolean_shove)
Zero cases best errors: [1 1 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 30
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 157 715 714 157 714 157 1 1)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (1 1 157 715 714 157 714 157 1 1)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt) (tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_not) () integer_rot) (exec_dup (integer_rot exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean) (boolean_dup_items boolean_flush boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) integer_swap boolean_dup_items))) ())
Errors: [1 1 0 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 63
Size: 82
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 7.382
Median total errors in population: 7
Error averages by case: (0.999 0.999 0.843 0.285 0.286 0.843 0.286 0.843 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.993
Average program size in population (points): 51.107
Average percent parens in population: 0.232
Minimum age in population: 7.5
Maximum age in population: 12.171875
Average age in population: 10.2053125
Median age in population: 10.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3270062
--- Timings ---
Current time: 1559582707915 milliseconds
Total Time:          21.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.3 seconds, 68.4%
Fitness Testing:      4.5 seconds, 21.6%
Report:               2.0 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: -20                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 85                 
Correct output: 12                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 7                  
Correct output: 5                   | Program output: 54                 
Correct output: 32                  | Program output: 84                 
Correct output: 40                  | Program output: 91                 
Correct output: 13                  | Program output: 31                 
Correct output: 13                  | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 50                 
Correct output: 6                   | Program output: 81                 
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 0                   | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: -64                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: 26                 
Correct output: -92                 | Program output: -11                
Correct output: -29                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: 18                 
Correct output: -47                 | Program output: 9                  
Correct output: -84                 | Program output: -3                 
Correct output: -53                 | Program output: -53                
Correct output: -74                 | Program output: -62                
Correct output: -95                 | Program output: -28                
Correct output: -96                 | Program output: 65                 
Correct output: -69                 | Program output: 93                 
Correct output: -51                 | Program output: -51                
Correct output: -22                 | Program output: 70                 
Correct output: -94                 | Program output: 36                 
Correct output: -85                 | Program output: -76                
Correct output: -75                 | Program output: 86                 
Correct output: -55                 | Program output: 100                
Correct output: -74                 | Program output: -48                
Correct output: -78                 | Program output: 48                 
Correct output: -54                 | Program output: -54                
Correct output: -52                 | Program output: 76                 
Correct output: -25                 | Program output: 10                 
Correct output: -88                 | Program output: 21                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 33                 
Correct output: -8                  | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 84                 
Correct output: -97                 | Program output: 91                 
Correct output: -49                 | Program output: 77                 
Correct output: 3                   | Program output: 3                  
Correct output: -64                 | Program output: 48                 
Correct output: -80                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -6                 
Correct output: -83                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -25                 | Program output: 91                 
Correct output: -14                 | Program output: 9                  
Correct output: 1                   | Program output: 97                 
Correct output: -100                | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 98                 
Correct output: -63                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 44                 
Correct output: -38                 | Program output: 10                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) (exec_dup (integer_rot exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup integer_swap boolean_dup_items)) ()) ()) ())
Lexicase best errors: [0 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) (exec_dup (integer_rot exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup integer_swap boolean_dup_items)) ()) ()) ())
Zero cases best errors: [0 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 257 857 276 173 401 173 145 173 276)
Population mean number of elite cases: 2.91
Count of perfect (error zero) individuals by case: (177 257 857 276 173 401 173 145 173 276)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) (exec_dup (integer_rot exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup integer_swap boolean_dup_items)) ()) ()) ())
Errors: [0 1 0 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 59
Size: 78
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 7.092
Median total errors in population: 7
Error averages by case: (0.823 0.743 0.143 0.724 0.827 0.599 0.827 0.855 0.827 0.724)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.933
Average program size in population (points): 68.224
Average percent parens in population: 0.238
Minimum age in population: 9.25
Maximum age in population: 13.359375
Average age in population: 11.4815234375
Median age in population: 11.59765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3772007
--- Timings ---
Current time: 1559582710717 milliseconds
Total Time:          23.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.3 seconds, 68.9%
Fitness Testing:      5.0 seconds, 21.0%
Report:               2.3 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output: 66                 
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 76                 
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_rot exec_when (integer_flush exec_eq integer_rot boolean_stackdepth) exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq in2 integer_max print_integer integer_max -29 exec_pop (boolean_and integer_add boolean_and) integer_add boolean_shove)
Lexicase best errors: [0 0 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 25
Percent parens: 0.120
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_rot exec_when (integer_flush exec_eq integer_rot boolean_stackdepth) exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq in2 integer_max print_integer integer_max -29 exec_pop (boolean_and integer_add boolean_and) integer_add boolean_shove)
Zero cases best errors: [0 0 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 25
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (838 176 154 180 175 175 175 146 146 838)
Population mean number of elite cases: 3.00
Count of perfect (error zero) individuals by case: (838 176 154 180 175 175 175 146 146 838)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_do*while (exec_while (integer_lt exec_do*while (boolean_swap boolean_rot print_integer integer_max integer_dup_times) integer_flush) boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_eq boolean_frominteger) (integer_inc integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_shove) () integer_rot) (exec_dup (integer_lt exec_y_when_autoconstructing () exec_rot (boolean_yank boolean_not) (exec_dup_times (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean) (boolean_dup_items boolean_flush) in2 exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) integer_swap boolean_dup_items)) ()))) ()))
Errors: [0 0 1 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 65
Size: 89
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.997
Median total errors in population: 8
Error averages by case: (0.162 0.824 0.846 0.82 0.825 0.825 0.825 0.854 0.854 0.162)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.547
Average program size in population (points): 71.746
Average percent parens in population: 0.238
Minimum age in population: 10.875
Maximum age in population: 15.078125
Average age in population: 12.8442265625
Median age in population: 12.8984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4289676
--- Timings ---
Current time: 1559582713950 milliseconds
Total Time:          27.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.8 seconds, 69.6%
Fitness Testing:      5.4 seconds, 20.1%
Report:               2.7 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output: 66                 
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 76                 
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction tag_integer_942} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_do*while (exec_do*while (in2 integer_yank integer_gt integer_inc) boolean_invert_first_then_and integer_lt integer_shove exec_y_when_autoconstructing (integer_dec boolean_stackdepth integer_add) boolean_dup_times boolean_dup) boolean_flush in3 tag_integer_942 integer_fromboolean exec_rot (integer_mult) (print_integer exec_noop integer_mult integer_swap boolean_dup integer_min boolean_invert_first_then_and) ())
Lexicase best errors: [1 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 35
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction tag_integer_942} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_do*while (exec_do*while (in2 integer_yank integer_gt integer_inc) boolean_invert_first_then_and integer_lt integer_shove exec_y_when_autoconstructing (integer_dec boolean_stackdepth integer_add) boolean_dup_times boolean_dup) boolean_flush in3 tag_integer_942 integer_fromboolean exec_rot (integer_mult) (print_integer exec_noop integer_mult integer_swap boolean_dup integer_min boolean_invert_first_then_and) ())
Zero cases best errors: [1 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 35
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 768 1000 559 559 559 1000 559 559 559)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (209 768 0 559 559 559 0 559 559 559)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (integer_lt exec_do*while (boolean_swap boolean_rot exec_while (exec_yank) boolean_swap in2 print_integer integer_mult integer_min integer_sub exec_y_when_autoconstructing (exec_flush) integer_dec integer_rot integer_yankdup integer_div boolean_empty) integer_sub exec_shove (integer_lte) boolean_empty in2 exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not in4 integer_shove integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult boolean_swap boolean_flush) (exec_dup (integer_mod) in4 in1 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup integer_swap boolean_dup_items)) ())
Errors: [1 0 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 54
Size: 66
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 5.669
Median total errors in population: 3
Error averages by case: (0.791 0.232 1.0 0.441 0.441 0.441 1.0 0.441 0.441 0.441)
Error minima by case: (0 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 44.144
Average program size in population (points): 57.75
Average percent parens in population: 0.230
Minimum age in population: 11.875
Maximum age in population: 16.708984375
Average age in population: 14.51403515625
Median age in population: 14.6005859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4678398
--- Timings ---
Current time: 1559582716630 milliseconds
Total Time:          29.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.9 seconds, 70.3%
Fitness Testing:      5.8 seconds, 19.5%
Report:               3.0 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output: 66                 
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 76                 
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction -77} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup})
Lexicase best program: (in3 integer_eq integer_dup_items integer_dup_times integer_swap integer_inc integer_yankdup boolean_empty exec_yankdup exec_do*while (exec_s () (in2 print_integer) (exec_yank integer_yank boolean_flush boolean_and exec_noop -77) exec_y_when_autoconstructing (boolean_dup_items integer_gt integer_gt boolean_swap)) integer_flush integer_yankdup boolean_yankdup integer_dup_items integer_rot boolean_empty exec_swap (boolean_shove) () integer_rot exec_dup (integer_rot exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) integer_yankdup exec_yankdup integer_inc in1 boolean_empty boolean_yank boolean_and boolean_empty exec_y_when_autoconstructing (boolean_dup))
Lexicase best errors: [0 1 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 60
Percent parens: 0.183
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction -77} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup})
Zero cases best program: (in3 integer_eq integer_dup_items integer_dup_times integer_swap integer_inc integer_yankdup boolean_empty exec_yankdup exec_do*while (exec_s () (in2 print_integer) (exec_yank integer_yank boolean_flush boolean_and exec_noop -77) exec_y_when_autoconstructing (boolean_dup_items integer_gt integer_gt boolean_swap)) integer_flush integer_yankdup boolean_yankdup integer_dup_items integer_rot boolean_empty exec_swap (boolean_shove) () integer_rot exec_dup (integer_rot exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) integer_yankdup exec_yankdup integer_inc in1 boolean_empty boolean_yank boolean_and boolean_empty exec_y_when_autoconstructing (boolean_dup))
Zero cases best errors: [0 1 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 60
Percent parens: 0.183
--- Lexicase Population Statistics ---
Count of elite individuals by case: (796 1000 96 894 796 796 1000 97 892 1000)
Population mean number of elite cases: 7.37
Count of perfect (error zero) individuals by case: (796 0 96 894 796 796 0 97 892 0)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_shove})
Best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (boolean_yankdup in2 integer_max print_integer integer_max -29 exec_pop (boolean_and integer_add boolean_and) integer_add) () boolean_shove)
Errors: [0 1 1 0 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 32
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 5.633
Median total errors in population: 5
Error averages by case: (0.204 1.0 0.904 0.106 0.204 0.204 1.0 0.903 0.108 1.0)
Error minima by case: (0 1 0 0 0 0 1 0 0 1)
Average genome size in population (length): 37.994
Average program size in population (points): 49.523
Average percent parens in population: 0.223
Minimum age in population: 12.875
Maximum age in population: 18.453125
Average age in population: 15.9567177734375
Median age in population: 16.01953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4993506
--- Timings ---
Current time: 1559582719309 milliseconds
Total Time:          32.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.1 seconds, 71.2%
Fitness Testing:      6.1 seconds, 18.8%
Report:               3.1 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: -20                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 85                 
Correct output: 12                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 7                  
Correct output: 5                   | Program output: 54                 
Correct output: 32                  | Program output: 84                 
Correct output: 40                  | Program output: 91                 
Correct output: 13                  | Program output: 31                 
Correct output: 13                  | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 50                 
Correct output: 6                   | Program output: 81                 
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 0                   | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: -64                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: 26                 
Correct output: -92                 | Program output: -11                
Correct output: -29                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: 18                 
Correct output: -47                 | Program output: 9                  
Correct output: -84                 | Program output: -3                 
Correct output: -53                 | Program output: -53                
Correct output: -74                 | Program output: -62                
Correct output: -95                 | Program output: -28                
Correct output: -96                 | Program output: 65                 
Correct output: -69                 | Program output: 93                 
Correct output: -51                 | Program output: -51                
Correct output: -22                 | Program output: 70                 
Correct output: -94                 | Program output: 36                 
Correct output: -85                 | Program output: -76                
Correct output: -75                 | Program output: 86                 
Correct output: -55                 | Program output: 100                
Correct output: -74                 | Program output: -48                
Correct output: -78                 | Program output: 48                 
Correct output: -54                 | Program output: -54                
Correct output: -52                 | Program output: 76                 
Correct output: -25                 | Program output: 10                 
Correct output: -88                 | Program output: 21                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 33                 
Correct output: -8                  | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 84                 
Correct output: -97                 | Program output: 91                 
Correct output: -49                 | Program output: 77                 
Correct output: 3                   | Program output: 3                  
Correct output: -64                 | Program output: 48                 
Correct output: -80                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -6                 
Correct output: -83                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -25                 | Program output: 91                 
Correct output: -14                 | Program output: 9                  
Correct output: 1                   | Program output: 97                 
Correct output: -100                | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 98                 
Correct output: -63                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 44                 
Correct output: -38                 | Program output: 10                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_swap exec_do*while (exec_do*while (exec_pop () exec_do*while (integer_mult exec_while (integer_min exec_flush) integer_dec integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) (exec_dup (exec_do*times (exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ()))))
Lexicase best errors: [1 1 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 82
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_swap exec_do*while (exec_do*while (exec_pop () exec_do*while (integer_mult exec_while (integer_min exec_flush) integer_dec integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) (exec_dup (exec_do*times (exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ()))))
Zero cases best errors: [1 1 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 82
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (554 1 2 859 2 303 303 554 2 2)
Population mean number of elite cases: 2.58
Count of perfect (error zero) individuals by case: (554 1 2 859 2 303 303 554 2 2)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_885} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_swap exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc exec_rot (exec_shove (boolean_frominteger) tag_integer_885 integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) (integer_rot) exec_dup (integer_rot exec_y_when_autoconstructing (boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_swap (exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and exec_s_when_autoconstructing (in1 in4 boolean_eq boolean_flush) (print_integer) (integer_mult integer_dup_times boolean_flush integer_lt integer_dup_times boolean_flush integer_lt integer_mod) in4 in3 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) (integer_swap boolean_dup_items)) ())) () ()) () ()) ())
Errors: [1 1 0 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 70
Size: 96
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 7.418
Median total errors in population: 7
Error averages by case: (0.446 0.999 0.998 0.141 0.998 0.697 0.697 0.446 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.431
Average program size in population (points): 56.81
Average percent parens in population: 0.227
Minimum age in population: 13.875
Maximum age in population: 19.3212890625
Average age in population: 17.3605029296875
Median age in population: 17.41015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5368859
--- Timings ---
Current time: 1559582721794 milliseconds
Total Time:          34.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.9 seconds, 71.5%
Fitness Testing:      6.5 seconds, 18.6%
Report:               3.3 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: -20                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 85                 
Correct output: 12                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 7                  
Correct output: 5                   | Program output: 54                 
Correct output: 32                  | Program output: 84                 
Correct output: 40                  | Program output: 91                 
Correct output: 13                  | Program output: 31                 
Correct output: 13                  | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 50                 
Correct output: 6                   | Program output: 81                 
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 0                   | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: -64                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: 26                 
Correct output: -92                 | Program output: -11                
Correct output: -29                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: 18                 
Correct output: -47                 | Program output: 9                  
Correct output: -84                 | Program output: -3                 
Correct output: -53                 | Program output: -53                
Correct output: -74                 | Program output: -62                
Correct output: -95                 | Program output: -28                
Correct output: -96                 | Program output: 65                 
Correct output: -69                 | Program output: 93                 
Correct output: -51                 | Program output: -51                
Correct output: -22                 | Program output: 70                 
Correct output: -94                 | Program output: 36                 
Correct output: -85                 | Program output: -76                
Correct output: -75                 | Program output: 86                 
Correct output: -55                 | Program output: 100                
Correct output: -74                 | Program output: -48                
Correct output: -78                 | Program output: 48                 
Correct output: -54                 | Program output: -54                
Correct output: -52                 | Program output: 76                 
Correct output: -25                 | Program output: 10                 
Correct output: -88                 | Program output: 21                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 33                 
Correct output: -8                  | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 84                 
Correct output: -97                 | Program output: 91                 
Correct output: -49                 | Program output: 77                 
Correct output: 3                   | Program output: 3                  
Correct output: -64                 | Program output: 48                 
Correct output: -80                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -6                 
Correct output: -83                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -25                 | Program output: 91                 
Correct output: -14                 | Program output: 9                  
Correct output: 1                   | Program output: 97                 
Correct output: -100                | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 98                 
Correct output: -63                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 44                 
Correct output: -38                 | Program output: 10                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_swap exec_do*while (exec_do*while (exec_pop () exec_do*while (integer_mult exec_while (integer_min exec_flush) integer_dec integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (exec_while () integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) exec_dup (exec_do*times (exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) () ()))))
Lexicase best errors: [1 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_swap exec_do*while (exec_do*while (exec_pop () exec_do*while (integer_mult exec_while (integer_min exec_flush) integer_dec integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (exec_while () integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) exec_dup (exec_do*times (exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) () ()))))
Zero cases best errors: [1 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (195 713 809 339 195 195 338 339 338 99)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (195 713 809 339 195 195 338 339 338 99)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_swap exec_do*while (exec_do*while (exec_pop () exec_do*while (integer_mult exec_while (integer_min exec_flush) integer_dec integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_flush boolean_empty exec_swap (boolean_yankdup) () integer_rot) (exec_dup (exec_do*times (exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ()))))
Errors: [1 0 0 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 60
Size: 82
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 6.44
Median total errors in population: 5
Error averages by case: (0.805 0.287 0.191 0.661 0.805 0.805 0.662 0.661 0.662 0.901)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.587
Average program size in population (points): 71.988
Average percent parens in population: 0.249
Minimum age in population: 14.875
Maximum age in population: 20.80859375
Average age in population: 19.12781005859375
Median age in population: 19.329833984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5869194
--- Timings ---
Current time: 1559582724402 milliseconds
Total Time:          37.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.7 seconds, 71.3%
Fitness Testing:      6.9 seconds, 18.4%
Report:               3.7 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -71                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 96                 
Correct output: 12                  | Program output: 17                 
Correct output: 9                   | Program output: 46                 
Correct output: 5                   | Program output: 40                 
Correct output: 5                   | Program output: 32                 
Correct output: 32                  | Program output: 52                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 83                 
Correct output: 14                  | Program output: 32                 
Correct output: 5                   | Program output: 57                 
Correct output: 23                  | Program output: 86                 
Correct output: 6                   | Program output: 13                 
Correct output: 18                  | Program output: 41                 
Correct output: 11                  | Program output: 66                 
Correct output: 17                  | Program output: 100                
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 64                 
Correct output: 0                   | Program output: 4                  
Correct output: 32                  | Program output: 74                 
Correct output: -64                 | Program output: 5                  
Correct output: -58                 | Program output: -27                
Correct output: -21                 | Program output: 71                 
Correct output: -98                 | Program output: -98                
Correct output: -92                 | Program output: -34                
Correct output: -29                 | Program output: 51                 
Correct output: -88                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -47                 | Program output: -30                
Correct output: -84                 | Program output: 19                 
Correct output: -53                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -90                
Correct output: -96                 | Program output: -65                
Correct output: -69                 | Program output: -55                
Correct output: -51                 | Program output: 4                  
Correct output: -22                 | Program output: 88                 
Correct output: -94                 | Program output: -89                
Correct output: -85                 | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -74                 | Program output: 22                 
Correct output: -78                 | Program output: 84                 
Correct output: -54                 | Program output: 26                 
Correct output: -52                 | Program output: -17                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -27                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 70                 
Correct output: -46                 | Program output: 23                 
Correct output: -51                 | Program output: -48                
Correct output: -73                 | Program output: 100                
Correct output: -8                  | Program output: 64                 
Correct output: -76                 | Program output: -60                
Correct output: -82                 | Program output: 97                 
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: 42                 
Correct output: 3                   | Program output: 40                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -63                
Correct output: -68                 | Program output: 99                 
Correct output: -96                 | Program output: 68                 
Correct output: -25                 | Program output: 37                 
Correct output: -14                 | Program output: -1                 
Correct output: 1                   | Program output: 97                 
Correct output: -100                | Program output: -55                
Correct output: -84                 | Program output: 46                 
Correct output: -67                 | Program output: 78                 
Correct output: -63                 | Program output: 12                 
Correct output: -23                 | Program output: -8                 
Correct output: -56                 | Program output: 8                  
Correct output: -58                 | Program output: 63                 
Correct output: -53                 | Program output: 7                  
Correct output: 1                   | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_swap exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) boolean_empty exec_rot (exec_shove (boolean_frominteger) exec_dup_times (integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot integer_lt exec_swap (boolean_yankdup) (integer_rot) integer_swap integer_rot exec_y_when_autoconstructing (boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_swap (boolean_yank integer_empty boolean_invert_first_then_and integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and exec_s_when_autoconstructing (in1 exec_rot (boolean_eq boolean_flush) (print_integer) (integer_mult integer_dup_times boolean_flush integer_lt integer_dup_times boolean_flush integer_lt integer_mod) in4 in3 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) (integer_swap boolean_dup_items) ()) ())) () ()) () ()) ())
Lexicase best errors: [1 1 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 97
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_swap exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) boolean_empty exec_rot (exec_shove (boolean_frominteger) exec_dup_times (integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot integer_lt exec_swap (boolean_yankdup) (integer_rot) integer_swap integer_rot exec_y_when_autoconstructing (boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_swap (boolean_yank integer_empty boolean_invert_first_then_and integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and exec_s_when_autoconstructing (in1 exec_rot (boolean_eq boolean_flush) (print_integer) (integer_mult integer_dup_times boolean_flush integer_lt integer_dup_times boolean_flush integer_lt integer_mod) in4 in3 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) (integer_swap boolean_dup_items) ()) ())) () ()) () ()) ())
Zero cases best errors: [1 1 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 97
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (364 321 363 102 364 4 106 102 4 4)
Population mean number of elite cases: 1.73
Count of perfect (error zero) individuals by case: (364 321 363 102 364 4 106 102 4 4)
Population mean number of perfect (error zero) cases: 1.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_swap exec_do*while (exec_do*while (exec_pop () exec_do*while (integer_mult exec_while (integer_min exec_flush) integer_dec integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) (exec_dup (exec_do*times (exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_pop boolean_shove boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ()))))
Errors: [1 1 1 1 1 0 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 60
Size: 82
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 8.266
Median total errors in population: 9
Error averages by case: (0.636 0.679 0.637 0.898 0.636 0.996 0.894 0.898 0.996 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.797
Average program size in population (points): 65.613
Average percent parens in population: 0.246
Minimum age in population: 18.14453125
Maximum age in population: 22.656982421875
Average age in population: 20.68410986328125
Median age in population: 20.74102783203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6327712
--- Timings ---
Current time: 1559582727719 milliseconds
Total Time:          40.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.2 seconds, 71.8%
Fitness Testing:      7.3 seconds, 17.9%
Report:               4.1 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output: 66                 
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 76                 
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_div} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 2, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y})
Lexicase best program: (exec_while () exec_do*while (integer_mult exec_while (exec_yank) boolean_swap in2 print_integer integer_mult integer_min integer_sub exec_y_when_autoconstructing (exec_flush integer_dec integer_rot integer_rot integer_div) boolean_empty) integer_sub exec_shove (in4) boolean_empty in2 integer_dec exec_s_when_autoconstructing (boolean_and) (boolean_invert_second_then_and) () boolean_shove exec_yank exec_rot (exec_do*count (exec_noop exec_stackdepth exec_while (exec_empty boolean_not exec_y ()))) () ())
Lexicase best errors: [0 1 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_div} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 2, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y})
Zero cases best program: (exec_while () exec_do*while (integer_mult exec_while (exec_yank) boolean_swap in2 print_integer integer_mult integer_min integer_sub exec_y_when_autoconstructing (exec_flush integer_dec integer_rot integer_rot integer_div) boolean_empty) integer_sub exec_shove (in4) boolean_empty in2 integer_dec exec_s_when_autoconstructing (boolean_and) (boolean_invert_second_then_and) () boolean_shove exec_yank exec_rot (exec_do*count (exec_noop exec_stackdepth exec_while (exec_empty boolean_not exec_y ()))) () ())
Zero cases best errors: [0 1 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (80 227 215 512 222 80 214 80 80 226)
Population mean number of elite cases: 1.94
Count of perfect (error zero) individuals by case: (80 227 215 512 222 80 214 80 80 226)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not})
Best program: (exec_swap () (integer_eq integer_dup_items integer_dup_times integer_swap) integer_inc integer_yankdup boolean_empty exec_yankdup boolean_yank exec_s (in2 print_integer) (exec_yank integer_yank boolean_flush exec_do*times (integer_gte exec_yankdup)) (boolean_not) boolean_dup exec_y_when_autoconstructing (boolean_dup_items integer_gt integer_gt boolean_swap) integer_flush integer_yankdup boolean_empty integer_inc integer_swap boolean_empty boolean_yank boolean_and boolean_dup_times exec_y_when_autoconstructing (boolean_dup exec_if () (integer_dup_items boolean_not)))
Errors: [0 1 1 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 8.064
Median total errors in population: 7
Error averages by case: (0.92 0.773 0.785 0.488 0.778 0.92 0.786 0.92 0.92 0.774)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.415
Average program size in population (points): 73.729
Average percent parens in population: 0.257
Minimum age in population: 19.5595703125
Maximum age in population: 24.07080078125
Average age in population: 22.440255859375
Median age in population: 22.53506469726562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6857820
--- Timings ---
Current time: 1559582731291 milliseconds
Total Time:          44.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 72.3%
Fitness Testing:      7.8 seconds, 17.5%
Report:               4.4 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: -20                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 85                 
Correct output: 12                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 7                  
Correct output: 5                   | Program output: 54                 
Correct output: 32                  | Program output: 84                 
Correct output: 40                  | Program output: 91                 
Correct output: 13                  | Program output: 31                 
Correct output: 13                  | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 50                 
Correct output: 6                   | Program output: 81                 
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 0                   | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: -64                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: 26                 
Correct output: -92                 | Program output: -11                
Correct output: -29                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: 18                 
Correct output: -47                 | Program output: 9                  
Correct output: -84                 | Program output: -3                 
Correct output: -53                 | Program output: -53                
Correct output: -74                 | Program output: -62                
Correct output: -95                 | Program output: -28                
Correct output: -96                 | Program output: 65                 
Correct output: -69                 | Program output: 93                 
Correct output: -51                 | Program output: -51                
Correct output: -22                 | Program output: 70                 
Correct output: -94                 | Program output: 36                 
Correct output: -85                 | Program output: -76                
Correct output: -75                 | Program output: 86                 
Correct output: -55                 | Program output: 100                
Correct output: -74                 | Program output: -48                
Correct output: -78                 | Program output: 48                 
Correct output: -54                 | Program output: -54                
Correct output: -52                 | Program output: 76                 
Correct output: -25                 | Program output: 10                 
Correct output: -88                 | Program output: 21                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 33                 
Correct output: -8                  | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 84                 
Correct output: -97                 | Program output: 91                 
Correct output: -49                 | Program output: 77                 
Correct output: 3                   | Program output: 3                  
Correct output: -64                 | Program output: 48                 
Correct output: -80                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -6                 
Correct output: -83                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -25                 | Program output: 91                 
Correct output: -14                 | Program output: 9                  
Correct output: 1                   | Program output: 97                 
Correct output: -100                | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 98                 
Correct output: -63                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 44                 
Correct output: -38                 | Program output: 10                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_swap exec_do*while (integer_dec exec_pop () exec_do*while (integer_mult exec_while (integer_min exec_flush) integer_dec integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_shove integer_div integer_gt tag_exec_460 (integer_stackdepth) integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) (exec_dup (exec_do*times (exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())))
Lexicase best errors: [0 0 1 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 81
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_swap exec_do*while (integer_dec exec_pop () exec_do*while (integer_mult exec_while (integer_min exec_flush) integer_dec integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_shove integer_div integer_gt tag_exec_460 (integer_stackdepth) integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) (exec_dup (exec_do*times (exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())))
Zero cases best errors: [0 0 1 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 81
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 212 260 212 3 358 259 358 3 3)
Population mean number of elite cases: 1.88
Count of perfect (error zero) individuals by case: (212 212 260 212 3 358 259 358 3 3)
Population mean number of perfect (error zero) cases: 1.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) () exec_dup (integer_rot exec_y_when_autoconstructing (boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_swap (exec_swap (in4 boolean_invert_first_then_and integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and exec_s_when_autoconstructing (in1 in4 boolean_eq boolean_flush) (print_integer) (integer_mult integer_dup_times boolean_flush integer_lt integer_dup_times boolean_flush integer_lt integer_mod) in4 in3 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) (integer_swap boolean_dup_items)) ())) () ()) () ())
Errors: [0 0 1 0 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 65
Size: 86
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 8.12
Median total errors in population: 8
Error averages by case: (0.788 0.788 0.74 0.788 0.997 0.642 0.741 0.642 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.71
Average program size in population (points): 58.105
Average percent parens in population: 0.240
Minimum age in population: 20.5595703125
Maximum age in population: 25.73016357421875
Average age in population: 23.73823706054688
Median age in population: 23.814208984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7255428
--- Timings ---
Current time: 1559582734095 milliseconds
Total Time:          47.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.1 seconds, 72.5%
Fitness Testing:      8.1 seconds, 17.3%
Report:               4.7 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: -20                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 85                 
Correct output: 12                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 7                  
Correct output: 5                   | Program output: 54                 
Correct output: 32                  | Program output: 84                 
Correct output: 40                  | Program output: 91                 
Correct output: 13                  | Program output: 31                 
Correct output: 13                  | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 50                 
Correct output: 6                   | Program output: 81                 
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 0                   | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: -64                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: 26                 
Correct output: -92                 | Program output: -11                
Correct output: -29                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: 18                 
Correct output: -47                 | Program output: 9                  
Correct output: -84                 | Program output: -3                 
Correct output: -53                 | Program output: -53                
Correct output: -74                 | Program output: -62                
Correct output: -95                 | Program output: -28                
Correct output: -96                 | Program output: 65                 
Correct output: -69                 | Program output: 93                 
Correct output: -51                 | Program output: -51                
Correct output: -22                 | Program output: 70                 
Correct output: -94                 | Program output: 36                 
Correct output: -85                 | Program output: -76                
Correct output: -75                 | Program output: 86                 
Correct output: -55                 | Program output: 100                
Correct output: -74                 | Program output: -48                
Correct output: -78                 | Program output: 48                 
Correct output: -54                 | Program output: -54                
Correct output: -52                 | Program output: 76                 
Correct output: -25                 | Program output: 10                 
Correct output: -88                 | Program output: 21                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 33                 
Correct output: -8                  | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 84                 
Correct output: -97                 | Program output: 91                 
Correct output: -49                 | Program output: 77                 
Correct output: 3                   | Program output: 3                  
Correct output: -64                 | Program output: 48                 
Correct output: -80                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -6                 
Correct output: -83                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -25                 | Program output: 91                 
Correct output: -14                 | Program output: 9                  
Correct output: 1                   | Program output: 97                 
Correct output: -100                | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 98                 
Correct output: -63                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 44                 
Correct output: -38                 | Program output: 10                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_swap exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) boolean_empty exec_rot (exec_shove (boolean_frominteger) exec_dup_times (integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot integer_lt exec_swap (boolean_yankdup) (integer_rot) integer_swap integer_rot exec_y_when_autoconstructing (boolean_flush exec_swap (exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and exec_s_when_autoconstructing (in1 in4 boolean_eq boolean_flush) (print_integer) (exec_flush integer_dup_times boolean_flush integer_lt integer_dup_times boolean_flush integer_lt integer_mod) in4 in3 integer_mult boolean_invert_first_then_and integer_gt exec_yankdup) (integer_swap boolean_dup_items)) ()))) () ()) () ()) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 91
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_swap exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) boolean_empty exec_rot (exec_shove (boolean_frominteger) exec_dup_times (integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot integer_lt exec_swap (boolean_yankdup) (integer_rot) integer_swap integer_rot exec_y_when_autoconstructing (boolean_flush exec_swap (exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and exec_s_when_autoconstructing (in1 in4 boolean_eq boolean_flush) (print_integer) (exec_flush integer_dup_times boolean_flush integer_lt integer_dup_times boolean_flush integer_lt integer_mod) in4 in3 integer_mult boolean_invert_first_then_and integer_gt exec_yankdup) (integer_swap boolean_dup_items)) ()))) () ()) () ()) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 91
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 224 222 221 170 657 590 223 234 196)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (221 224 222 221 170 657 590 223 234 196)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_swap exec_do*while (exec_do*while (exec_pop () exec_do*while (integer_mult exec_while (integer_min exec_flush) exec_dup_items integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) () integer_rot) (exec_dup (exec_do*times () exec_y_when_autoconstructing () boolean_flush boolean_yank) boolean_not in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush print_integer) (integer_mult) (integer_dup_times boolean_flush integer_lt integer_mod in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup boolean_frominteger boolean_dup_items) ()) ()))))
Errors: [0 0 0 0 1 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 60
Size: 82
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.042
Median total errors in population: 8
Error averages by case: (0.779 0.776 0.778 0.779 0.83 0.343 0.41 0.777 0.766 0.804)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.37
Average program size in population (points): 67.405
Average percent parens in population: 0.246
Minimum age in population: 22.159912109375
Maximum age in population: 27.02964782714844
Average age in population: 25.14877461242676
Median age in population: 25.23651123046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7718397
--- Timings ---
Current time: 1559582737013 milliseconds
Total Time:          50.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.3 seconds, 72.5%
Fitness Testing:      8.5 seconds, 17.1%
Report:               5.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: -20                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 85                 
Correct output: 12                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 7                  
Correct output: 5                   | Program output: 54                 
Correct output: 32                  | Program output: 84                 
Correct output: 40                  | Program output: 91                 
Correct output: 13                  | Program output: 31                 
Correct output: 13                  | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 50                 
Correct output: 6                   | Program output: 81                 
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 0                   | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: -64                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: 26                 
Correct output: -92                 | Program output: -11                
Correct output: -29                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: 18                 
Correct output: -47                 | Program output: 9                  
Correct output: -84                 | Program output: -3                 
Correct output: -53                 | Program output: -53                
Correct output: -74                 | Program output: -62                
Correct output: -95                 | Program output: -28                
Correct output: -96                 | Program output: 65                 
Correct output: -69                 | Program output: 93                 
Correct output: -51                 | Program output: -51                
Correct output: -22                 | Program output: 70                 
Correct output: -94                 | Program output: 36                 
Correct output: -85                 | Program output: -76                
Correct output: -75                 | Program output: 86                 
Correct output: -55                 | Program output: 100                
Correct output: -74                 | Program output: -48                
Correct output: -78                 | Program output: 48                 
Correct output: -54                 | Program output: -54                
Correct output: -52                 | Program output: 76                 
Correct output: -25                 | Program output: 10                 
Correct output: -88                 | Program output: 21                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 33                 
Correct output: -8                  | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 84                 
Correct output: -97                 | Program output: 91                 
Correct output: -49                 | Program output: 77                 
Correct output: 3                   | Program output: 3                  
Correct output: -64                 | Program output: 48                 
Correct output: -80                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -6                 
Correct output: -83                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -25                 | Program output: 91                 
Correct output: -14                 | Program output: 9                  
Correct output: 1                   | Program output: 97                 
Correct output: -100                | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 98                 
Correct output: -63                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 44                 
Correct output: -38                 | Program output: 10                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) () exec_dup (integer_rot exec_y_when_autoconstructing (boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_swap (exec_swap (in4 boolean_invert_first_then_and integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and exec_s_when_autoconstructing (in1 in4 boolean_eq boolean_flush print_integer) (integer_mult integer_dup_times boolean_flush integer_lt integer_dup_times boolean_flush integer_lt integer_mod) (in4 in3 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) integer_swap boolean_dup_items) ()) ())) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 86
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) () exec_dup (integer_rot exec_y_when_autoconstructing (boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_swap (exec_swap (in4 boolean_invert_first_then_and integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and exec_s_when_autoconstructing (in1 in4 boolean_eq boolean_flush print_integer) (integer_mult integer_dup_times boolean_flush integer_lt integer_dup_times boolean_flush integer_lt integer_mod) (in4 in3 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) integer_swap boolean_dup_items) ()) ())) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 86
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (697 502 504 507 504 815 81 503 503 112)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (697 502 504 507 504 815 81 503 503 112)
Population mean number of perfect (error zero) cases: 4.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction tagged_12} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Best program: (exec_swap (tagged_12 integer_dup_items integer_dup_times integer_swap) (integer_inc integer_yankdup boolean_empty boolean_xor) boolean_swap boolean_rot print_integer integer_max integer_dup_times integer_flush boolean_xor exec_noop in2 integer_swap integer_pop boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) boolean_flush boolean_yank boolean_not) (integer_inc boolean_invert_second_then_and integer_fromboolean exec_swap (exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and exec_s_when_autoconstructing (in1 in4 boolean_eq boolean_flush) (print_integer) (integer_mult integer_dup_times integer_dup_times boolean_flush integer_lt integer_mod) in4 in1 integer_mult boolean_invert_first_then_and exec_flush) (exec_yankdup integer_swap)) ()) ())
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 58
Size: 72
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 5.272
Median total errors in population: 4
Error averages by case: (0.303 0.498 0.496 0.493 0.496 0.185 0.919 0.497 0.497 0.888)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.512
Average program size in population (points): 76.159
Average percent parens in population: 0.254
Minimum age in population: 24.2911376953125
Maximum age in population: 28.39182281494141
Average age in population: 26.61235946655273
Median age in population: 26.65939331054688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8254358
--- Timings ---
Current time: 1559582739892 milliseconds
Total Time:          52.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.3 seconds, 72.5%
Fitness Testing:      9.0 seconds, 17.0%
Report:               5.5 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output: 66                 
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 76                 
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_885} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_swap exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc exec_rot (exec_shove (boolean_frominteger) tag_integer_885 integer_div integer_gt in2 print_integer) (exec_yank integer_yank boolean_flush boolean_flush integer_inc exec_yankdup) () boolean_not) (boolean_dup exec_y_when_autoconstructing (boolean_dup_items integer_gt integer_gt boolean_swap)) (integer_flush integer_yankdup) boolean_empty exec_do*times (integer_swap boolean_empty boolean_yank boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_invert_second_then_and integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items)) ())
Lexicase best errors: [0 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 85
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_885} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_swap exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger) integer_inc exec_rot (exec_shove (boolean_frominteger) tag_integer_885 integer_div integer_gt in2 print_integer) (exec_yank integer_yank boolean_flush boolean_flush integer_inc exec_yankdup) () boolean_not) (boolean_dup exec_y_when_autoconstructing (boolean_dup_items integer_gt integer_gt boolean_swap)) (integer_flush integer_yankdup) boolean_empty exec_do*times (integer_swap boolean_empty boolean_yank boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_invert_second_then_and integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items)) ())
Zero cases best errors: [0 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 85
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (105 5 106 610 106 608 106 1000 801 106)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (105 5 106 610 106 608 106 0 801 106)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 2, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_swap exec_do*while (in2 print_integer integer_mult integer_min integer_sub exec_y_when_autoconstructing (exec_flush) boolean_stackdepth integer_rot integer_yankdup exec_empty boolean_eq) integer_sub exec_shove (in4 boolean_empty integer_mult) integer_fromboolean exec_rot (integer_mult) (print_integer integer_mult integer_min integer_sub boolean_or exec_flush) (boolean_stackdepth integer_rot integer_yankdup exec_empty boolean_empty) integer_sub exec_shove (in4 boolean_empty in2 integer_dec) exec_s_when_autoconstructing (boolean_and boolean_invert_second_then_and) () (integer_shove integer_empty boolean_xor integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and integer_flush in1 in4 boolean_eq boolean_flush) print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_dup_times boolean_flush integer_lt integer_mod integer_swap boolean_dup_items)
Errors: [0 1 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 66
Size: 78
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 7.447
Median total errors in population: 7
Error averages by case: (0.895 0.995 0.894 0.39 0.894 0.392 0.894 1.0 0.199 0.894)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 61.625
Average program size in population (points): 83.186
Average percent parens in population: 0.256
Minimum age in population: 25.61068725585938
Maximum age in population: 30.02964782714844
Average age in population: 28.11556887435913
Median age in population: 28.18787384033203
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8830742
--- Timings ---
Current time: 1559582742569 milliseconds
Total Time:          55.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.3 seconds, 72.3%
Fitness Testing:      9.5 seconds, 17.1%
Report:               5.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: -20                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 85                 
Correct output: 12                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 7                  
Correct output: 5                   | Program output: 54                 
Correct output: 32                  | Program output: 84                 
Correct output: 40                  | Program output: 91                 
Correct output: 13                  | Program output: 31                 
Correct output: 13                  | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 50                 
Correct output: 6                   | Program output: 81                 
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 0                   | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: -64                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: 26                 
Correct output: -92                 | Program output: -11                
Correct output: -29                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: 18                 
Correct output: -47                 | Program output: 9                  
Correct output: -84                 | Program output: -3                 
Correct output: -53                 | Program output: -53                
Correct output: -74                 | Program output: -62                
Correct output: -95                 | Program output: -28                
Correct output: -96                 | Program output: 65                 
Correct output: -69                 | Program output: 93                 
Correct output: -51                 | Program output: -51                
Correct output: -22                 | Program output: 70                 
Correct output: -94                 | Program output: 36                 
Correct output: -85                 | Program output: -76                
Correct output: -75                 | Program output: 86                 
Correct output: -55                 | Program output: 100                
Correct output: -74                 | Program output: -48                
Correct output: -78                 | Program output: 48                 
Correct output: -54                 | Program output: -54                
Correct output: -52                 | Program output: 76                 
Correct output: -25                 | Program output: 10                 
Correct output: -88                 | Program output: 21                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 33                 
Correct output: -8                  | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 84                 
Correct output: -97                 | Program output: 91                 
Correct output: -49                 | Program output: 77                 
Correct output: 3                   | Program output: 3                  
Correct output: -64                 | Program output: 48                 
Correct output: -80                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -6                 
Correct output: -83                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -25                 | Program output: 91                 
Correct output: -14                 | Program output: 9                  
Correct output: 1                   | Program output: 97                 
Correct output: -100                | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 98                 
Correct output: -63                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 44                 
Correct output: -38                 | Program output: 10                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_885} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_swap exec_dup_times (print_integer integer_max integer_dup_times) integer_flush integer_dec exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (integer_swap exec_yankdup boolean_yankdup integer_lte) exec_rot (exec_shove (boolean_frominteger) integer_inc in4 exec_shove (boolean_frominteger)) (tag_integer_885 integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) (integer_rot) exec_dup (integer_rot exec_y_when_autoconstructing (boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_swap (exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and exec_dup (in1 in4 boolean_eq boolean_flush) print_integer) (integer_mult) integer_dup_times boolean_flush integer_lt) (integer_dup_times boolean_flush integer_lt integer_mod) in4 in3 integer_mult boolean_invert_first_then_and exec_flush exec_dup () integer_swap boolean_dup_items)) ()) () ()) ())
Lexicase best errors: [0 1 0 1 1 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 102
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_885} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_swap exec_dup_times (print_integer integer_max integer_dup_times) integer_flush integer_dec exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (integer_swap exec_yankdup boolean_yankdup integer_lte) exec_rot (exec_shove (boolean_frominteger) integer_inc in4 exec_shove (boolean_frominteger)) (tag_integer_885 integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty exec_swap (boolean_yankdup) (integer_rot) exec_dup (integer_rot exec_y_when_autoconstructing (boolean_flush boolean_yank boolean_not) integer_inc boolean_invert_second_then_and integer_fromboolean exec_swap (exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and exec_dup (in1 in4 boolean_eq boolean_flush) print_integer) (integer_mult) integer_dup_times boolean_flush integer_lt) (integer_dup_times boolean_flush integer_lt integer_mod) in4 in3 integer_mult boolean_invert_first_then_and exec_flush exec_dup () integer_swap boolean_dup_items)) ()) () ()) ())
Zero cases best errors: [0 1 0 1 1 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 102
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (184 6 185 564 564 1000 6 184 6 1000)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (184 6 185 564 564 0 6 184 6 0)
Population mean number of perfect (error zero) cases: 1.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_exec_460} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Best program: (exec_pop () boolean_swap exec_dup_times (print_integer integer_max integer_dup_times integer_flush) boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove (boolean_frominteger integer_inc tag_exec_460 (integer_dup_items)) integer_rot boolean_empty exec_swap (boolean_yankdup) (integer_rot) exec_dup (integer_rot exec_y_when_autoconstructing (boolean_flush boolean_yank boolean_not integer_inc) boolean_invert_second_then_and integer_fromboolean exec_swap (exec_swap (integer_empty boolean_invert_first_then_and integer_fromboolean boolean_dup_items boolean_flush boolean_invert_first_then_and exec_s_when_autoconstructing (in1 in4 boolean_eq boolean_flush print_integer) (integer_mult integer_dup_times boolean_flush integer_lt integer_dup_times boolean_flush) (integer_lt integer_mod) in4) (in3) in4 in3 integer_mult boolean_invert_first_then_and exec_flush exec_yankdup) (integer_swap))) () ()) ())
Errors: [0 1 0 1 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 65
Size: 87
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 8.301
Median total errors in population: 8
Error averages by case: (0.816 0.994 0.815 0.436 0.436 1.0 0.994 0.816 0.994 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 47.936
Average program size in population (points): 62.455
Average percent parens in population: 0.229
Minimum age in population: 26.6689453125
Maximum age in population: 31.64412689208984
Average age in population: 29.55169184303284
Median age in population: 29.63247680664062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9235672
--- Timings ---
Current time: 1559582745198 milliseconds
Total Time:          58.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.2 seconds, 72.5%
Fitness Testing:      9.9 seconds, 17.0%
Report:               6.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output: 66                 
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 76                 
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction tag_integer_942} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max exec_swap (integer_eq boolean_swap boolean_rot print_integer integer_max exec_swap (integer_eq integer_dup_items integer_dup_times integer_swap) (integer_inc integer_yankdup boolean_rot exec_yankdup) boolean_yank exec_s (in2 print_integer) (boolean_dup_times boolean_yank boolean_flush in3 tag_integer_942) (integer_fromboolean) exec_rot (integer_mult) (print_integer exec_noop boolean_yank integer_yank boolean_dup integer_min boolean_invert_first_then_and) ()) ())
Lexicase best errors: [1 1 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction tag_integer_942} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max exec_swap (integer_eq boolean_swap boolean_rot print_integer integer_max exec_swap (integer_eq integer_dup_items integer_dup_times integer_swap) (integer_inc integer_yankdup boolean_rot exec_yankdup) boolean_yank exec_s (in2 print_integer) (boolean_dup_times boolean_yank boolean_flush in3 tag_integer_942) (integer_fromboolean) exec_rot (integer_mult) (print_integer exec_noop boolean_yank integer_yank boolean_dup integer_min boolean_invert_first_then_and) ()) ())
Zero cases best errors: [1 1 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 276 2 216 219 215 315 281 274 216)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (317 276 2 216 219 215 315 281 274 216)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction -29} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_shove})
Best program: (integer_rot exec_when () integer_flush integer_dup_items integer_rot boolean_stackdepth exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq in2 integer_max print_integer integer_max -29 in4 integer_dup_items integer_add boolean_dup integer_add boolean_shove)
Errors: [1 1 1 0 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 22
Size: 24
Percent parens: 0.083
--- Population Statistics ---
Average total errors in population: 7.669
Median total errors in population: 8
Error averages by case: (0.683 0.724 0.998 0.784 0.781 0.785 0.685 0.719 0.726 0.784)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.615
Average program size in population (points): 73.081
Average percent parens in population: 0.235
Minimum age in population: 28.60513305664062
Maximum age in population: 33.00398254394531
Average age in population: 31.15864291000366
Median age in population: 31.23374938964844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9728718
--- Timings ---
Current time: 1559582747669 milliseconds
Total Time:          60.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.0 seconds, 72.4%
Fitness Testing:     10.3 seconds, 17.0%
Report:               6.4 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: -20                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 85                 
Correct output: 12                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 7                  
Correct output: 5                   | Program output: 54                 
Correct output: 32                  | Program output: 84                 
Correct output: 40                  | Program output: 91                 
Correct output: 13                  | Program output: 31                 
Correct output: 13                  | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 50                 
Correct output: 6                   | Program output: 81                 
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 0                   | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: -64                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: 26                 
Correct output: -92                 | Program output: -11                
Correct output: -29                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: 18                 
Correct output: -47                 | Program output: 9                  
Correct output: -84                 | Program output: -3                 
Correct output: -53                 | Program output: -53                
Correct output: -74                 | Program output: -62                
Correct output: -95                 | Program output: -28                
Correct output: -96                 | Program output: 65                 
Correct output: -69                 | Program output: 93                 
Correct output: -51                 | Program output: -51                
Correct output: -22                 | Program output: 70                 
Correct output: -94                 | Program output: 36                 
Correct output: -85                 | Program output: -76                
Correct output: -75                 | Program output: 86                 
Correct output: -55                 | Program output: 100                
Correct output: -74                 | Program output: -48                
Correct output: -78                 | Program output: 48                 
Correct output: -54                 | Program output: -54                
Correct output: -52                 | Program output: 76                 
Correct output: -25                 | Program output: 10                 
Correct output: -88                 | Program output: 21                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 33                 
Correct output: -8                  | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 84                 
Correct output: -97                 | Program output: 91                 
Correct output: -49                 | Program output: 77                 
Correct output: 3                   | Program output: 3                  
Correct output: -64                 | Program output: 48                 
Correct output: -80                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -6                 
Correct output: -83                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -25                 | Program output: 91                 
Correct output: -14                 | Program output: 9                  
Correct output: 1                   | Program output: 97                 
Correct output: -100                | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: 98                 
Correct output: -63                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 44                 
Correct output: -38                 | Program output: 10                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () integer_sub exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_shove (boolean_frominteger) integer_lte) (boolean_empty in2 exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt integer_gt boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and) (integer_dup exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_pop boolean_shove boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ()) ())
Lexicase best errors: [0 1 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 90
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () integer_sub exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_shove (boolean_frominteger) integer_lte) (boolean_empty in2 exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt integer_gt boolean_yank boolean_not) in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and) (integer_dup exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_pop boolean_shove boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ()) ())
Zero cases best errors: [0 1 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 90
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (822 88 156 154 294 291 282 285 294 282)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (822 88 156 154 294 291 282 285 294 282)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_460} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction in4})
Best program: (boolean_rot print_integer integer_max exec_swap (integer_div integer_dup_items integer_dup_times integer_min exec_flush) (integer_dec integer_swap exec_yankdup boolean_yankdup integer_lte exec_rot (exec_shove (boolean_frominteger) integer_inc integer_div integer_gt tag_exec_460 (integer_dup_items) integer_rot boolean_empty) (exec_swap (boolean_shove) () integer_rot) (exec_dup () exec_do*times (exec_y_when_autoconstructing (boolean_flush boolean_yank integer_min) in4 boolean_invert_second_then_and integer_fromboolean exec_s (exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_dup_items boolean_eq boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_mod) (in4)) ()) () ()))))
Errors: [0 1 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 51
Size: 72
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 7.052
Median total errors in population: 6
Error averages by case: (0.178 0.912 0.844 0.846 0.706 0.709 0.718 0.715 0.706 0.718)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.059
Average program size in population (points): 70.419
Average percent parens in population: 0.229
Minimum age in population: 29.8502197265625
Maximum age in population: 34.49942302703857
Average age in population: 32.74447746276855
Median age in population: 32.77872443199158
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 10197431
--- Timings ---
Current time: 1559582750474 milliseconds
Total Time:          63.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.0 seconds, 72.5%
Fitness Testing:     10.7 seconds, 16.9%
Report:               6.6 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -71                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 96                 
Correct output: 12                  | Program output: 17                 
Correct output: 9                   | Program output: 46                 
Correct output: 5                   | Program output: 40                 
Correct output: 5                   | Program output: 32                 
Correct output: 32                  | Program output: 52                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 83                 
Correct output: 14                  | Program output: 32                 
Correct output: 5                   | Program output: 57                 
Correct output: 23                  | Program output: 86                 
Correct output: 6                   | Program output: 13                 
Correct output: 18                  | Program output: 41                 
Correct output: 11                  | Program output: 66                 
Correct output: 17                  | Program output: 100                
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 64                 
Correct output: 0                   | Program output: 4                  
Correct output: 32                  | Program output: 74                 
Correct output: -64                 | Program output: 5                  
Correct output: -58                 | Program output: -27                
Correct output: -21                 | Program output: 71                 
Correct output: -98                 | Program output: -98                
Correct output: -92                 | Program output: -34                
Correct output: -29                 | Program output: 51                 
Correct output: -88                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -47                 | Program output: -30                
Correct output: -84                 | Program output: 19                 
Correct output: -53                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -90                
Correct output: -96                 | Program output: -65                
Correct output: -69                 | Program output: -55                
Correct output: -51                 | Program output: 4                  
Correct output: -22                 | Program output: 88                 
Correct output: -94                 | Program output: -89                
Correct output: -85                 | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -74                 | Program output: 22                 
Correct output: -78                 | Program output: 84                 
Correct output: -54                 | Program output: 26                 
Correct output: -52                 | Program output: -17                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -27                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 70                 
Correct output: -46                 | Program output: 23                 
Correct output: -51                 | Program output: -48                
Correct output: -73                 | Program output: 100                
Correct output: -8                  | Program output: 64                 
Correct output: -76                 | Program output: -60                
Correct output: -82                 | Program output: 97                 
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: 42                 
Correct output: 3                   | Program output: 40                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -63                
Correct output: -68                 | Program output: 99                 
Correct output: -96                 | Program output: 68                 
Correct output: -25                 | Program output: 37                 
Correct output: -14                 | Program output: -1                 
Correct output: 1                   | Program output: 97                 
Correct output: -100                | Program output: -55                
Correct output: -84                 | Program output: 46                 
Correct output: -67                 | Program output: 78                 
Correct output: -63                 | Program output: 12                 
Correct output: -23                 | Program output: -8                 
Correct output: -56                 | Program output: 8                  
Correct output: -58                 | Program output: 63                 
Correct output: -53                 | Program output: 7                  
Correct output: 1                   | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_swap exec_while () exec_do*while (exec_eq integer_lte in3) exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq boolean_empty integer_sub exec_shove (integer_lte) boolean_empty in2 exec_y_when_autoconstructing () boolean_flush integer_lte exec_rot (exec_shove (boolean_frominteger) boolean_yank boolean_not) (exec_k_when_autoconstructing (boolean_invert_second_then_and integer_fromboolean integer_gt integer_gt boolean_yank boolean_not) (integer_dup_times boolean_invert_second_then_and integer_rot) exec_dup (integer_rot exec_y_when_autoconstructing (exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_pop boolean_shove boolean_flush) (print_integer integer_mult integer_dup_times integer_eq integer_lt integer_mod) (in4 in1 integer_dup_items boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))) ())
Lexicase best errors: [0 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_swap exec_while () exec_do*while (exec_eq integer_lte in3) exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq boolean_empty integer_sub exec_shove (integer_lte) boolean_empty in2 exec_y_when_autoconstructing () boolean_flush integer_lte exec_rot (exec_shove (boolean_frominteger) boolean_yank boolean_not) (exec_k_when_autoconstructing (boolean_invert_second_then_and integer_fromboolean integer_gt integer_gt boolean_yank boolean_not) (integer_dup_times boolean_invert_second_then_and integer_rot) exec_dup (integer_rot exec_y_when_autoconstructing (exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_pop boolean_shove boolean_flush) (print_integer integer_mult integer_dup_times integer_eq integer_lt integer_mod) (in4 in1 integer_dup_items boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))) ())
Zero cases best errors: [0 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (173 268 176 78 268 174 268 267 176 721)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (173 268 176 78 268 174 268 267 176 721)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () exec_pop () boolean_swap boolean_rot print_integer integer_max exec_swap (integer_eq) (integer_dup_items integer_dup_times) integer_swap integer_sub exec_shove (integer_lte) boolean_empty in2 exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not in4 boolean_invert_second_then_and integer_fromboolean integer_gt integer_gt boolean_yank boolean_xor integer_eq boolean_invert_first_then_and boolean_eq boolean_empty integer_sub exec_shove (integer_lte) boolean_empty in2 exec_y_when_autoconstructing () boolean_flush exec_s_when_autoconstructing (in1 boolean_xor boolean_shove boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items)
Errors: [0 1 0 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 57
Size: 69
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 7.431
Median total errors in population: 9
Error averages by case: (0.827 0.732 0.824 0.922 0.732 0.826 0.732 0.733 0.824 0.279)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.246
Average program size in population (points): 69.17
Average percent parens in population: 0.228
Minimum age in population: 31.309814453125
Maximum age in population: 36.03275632858276
Average age in population: 34.24559924721718
Median age in population: 34.33069574832916
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10657939
--- Timings ---
Current time: 1559582753177 milliseconds
Total Time:          66.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.0 seconds, 72.5%
Fitness Testing:     11.1 seconds, 16.8%
Report:               7.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 683
Test mean error for best: 0.68300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: 92                 
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 57                 
Correct output: 5                   | Program output:                    
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 95                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 92                 
Correct output: 5                   | Program output:                    
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 77                 
Correct output: 30                  | Program output: 87                 
Correct output: 0                   | Program output: 96                 
Correct output: 32                  | Program output: 85                 
Correct output: -64                 | Program output: 81                 
Correct output: -58                 | Program output: 87                 
Correct output: -21                 | Program output: 75                 
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 52                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 46                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 98                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 30                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: 78                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: 64                 
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 1                  
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: 78                 
Correct output: -83                 | Program output: 54                 
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: 12                 
Correct output: -56                 | Program output: 84                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 92                 
Correct output: -38                 | Program output: 36                 
Correct output: -60                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max exec_pop () boolean_swap boolean_rot print_integer integer_max exec_swap (integer_eq) () integer_dup_items integer_dup_times integer_swap integer_sub exec_shove (integer_lte) boolean_empty in2 boolean_eq exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq boolean_empty integer_sub exec_shove (integer_lte) boolean_empty in2 exec_y_when_autoconstructing () boolean_flush exec_s_when_autoconstructing (in1 boolean_xor integer_yank boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod in4 in1 integer_mult) (exec_yank exec_flush) exec_yankdup integer_swap boolean_dup_items)
Lexicase best errors: [0 0 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 64
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max exec_pop () boolean_swap boolean_rot print_integer integer_max exec_swap (integer_eq) () integer_dup_items integer_dup_times integer_swap integer_sub exec_shove (integer_lte) boolean_empty in2 boolean_eq exec_dup_items boolean_xor integer_eq boolean_invert_first_then_and boolean_eq boolean_empty integer_sub exec_shove (integer_lte) boolean_empty in2 exec_y_when_autoconstructing () boolean_flush exec_s_when_autoconstructing (in1 boolean_xor integer_yank boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod in4 in1 integer_mult) (exec_yank exec_flush) exec_yankdup integer_swap boolean_dup_items)
Zero cases best errors: [0 0 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 64
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 5 88 346 5 84 348 5 5 348)
Population mean number of elite cases: 1.24
Count of perfect (error zero) individuals by case: (5 5 88 346 5 84 348 5 5 348)
Population mean number of perfect (error zero) cases: 1.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (integer_rot exec_swap () (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop boolean_yankdup integer_lte exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (boolean_pop exec_rot (exec_shove (boolean_frominteger) integer_lte) (boolean_empty in2 exec_y_when_autoconstructing () boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt integer_gt boolean_yank boolean_not) integer_lte boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and) (integer_dup exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_pop boolean_shove boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 integer_yank integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())
Errors: [0 0 1 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 64
Size: 83
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 8.761
Median total errors in population: 10
Error averages by case: (0.995 0.995 0.912 0.654 0.995 0.916 0.652 0.995 0.995 0.652)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.867
Average program size in population (points): 78.113
Average percent parens in population: 0.229
Minimum age in population: 32.57607269287109
Maximum age in population: 37.67161464691162
Average age in population: 35.76391385483742
Median age in population: 35.84376114606857
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 11202965
--- Timings ---
Current time: 1559582756314 milliseconds
Total Time:          69.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.3 seconds, 72.6%
Fitness Testing:     11.6 seconds, 16.7%
Report:               7.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: -68                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 41                 
Correct output: 12                  | Program output: 17                 
Correct output: 9                   | Program output: 41                 
Correct output: 5                   | Program output: 40                 
Correct output: 5                   | Program output: 32                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 80                 
Correct output: 14                  | Program output: 32                 
Correct output: 5                   | Program output: 55                 
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 41                 
Correct output: 11                  | Program output: 66                 
Correct output: 17                  | Program output: 26                 
Correct output: 0                   | Program output: 68                 
Correct output: 30                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 71                 
Correct output: -64                 | Program output: 5                  
Correct output: -58                 | Program output: -27                
Correct output: -21                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -92                 | Program output: -34                
Correct output: -29                 | Program output: 51                 
Correct output: -88                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -47                 | Program output: -47                
Correct output: -84                 | Program output: -37                
Correct output: -53                 | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -90                
Correct output: -96                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -41                
Correct output: -22                 | Program output: 78                 
Correct output: -94                 | Program output: -89                
Correct output: -85                 | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -75                
Correct output: -54                 | Program output: 26                 
Correct output: -52                 | Program output: -17                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 65                 
Correct output: -46                 | Program output: 23                 
Correct output: -51                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 13                 
Correct output: -76                 | Program output: -60                
Correct output: -82                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: 42                 
Correct output: 3                   | Program output: 40                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -96                 | Program output: -21                
Correct output: -25                 | Program output: 8                  
Correct output: -14                 | Program output: -8                 
Correct output: 1                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: 46                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -44                
Correct output: -23                 | Program output: -8                 
Correct output: -56                 | Program output: -56                
Correct output: -58                 | Program output: 39                 
Correct output: -53                 | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () integer_sub exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_shove (boolean_frominteger) integer_lte) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in3 boolean_flush in1 boolean_pop boolean_shove integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 84
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () integer_sub exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_shove (boolean_frominteger) integer_lte) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in3 boolean_flush in1 boolean_pop boolean_shove integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 84
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (636 19 22 247 22 177 375 814 175 22)
Population mean number of elite cases: 2.51
Count of perfect (error zero) individuals by case: (636 19 22 247 22 177 375 814 175 22)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () integer_sub exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_shove (boolean_frominteger) integer_lte) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in3 boolean_flush in1 boolean_pop boolean_shove integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 65
Size: 84
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.491
Median total errors in population: 7
Error averages by case: (0.364 0.981 0.978 0.753 0.978 0.823 0.625 0.186 0.825 0.978)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.87
Average program size in population (points): 74.047
Average percent parens in population: 0.228
Minimum age in population: 34.88089752197266
Maximum age in population: 39.30123925209045
Average age in population: 37.53747548156977
Median age in population: 37.64177137613297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 11749247
--- Timings ---
Current time: 1559582758886 milliseconds
Total Time:          71.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.1 seconds, 72.4%
Fitness Testing:     12.1 seconds, 16.8%
Report:               7.7 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 85                 
Correct output: 12                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 7                  
Correct output: 5                   | Program output: 54                 
Correct output: 32                  | Program output: 84                 
Correct output: 40                  | Program output: 91                 
Correct output: 13                  | Program output: 31                 
Correct output: 13                  | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 50                 
Correct output: 6                   | Program output: 81                 
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 0                   | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: -64                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -48                
Correct output: -67                 | Program output: -48                
Correct output: -47                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 93                 
Correct output: -51                 | Program output: -26                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: 86                 
Correct output: -55                 | Program output: -7                 
Correct output: -74                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -21                
Correct output: -88                 | Program output: 21                 
Correct output: -100                | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 33                 
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 3                  
Correct output: -64                 | Program output: -6                 
Correct output: -80                 | Program output: -38                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: -6                 
Correct output: -83                 | Program output: 9                  
Correct output: -88                 | Program output: -59                
Correct output: -68                 | Program output: 46                 
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: 60                 
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 44                 
Correct output: -38                 | Program output: 10                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush})
Lexicase best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max exec_pop () boolean_swap boolean_rot print_integer exec_shove (integer_lte) boolean_empty in2 boolean_rot boolean_flush boolean_yank boolean_not in4 boolean_invert_second_then_and integer_fromboolean integer_gt integer_gt boolean_yank boolean_not in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and in2 exec_y_when_autoconstructing () boolean_flush exec_s_when_autoconstructing (in2 boolean_xor integer_yank boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod in4 in1 integer_mult) (exec_yank exec_flush) exec_yankdup integer_swap integer_flush) ())
Lexicase best errors: [1 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 63
Percent parens: 0.159
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush})
Zero cases best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max exec_pop () boolean_swap boolean_rot print_integer exec_shove (integer_lte) boolean_empty in2 boolean_rot boolean_flush boolean_yank boolean_not in4 boolean_invert_second_then_and integer_fromboolean integer_gt integer_gt boolean_yank boolean_not in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and in2 exec_y_when_autoconstructing () boolean_flush exec_s_when_autoconstructing (in2 boolean_xor integer_yank boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod in4 in1 integer_mult) (exec_yank exec_flush) exec_yankdup integer_swap integer_flush) ())
Zero cases best errors: [1 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 63
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (696 20 5 902 674 209 704 209 188 189)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (696 20 5 902 674 209 704 209 188 189)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush})
Best program: (exec_pop () boolean_swap boolean_rot print_integer integer_max exec_pop () boolean_swap boolean_rot print_integer exec_shove (integer_lte) boolean_empty in2 boolean_rot boolean_flush boolean_yank boolean_not in4 boolean_invert_second_then_and integer_fromboolean integer_gt integer_gt boolean_yank boolean_not in4 boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and in2 exec_y_when_autoconstructing () boolean_flush exec_s_when_autoconstructing (in2 boolean_xor integer_yank boolean_flush) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod in4 in1 integer_mult) (exec_yank exec_flush) exec_yankdup integer_swap integer_flush) ())
Errors: [1 0 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 63
Percent parens: 0.159
--- Population Statistics ---
Average total errors in population: 6.204
Median total errors in population: 6
Error averages by case: (0.304 0.98 0.995 0.098 0.326 0.791 0.296 0.791 0.812 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.251
Average program size in population (points): 79.221
Average percent parens in population: 0.211
Minimum age in population: 37.90900552272797
Maximum age in population: 39.83725184202194
Average age in population: 38.97915592449903
Median age in population: 38.90900552272797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 275
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 12222789
--- Timings ---
Current time: 1559582761607 milliseconds
Total Time:          74.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.0 seconds, 72.4%
Fitness Testing:     12.5 seconds, 16.7%
Report:               8.0 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 222
Test mean error for best: 0.22200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 40                 
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: -68                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 32                 
Correct output: 5                   | Program output: 55                 
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 68                 
Correct output: 30                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 71                 
Correct output: -64                 | Program output: 5                  
Correct output: -58                 | Program output: -27                
Correct output: -21                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -47                 | Program output: -47                
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -41                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 26                 
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 65                 
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -60                
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 40                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -77                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -96                 | Program output: -62                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: 35                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -8                 
Correct output: -56                 | Program output: -56                
Correct output: -58                 | Program output: -52                
Correct output: -53                 | Program output: -36                
Correct output: 1                   | Program output: 1                  
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_xor exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) integer_lte) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 boolean_flush in1 boolean_pop in1 boolean_xor in3 boolean_flush in1 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 90
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_xor exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) integer_lte) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 boolean_flush in1 boolean_pop in1 boolean_xor in3 boolean_flush in1 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 90
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 126 481 855 855 472 470 199 466 192)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (126 126 481 855 855 472 470 199 466 192)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_xor exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) integer_lte) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 boolean_flush in1 boolean_pop in1 boolean_xor in3 boolean_flush in1 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 71
Size: 90
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 5.758
Median total errors in population: 6
Error averages by case: (0.874 0.874 0.519 0.145 0.145 0.528 0.53 0.801 0.534 0.808)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.968
Average program size in population (points): 75.614
Average percent parens in population: 0.202
Minimum age in population: 38.90900552272797
Maximum age in population: 41.60519026219845
Average age in population: 40.20600786943734
Median age in population: 40.31534510850906
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 12732250
--- Timings ---
Current time: 1559582764407 milliseconds
Total Time:          77.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.9 seconds, 72.3%
Fitness Testing:     12.9 seconds, 16.8%
Report:               8.3 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 202
Test mean error for best: 0.20200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 0                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: -64                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: -67                
Correct output: -47                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -53                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -74                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -27                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -96                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 44                 
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction 55} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())
Lexicase best errors: [0 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 78
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction 55} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())
Zero cases best errors: [0 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 78
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (843 140 684 150 596 595 872 671 148 149)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (843 140 684 150 596 595 872 671 148 149)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_xor exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) integer_lte) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 boolean_flush in1 boolean_pop in1 boolean_xor in4 boolean_flush in1 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())
Errors: [0 0 0 0 1 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 71
Size: 90
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 5.152
Median total errors in population: 4
Error averages by case: (0.157 0.86 0.316 0.85 0.404 0.405 0.128 0.329 0.852 0.851)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.676
Average program size in population (points): 87.324
Average percent parens in population: 0.213
Minimum age in population: 39.90900552272797
Maximum age in population: 42.74265199899673
Average age in population: 41.94517615995556
Median age in population: 41.64106710255146
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 242
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 243
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 13293622
--- Timings ---
Current time: 1559582767396 milliseconds
Total Time:          80.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.8 seconds, 72.1%
Fitness Testing:     13.5 seconds, 16.9%
Report:               8.8 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 202
Test mean error for best: 0.20200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 0                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: -64                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: -67                
Correct output: -47                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -53                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -74                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -27                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -96                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 44                 
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () boolean_xor exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) integer_lte) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 boolean_flush in1 boolean_pop in1 boolean_xor in4 boolean_flush in1 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 90
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () boolean_xor exec_dup_times (print_integer integer_max integer_dup_times) integer_flush boolean_xor exec_noop exec_rot (integer_swap exec_yankdup boolean_yankdup integer_lte) (exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) integer_lte) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 boolean_flush in1 boolean_pop in1 boolean_xor in4 boolean_flush in1 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 90
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (806 489 897 482 883 814 814 482 806 880)
Population mean number of elite cases: 7.35
Count of perfect (error zero) individuals by case: (806 489 897 482 883 814 814 482 806 880)
Population mean number of perfect (error zero) cases: 7.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction 55} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 54
Size: 69
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 2.647
Median total errors in population: 3
Error averages by case: (0.194 0.511 0.103 0.518 0.117 0.186 0.186 0.518 0.194 0.12)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.665
Average program size in population (points): 86.464
Average percent parens in population: 0.218
Minimum age in population: 41.97820610553026
Maximum age in population: 44.64106710255146
Average age in population: 43.85425482375175
Median age in population: 43.64106710255146
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 13829669
--- Timings ---
Current time: 1559582770168 milliseconds
Total Time:          83.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.8 seconds, 71.8%
Fitness Testing:     14.1 seconds, 16.9%
Report:               9.3 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 29
Successful program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 69


Auto-simplifying with starting size: 69
step: 0
program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 500
program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 1000
program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 1500
program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 2000
program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 2500
program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 3000
program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 3500
program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 4000
program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 4500
program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 5000
program: (exec_pop () integer_max integer_dup_times integer_flush boolean_xor exec_rot (exec_shove () boolean_frominteger integer_inc boolean_frominteger) (integer_inc exec_rot (exec_do*count (boolean_frominteger) 55) (boolean_empty in2 boolean_flush boolean_yank boolean_not) (in4 boolean_invert_second_then_and integer_fromboolean integer_gt) integer_gt boolean_yank boolean_not) (boolean_invert_second_then_and integer_fromboolean exec_empty exec_swap (integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (in1 boolean_xor in4 in2 integer_min integer_min) (print_integer integer_mult integer_dup_times boolean_flush integer_lt integer_mod) (in4 in1 integer_mult boolean_invert_first_then_and exec_flush) exec_yankdup integer_swap boolean_dup_items) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 202
Test mean error for best: 0.20200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: -20                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: 21                  | Program output: 21                 
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: 88                 
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 49                  | Program output: 49                 
Correct output: 94                  | Program output: 94                 
Correct output: 63                  | Program output: 63                 
Correct output: 91                  | Program output: 91                 
Correct output: 82                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 42                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 14                  | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 39                 
Correct output: 6                   | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 30                 
Correct output: 0                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: -64                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: -67                
Correct output: -47                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -53                
Correct output: -74                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -22                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -74                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -52                 | Program output: -52                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -27                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 2                  
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: -49                
Correct output: 3                   | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: 18                 
Correct output: -96                 | Program output: -96                
Correct output: -25                 | Program output: -25                
Correct output: -14                 | Program output: -14                
Correct output: 1                   | Program output: 1                  
Correct output: -100                | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 44                 
Correct output: -38                 | Program output: -38                
Correct output: -60                 | Program output: -60                
;;******************************
